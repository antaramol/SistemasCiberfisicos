
wifi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000878  0800beac  0800beac  0001beac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c724  0800c724  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c724  0800c724  0001c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c72c  0800c72c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c730  0800c730  0001c730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003308  20000074  0800c7a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000337c  0800c7a8  0002337c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f395  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005784  00000000  00000000  0004f439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002800  00000000  00000000  00054bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025e8  00000000  00000000  000573c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007151  00000000  00000000  000599a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c376  00000000  00000000  00060af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cabc  00000000  00000000  0008ce6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019992b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b8c8  00000000  00000000  0019997c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be94 	.word	0x0800be94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800be94 	.word	0x0800be94

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000594:	f003 0301 	and.w	r3, r3, #1
 8000598:	2b00      	cmp	r3, #0
 800059a:	d013      	beq.n	80005c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800059c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00b      	beq.n	80005c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005ac:	e000      	b.n	80005b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005c4:	687b      	ldr	r3, [r7, #4]
}
 80005c6:	4618      	mov	r0, r3
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 f933 	bl	8001842 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f836 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 fa00 	bl	80009e4 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005e4:	f000 f894 	bl	8000710 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005e8:	f000 f8ca 	bl	8000780 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005ec:	f000 f908 	bl	8000800 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005f0:	f000 f92c 	bl	800084c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005f4:	f000 f968 	bl	80008c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005f8:	f000 f996 	bl	8000928 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005fc:	f000 f9c4 	bl	8000988 <MX_USB_OTG_FS_PCD_Init>
	  BSP_COM_Init(COM1, &hDiscoUart);

	#endif /* TERMINAL_USE */


	printf("****** Sistemas Ciberfisicos ****** \n\n");
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <main+0x5c>)
 8000602:	f00a fe4f 	bl	800b2a4 <puts>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000606:	f007 fb49 	bl	8007c9c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <main+0x60>)
 800060c:	2100      	movs	r1, #0
 800060e:	480a      	ldr	r0, [pc, #40]	; (8000638 <main+0x64>)
 8000610:	f007 fb8e 	bl	8007d30 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a09      	ldr	r2, [pc, #36]	; (800063c <main+0x68>)
 8000618:	6013      	str	r3, [r2, #0]

  /* creation of wifiStart */
  wifiStartHandle = osThreadNew(wifiStartTask, NULL, &wifiStart_attributes);
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <main+0x6c>)
 800061c:	2100      	movs	r1, #0
 800061e:	4809      	ldr	r0, [pc, #36]	; (8000644 <main+0x70>)
 8000620:	f007 fb86 	bl	8007d30 <osThreadNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <main+0x74>)
 8000628:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062a:	f007 fb5b 	bl	8007ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0x5a>
 8000630:	0800bec4 	.word	0x0800bec4
 8000634:	0800c54c 	.word	0x0800c54c
 8000638:	08000ec5 	.word	0x08000ec5
 800063c:	200007d8 	.word	0x200007d8
 8000640:	0800c570 	.word	0x0800c570
 8000644:	08000ed5 	.word	0x08000ed5
 8000648:	200007dc 	.word	0x200007dc

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b096      	sub	sp, #88	; 0x58
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2244      	movs	r2, #68	; 0x44
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00a fa11 	bl	800aa82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	463b      	mov	r3, r7
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800066e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000672:	f002 f917 	bl	80028a4 <HAL_PWREx_ControlVoltageScaling>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800067c:	f000 fc50 	bl	8000f20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000680:	f002 f8f2 	bl	8002868 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <SystemClock_Config+0xc0>)
 8000686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068a:	4a20      	ldr	r2, [pc, #128]	; (800070c <SystemClock_Config+0xc0>)
 800068c:	f023 0318 	bic.w	r3, r3, #24
 8000690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000694:	2314      	movs	r3, #20
 8000696:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a4:	2360      	movs	r3, #96	; 0x60
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ac:	2301      	movs	r3, #1
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b4:	2328      	movs	r3, #40	; 0x28
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b8:	2307      	movs	r3, #7
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0314 	add.w	r3, r7, #20
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 fa0d 	bl	8002ae8 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006d4:	f000 fc24 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006dc:	2303      	movs	r3, #3
 80006de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2104      	movs	r1, #4
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fdd5 	bl	80032a0 <HAL_RCC_ClockConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006fc:	f000 fc10 	bl	8000f20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000700:	f003 fb0e 	bl	8003d20 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000704:	bf00      	nop
 8000706:	3758      	adds	r7, #88	; 0x58
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40021000 	.word	0x40021000

08000710 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000714:	4b18      	ldr	r3, [pc, #96]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000716:	4a19      	ldr	r2, [pc, #100]	; (800077c <MX_DFSDM1_Init+0x6c>)
 8000718:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800071c:	2201      	movs	r2, #1
 800071e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000720:	4b15      	ldr	r3, [pc, #84]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000726:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000728:	2202      	movs	r2, #2
 800072a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800073a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800073e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000746:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000748:	2204      	movs	r2, #4
 800074a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000754:	2201      	movs	r2, #1
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_DFSDM1_Init+0x68>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_DFSDM1_Init+0x68>)
 8000766:	f001 f9dd 	bl	8001b24 <HAL_DFSDM_ChannelInit>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000770:	f000 fbd6 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000090 	.word	0x20000090
 800077c:	40016020 	.word	0x40016020

08000780 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_I2C2_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_I2C2_Init+0x74>)
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <MX_I2C2_Init+0x7c>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_I2C2_Init+0x74>)
 8000798:	2201      	movs	r2, #1
 800079a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_I2C2_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007bc:	f001 fde6 	bl	800238c <HAL_I2C_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007c6:	f000 fbab 	bl	8000f20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ca:	2100      	movs	r1, #0
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007ce:	f001 fe6c 	bl	80024aa <HAL_I2CEx_ConfigAnalogFilter>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007d8:	f000 fba2 	bl	8000f20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007dc:	2100      	movs	r1, #0
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_I2C2_Init+0x74>)
 80007e0:	f001 feae 	bl	8002540 <HAL_I2CEx_ConfigDigitalFilter>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fb99 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000c8 	.word	0x200000c8
 80007f8:	40005800 	.word	0x40005800
 80007fc:	10909cec 	.word	0x10909cec

08000800 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000806:	4a10      	ldr	r2, [pc, #64]	; (8000848 <MX_QUADSPI_Init+0x48>)
 8000808:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800080c:	2202      	movs	r2, #2
 800080e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000810:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000812:	2204      	movs	r2, #4
 8000814:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000818:	2210      	movs	r2, #16
 800081a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800081e:	2217      	movs	r2, #23
 8000820:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000822:	4b08      	ldr	r3, [pc, #32]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_QUADSPI_Init+0x44>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_QUADSPI_Init+0x44>)
 8000830:	f002 f89e 	bl	8002970 <HAL_QSPI_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800083a:	f000 fb71 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000011c 	.word	0x2000011c
 8000848:	a0001000 	.word	0xa0001000

0800084c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <MX_SPI3_Init+0x78>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000866:	f44f 7240 	mov.w	r2, #768	; 0x300
 800086a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_SPI3_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_SPI3_Init+0x74>)
 800087a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800087e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_SPI3_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_SPI3_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_SPI3_Init+0x74>)
 800089a:	2207      	movs	r2, #7
 800089c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008a6:	2208      	movs	r2, #8
 80008a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_SPI3_Init+0x74>)
 80008ac:	f003 fc1a 	bl	80040e4 <HAL_SPI_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008b6:	f000 fb33 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000160 	.word	0x20000160
 80008c4:	40003c00 	.word	0x40003c00

080008c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART1_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART1_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART1_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART1_UART_Init+0x58>)
 800090c:	f005 f9ec 	bl	8005ce8 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 fb03 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200001c4 	.word	0x200001c4
 8000924:	40013800 	.word	0x40013800

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800092e:	4a15      	ldr	r2, [pc, #84]	; (8000984 <MX_USART3_UART_Init+0x5c>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000960:	2200      	movs	r2, #0
 8000962:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USART3_UART_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USART3_UART_Init+0x58>)
 800096c:	f005 f9bc 	bl	8005ce8 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 fad3 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000248 	.word	0x20000248
 8000984:	40004800 	.word	0x40004800

08000988 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000996:	2206      	movs	r2, #6
 8000998:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099c:	2202      	movs	r2, #2
 800099e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a2:	2202      	movs	r2, #2
 80009a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009cc:	f001 fe04 	bl	80025d8 <HAL_PCD_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 faa3 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200002cc 	.word	0x200002cc

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08a      	sub	sp, #40	; 0x28
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fa:	4bbd      	ldr	r3, [pc, #756]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4abc      	ldr	r2, [pc, #752]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a00:	f043 0310 	orr.w	r3, r3, #16
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4bba      	ldr	r3, [pc, #744]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0310 	and.w	r3, r3, #16
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	4bb7      	ldr	r3, [pc, #732]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4ab6      	ldr	r2, [pc, #728]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4bb4      	ldr	r3, [pc, #720]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	4bb1      	ldr	r3, [pc, #708]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	4ab0      	ldr	r2, [pc, #704]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a36:	4bae      	ldr	r3, [pc, #696]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	4bab      	ldr	r3, [pc, #684]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	4aaa      	ldr	r2, [pc, #680]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a4e:	4ba8      	ldr	r3, [pc, #672]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5a:	4ba5      	ldr	r3, [pc, #660]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4aa4      	ldr	r2, [pc, #656]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4ba2      	ldr	r3, [pc, #648]	; (8000cf0 <MX_GPIO_Init+0x30c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0308 	and.w	r3, r3, #8
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a78:	489e      	ldr	r0, [pc, #632]	; (8000cf4 <MX_GPIO_Init+0x310>)
 8000a7a:	f001 fc57 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f001 fc50 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a92:	4899      	ldr	r0, [pc, #612]	; (8000cf8 <MX_GPIO_Init+0x314>)
 8000a94:	f001 fc4a 	bl	800232c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f241 0181 	movw	r1, #4225	; 0x1081
 8000a9e:	4897      	ldr	r0, [pc, #604]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000aa0:	f001 fc44 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aaa:	4894      	ldr	r0, [pc, #592]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000aac:	f001 fc3e 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ab6:	4892      	ldr	r0, [pc, #584]	; (8000d00 <MX_GPIO_Init+0x31c>)
 8000ab8:	f001 fc38 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000abc:	2201      	movs	r2, #1
 8000abe:	2120      	movs	r1, #32
 8000ac0:	488d      	ldr	r0, [pc, #564]	; (8000cf8 <MX_GPIO_Init+0x314>)
 8000ac2:	f001 fc33 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	488a      	ldr	r0, [pc, #552]	; (8000cf4 <MX_GPIO_Init+0x310>)
 8000acc:	f001 fc2e 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ad0:	f240 1315 	movw	r3, #277	; 0x115
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4882      	ldr	r0, [pc, #520]	; (8000cf4 <MX_GPIO_Init+0x310>)
 8000aea:	f001 f969 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000aee:	236a      	movs	r3, #106	; 0x6a
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	487c      	ldr	r0, [pc, #496]	; (8000cf4 <MX_GPIO_Init+0x310>)
 8000b04:	f001 f95c 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4878      	ldr	r0, [pc, #480]	; (8000d00 <MX_GPIO_Init+0x31c>)
 8000b20:	f001 f94e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b24:	233f      	movs	r3, #63	; 0x3f
 8000b26:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b28:	230b      	movs	r3, #11
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4872      	ldr	r0, [pc, #456]	; (8000d00 <MX_GPIO_Init+0x31c>)
 8000b38:	f001 f942 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f001 f931 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b5e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7a:	f001 f921 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b7e:	2308      	movs	r3, #8
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f001 f910 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb6:	f001 f903 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bba:	23e0      	movs	r3, #224	; 0xe0
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bca:	2305      	movs	r3, #5
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f001 f8f2 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4841      	ldr	r0, [pc, #260]	; (8000cf8 <MX_GPIO_Init+0x314>)
 8000bf2:	f001 f8e5 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfa:	230b      	movs	r3, #11
 8000bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <MX_GPIO_Init+0x314>)
 8000c0a:	f001 f8d9 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c0e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c12:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	4834      	ldr	r0, [pc, #208]	; (8000cf8 <MX_GPIO_Init+0x314>)
 8000c28:	f001 f8ca 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c2c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c30:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	482e      	ldr	r0, [pc, #184]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000c44:	f001 f8bc 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c48:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4826      	ldr	r0, [pc, #152]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000c62:	f001 f8ad 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x31c>)
 8000c80:	f001 f89e 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4819      	ldr	r0, [pc, #100]	; (8000d00 <MX_GPIO_Init+0x31c>)
 8000c9c:	f001 f890 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4810      	ldr	r0, [pc, #64]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000cbc:	f001 f880 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cc0:	2378      	movs	r3, #120	; 0x78
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4808      	ldr	r0, [pc, #32]	; (8000cfc <MX_GPIO_Init+0x318>)
 8000cdc:	f001 f870 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ce0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce6:	2312      	movs	r3, #18
 8000ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e00a      	b.n	8000d04 <MX_GPIO_Init+0x320>
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	48001000 	.word	0x48001000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000c00 	.word	0x48000c00
 8000d00:	48000800 	.word	0x48000800
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d06:	2303      	movs	r3, #3
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0e:	f107 0314 	add.w	r3, r7, #20
 8000d12:	4619      	mov	r1, r3
 8000d14:	480f      	ldr	r0, [pc, #60]	; (8000d54 <MX_GPIO_Init+0x370>)
 8000d16:	f001 f853 	bl	8001dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fec8 	bl	8001ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d24:	2007      	movs	r0, #7
 8000d26:	f000 fee1 	bl	8001aec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2105      	movs	r1, #5
 8000d2e:	2017      	movs	r0, #23
 8000d30:	f000 fec0 	bl	8001ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d34:	2017      	movs	r0, #23
 8000d36:	f000 fed9 	bl	8001aec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2105      	movs	r1, #5
 8000d3e:	2028      	movs	r0, #40	; 0x28
 8000d40:	f000 feb8 	bl	8001ab4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d44:	2028      	movs	r0, #40	; 0x28
 8000d46:	f000 fed1 	bl	8001aec <HAL_NVIC_EnableIRQ>

}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	; 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	48000400 	.word	0x48000400

08000d58 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e009      	b.n	8000d7e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff fc06 	bl	8000584 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	617b      	str	r3, [r7, #20]
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dbf1      	blt.n	8000d6a <_write+0x12>
	}
	return len;
 8000d86:	687b      	ldr	r3, [r7, #4]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000da0:	d105      	bne.n	8000dae <HAL_GPIO_EXTI_Callback+0x1e>
	{
		switch (GPIO_Pin)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d104      	bne.n	8000db2 <HAL_GPIO_EXTI_Callback+0x22>
		  {
		    case (GPIO_PIN_1):
		    {
		      SPI_WIFI_ISR();
 8000da8:	f006 fe9a 	bl	8007ae0 <SPI_WIFI_ISR>
		      break;
 8000dac:	e002      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0x24>
		    {
		      break;
		    }
		  }

	}
 8000dae:	bf00      	nop
 8000db0:	e000      	b.n	8000db4 <HAL_GPIO_EXTI_Callback+0x24>
		      break;
 8000db2:	bf00      	nop
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <wifi_start>:


static int wifi_start(void)
{
 8000dbc:	b5b0      	push	{r4, r5, r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af04      	add	r7, sp, #16
  uint8_t  MAC_Addr[6];
  printf("Iniciando wifi\r\n");
 8000dc2:	4819      	ldr	r0, [pc, #100]	; (8000e28 <wifi_start+0x6c>)
 8000dc4:	f00a fa6e 	bl	800b2a4 <puts>
 /*Initialize and use WIFI module */
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 8000dc8:	f006 fe9a 	bl	8007b00 <WIFI_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d123      	bne.n	8000e1a <wifi_start+0x5e>
  {
    printf("ES-WIFI Initialized.\r\n");
 8000dd2:	4816      	ldr	r0, [pc, #88]	; (8000e2c <wifi_start+0x70>)
 8000dd4:	f00a fa66 	bl	800b2a4 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f006 fee8 	bl	8007bb0 <WIFI_GetMAC_Address>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d113      	bne.n	8000e0e <wifi_start+0x52>
    {
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
               MAC_Addr[0],
 8000de6:	783b      	ldrb	r3, [r7, #0]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000de8:	4618      	mov	r0, r3
               MAC_Addr[1],
 8000dea:	787b      	ldrb	r3, [r7, #1]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000dec:	461c      	mov	r4, r3
               MAC_Addr[2],
 8000dee:	78bb      	ldrb	r3, [r7, #2]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000df0:	461d      	mov	r5, r3
               MAC_Addr[3],
 8000df2:	78fb      	ldrb	r3, [r7, #3]
               MAC_Addr[4],
 8000df4:	793a      	ldrb	r2, [r7, #4]
               MAC_Addr[5]);
 8000df6:	7979      	ldrb	r1, [r7, #5]
      printf("> eS-WiFi module MAC Address : %02X:%02X:%02X:%02X:%02X:%02X\n",
 8000df8:	9102      	str	r1, [sp, #8]
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	462b      	mov	r3, r5
 8000e00:	4622      	mov	r2, r4
 8000e02:	4601      	mov	r1, r0
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <wifi_start+0x74>)
 8000e06:	f00a f9c7 	bl	800b198 <iprintf>
  }
  else
  {
    return -1;
  }
  return 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	e007      	b.n	8000e1e <wifi_start+0x62>
      printf("> ERROR : CANNOT get MAC address\n");
 8000e0e:	4809      	ldr	r0, [pc, #36]	; (8000e34 <wifi_start+0x78>)
 8000e10:	f00a fa48 	bl	800b2a4 <puts>
      return -1;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	e001      	b.n	8000e1e <wifi_start+0x62>
    return -1;
 8000e1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bdb0      	pop	{r4, r5, r7, pc}
 8000e26:	bf00      	nop
 8000e28:	0800beec 	.word	0x0800beec
 8000e2c:	0800befc 	.word	0x0800befc
 8000e30:	0800bf14 	.word	0x0800bf14
 8000e34:	0800bf54 	.word	0x0800bf54

08000e38 <wifi_connect>:


int wifi_connect(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af02      	add	r7, sp, #8

  wifi_start();
 8000e3e:	f7ff ffbd 	bl	8000dbc <wifi_start>

  printf("\nConnecting to %s , %s\n",SSID,PASSWORD);
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <wifi_connect+0x70>)
 8000e44:	4919      	ldr	r1, [pc, #100]	; (8000eac <wifi_connect+0x74>)
 8000e46:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <wifi_connect+0x78>)
 8000e48:	f00a f9a6 	bl	800b198 <iprintf>
  if( WIFI_Connect(SSID, PASSWORD, WIFISECURITY) == WIFI_STATUS_OK)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4916      	ldr	r1, [pc, #88]	; (8000ea8 <wifi_connect+0x70>)
 8000e50:	4816      	ldr	r0, [pc, #88]	; (8000eac <wifi_connect+0x74>)
 8000e52:	f006 fe85 	bl	8007b60 <WIFI_Connect>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d11d      	bne.n	8000e98 <wifi_connect+0x60>
  {
    if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 8000e5c:	4815      	ldr	r0, [pc, #84]	; (8000eb4 <wifi_connect+0x7c>)
 8000e5e:	f006 febd 	bl	8007bdc <WIFI_GetIP_Address>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d111      	bne.n	8000e8c <wifi_connect+0x54>
    {
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
               IP_Addr[0],
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <wifi_connect+0x7c>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000e6c:	4619      	mov	r1, r3
               IP_Addr[1],
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <wifi_connect+0x7c>)
 8000e70:	785b      	ldrb	r3, [r3, #1]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000e72:	461a      	mov	r2, r3
               IP_Addr[2],
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <wifi_connect+0x7c>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000e78:	4618      	mov	r0, r3
               IP_Addr[3]);
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <wifi_connect+0x7c>)
 8000e7c:	78db      	ldrb	r3, [r3, #3]
      printf("> es-wifi module connected: got IP Address : %d.%d.%d.%d\n",
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	4603      	mov	r3, r0
 8000e82:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <wifi_connect+0x80>)
 8000e84:	f00a f988 	bl	800b198 <iprintf>
  else
  {
		 printf("ERROR : es-wifi module NOT connected\n");
     return -1;
  }
  return 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	e00a      	b.n	8000ea2 <wifi_connect+0x6a>
		  printf(" ERROR : es-wifi module CANNOT get IP address\n");
 8000e8c:	480b      	ldr	r0, [pc, #44]	; (8000ebc <wifi_connect+0x84>)
 8000e8e:	f00a fa09 	bl	800b2a4 <puts>
      return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e004      	b.n	8000ea2 <wifi_connect+0x6a>
		 printf("ERROR : es-wifi module NOT connected\n");
 8000e98:	4809      	ldr	r0, [pc, #36]	; (8000ec0 <wifi_connect+0x88>)
 8000e9a:	f00a fa03 	bl	800b2a4 <puts>
     return -1;
 8000e9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	0800bf78 	.word	0x0800bf78
 8000eac:	0800bf88 	.word	0x0800bf88
 8000eb0:	0800bf90 	.word	0x0800bf90
 8000eb4:	200007e0 	.word	0x200007e0
 8000eb8:	0800bfa8 	.word	0x0800bfa8
 8000ebc:	0800bfe4 	.word	0x0800bfe4
 8000ec0:	0800c014 	.word	0x0800c014

08000ec4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f006 ffc1 	bl	8007e54 <osDelay>
 8000ed2:	e7fb      	b.n	8000ecc <StartDefaultTask+0x8>

08000ed4 <wifiStartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wifiStartTask */
void wifiStartTask(void *argument)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wifiStartTask */
	wifi_connect();
 8000edc:	f7ff ffac 	bl	8000e38 <wifi_connect>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 ffb7 	bl	8007e54 <osDelay>
 8000ee6:	e7fb      	b.n	8000ee0 <wifiStartTask+0xc>

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000efa:	f000 fcbb 	bl	8001874 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40001000 	.word	0x40001000

08000f0c <SPI3_IRQHandler>:
  * @brief  SPI3 line detection callback.
  * @param  None
  * @retval None
  */
void SPI3_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <SPI3_IRQHandler+0x10>)
 8000f12:	f003 fee3 	bl	8004cdc <HAL_SPI_IRQHandler>
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000860 	.word	0x20000860

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <Error_Handler+0x8>
	...

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	4a10      	ldr	r2, [pc, #64]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4e:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f54:	6593      	str	r3, [r2, #88]	; 0x58
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_MspInit+0x4c>)
 8000f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	603b      	str	r3, [r7, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	210f      	movs	r1, #15
 8000f66:	f06f 0001 	mvn.w	r0, #1
 8000f6a:	f000 fda3 	bl	8001ab4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ac      	sub	sp, #176	; 0xb0
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2288      	movs	r2, #136	; 0x88
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fd70 	bl	800aa82 <memset>
  if(DFSDM1_Init == 0)
 8000fa2:	4b25      	ldr	r3, [pc, #148]	; (8001038 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d142      	bne.n	8001030 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 fbc6 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000fc6:	f7ff ffab 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fce:	4a1b      	ldr	r2, [pc, #108]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	4b16      	ldr	r3, [pc, #88]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ffa:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000ffe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001014:	2306      	movs	r3, #6
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800101a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800101e:	4619      	mov	r1, r3
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001022:	f000 fecd 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	3301      	adds	r3, #1
 800102c:	4a02      	ldr	r2, [pc, #8]	; (8001038 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800102e:	6013      	str	r3, [r2, #0]
  }

}
 8001030:	bf00      	nop
 8001032:	37b0      	adds	r7, #176	; 0xb0
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	200007e4 	.word	0x200007e4
 800103c:	40021000 	.word	0x40021000
 8001040:	48001000 	.word	0x48001000

08001044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ac      	sub	sp, #176	; 0xb0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2288      	movs	r2, #136	; 0x88
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f009 fd0c 	bl	800aa82 <memset>
  if(hi2c->Instance==I2C2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <HAL_I2C_MspInit+0xb0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13b      	bne.n	80010ec <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001078:	2300      	movs	r3, #0
 800107a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fb63 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800108c:	f7ff ff48 	bl	8000f20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001090:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 8001092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001094:	4a18      	ldr	r2, [pc, #96]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 800109e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80010a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b0:	2312      	movs	r3, #18
 80010b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010bc:	2303      	movs	r3, #3
 80010be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010c2:	2304      	movs	r3, #4
 80010c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_I2C_MspInit+0xb8>)
 80010d0:	f000 fe76 	bl	8001dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 80010da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_I2C_MspInit+0xb4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	37b0      	adds	r7, #176	; 0xb0
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005800 	.word	0x40005800
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000400 	.word	0x48000400

08001100 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <HAL_QSPI_MspInit+0x7c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d128      	bne.n	8001174 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 8001124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001126:	4a16      	ldr	r2, [pc, #88]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 8001128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112c:	6513      	str	r3, [r2, #80]	; 0x50
 800112e:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 8001130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a10      	ldr	r2, [pc, #64]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 8001140:	f043 0310 	orr.w	r3, r3, #16
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <HAL_QSPI_MspInit+0x80>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001152:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001156:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001160:	2303      	movs	r3, #3
 8001162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001164:	230a      	movs	r3, #10
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <HAL_QSPI_MspInit+0x84>)
 8001170:	f000 fe26 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	a0001000 	.word	0xa0001000
 8001180:	40021000 	.word	0x40021000
 8001184:	48001000 	.word	0x48001000

08001188 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <HAL_SPI_MspInit+0x8c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d130      	bne.n	800120c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a1a      	ldr	r2, [pc, #104]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a14      	ldr	r2, [pc, #80]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <HAL_SPI_MspInit+0x90>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011da:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ec:	2306      	movs	r3, #6
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4809      	ldr	r0, [pc, #36]	; (800121c <HAL_SPI_MspInit+0x94>)
 80011f8:	f000 fde2 	bl	8001dc0 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2100      	movs	r1, #0
 8001200:	2033      	movs	r0, #51	; 0x33
 8001202:	f000 fc57 	bl	8001ab4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001206:	2033      	movs	r0, #51	; 0x33
 8001208:	f000 fc70 	bl	8001aec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40003c00 	.word	0x40003c00
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800

08001220 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_SPI_MspDeInit+0x38>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d10d      	bne.n	800124e <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_SPI_MspDeInit+0x3c>)
 8001234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_SPI_MspDeInit+0x3c>)
 8001238:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800123c:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 800123e:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001242:	4807      	ldr	r0, [pc, #28]	; (8001260 <HAL_SPI_MspDeInit+0x40>)
 8001244:	f000 ff66 	bl	8002114 <HAL_GPIO_DeInit>

    /* SPI3 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
 8001248:	2033      	movs	r0, #51	; 0x33
 800124a:	f000 fc5d 	bl	8001b08 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40003c00 	.word	0x40003c00
 800125c:	40021000 	.word	0x40021000
 8001260:	48000800 	.word	0x48000800

08001264 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b0ae      	sub	sp, #184	; 0xb8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	2288      	movs	r2, #136	; 0x88
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f009 fbfc 	bl	800aa82 <memset>
  if(huart->Instance==USART1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a42      	ldr	r2, [pc, #264]	; (8001398 <HAL_UART_MspInit+0x134>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d13b      	bne.n	800130c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001294:	2301      	movs	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001298:	2300      	movs	r3, #0
 800129a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fa53 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012ac:	f7ff fe38 	bl	8000f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012b0:	4b3a      	ldr	r3, [pc, #232]	; (800139c <HAL_UART_MspInit+0x138>)
 80012b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b4:	4a39      	ldr	r2, [pc, #228]	; (800139c <HAL_UART_MspInit+0x138>)
 80012b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ba:	6613      	str	r3, [r2, #96]	; 0x60
 80012bc:	4b37      	ldr	r3, [pc, #220]	; (800139c <HAL_UART_MspInit+0x138>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c4:	61bb      	str	r3, [r7, #24]
 80012c6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_UART_MspInit+0x138>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a33      	ldr	r2, [pc, #204]	; (800139c <HAL_UART_MspInit+0x138>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b31      	ldr	r3, [pc, #196]	; (800139c <HAL_UART_MspInit+0x138>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80012e0:	23c0      	movs	r3, #192	; 0xc0
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e6:	2302      	movs	r3, #2
 80012e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	2303      	movs	r3, #3
 80012f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012f8:	2307      	movs	r3, #7
 80012fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001302:	4619      	mov	r1, r3
 8001304:	4826      	ldr	r0, [pc, #152]	; (80013a0 <HAL_UART_MspInit+0x13c>)
 8001306:	f000 fd5b 	bl	8001dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800130a:	e040      	b.n	800138e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a24      	ldr	r2, [pc, #144]	; (80013a4 <HAL_UART_MspInit+0x140>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d13b      	bne.n	800138e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001316:	2304      	movs	r3, #4
 8001318:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800131a:	2300      	movs	r3, #0
 800131c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4618      	mov	r0, r3
 8001324:	f002 fa12 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800132e:	f7ff fdf7 	bl	8000f20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <HAL_UART_MspInit+0x138>)
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	4a19      	ldr	r2, [pc, #100]	; (800139c <HAL_UART_MspInit+0x138>)
 8001338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800133c:	6593      	str	r3, [r2, #88]	; 0x58
 800133e:	4b17      	ldr	r3, [pc, #92]	; (800139c <HAL_UART_MspInit+0x138>)
 8001340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_UART_MspInit+0x138>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <HAL_UART_MspInit+0x138>)
 8001350:	f043 0308 	orr.w	r3, r3, #8
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_UART_MspInit+0x138>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800137c:	2307      	movs	r3, #7
 800137e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001382:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001386:	4619      	mov	r1, r3
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <HAL_UART_MspInit+0x144>)
 800138a:	f000 fd19 	bl	8001dc0 <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	37b8      	adds	r7, #184	; 0xb8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40013800 	.word	0x40013800
 800139c:	40021000 	.word	0x40021000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	40004800 	.word	0x40004800
 80013a8:	48000c00 	.word	0x48000c00

080013ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0ac      	sub	sp, #176	; 0xb0
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2288      	movs	r2, #136	; 0x88
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f009 fb58 	bl	800aa82 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013da:	d17c      	bne.n	80014d6 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e0:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80013e2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80013e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80013ea:	2301      	movs	r3, #1
 80013ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80013f2:	2318      	movs	r3, #24
 80013f4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80013f6:	2307      	movs	r3, #7
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013fe:	2302      	movs	r3, #2
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001402:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001406:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	4618      	mov	r0, r3
 800140e:	f002 f99d 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001418:	f7ff fd82 	bl	8000f20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141c:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001420:	4a2f      	ldr	r2, [pc, #188]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 800142a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001434:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f000 fcb5 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001456:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800145a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001470:	230a      	movs	r3, #10
 8001472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800147a:	4619      	mov	r1, r3
 800147c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001480:	f000 fc9e 	bl	8001dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 8001486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 800148a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d114      	bne.n	80014d2 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 80014ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b2:	6593      	str	r3, [r2, #88]	; 0x58
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80014c0:	f001 fa46 	bl	8002950 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 80014c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <HAL_PCD_MspInit+0x134>)
 80014ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ce:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80014d0:	e001      	b.n	80014d6 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 80014d2:	f001 fa3d 	bl	8002950 <HAL_PWREx_EnableVddUSB>
}
 80014d6:	bf00      	nop
 80014d8:	37b0      	adds	r7, #176	; 0xb0
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	; 0x38
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014f2:	4b34      	ldr	r3, [pc, #208]	; (80015c4 <HAL_InitTick+0xe0>)
 80014f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f6:	4a33      	ldr	r2, [pc, #204]	; (80015c4 <HAL_InitTick+0xe0>)
 80014f8:	f043 0310 	orr.w	r3, r3, #16
 80014fc:	6593      	str	r3, [r2, #88]	; 0x58
 80014fe:	4b31      	ldr	r3, [pc, #196]	; (80015c4 <HAL_InitTick+0xe0>)
 8001500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001502:	f003 0310 	and.w	r3, r3, #16
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800150a:	f107 0210 	add.w	r2, r7, #16
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f002 f887 	bl	8003628 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d103      	bne.n	800152c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001524:	f002 f854 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001528:	6378      	str	r0, [r7, #52]	; 0x34
 800152a:	e004      	b.n	8001536 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800152c:	f002 f850 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8001530:	4603      	mov	r3, r0
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001538:	4a23      	ldr	r2, [pc, #140]	; (80015c8 <HAL_InitTick+0xe4>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9b      	lsrs	r3, r3, #18
 8001540:	3b01      	subs	r3, #1
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <HAL_InitTick+0xe8>)
 8001546:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_InitTick+0xec>)
 8001548:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800154a:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_InitTick+0xe8>)
 800154c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001550:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001552:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_InitTick+0xe8>)
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_InitTick+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155e:	4b1b      	ldr	r3, [pc, #108]	; (80015cc <HAL_InitTick+0xe8>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_InitTick+0xe8>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800156a:	4818      	ldr	r0, [pc, #96]	; (80015cc <HAL_InitTick+0xe8>)
 800156c:	f004 f8eb 	bl	8005746 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001576:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800157a:	2b00      	cmp	r3, #0
 800157c:	d11b      	bne.n	80015b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800157e:	4813      	ldr	r0, [pc, #76]	; (80015cc <HAL_InitTick+0xe8>)
 8001580:	f004 f942 	bl	8005808 <HAL_TIM_Base_Start_IT>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800158a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800158e:	2b00      	cmp	r3, #0
 8001590:	d111      	bne.n	80015b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001592:	2036      	movs	r0, #54	; 0x36
 8001594:	f000 faaa 	bl	8001aec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	d808      	bhi.n	80015b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800159e:	2200      	movs	r2, #0
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	2036      	movs	r0, #54	; 0x36
 80015a4:	f000 fa86 	bl	8001ab4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a8:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_InitTick+0xf0>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e002      	b.n	80015b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3738      	adds	r7, #56	; 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	200007e8 	.word	0x200007e8
 80015d0:	40001000 	.word	0x40001000
 80015d4:	20000004 	.word	0x20000004

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8001608:	2002      	movs	r0, #2
 800160a:	f000 fea7 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}

08001612 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001616:	2020      	movs	r0, #32
 8001618:	f000 fea0 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800161c:	2040      	movs	r0, #64	; 0x40
 800161e:	f000 fe9d 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001622:	2080      	movs	r0, #128	; 0x80
 8001624:	f000 fe9a 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001628:	f44f 7080 	mov.w	r0, #256	; 0x100
 800162c:	f000 fe96 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001638:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800163c:	f000 fe8e 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001640:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001644:	f000 fe8a 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800164c:	f000 fe86 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001650:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001654:	f000 fe82 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001658:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800165c:	f000 fe7e 	bl	800235c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM6_DAC_IRQHandler+0x10>)
 800166a:	f004 f93d 	bl	80058e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200007e8 	.word	0x200007e8

08001678 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return 1;
 800167c:	2301      	movs	r3, #1
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_kill>:

int _kill(int pid, int sig)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001692:	f009 f899 	bl	800a7c8 <__errno>
 8001696:	4603      	mov	r3, r0
 8001698:	2216      	movs	r2, #22
 800169a:	601a      	str	r2, [r3, #0]
  return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_exit>:

void _exit (int status)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b0:	f04f 31ff 	mov.w	r1, #4294967295
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ffe7 	bl	8001688 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016ba:	e7fe      	b.n	80016ba <_exit+0x12>

080016bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	e00a      	b.n	80016e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ce:	f3af 8000 	nop.w
 80016d2:	4601      	mov	r1, r0
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	1c5a      	adds	r2, r3, #1
 80016d8:	60ba      	str	r2, [r7, #8]
 80016da:	b2ca      	uxtb	r2, r1
 80016dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697a      	ldr	r2, [r7, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	dbf0      	blt.n	80016ce <_read+0x12>
  }

  return len;
 80016ec:	687b      	ldr	r3, [r7, #4]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001702:	4618      	mov	r0, r3
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171e:	605a      	str	r2, [r3, #4]
  return 0;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <_isatty>:

int _isatty(int file)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f009 f81a 	bl	800a7c8 <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20018000 	.word	0x20018000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	20000834 	.word	0x20000834
 80017c8:	20003380 	.word	0x20003380

080017cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f4:	f7ff ffea 	bl	80017cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f8:	480c      	ldr	r0, [pc, #48]	; (800182c <LoopForever+0x6>)
  ldr r1, =_edata
 80017fa:	490d      	ldr	r1, [pc, #52]	; (8001830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017fc:	4a0d      	ldr	r2, [pc, #52]	; (8001834 <LoopForever+0xe>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001810:	4c0a      	ldr	r4, [pc, #40]	; (800183c <LoopForever+0x16>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181e:	f009 f8e1 	bl	800a9e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001822:	f7fe fed7 	bl	80005d4 <main>

08001826 <LoopForever>:

LoopForever:
    b LoopForever
 8001826:	e7fe      	b.n	8001826 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001834:	0800c734 	.word	0x0800c734
  ldr r2, =_sbss
 8001838:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800183c:	2000337c 	.word	0x2000337c

08001840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC1_2_IRQHandler>

08001842 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001848:	2300      	movs	r3, #0
 800184a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800184c:	2003      	movs	r0, #3
 800184e:	f000 f926 	bl	8001a9e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff fe46 	bl	80014e4 <HAL_InitTick>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e001      	b.n	8001868 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001864:	f7ff fb62 	bl	8000f2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001868:	79fb      	ldrb	r3, [r7, #7]
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008
 8001898:	20000838 	.word	0x20000838

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000838 	.word	0x20000838

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008

080018fc <__NVIC_SetPriorityGrouping>:
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_DisableIRQ>:
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db12      	blt.n	80019d4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	490a      	ldr	r1, [pc, #40]	; (80019e0 <__NVIC_DisableIRQ+0x44>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	3320      	adds	r3, #32
 80019c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019c8:	f3bf 8f4f 	dsb	sy
}
 80019cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019ce:	f3bf 8f6f 	isb	sy
}
 80019d2:	bf00      	nop
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000e100 	.word	0xe000e100

080019e4 <__NVIC_SetPriority>:
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	db0a      	blt.n	8001a0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	490c      	ldr	r1, [pc, #48]	; (8001a30 <__NVIC_SetPriority+0x4c>)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	440b      	add	r3, r1
 8001a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a0c:	e00a      	b.n	8001a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	b2da      	uxtb	r2, r3
 8001a12:	4908      	ldr	r1, [pc, #32]	; (8001a34 <__NVIC_SetPriority+0x50>)
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	f003 030f 	and.w	r3, r3, #15
 8001a1a:	3b04      	subs	r3, #4
 8001a1c:	0112      	lsls	r2, r2, #4
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	440b      	add	r3, r1
 8001a22:	761a      	strb	r2, [r3, #24]
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000e100 	.word	0xe000e100
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <NVIC_EncodePriority>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f1c3 0307 	rsb	r3, r3, #7
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	bf28      	it	cs
 8001a56:	2304      	movcs	r3, #4
 8001a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	2b06      	cmp	r3, #6
 8001a60:	d902      	bls.n	8001a68 <NVIC_EncodePriority+0x30>
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3b03      	subs	r3, #3
 8001a66:	e000      	b.n	8001a6a <NVIC_EncodePriority+0x32>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43da      	mvns	r2, r3
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a80:	f04f 31ff 	mov.w	r1, #4294967295
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	fa01 f303 	lsl.w	r3, r1, r3
 8001a8a:	43d9      	mvns	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a90:	4313      	orrs	r3, r2
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff ff28 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac6:	f7ff ff3d 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001aca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	68b9      	ldr	r1, [r7, #8]
 8001ad0:	6978      	ldr	r0, [r7, #20]
 8001ad2:	f7ff ffb1 	bl	8001a38 <NVIC_EncodePriority>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff ff80 	bl	80019e4 <__NVIC_SetPriority>
}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff30 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff40 	bl	800199c <__NVIC_DisableIRQ>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0ac      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f8b2 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a55      	ldr	r2, [pc, #340]	; (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e09f      	b.n	8001c90 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff fa13 	bl	8000f7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001b56:	4b51      	ldr	r3, [pc, #324]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b5e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <HAL_DFSDM_ChannelInit+0x178>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d125      	bne.n	8001bb4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001b68:	4b4d      	ldr	r3, [pc, #308]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b72:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001b74:	4b4a      	ldr	r3, [pc, #296]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	4948      	ldr	r1, [pc, #288]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b88:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001b8c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	791b      	ldrb	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001b96:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	041b      	lsls	r3, r3, #16
 8001ba2:	493f      	ldr	r1, [pc, #252]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001ba8:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a3c      	ldr	r2, [pc, #240]	; (8001ca0 <HAL_DFSDM_ChannelInit+0x17c>)
 8001bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001bb2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001bc2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bd2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001bd8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 020f 	bic.w	r2, r2, #15
 8001bf0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6819      	ldr	r1, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001c18:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6899      	ldr	r1, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	430a      	orrs	r2, r1
 8001c34:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f002 0207 	and.w	r2, r2, #7
 8001c44:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6859      	ldr	r1, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c70:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 f810 	bl	8001ca4 <DFSDM_GetChannelFromInstance>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4904      	ldr	r1, [pc, #16]	; (8001c98 <HAL_DFSDM_ChannelInit+0x174>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000840 	.word	0x20000840
 8001c9c:	2000083c 	.word	0x2000083c
 8001ca0:	40016000 	.word	0x40016000

08001ca4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <DFSDM_GetChannelFromInstance+0x7c>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d102      	bne.n	8001cba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	e02b      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <DFSDM_GetChannelFromInstance+0x80>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d102      	bne.n	8001cc8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e024      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <DFSDM_GetChannelFromInstance+0x84>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d102      	bne.n	8001cd6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e01d      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <DFSDM_GetChannelFromInstance+0x88>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d102      	bne.n	8001ce4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e016      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a12      	ldr	r2, [pc, #72]	; (8001d30 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d102      	bne.n	8001cf2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001cec:	2305      	movs	r3, #5
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e00f      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	; (8001d34 <DFSDM_GetChannelFromInstance+0x90>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d102      	bne.n	8001d00 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	e008      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <DFSDM_GetChannelFromInstance+0x94>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d102      	bne.n	8001d0e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001d08:	2307      	movs	r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	e001      	b.n	8001d12 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001d12:	68fb      	ldr	r3, [r7, #12]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	40016000 	.word	0x40016000
 8001d24:	40016020 	.word	0x40016020
 8001d28:	40016040 	.word	0x40016040
 8001d2c:	40016080 	.word	0x40016080
 8001d30:	400160a0 	.word	0x400160a0
 8001d34:	400160c0 	.word	0x400160c0
 8001d38:	400160e0 	.word	0x400160e0

08001d3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d44:	2300      	movs	r3, #0
 8001d46:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d005      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2204      	movs	r2, #4
 8001d58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	e029      	b.n	8001db4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 020e 	bic.w	r2, r2, #14
 8001d6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f003 021c 	and.w	r2, r3, #28
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	4798      	blx	r3
    }
  }
  return status;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dce:	e17f      	b.n	80020d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 8171 	beq.w	80020ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x40>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d118      	bne.n	8001ea0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e74:	2201      	movs	r2, #1
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0201 	and.w	r2, r3, #1
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d017      	beq.n	8001edc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	689a      	ldr	r2, [r3, #8]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d123      	bne.n	8001f30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	08da      	lsrs	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3208      	adds	r2, #8
 8001ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f003 0307 	and.w	r3, r3, #7
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	220f      	movs	r2, #15
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	08da      	lsrs	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	3208      	adds	r2, #8
 8001f2a:	6939      	ldr	r1, [r7, #16]
 8001f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0203 	and.w	r2, r3, #3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80ac 	beq.w	80020ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f72:	4b5f      	ldr	r3, [pc, #380]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	4a5e      	ldr	r2, [pc, #376]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	; (80020f0 <HAL_GPIO_Init+0x330>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8a:	4a5a      	ldr	r2, [pc, #360]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb4:	d025      	beq.n	8002002 <HAL_GPIO_Init+0x242>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <HAL_GPIO_Init+0x338>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01f      	beq.n	8001ffe <HAL_GPIO_Init+0x23e>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a4e      	ldr	r2, [pc, #312]	; (80020fc <HAL_GPIO_Init+0x33c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d019      	beq.n	8001ffa <HAL_GPIO_Init+0x23a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a4d      	ldr	r2, [pc, #308]	; (8002100 <HAL_GPIO_Init+0x340>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d013      	beq.n	8001ff6 <HAL_GPIO_Init+0x236>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	; (8002104 <HAL_GPIO_Init+0x344>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00d      	beq.n	8001ff2 <HAL_GPIO_Init+0x232>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a4b      	ldr	r2, [pc, #300]	; (8002108 <HAL_GPIO_Init+0x348>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <HAL_GPIO_Init+0x22e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_GPIO_Init+0x34c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d101      	bne.n	8001fea <HAL_GPIO_Init+0x22a>
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001fea:	2307      	movs	r3, #7
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x244>
 8002002:	2300      	movs	r3, #0
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	4313      	orrs	r3, r2
 8002012:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002014:	4937      	ldr	r1, [pc, #220]	; (80020f4 <HAL_GPIO_Init+0x334>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002022:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_GPIO_Init+0x350>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002046:	4a32      	ldr	r2, [pc, #200]	; (8002110 <HAL_GPIO_Init+0x350>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800204c:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_GPIO_Init+0x350>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002070:	4a27      	ldr	r2, [pc, #156]	; (8002110 <HAL_GPIO_Init+0x350>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002076:	4b26      	ldr	r3, [pc, #152]	; (8002110 <HAL_GPIO_Init+0x350>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800209a:	4a1d      	ldr	r2, [pc, #116]	; (8002110 <HAL_GPIO_Init+0x350>)
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_GPIO_Init+0x350>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <HAL_GPIO_Init+0x350>)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	3301      	adds	r3, #1
 80020ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae78 	bne.w	8001dd0 <HAL_GPIO_Init+0x10>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40010000 	.word	0x40010000
 80020f8:	48000400 	.word	0x48000400
 80020fc:	48000800 	.word	0x48000800
 8002100:	48000c00 	.word	0x48000c00
 8002104:	48001000 	.word	0x48001000
 8002108:	48001400 	.word	0x48001400
 800210c:	48001800 	.word	0x48001800
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002122:	e0cd      	b.n	80022c0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002124:	2201      	movs	r2, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	f000 80c0 	beq.w	80022ba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800213a:	4a68      	ldr	r2, [pc, #416]	; (80022dc <HAL_GPIO_DeInit+0x1c8>)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4013      	ands	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002162:	d025      	beq.n	80021b0 <HAL_GPIO_DeInit+0x9c>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_GPIO_DeInit+0x1cc>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d01f      	beq.n	80021ac <HAL_GPIO_DeInit+0x98>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a5d      	ldr	r2, [pc, #372]	; (80022e4 <HAL_GPIO_DeInit+0x1d0>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d019      	beq.n	80021a8 <HAL_GPIO_DeInit+0x94>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_GPIO_DeInit+0x1d4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_DeInit+0x90>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a5b      	ldr	r2, [pc, #364]	; (80022ec <HAL_GPIO_DeInit+0x1d8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_DeInit+0x8c>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a5a      	ldr	r2, [pc, #360]	; (80022f0 <HAL_GPIO_DeInit+0x1dc>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_DeInit+0x88>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a59      	ldr	r2, [pc, #356]	; (80022f4 <HAL_GPIO_DeInit+0x1e0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_DeInit+0x84>
 8002194:	2306      	movs	r3, #6
 8002196:	e00c      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 8002198:	2307      	movs	r3, #7
 800219a:	e00a      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 800219c:	2305      	movs	r3, #5
 800219e:	e008      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e006      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 80021a4:	2303      	movs	r3, #3
 80021a6:	e004      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e002      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <HAL_GPIO_DeInit+0x9e>
 80021b0:	2300      	movs	r3, #0
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	f002 0203 	and.w	r2, r2, #3
 80021b8:	0092      	lsls	r2, r2, #2
 80021ba:	4093      	lsls	r3, r2
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d132      	bne.n	8002228 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	494b      	ldr	r1, [pc, #300]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80021d0:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4947      	ldr	r1, [pc, #284]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4944      	ldr	r1, [pc, #272]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4940      	ldr	r1, [pc, #256]	; (80022f8 <HAL_GPIO_DeInit+0x1e4>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	220f      	movs	r2, #15
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800220a:	4a34      	ldr	r2, [pc, #208]	; (80022dc <HAL_GPIO_DeInit+0x1c8>)
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	089b      	lsrs	r3, r3, #2
 8002210:	3302      	adds	r3, #2
 8002212:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	43da      	mvns	r2, r3
 800221a:	4830      	ldr	r0, [pc, #192]	; (80022dc <HAL_GPIO_DeInit+0x1c8>)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	089b      	lsrs	r3, r3, #2
 8002220:	400a      	ands	r2, r1
 8002222:	3302      	adds	r3, #2
 8002224:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2103      	movs	r1, #3
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	08da      	lsrs	r2, r3, #3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3208      	adds	r2, #8
 8002244:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	08d2      	lsrs	r2, r2, #3
 800225c:	4019      	ands	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	3208      	adds	r2, #8
 8002262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	2103      	movs	r1, #3
 8002270:	fa01 f303 	lsl.w	r3, r1, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	401a      	ands	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	2101      	movs	r1, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	2103      	movs	r1, #3
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	401a      	ands	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022aa:	2101      	movs	r1, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	401a      	ands	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	3301      	adds	r3, #1
 80022be:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f47f af2b 	bne.w	8002124 <HAL_GPIO_DeInit+0x10>
  }
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	371c      	adds	r7, #28
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40010000 	.word	0x40010000
 80022e0:	48000400 	.word	0x48000400
 80022e4:	48000800 	.word	0x48000800
 80022e8:	48000c00 	.word	0x48000c00
 80022ec:	48001000 	.word	0x48001000
 80022f0:	48001400 	.word	0x48001400
 80022f4:	48001800 	.word	0x48001800
 80022f8:	40010400 	.word	0x40010400

080022fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	4013      	ands	r3, r2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e001      	b.n	800231e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800231a:	2300      	movs	r3, #0
 800231c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002348:	e002      	b.n	8002350 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002366:	4b08      	ldr	r3, [pc, #32]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	695a      	ldr	r2, [r3, #20]
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	4013      	ands	r3, r2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd08 	bl	8000d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e081      	b.n	80024a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fe46 	bl	8001044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	e006      	b.n	8002414 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002412:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d104      	bne.n	8002426 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002434:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69d9      	ldr	r1, [r3, #28]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
 80024b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d138      	bne.n	8002532 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e032      	b.n	8002534 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2201      	movs	r2, #1
 80024d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2224      	movs	r2, #36	; 0x24
 80024da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0201 	bic.w	r2, r2, #1
 80024ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0201 	orr.w	r2, r2, #1
 800251c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2220      	movs	r2, #32
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e000      	b.n	8002534 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
  }
}
 8002534:	4618      	mov	r0, r3
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b20      	cmp	r3, #32
 8002554:	d139      	bne.n	80025ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002560:	2302      	movs	r3, #2
 8002562:	e033      	b.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2224      	movs	r2, #36	; 0x24
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0201 	bic.w	r2, r2, #1
 8002582:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002592:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f042 0201 	orr.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025c6:	2300      	movs	r3, #0
 80025c8:	e000      	b.n	80025cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025ca:	2302      	movs	r3, #2
  }
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80025d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025da:	b08f      	sub	sp, #60	; 0x3c
 80025dc:	af0a      	add	r7, sp, #40	; 0x28
 80025de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e116      	b.n	8002818 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d106      	bne.n	800260a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fe fed1 	bl	80013ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2203      	movs	r2, #3
 800260e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d102      	bne.n	8002624 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f004 f83e 	bl	80066aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	603b      	str	r3, [r7, #0]
 8002634:	687e      	ldr	r6, [r7, #4]
 8002636:	466d      	mov	r5, sp
 8002638:	f106 0410 	add.w	r4, r6, #16
 800263c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800263e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002642:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002644:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002648:	e885 0003 	stmia.w	r5, {r0, r1}
 800264c:	1d33      	adds	r3, r6, #4
 800264e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	f003 fffe 	bl	8006652 <USB_CoreInit>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2202      	movs	r2, #2
 8002660:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e0d7      	b.n	8002818 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f004 f82c 	bl	80066cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
 8002678:	e04a      	b.n	8002710 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800267a:	7bfa      	ldrb	r2, [r7, #15]
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	440b      	add	r3, r1
 8002688:	333d      	adds	r3, #61	; 0x3d
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800268e:	7bfa      	ldrb	r2, [r7, #15]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	333c      	adds	r3, #60	; 0x3c
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	7bfb      	ldrb	r3, [r7, #15]
 80026a6:	b298      	uxth	r0, r3
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3344      	adds	r3, #68	; 0x44
 80026b6:	4602      	mov	r2, r0
 80026b8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80026ba:	7bfa      	ldrb	r2, [r7, #15]
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3340      	adds	r3, #64	; 0x40
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3348      	adds	r3, #72	; 0x48
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	334c      	adds	r3, #76	; 0x4c
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026f6:	7bfa      	ldrb	r2, [r7, #15]
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3354      	adds	r3, #84	; 0x54
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800270a:	7bfb      	ldrb	r3, [r7, #15]
 800270c:	3301      	adds	r3, #1
 800270e:	73fb      	strb	r3, [r7, #15]
 8002710:	7bfa      	ldrb	r2, [r7, #15]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	429a      	cmp	r2, r3
 8002718:	d3af      	bcc.n	800267a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e044      	b.n	80027aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002736:	7bfa      	ldrb	r2, [r7, #15]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	00db      	lsls	r3, r3, #3
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4413      	add	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800275e:	2200      	movs	r2, #0
 8002760:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002762:	7bfa      	ldrb	r2, [r7, #15]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002778:	7bfa      	ldrb	r2, [r7, #15]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	3301      	adds	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	7bfa      	ldrb	r2, [r7, #15]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d3b5      	bcc.n	8002720 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	603b      	str	r3, [r7, #0]
 80027ba:	687e      	ldr	r6, [r7, #4]
 80027bc:	466d      	mov	r5, sp
 80027be:	f106 0410 	add.w	r4, r6, #16
 80027c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d2:	1d33      	adds	r3, r6, #4
 80027d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d6:	6838      	ldr	r0, [r7, #0]
 80027d8:	f003 ffc4 	bl	8006764 <USB_DevInit>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d005      	beq.n	80027ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e014      	b.n	8002818 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b01      	cmp	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f80a 	bl	8002820 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f004 f970 	bl	8006af6 <USB_DevDisconnect>

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002820 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2201      	movs	r2, #1
 8002832:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002852:	f043 0303 	orr.w	r3, r3, #3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d130      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c0:	d038      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2232      	movs	r2, #50	; 0x32
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e8:	e002      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fc:	d102      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f2      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d110      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e00f      	b.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d007      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	20000000 	.word	0x20000000
 800294c:	431bde83 	.word	0x431bde83

08002950 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_PWREx_EnableVddUSB+0x1c>)
 800295a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800295e:	6053      	str	r3, [r2, #4]
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40007000 	.word	0x40007000

08002970 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af02      	add	r7, sp, #8
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7fe ff90 	bl	800189c <HAL_GetTick>
 800297c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e063      	b.n	8002a50 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10b      	bne.n	80029ac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7fe fbaf 	bl	8001100 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80029a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f858 	bl	8002a5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	021a      	lsls	r2, r3, #8
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	2120      	movs	r1, #32
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f850 	bl	8002a78 <QSPI_WaitFlagStateUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80029dc:	7afb      	ldrb	r3, [r7, #11]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d131      	bne.n	8002a46 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029ec:	f023 0310 	bic.w	r3, r3, #16
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6852      	ldr	r2, [r2, #4]
 80029f4:	0611      	lsls	r1, r2, #24
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68d2      	ldr	r2, [r2, #12]
 80029fa:	4311      	orrs	r1, r2
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_QSPI_Init+0xe8>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6912      	ldr	r2, [r2, #16]
 8002a12:	0411      	lsls	r1, r2, #16
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6952      	ldr	r2, [r2, #20]
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6992      	ldr	r2, [r2, #24]
 8002a1e:	4311      	orrs	r1, r2
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002a4e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	ffe0f8fe 	.word	0xffe0f8fe

08002a5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002a88:	e01a      	b.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a90:	d016      	beq.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a92:	f7fe ff03 	bl	800189c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d302      	bcc.n	8002aa8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10b      	bne.n	8002ac0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2204      	movs	r2, #4
 8002aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e00e      	b.n	8002ade <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bf14      	ite	ne
 8002ace:	2301      	movne	r3, #1
 8002ad0:	2300      	moveq	r3, #0
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	79fb      	ldrb	r3, [r7, #7]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1d6      	bne.n	8002a8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
	...

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e3ca      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002afa:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b04:	4b94      	ldr	r3, [pc, #592]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80e4 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_RCC_OscConfig+0x4a>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b0c      	cmp	r3, #12
 8002b26:	f040 808b 	bne.w	8002c40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	f040 8087 	bne.w	8002c40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b32:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x62>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e3a2      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	4b82      	ldr	r3, [pc, #520]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_RCC_OscConfig+0x7c>
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b62:	e005      	b.n	8002b70 <HAL_RCC_OscConfig+0x88>
 8002b64:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d223      	bcs.n	8002bbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f000 fd87 	bl	800368c <RCC_SetFlashLatencyFromMSIRange>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e383      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b88:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a72      	ldr	r2, [pc, #456]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b8e:	f043 0308 	orr.w	r3, r3, #8
 8002b92:	6013      	str	r3, [r2, #0]
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	496d      	ldr	r1, [pc, #436]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba6:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	4968      	ldr	r1, [pc, #416]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
 8002bba:	e025      	b.n	8002c08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bbc:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a65      	ldr	r2, [pc, #404]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bc2:	f043 0308 	orr.w	r3, r3, #8
 8002bc6:	6013      	str	r3, [r2, #0]
 8002bc8:	4b63      	ldr	r3, [pc, #396]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a1b      	ldr	r3, [r3, #32]
 8002bd4:	4960      	ldr	r1, [pc, #384]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	495b      	ldr	r1, [pc, #364]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d109      	bne.n	8002c08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fd47 	bl	800368c <RCC_SetFlashLatencyFromMSIRange>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e343      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c08:	f000 fc4a 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b52      	ldr	r3, [pc, #328]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	4950      	ldr	r1, [pc, #320]	; (8002d5c <HAL_RCC_OscConfig+0x274>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	4a4e      	ldr	r2, [pc, #312]	; (8002d60 <HAL_RCC_OscConfig+0x278>)
 8002c26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002c28:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_RCC_OscConfig+0x27c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fc59 	bl	80014e4 <HAL_InitTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d052      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	e327      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d032      	beq.n	8002cae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c54:	f7fe fe22 	bl	800189c <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c5c:	f7fe fe1e 	bl	800189c <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e310      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c7a:	4b37      	ldr	r3, [pc, #220]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a36      	ldr	r2, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	4b34      	ldr	r3, [pc, #208]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	4931      	ldr	r1, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c98:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	492c      	ldr	r1, [pc, #176]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
 8002cac:	e01a      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002cae:	4b2a      	ldr	r3, [pc, #168]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cba:	f7fe fdef 	bl	800189c <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fdeb 	bl	800189c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e2dd      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1f0      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x1da>
 8002ce0:	e000      	b.n	8002ce4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d074      	beq.n	8002dda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x21a>
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	2b0c      	cmp	r3, #12
 8002cfa:	d10e      	bne.n	8002d1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d10b      	bne.n	8002d1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d064      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d160      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e2ba      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d22:	d106      	bne.n	8002d32 <HAL_RCC_OscConfig+0x24a>
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	e026      	b.n	8002d80 <HAL_RCC_OscConfig+0x298>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3a:	d115      	bne.n	8002d68 <HAL_RCC_OscConfig+0x280>
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a02      	ldr	r2, [pc, #8]	; (8002d58 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e014      	b.n	8002d80 <HAL_RCC_OscConfig+0x298>
 8002d56:	bf00      	nop
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	0800c594 	.word	0x0800c594
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000004 	.word	0x20000004
 8002d68:	4ba0      	ldr	r3, [pc, #640]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a9f      	ldr	r2, [pc, #636]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d72:	6013      	str	r3, [r2, #0]
 8002d74:	4b9d      	ldr	r3, [pc, #628]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a9c      	ldr	r2, [pc, #624]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d013      	beq.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe fd88 	bl	800189c <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d90:	f7fe fd84 	bl	800189c <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b64      	cmp	r3, #100	; 0x64
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e276      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da2:	4b92      	ldr	r3, [pc, #584]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d0f0      	beq.n	8002d90 <HAL_RCC_OscConfig+0x2a8>
 8002dae:	e014      	b.n	8002dda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db0:	f7fe fd74 	bl	800189c <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db8:	f7fe fd70 	bl	800189c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e262      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dca:	4b88      	ldr	r3, [pc, #544]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x2d0>
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d060      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d005      	beq.n	8002df8 <HAL_RCC_OscConfig+0x310>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	2b0c      	cmp	r3, #12
 8002df0:	d119      	bne.n	8002e26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d116      	bne.n	8002e26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002df8:	4b7c      	ldr	r3, [pc, #496]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_RCC_OscConfig+0x328>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e23f      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e10:	4b76      	ldr	r3, [pc, #472]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	4973      	ldr	r1, [pc, #460]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e24:	e040      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e2e:	4b6f      	ldr	r3, [pc, #444]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6e      	ldr	r2, [pc, #440]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3a:	f7fe fd2f 	bl	800189c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e42:	f7fe fd2b 	bl	800189c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e21d      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e54:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e60:	4b62      	ldr	r3, [pc, #392]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	061b      	lsls	r3, r3, #24
 8002e6e:	495f      	ldr	r1, [pc, #380]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]
 8002e74:	e018      	b.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5c      	ldr	r2, [pc, #368]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe fd0b 	bl	800189c <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e8a:	f7fe fd07 	bl	800189c <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1f9      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e9c:	4b53      	ldr	r3, [pc, #332]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1f0      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d03c      	beq.n	8002f2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d01c      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ebc:	4b4b      	ldr	r3, [pc, #300]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec2:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ecc:	f7fe fce6 	bl	800189c <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fe fce2 	bl	800189c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e1d4      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ee6:	4b41      	ldr	r3, [pc, #260]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0ef      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x3ec>
 8002ef4:	e01b      	b.n	8002f2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ef6:	4b3d      	ldr	r3, [pc, #244]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efc:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe fcc9 	bl	800189c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f0e:	f7fe fcc5 	bl	800189c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1b7      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f20:	4b32      	ldr	r3, [pc, #200]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ef      	bne.n	8002f0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80a6 	beq.w	8003088 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002f40:	4b2a      	ldr	r3, [pc, #168]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10d      	bne.n	8002f68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	4a26      	ldr	r2, [pc, #152]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f56:	6593      	str	r3, [r2, #88]	; 0x58
 8002f58:	4b24      	ldr	r3, [pc, #144]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f64:	2301      	movs	r3, #1
 8002f66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f68:	4b21      	ldr	r3, [pc, #132]	; (8002ff0 <HAL_RCC_OscConfig+0x508>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d118      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f74:	4b1e      	ldr	r3, [pc, #120]	; (8002ff0 <HAL_RCC_OscConfig+0x508>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1d      	ldr	r2, [pc, #116]	; (8002ff0 <HAL_RCC_OscConfig+0x508>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f80:	f7fe fc8c 	bl	800189c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fe fc88 	bl	800189c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e17a      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f9a:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_RCC_OscConfig+0x508>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x4d8>
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f043 0301 	orr.w	r3, r3, #1
 8002fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fbe:	e029      	b.n	8003014 <HAL_RCC_OscConfig+0x52c>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b05      	cmp	r3, #5
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x50c>
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	4a07      	ldr	r2, [pc, #28]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fd0:	f043 0304 	orr.w	r3, r3, #4
 8002fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_RCC_OscConfig+0x504>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fe8:	e014      	b.n	8003014 <HAL_RCC_OscConfig+0x52c>
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	4b9c      	ldr	r3, [pc, #624]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	4a9b      	ldr	r2, [pc, #620]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8002ffc:	f023 0301 	bic.w	r3, r3, #1
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003004:	4b98      	ldr	r3, [pc, #608]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800300a:	4a97      	ldr	r2, [pc, #604]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800300c:	f023 0304 	bic.w	r3, r3, #4
 8003010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d016      	beq.n	800304a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe fc3e 	bl	800189c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe fc3a 	bl	800189c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e12a      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303a:	4b8b      	ldr	r3, [pc, #556]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ed      	beq.n	8003024 <HAL_RCC_OscConfig+0x53c>
 8003048:	e015      	b.n	8003076 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304a:	f7fe fc27 	bl	800189c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003050:	e00a      	b.n	8003068 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003052:	f7fe fc23 	bl	800189c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003060:	4293      	cmp	r3, r2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e113      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003068:	4b7f      	ldr	r3, [pc, #508]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ed      	bne.n	8003052 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003076:	7ffb      	ldrb	r3, [r7, #31]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307c:	4b7a      	ldr	r3, [pc, #488]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	4a79      	ldr	r2, [pc, #484]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003086:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80fe 	beq.w	800328e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	2b02      	cmp	r3, #2
 8003098:	f040 80d0 	bne.w	800323c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800309c:	4b72      	ldr	r3, [pc, #456]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0203 	and.w	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d130      	bne.n	8003112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	3b01      	subs	r3, #1
 80030bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d127      	bne.n	8003112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d11f      	bne.n	8003112 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030dc:	2a07      	cmp	r2, #7
 80030de:	bf14      	ite	ne
 80030e0:	2201      	movne	r2, #1
 80030e2:	2200      	moveq	r2, #0
 80030e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d113      	bne.n	8003112 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	085b      	lsrs	r3, r3, #1
 80030f6:	3b01      	subs	r3, #1
 80030f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d109      	bne.n	8003112 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	085b      	lsrs	r3, r3, #1
 800310a:	3b01      	subs	r3, #1
 800310c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d06e      	beq.n	80031f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d069      	beq.n	80031ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d105      	bne.n	8003130 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003124:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0ad      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a4b      	ldr	r2, [pc, #300]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800313a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800313e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003140:	f7fe fbac 	bl	800189c <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fe fba8 	bl	800189c <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e09a      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800315a:	4b43      	ldr	r3, [pc, #268]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003166:	4b40      	ldr	r3, [pc, #256]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	4b40      	ldr	r3, [pc, #256]	; (800326c <HAL_RCC_OscConfig+0x784>)
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003176:	3a01      	subs	r2, #1
 8003178:	0112      	lsls	r2, r2, #4
 800317a:	4311      	orrs	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003180:	0212      	lsls	r2, r2, #8
 8003182:	4311      	orrs	r1, r2
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003188:	0852      	lsrs	r2, r2, #1
 800318a:	3a01      	subs	r2, #1
 800318c:	0552      	lsls	r2, r2, #21
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0652      	lsls	r2, r2, #25
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a0:	0912      	lsrs	r2, r2, #4
 80031a2:	0452      	lsls	r2, r2, #17
 80031a4:	430a      	orrs	r2, r1
 80031a6:	4930      	ldr	r1, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2d      	ldr	r2, [pc, #180]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031b8:	4b2b      	ldr	r3, [pc, #172]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a2a      	ldr	r2, [pc, #168]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031c4:	f7fe fb6a 	bl	800189c <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031cc:	f7fe fb66 	bl	800189c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e058      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031ea:	e050      	b.n	800328e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e04f      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d148      	bne.n	800328e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003206:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	4a16      	ldr	r2, [pc, #88]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 800320e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003212:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003214:	f7fe fb42 	bl	800189c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe fb3e 	bl	800189c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e030      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322e:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0f0      	beq.n	800321c <HAL_RCC_OscConfig+0x734>
 800323a:	e028      	b.n	800328e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d023      	beq.n	800328a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003242:	4b09      	ldr	r3, [pc, #36]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a08      	ldr	r2, [pc, #32]	; (8003268 <HAL_RCC_OscConfig+0x780>)
 8003248:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800324c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fe fb25 	bl	800189c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003254:	e00c      	b.n	8003270 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe fb21 	bl	800189c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d905      	bls.n	8003270 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e013      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
 8003268:	40021000 	.word	0x40021000
 800326c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x7b0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1ec      	bne.n	8003256 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <HAL_RCC_OscConfig+0x7b0>)
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	4905      	ldr	r1, [pc, #20]	; (8003298 <HAL_RCC_OscConfig+0x7b0>)
 8003282:	4b06      	ldr	r3, [pc, #24]	; (800329c <HAL_RCC_OscConfig+0x7b4>)
 8003284:	4013      	ands	r3, r2
 8003286:	60cb      	str	r3, [r1, #12]
 8003288:	e001      	b.n	800328e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40021000 	.word	0x40021000
 800329c:	feeefffc 	.word	0xfeeefffc

080032a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e0e7      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0307 	and.w	r3, r3, #7
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d910      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f023 0207 	bic.w	r2, r3, #7
 80032ca:	4970      	ldr	r1, [pc, #448]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b6e      	ldr	r3, [pc, #440]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0cf      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	4b66      	ldr	r3, [pc, #408]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d908      	bls.n	8003312 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003300:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4960      	ldr	r1, [pc, #384]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d04c      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b03      	cmp	r3, #3
 8003324:	d107      	bne.n	8003336 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	4b5a      	ldr	r3, [pc, #360]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d121      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e0a6      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d107      	bne.n	800334e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800333e:	4b54      	ldr	r3, [pc, #336]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d115      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e09a      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e08e      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003366:	4b4a      	ldr	r3, [pc, #296]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e086      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003376:	4b46      	ldr	r3, [pc, #280]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 0203 	bic.w	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	4943      	ldr	r1, [pc, #268]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003388:	f7fe fa88 	bl	800189c <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003390:	f7fe fa84 	bl	800189c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	f241 3288 	movw	r2, #5000	; 0x1388
 800339e:	4293      	cmp	r3, r2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e06e      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a6:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 020c 	and.w	r2, r3, #12
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d1eb      	bne.n	8003390 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d010      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d208      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	492b      	ldr	r1, [pc, #172]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033e6:	4b29      	ldr	r3, [pc, #164]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d210      	bcs.n	8003416 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f4:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 0207 	bic.w	r2, r3, #7
 80033fc:	4923      	ldr	r1, [pc, #140]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003404:	4b21      	ldr	r3, [pc, #132]	; (800348c <HAL_RCC_ClockConfig+0x1ec>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e036      	b.n	8003484 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	4918      	ldr	r1, [pc, #96]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0308 	and.w	r3, r3, #8
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	00db      	lsls	r3, r3, #3
 800344e:	4910      	ldr	r1, [pc, #64]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 8003450:	4313      	orrs	r3, r2
 8003452:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003454:	f000 f824 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 8003458:	4602      	mov	r2, r0
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_RCC_ClockConfig+0x1f0>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	490b      	ldr	r1, [pc, #44]	; (8003494 <HAL_RCC_ClockConfig+0x1f4>)
 8003466:	5ccb      	ldrb	r3, [r1, r3]
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	fa22 f303 	lsr.w	r3, r2, r3
 8003470:	4a09      	ldr	r2, [pc, #36]	; (8003498 <HAL_RCC_ClockConfig+0x1f8>)
 8003472:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_ClockConfig+0x1fc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe f833 	bl	80014e4 <HAL_InitTick>
 800347e:	4603      	mov	r3, r0
 8003480:	72fb      	strb	r3, [r7, #11]

  return status;
 8003482:	7afb      	ldrb	r3, [r7, #11]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40022000 	.word	0x40022000
 8003490:	40021000 	.word	0x40021000
 8003494:	0800c594 	.word	0x0800c594
 8003498:	20000000 	.word	0x20000000
 800349c:	20000004 	.word	0x20000004

080034a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
 80034aa:	2300      	movs	r3, #0
 80034ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b8:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x34>
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	2b0c      	cmp	r3, #12
 80034cc:	d121      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11e      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034d4:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e005      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034f0:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 030f 	and.w	r3, r3, #15
 80034fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034fc:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003504:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003510:	e00a      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b04      	cmp	r3, #4
 8003516:	d102      	bne.n	800351e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	e004      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d101      	bne.n	8003528 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003526:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d134      	bne.n	8003598 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800352e:	4b1e      	ldr	r3, [pc, #120]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b02      	cmp	r3, #2
 800353c:	d003      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0xa6>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b03      	cmp	r3, #3
 8003542:	d003      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0xac>
 8003544:	e005      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003548:	617b      	str	r3, [r7, #20]
      break;
 800354a:	e005      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800354e:	617b      	str	r3, [r7, #20]
      break;
 8003550:	e002      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	617b      	str	r3, [r7, #20]
      break;
 8003556:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	091b      	lsrs	r3, r3, #4
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	3301      	adds	r3, #1
 8003564:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	fb03 f202 	mul.w	r2, r3, r2
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	fbb2 f3f3 	udiv	r3, r2, r3
 800357c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	0e5b      	lsrs	r3, r3, #25
 8003584:	f003 0303 	and.w	r3, r3, #3
 8003588:	3301      	adds	r3, #1
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003598:	69bb      	ldr	r3, [r7, #24]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3724      	adds	r7, #36	; 0x24
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800c5ac 	.word	0x0800c5ac
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4904      	ldr	r1, [pc, #16]	; (80035f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	f003 031f 	and.w	r3, r3, #31
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40021000 	.word	0x40021000
 80035f8:	0800c5a4 	.word	0x0800c5a4

080035fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003600:	f7ff ffda 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003604:	4602      	mov	r2, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	0adb      	lsrs	r3, r3, #11
 800360c:	f003 0307 	and.w	r3, r3, #7
 8003610:	4904      	ldr	r1, [pc, #16]	; (8003624 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003612:	5ccb      	ldrb	r3, [r1, r3]
 8003614:	f003 031f 	and.w	r3, r3, #31
 8003618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40021000 	.word	0x40021000
 8003624:	0800c5a4 	.word	0x0800c5a4

08003628 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	220f      	movs	r2, #15
 8003636:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003638:	4b12      	ldr	r3, [pc, #72]	; (8003684 <HAL_RCC_GetClockConfig+0x5c>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003644:	4b0f      	ldr	r3, [pc, #60]	; (8003684 <HAL_RCC_GetClockConfig+0x5c>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <HAL_RCC_GetClockConfig+0x5c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800365c:	4b09      	ldr	r3, [pc, #36]	; (8003684 <HAL_RCC_GetClockConfig+0x5c>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	08db      	lsrs	r3, r3, #3
 8003662:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCC_GetClockConfig+0x60>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0207 	and.w	r2, r3, #7
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	601a      	str	r2, [r3, #0]
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	40022000 	.word	0x40022000

0800368c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003694:	2300      	movs	r3, #0
 8003696:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003698:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800369a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800369c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036a4:	f7ff f8f0 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 80036a8:	6178      	str	r0, [r7, #20]
 80036aa:	e014      	b.n	80036d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	4a24      	ldr	r2, [pc, #144]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6593      	str	r3, [r2, #88]	; 0x58
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036c4:	f7ff f8e0 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 80036c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b1e      	ldr	r3, [pc, #120]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4a1d      	ldr	r2, [pc, #116]	; (8003744 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036dc:	d10b      	bne.n	80036f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2b80      	cmp	r3, #128	; 0x80
 80036e2:	d919      	bls.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2ba0      	cmp	r3, #160	; 0xa0
 80036e8:	d902      	bls.n	80036f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80036ea:	2302      	movs	r3, #2
 80036ec:	613b      	str	r3, [r7, #16]
 80036ee:	e013      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80036f0:	2301      	movs	r3, #1
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	e010      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b80      	cmp	r3, #128	; 0x80
 80036fa:	d902      	bls.n	8003702 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80036fc:	2303      	movs	r3, #3
 80036fe:	613b      	str	r3, [r7, #16]
 8003700:	e00a      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b80      	cmp	r3, #128	; 0x80
 8003706:	d102      	bne.n	800370e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003708:	2302      	movs	r3, #2
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	e004      	b.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b70      	cmp	r3, #112	; 0x70
 8003712:	d101      	bne.n	8003718 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003714:	2301      	movs	r3, #1
 8003716:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 0207 	bic.w	r2, r3, #7
 8003720:	4909      	ldr	r1, [pc, #36]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003728:	4b07      	ldr	r3, [pc, #28]	; (8003748 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000
 8003748:	40022000 	.word	0x40022000

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003758:	2300      	movs	r3, #0
 800375a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003764:	2b00      	cmp	r3, #0
 8003766:	d041      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800376c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003770:	d02a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003772:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003776:	d824      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800377c:	d008      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800377e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003782:	d81e      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d010      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800378e:	e018      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003790:	4b86      	ldr	r3, [pc, #536]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	4a85      	ldr	r2, [pc, #532]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800379a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800379c:	e015      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 facb 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037ae:	e00c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3320      	adds	r3, #32
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fbb6 	bl	8003f28 <RCCEx_PLLSAI2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037c0:	e003      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	74fb      	strb	r3, [r7, #19]
      break;
 80037c6:	e000      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037d0:	4b76      	ldr	r3, [pc, #472]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037de:	4973      	ldr	r1, [pc, #460]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80037e6:	e001      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	7cfb      	ldrb	r3, [r7, #19]
 80037ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d041      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003800:	d02a      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003802:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003806:	d824      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003808:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800380c:	d008      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800380e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003812:	d81e      	bhi.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381c:	d010      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800381e:	e018      	b.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003820:	4b62      	ldr	r3, [pc, #392]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4a61      	ldr	r2, [pc, #388]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382c:	e015      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3304      	adds	r3, #4
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fa83 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800383e:	e00c      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb6e 	bl	8003f28 <RCCEx_PLLSAI2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003850:	e003      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	74fb      	strb	r3, [r7, #19]
      break;
 8003856:	e000      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800385a:	7cfb      	ldrb	r3, [r7, #19]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003860:	4b52      	ldr	r3, [pc, #328]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003866:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800386e:	494f      	ldr	r1, [pc, #316]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003876:	e001      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a0 	beq.w	80039ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800388e:	4b47      	ldr	r3, [pc, #284]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b41      	ldr	r3, [pc, #260]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a8:	4a40      	ldr	r2, [pc, #256]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	6593      	str	r3, [r2, #88]	; 0x58
 80038b0:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038c0:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a3a      	ldr	r2, [pc, #232]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038cc:	f7fd ffe6 	bl	800189c <HAL_GetTick>
 80038d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038d2:	e009      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd ffe2 	bl	800189c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d902      	bls.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	74fb      	strb	r3, [r7, #19]
        break;
 80038e6:	e005      	b.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038e8:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d15c      	bne.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038fa:	4b2c      	ldr	r3, [pc, #176]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d01f      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003912:	697a      	ldr	r2, [r7, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	d019      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003918:	4b24      	ldr	r3, [pc, #144]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003922:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800393c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd ffa1 	bl	800189c <HAL_GetTick>
 800395a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800395c:	e00b      	b.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fd ff9d 	bl	800189c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f241 3288 	movw	r2, #5000	; 0x1388
 800396c:	4293      	cmp	r3, r2
 800396e:	d902      	bls.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	74fb      	strb	r3, [r7, #19]
            break;
 8003974:	e006      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003976:	4b0d      	ldr	r3, [pc, #52]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0ec      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800398a:	4b08      	ldr	r3, [pc, #32]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800399a:	4904      	ldr	r1, [pc, #16]	; (80039ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039a2:	e009      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
 80039a8:	e006      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039aa:	bf00      	nop
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039b8:	7c7b      	ldrb	r3, [r7, #17]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d105      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039be:	4b9e      	ldr	r3, [pc, #632]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c2:	4a9d      	ldr	r2, [pc, #628]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039d6:	4b98      	ldr	r3, [pc, #608]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039dc:	f023 0203 	bic.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e4:	4994      	ldr	r1, [pc, #592]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039f8:	4b8f      	ldr	r3, [pc, #572]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fe:	f023 020c 	bic.w	r2, r3, #12
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a06:	498c      	ldr	r1, [pc, #560]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a1a:	4b87      	ldr	r3, [pc, #540]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	4983      	ldr	r1, [pc, #524]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00a      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a3c:	4b7e      	ldr	r3, [pc, #504]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4a:	497b      	ldr	r1, [pc, #492]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0310 	and.w	r3, r3, #16
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00a      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a6c:	4972      	ldr	r1, [pc, #456]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a80:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8e:	496a      	ldr	r1, [pc, #424]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aa2:	4b65      	ldr	r3, [pc, #404]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	4961      	ldr	r1, [pc, #388]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ac4:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad2:	4959      	ldr	r1, [pc, #356]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ae6:	4b54      	ldr	r3, [pc, #336]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af4:	4950      	ldr	r1, [pc, #320]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b16:	4948      	ldr	r1, [pc, #288]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	493f      	ldr	r1, [pc, #252]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d028      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b5a:	4937      	ldr	r1, [pc, #220]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b6c:	4b32      	ldr	r3, [pc, #200]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a31      	ldr	r2, [pc, #196]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b76:	60d3      	str	r3, [r2, #12]
 8003b78:	e011      	b.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b82:	d10c      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3304      	adds	r3, #4
 8003b88:	2101      	movs	r1, #1
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f8d8 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 8003b90:	4603      	mov	r3, r0
 8003b92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003b94:	7cfb      	ldrb	r3, [r7, #19]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003b9a:	7cfb      	ldrb	r3, [r7, #19]
 8003b9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d028      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003baa:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb8:	491f      	ldr	r1, [pc, #124]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc8:	d106      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd4:	60d3      	str	r3, [r2, #12]
 8003bd6:	e011      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	3304      	adds	r3, #4
 8003be6:	2101      	movs	r1, #1
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 f8a9 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003bf8:	7cfb      	ldrb	r3, [r7, #19]
 8003bfa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d02b      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c08:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	4908      	ldr	r1, [pc, #32]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c26:	d109      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	4a02      	ldr	r2, [pc, #8]	; (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c32:	60d3      	str	r3, [r2, #12]
 8003c34:	e014      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	3304      	adds	r3, #4
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f877 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 8003c52:	4603      	mov	r3, r0
 8003c54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c56:	7cfb      	ldrb	r3, [r7, #19]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c5c:	7cfb      	ldrb	r3, [r7, #19]
 8003c5e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02f      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c7a:	4928      	ldr	r1, [pc, #160]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c8a:	d10d      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3304      	adds	r3, #4
 8003c90:	2102      	movs	r1, #2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 f854 	bl	8003d40 <RCCEx_PLLSAI1_Config>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c9c:	7cfb      	ldrb	r3, [r7, #19]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d014      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ca2:	7cfb      	ldrb	r3, [r7, #19]
 8003ca4:	74bb      	strb	r3, [r7, #18]
 8003ca6:	e011      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f935 	bl	8003f28 <RCCEx_PLLSAI2_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ce6:	490d      	ldr	r1, [pc, #52]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d0a:	4904      	ldr	r1, [pc, #16]	; (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d12:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000

08003d20 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a04      	ldr	r2, [pc, #16]	; (8003d3c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d2a:	f043 0304 	orr.w	r3, r3, #4
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	40021000 	.word	0x40021000

08003d40 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d4e:	4b75      	ldr	r3, [pc, #468]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d018      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d5a:	4b72      	ldr	r3, [pc, #456]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	f003 0203 	and.w	r2, r3, #3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d10d      	bne.n	8003d86 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d009      	beq.n	8003d86 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d72:	4b6c      	ldr	r3, [pc, #432]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
       ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d047      	beq.n	8003e16 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	73fb      	strb	r3, [r7, #15]
 8003d8a:	e044      	b.n	8003e16 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d018      	beq.n	8003dc6 <RCCEx_PLLSAI1_Config+0x86>
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d825      	bhi.n	8003de4 <RCCEx_PLLSAI1_Config+0xa4>
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d002      	beq.n	8003da2 <RCCEx_PLLSAI1_Config+0x62>
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d009      	beq.n	8003db4 <RCCEx_PLLSAI1_Config+0x74>
 8003da0:	e020      	b.n	8003de4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003da2:	4b60      	ldr	r3, [pc, #384]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11d      	bne.n	8003dea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db2:	e01a      	b.n	8003dea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003db4:	4b5b      	ldr	r3, [pc, #364]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d116      	bne.n	8003dee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc4:	e013      	b.n	8003dee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dc6:	4b57      	ldr	r3, [pc, #348]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10f      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003dd2:	4b54      	ldr	r3, [pc, #336]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003de2:	e006      	b.n	8003df2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
      break;
 8003de8:	e004      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003dfa:	4b4a      	ldr	r3, [pc, #296]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	4944      	ldr	r1, [pc, #272]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d17d      	bne.n	8003f18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e1c:	4b41      	ldr	r3, [pc, #260]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e28:	f7fd fd38 	bl	800189c <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e2e:	e009      	b.n	8003e44 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e30:	f7fd fd34 	bl	800189c <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d902      	bls.n	8003e44 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	73fb      	strb	r3, [r7, #15]
        break;
 8003e42:	e005      	b.n	8003e50 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e44:	4b37      	ldr	r3, [pc, #220]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ef      	bne.n	8003e30 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e50:	7bfb      	ldrb	r3, [r7, #15]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d160      	bne.n	8003f18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e5c:	4b31      	ldr	r3, [pc, #196]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	0211      	lsls	r1, r2, #8
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68d2      	ldr	r2, [r2, #12]
 8003e72:	0912      	lsrs	r2, r2, #4
 8003e74:	0452      	lsls	r2, r2, #17
 8003e76:	430a      	orrs	r2, r1
 8003e78:	492a      	ldr	r1, [pc, #168]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	610b      	str	r3, [r1, #16]
 8003e7e:	e027      	b.n	8003ed0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d112      	bne.n	8003eac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e86:	4b27      	ldr	r3, [pc, #156]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e8e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	0211      	lsls	r1, r2, #8
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6912      	ldr	r2, [r2, #16]
 8003e9c:	0852      	lsrs	r2, r2, #1
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	0552      	lsls	r2, r2, #21
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	491f      	ldr	r1, [pc, #124]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	610b      	str	r3, [r1, #16]
 8003eaa:	e011      	b.n	8003ed0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eac:	4b1d      	ldr	r3, [pc, #116]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	6892      	ldr	r2, [r2, #8]
 8003ebc:	0211      	lsls	r1, r2, #8
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	6952      	ldr	r2, [r2, #20]
 8003ec2:	0852      	lsrs	r2, r2, #1
 8003ec4:	3a01      	subs	r2, #1
 8003ec6:	0652      	lsls	r2, r2, #25
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	4916      	ldr	r1, [pc, #88]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ed0:	4b14      	ldr	r3, [pc, #80]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003edc:	f7fd fcde 	bl	800189c <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ee2:	e009      	b.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ee4:	f7fd fcda 	bl	800189c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d902      	bls.n	8003ef8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8003ef6:	e005      	b.n	8003f04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ef      	beq.n	8003ee4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f0a:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	4904      	ldr	r1, [pc, #16]	; (8003f24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000

08003f28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d018      	beq.n	8003f74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f42:	4b67      	ldr	r3, [pc, #412]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0203 	and.w	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d10d      	bne.n	8003f6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
       ||
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d009      	beq.n	8003f6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f5a:	4b61      	ldr	r3, [pc, #388]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	091b      	lsrs	r3, r3, #4
 8003f60:	f003 0307 	and.w	r3, r3, #7
 8003f64:	1c5a      	adds	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
       ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d047      	beq.n	8003ffe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
 8003f72:	e044      	b.n	8003ffe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d018      	beq.n	8003fae <RCCEx_PLLSAI2_Config+0x86>
 8003f7c:	2b03      	cmp	r3, #3
 8003f7e:	d825      	bhi.n	8003fcc <RCCEx_PLLSAI2_Config+0xa4>
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d002      	beq.n	8003f8a <RCCEx_PLLSAI2_Config+0x62>
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d009      	beq.n	8003f9c <RCCEx_PLLSAI2_Config+0x74>
 8003f88:	e020      	b.n	8003fcc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f8a:	4b55      	ldr	r3, [pc, #340]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d11d      	bne.n	8003fd2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f9a:	e01a      	b.n	8003fd2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f9c:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d116      	bne.n	8003fd6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fac:	e013      	b.n	8003fd6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fae:	4b4c      	ldr	r3, [pc, #304]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10f      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fba:	4b49      	ldr	r3, [pc, #292]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fca:	e006      	b.n	8003fda <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd0:	e004      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e002      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e000      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fda:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003fe2:	4b3f      	ldr	r3, [pc, #252]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6819      	ldr	r1, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	011b      	lsls	r3, r3, #4
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	4939      	ldr	r1, [pc, #228]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d167      	bne.n	80040d4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a35      	ldr	r2, [pc, #212]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800400e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004010:	f7fd fc44 	bl	800189c <HAL_GetTick>
 8004014:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004016:	e009      	b.n	800402c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004018:	f7fd fc40 	bl	800189c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d902      	bls.n	800402c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	73fb      	strb	r3, [r7, #15]
        break;
 800402a:	e005      	b.n	8004038 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800402c:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1ef      	bne.n	8004018 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d14a      	bne.n	80040d4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d111      	bne.n	8004068 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004044:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800404c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6892      	ldr	r2, [r2, #8]
 8004054:	0211      	lsls	r1, r2, #8
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	0912      	lsrs	r2, r2, #4
 800405c:	0452      	lsls	r2, r2, #17
 800405e:	430a      	orrs	r2, r1
 8004060:	491f      	ldr	r1, [pc, #124]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004062:	4313      	orrs	r3, r2
 8004064:	614b      	str	r3, [r1, #20]
 8004066:	e011      	b.n	800408c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004068:	4b1d      	ldr	r3, [pc, #116]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004070:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6892      	ldr	r2, [r2, #8]
 8004078:	0211      	lsls	r1, r2, #8
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6912      	ldr	r2, [r2, #16]
 800407e:	0852      	lsrs	r2, r2, #1
 8004080:	3a01      	subs	r2, #1
 8004082:	0652      	lsls	r2, r2, #25
 8004084:	430a      	orrs	r2, r1
 8004086:	4916      	ldr	r1, [pc, #88]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004088:	4313      	orrs	r3, r2
 800408a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800408c:	4b14      	ldr	r3, [pc, #80]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004096:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fc00 	bl	800189c <HAL_GetTick>
 800409c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800409e:	e009      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040a0:	f7fd fbfc 	bl	800189c <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d902      	bls.n	80040b4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	73fb      	strb	r3, [r7, #15]
          break;
 80040b2:	e005      	b.n	80040c0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040b4:	4b0a      	ldr	r3, [pc, #40]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ef      	beq.n	80040a0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4904      	ldr	r1, [pc, #16]	; (80040e0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40021000 	.word	0x40021000

080040e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e095      	b.n	8004222 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004106:	d009      	beq.n	800411c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
 800410e:	e005      	b.n	800411c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd f826 	bl	8001188 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800415c:	d902      	bls.n	8004164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800415e:	2300      	movs	r3, #0
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e002      	b.n	800416a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004172:	d007      	beq.n	8004184 <HAL_SPI_Init+0xa0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800417c:	d002      	beq.n	8004184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0301 	and.w	r3, r3, #1
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699b      	ldr	r3, [r3, #24]
 80041ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	ea42 0103 	orr.w	r1, r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	0c1b      	lsrs	r3, r3, #16
 80041e0:	f003 0204 	and.w	r2, r3, #4
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004200:	ea42 0103 	orr.w	r1, r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b082      	sub	sp, #8
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e01a      	b.n	8004272 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004252:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7fc ffe3 	bl	8001220 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b088      	sub	sp, #32
 800427e:	af02      	add	r7, sp, #8
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d112      	bne.n	80042be <HAL_SPI_Receive+0x44>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10e      	bne.n	80042be <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2204      	movs	r2, #4
 80042a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	4613      	mov	r3, r2
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f910 	bl	80044da <HAL_SPI_TransmitReceive>
 80042ba:	4603      	mov	r3, r0
 80042bc:	e109      	b.n	80044d2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_SPI_Receive+0x52>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e102      	b.n	80044d2 <HAL_SPI_Receive+0x258>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042d4:	f7fd fae2 	bl	800189c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d002      	beq.n	80042ec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80042e6:	2302      	movs	r3, #2
 80042e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042ea:	e0e9      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <HAL_SPI_Receive+0x7e>
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042fc:	e0e0      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2204      	movs	r2, #4
 8004302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004348:	d908      	bls.n	800435c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	e007      	b.n	800436c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800436a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004374:	d10f      	bne.n	8004396 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004394:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a0:	2b40      	cmp	r3, #64	; 0x40
 80043a2:	d007      	beq.n	80043b4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043bc:	d867      	bhi.n	800448e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80043be:	e030      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d117      	bne.n	80043fe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f103 020c 	add.w	r2, r3, #12
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	7812      	ldrb	r2, [r2, #0]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80043fc:	e011      	b.n	8004422 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043fe:	f7fd fa4d 	bl	800189c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d803      	bhi.n	8004416 <HAL_SPI_Receive+0x19c>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004414:	d102      	bne.n	800441c <HAL_SPI_Receive+0x1a2>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004420:	e04e      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c8      	bne.n	80043c0 <HAL_SPI_Receive+0x146>
 800442e:	e034      	b.n	800449a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b01      	cmp	r3, #1
 800443c:	d115      	bne.n	800446a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	b292      	uxth	r2, r2
 800444a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004468:	e011      	b.n	800448e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800446a:	f7fd fa17 	bl	800189c <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d803      	bhi.n	8004482 <HAL_SPI_Receive+0x208>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004480:	d102      	bne.n	8004488 <HAL_SPI_Receive+0x20e>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800448c:	e018      	b.n	80044c0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ca      	bne.n	8004430 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	6839      	ldr	r1, [r7, #0]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f001 f802 	bl	80054a8 <SPI_EndRxTransaction>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2220      	movs	r2, #32
 80044ae:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	75fb      	strb	r3, [r7, #23]
 80044bc:	e000      	b.n	80044c0 <HAL_SPI_Receive+0x246>
  }

error :
 80044be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08a      	sub	sp, #40	; 0x28
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044e8:	2301      	movs	r3, #1
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_SPI_TransmitReceive+0x26>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e1fb      	b.n	80048f8 <HAL_SPI_TransmitReceive+0x41e>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004508:	f7fd f9c8 	bl	800189c <HAL_GetTick>
 800450c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004514:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800451c:	887b      	ldrh	r3, [r7, #2]
 800451e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004524:	7efb      	ldrb	r3, [r7, #27]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d00e      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004530:	d106      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d102      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x66>
 800453a:	7efb      	ldrb	r3, [r7, #27]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d003      	beq.n	8004548 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004546:	e1cd      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_TransmitReceive+0x80>
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d103      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004560:	e1c0      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b04      	cmp	r3, #4
 800456c:	d003      	beq.n	8004576 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2205      	movs	r2, #5
 8004572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	887a      	ldrh	r2, [r7, #2]
 8004586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	887a      	ldrh	r2, [r7, #2]
 800458e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	887a      	ldrh	r2, [r7, #2]
 80045a2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b8:	d802      	bhi.n	80045c0 <HAL_SPI_TransmitReceive+0xe6>
 80045ba:	8a3b      	ldrh	r3, [r7, #16]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d908      	bls.n	80045d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ce:	605a      	str	r2, [r3, #4]
 80045d0:	e007      	b.n	80045e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d007      	beq.n	8004600 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004608:	d97c      	bls.n	8004704 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d002      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x13e>
 8004612:	8a7b      	ldrh	r3, [r7, #18]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d169      	bne.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461c:	881a      	ldrh	r2, [r3, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463c:	e056      	b.n	80046ec <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b02      	cmp	r3, #2
 800464a:	d11b      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	2b01      	cmp	r3, #1
 800465a:	d113      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004680:	2300      	movs	r3, #0
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d11c      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004698:	b29b      	uxth	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	b292      	uxth	r2, r2
 80046aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80046cc:	f7fd f8e6 	bl	800189c <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d807      	bhi.n	80046ec <HAL_SPI_TransmitReceive+0x212>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d003      	beq.n	80046ec <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80046ea:	e0fb      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1a3      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d19d      	bne.n	800463e <HAL_SPI_TransmitReceive+0x164>
 8004702:	e0df      	b.n	80048c4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_SPI_TransmitReceive+0x23a>
 800470c:	8a7b      	ldrh	r3, [r7, #18]
 800470e:	2b01      	cmp	r3, #1
 8004710:	f040 80cb 	bne.w	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	d912      	bls.n	8004744 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004722:	881a      	ldrh	r2, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b02      	subs	r3, #2
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004742:	e0b2      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	330c      	adds	r3, #12
 800474e:	7812      	ldrb	r2, [r2, #0]
 8004750:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800476a:	e09e      	b.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b02      	cmp	r3, #2
 8004778:	d134      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d02f      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	2b01      	cmp	r3, #1
 8004788:	d12c      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b01      	cmp	r3, #1
 8004792:	d912      	bls.n	80047ba <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b02      	subs	r3, #2
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047b8:	e012      	b.n	80047e0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	330c      	adds	r3, #12
 80047c4:	7812      	ldrb	r2, [r2, #0]
 80047c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d148      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d042      	beq.n	8004884 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b01      	cmp	r3, #1
 8004808:	d923      	bls.n	8004852 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004814:	b292      	uxth	r2, r2
 8004816:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	1c9a      	adds	r2, r3, #2
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b02      	subs	r3, #2
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800483a:	b29b      	uxth	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	d81f      	bhi.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800484e:	605a      	str	r2, [r3, #4]
 8004850:	e016      	b.n	8004880 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f103 020c 	add.w	r2, r3, #12
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	7812      	ldrb	r2, [r2, #0]
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004874:	b29b      	uxth	r3, r3
 8004876:	3b01      	subs	r3, #1
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004884:	f7fd f80a 	bl	800189c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004890:	429a      	cmp	r2, r3
 8004892:	d803      	bhi.n	800489c <HAL_SPI_TransmitReceive+0x3c2>
 8004894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d102      	bne.n	80048a2 <HAL_SPI_TransmitReceive+0x3c8>
 800489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80048a8:	e01c      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f47f af5b 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80048bc:	b29b      	uxth	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f47f af54 	bne.w	800476c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048c4:	69fa      	ldr	r2, [r7, #28]
 80048c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fe45 	bl	8005558 <SPI_EndRxTxTransaction>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2220      	movs	r2, #32
 80048de:	661a      	str	r2, [r3, #96]	; 0x60
 80048e0:	e000      	b.n	80048e4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80048e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80048f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3728      	adds	r7, #40	; 0x28
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_SPI_Transmit_IT+0x20>
 800491c:	2302      	movs	r3, #2
 800491e:	e072      	b.n	8004a06 <HAL_SPI_Transmit_IT+0x106>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Transmit_IT+0x34>
 800492e:	88fb      	ldrh	r3, [r7, #6]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d102      	bne.n	800493a <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004938:	e060      	b.n	80049fc <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d002      	beq.n	800494c <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8004946:	2302      	movs	r3, #2
 8004948:	75fb      	strb	r3, [r7, #23]
    goto error;
 800494a:	e057      	b.n	80049fc <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2203      	movs	r2, #3
 8004950:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d903      	bls.n	800499a <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a1f      	ldr	r2, [pc, #124]	; (8004a14 <HAL_SPI_Transmit_IT+0x114>)
 8004996:	651a      	str	r2, [r3, #80]	; 0x50
 8004998:	e002      	b.n	80049a0 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <HAL_SPI_Transmit_IT+0x118>)
 800499e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a8:	d10f      	bne.n	80049ca <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80049d8:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e4:	2b40      	cmp	r3, #64	; 0x40
 80049e6:	d008      	beq.n	80049fa <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e000      	b.n	80049fc <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80049fa:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	08005227 	.word	0x08005227
 8004a18:	080051e1 	.word	0x080051e1

08004a1c <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d110      	bne.n	8004a58 <HAL_SPI_Receive_IT+0x3c>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a3e:	d10b      	bne.n	8004a58 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2204      	movs	r2, #4
 8004a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004a48:	88fb      	ldrh	r3, [r7, #6]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f894 	bl	8004b7c <HAL_SPI_TransmitReceive_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	e089      	b.n	8004b6c <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_SPI_Receive_IT+0x4a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e082      	b.n	8004b6c <HAL_SPI_Receive_IT+0x150>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a7e:	e070      	b.n	8004b62 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_Receive_IT+0x70>
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a90:	e067      	b.n	8004b62 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2204      	movs	r2, #4
 8004a96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	88fa      	ldrh	r2, [r7, #6]
 8004aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	88fa      	ldrh	r2, [r7, #6]
 8004ab2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ad6:	d90b      	bls.n	8004af0 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ae6:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <HAL_SPI_Receive_IT+0x158>)
 8004aec:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aee:	e00a      	b.n	8004b06 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	685a      	ldr	r2, [r3, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004afe:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_SPI_Receive_IT+0x15c>)
 8004b04:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b0e:	d10f      	bne.n	8004b30 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b1e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b2e:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004b3e:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d008      	beq.n	8004b60 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	e000      	b.n	8004b62 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004b60:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	08005195 	.word	0x08005195
 8004b78:	08005145 	.word	0x08005145

08004b7c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_SPI_TransmitReceive_IT+0x20>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e091      	b.n	8004cc0 <HAL_SPI_TransmitReceive_IT+0x144>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004baa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bb2:	7dbb      	ldrb	r3, [r7, #22]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d00d      	beq.n	8004bd4 <HAL_SPI_TransmitReceive_IT+0x58>
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bbe:	d106      	bne.n	8004bce <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_TransmitReceive_IT+0x52>
 8004bc8:	7dbb      	ldrb	r3, [r7, #22]
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d002      	beq.n	8004bd4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd2:	e070      	b.n	8004cb6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bea:	e064      	b.n	8004cb6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d003      	beq.n	8004c00 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	887a      	ldrh	r2, [r7, #2]
 8004c10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	887a      	ldrh	r2, [r7, #2]
 8004c16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	887a      	ldrh	r2, [r7, #2]
 8004c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	887a      	ldrh	r2, [r7, #2]
 8004c2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c36:	d906      	bls.n	8004c46 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <HAL_SPI_TransmitReceive_IT+0x150>)
 8004c3c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a23      	ldr	r2, [pc, #140]	; (8004cd0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004c42:	651a      	str	r2, [r3, #80]	; 0x50
 8004c44:	e005      	b.n	8004c52 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a22      	ldr	r2, [pc, #136]	; (8004cd4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004c4a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004c50:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c5a:	d802      	bhi.n	8004c62 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004c5c:	887b      	ldrh	r3, [r7, #2]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d908      	bls.n	8004c74 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	e007      	b.n	8004c84 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c82:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004c92:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b40      	cmp	r3, #64	; 0x40
 8004ca0:	d008      	beq.n	8004cb4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e000      	b.n	8004cb6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004cb4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	0800507f 	.word	0x0800507f
 8004cd0:	080050e5 	.word	0x080050e5
 8004cd4:	08004f2f 	.word	0x08004f2f
 8004cd8:	08004fed 	.word	0x08004fed

08004cdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10f      	bne.n	8004d20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	099b      	lsrs	r3, r3, #6
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	4798      	blx	r3
    return;
 8004d1e:	e0d7      	b.n	8004ed0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	085b      	lsrs	r3, r3, #1
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_SPI_IRQHandler+0x66>
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	09db      	lsrs	r3, r3, #7
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d004      	beq.n	8004d42 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
    return;
 8004d40:	e0c6      	b.n	8004ed0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10c      	bne.n	8004d68 <HAL_SPI_IRQHandler+0x8c>
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	099b      	lsrs	r3, r3, #6
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	0a1b      	lsrs	r3, r3, #8
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80b4 	beq.w	8004ed0 <HAL_SPI_IRQHandler+0x1f4>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	095b      	lsrs	r3, r3, #5
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 80ad 	beq.w	8004ed0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	099b      	lsrs	r3, r3, #6
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d023      	beq.n	8004dca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d011      	beq.n	8004db2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	e00b      	b.n	8004dca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
        return;
 8004dc8:	e082      	b.n	8004ed0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	095b      	lsrs	r3, r3, #5
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d014      	beq.n	8004e00 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dda:	f043 0201 	orr.w	r2, r3, #1
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004de2:	2300      	movs	r3, #0
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	f003 0301 	and.w	r3, r3, #1
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00c      	beq.n	8004e26 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	f043 0208 	orr.w	r2, r3, #8
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d04f      	beq.n	8004ece <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e3c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d104      	bne.n	8004e5a <HAL_SPI_IRQHandler+0x17e>
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d034      	beq.n	8004ec4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0203 	bic.w	r2, r2, #3
 8004e68:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d011      	beq.n	8004e96 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e76:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_SPI_IRQHandler+0x1fc>)
 8004e78:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fc ff5c 	bl	8001d3c <HAL_DMA_Abort_IT>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d016      	beq.n	8004ecc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	; (8004ed8 <HAL_SPI_IRQHandler+0x1fc>)
 8004ea4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc ff46 	bl	8001d3c <HAL_DMA_Abort_IT>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004ec2:	e003      	b.n	8004ecc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f813 	bl	8004ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004eca:	e000      	b.n	8004ece <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ecc:	bf00      	nop
    return;
 8004ece:	bf00      	nop
  }
}
 8004ed0:	3720      	adds	r7, #32
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	08004f05 	.word	0x08004f05

08004edc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff ffe5 	bl	8004ef0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	d923      	bls.n	8004f8a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4c:	b292      	uxth	r2, r2
 8004f4e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	1c9a      	adds	r2, r3, #2
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b02      	subs	r3, #2
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d11f      	bne.n	8004fb8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f86:	605a      	str	r2, [r3, #4]
 8004f88:	e016      	b.n	8004fb8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f103 020c 	add.w	r2, r3, #12
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	7812      	ldrb	r2, [r2, #0]
 8004f98:	b2d2      	uxtb	r2, r2
 8004f9a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10f      	bne.n	8004fe4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fd2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d102      	bne.n	8004fe4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fb00 	bl	80055e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d912      	bls.n	8005024 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	881a      	ldrh	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b02      	subs	r3, #2
 800501c:	b29a      	uxth	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005022:	e012      	b.n	800504a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005036:	1c5a      	adds	r2, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005040:	b29b      	uxth	r3, r3
 8005042:	3b01      	subs	r3, #1
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d110      	bne.n	8005076 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005062:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d102      	bne.n	8005076 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fab7 	bl	80055e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005076:	bf00      	nop
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	b292      	uxth	r2, r2
 8005092:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	1c9a      	adds	r2, r3, #2
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	3b01      	subs	r3, #1
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10f      	bne.n	80050dc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d102      	bne.n	80050dc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fa84 	bl	80055e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 80050dc:	bf00      	nop
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	881a      	ldrh	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fc:	1c9a      	adds	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d110      	bne.n	800513c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005128:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa54 	bl	80055e4 <SPI_CloseRxTx_ISR>
    }
  }
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f103 020c 	add.w	r2, r3, #12
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	7812      	ldrb	r2, [r2, #0]
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa6e 	bl	8005668 <SPI_CloseRx_ISR>
  }
}
 800518c:	bf00      	nop
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68da      	ldr	r2, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	b292      	uxth	r2, r2
 80051a8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	1c9a      	adds	r2, r3, #2
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fa48 	bl	8005668 <SPI_CloseRx_ISR>
  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fa55 	bl	80056c8 <SPI_CloseTx_ISR>
  }
}
 800521e:	bf00      	nop
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005232:	881a      	ldrh	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005256:	b29b      	uxth	r3, r3
 8005258:	2b00      	cmp	r3, #0
 800525a:	d102      	bne.n	8005262 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 fa33 	bl	80056c8 <SPI_CloseTx_ISR>
  }
}
 8005262:	bf00      	nop
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	603b      	str	r3, [r7, #0]
 8005278:	4613      	mov	r3, r2
 800527a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800527c:	f7fc fb0e 	bl	800189c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800528c:	f7fc fb06 	bl	800189c <HAL_GetTick>
 8005290:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005292:	4b39      	ldr	r3, [pc, #228]	; (8005378 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	015b      	lsls	r3, r3, #5
 8005298:	0d1b      	lsrs	r3, r3, #20
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	fb02 f303 	mul.w	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052a2:	e054      	b.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052aa:	d050      	beq.n	800534e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052ac:	f7fc faf6 	bl	800189c <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d902      	bls.n	80052c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d13d      	bne.n	800533e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052da:	d111      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052e4:	d004      	beq.n	80052f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ee:	d107      	bne.n	8005300 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005308:	d10f      	bne.n	800532a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005328:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2201      	movs	r2, #1
 800532e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e017      	b.n	800536e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005344:	2300      	movs	r3, #0
 8005346:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	3b01      	subs	r3, #1
 800534c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	79fb      	ldrb	r3, [r7, #7]
 8005368:	429a      	cmp	r2, r3
 800536a:	d19b      	bne.n	80052a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3720      	adds	r7, #32
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000000 	.word	0x20000000

0800537c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b08a      	sub	sp, #40	; 0x28
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800538e:	f7fc fa85 	bl	800189c <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	4413      	add	r3, r2
 800539c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800539e:	f7fc fa7d 	bl	800189c <HAL_GetTick>
 80053a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053ac:	4b3d      	ldr	r3, [pc, #244]	; (80054a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	00da      	lsls	r2, r3, #3
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	0d1b      	lsrs	r3, r3, #20
 80053bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053c4:	e060      	b.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80053cc:	d107      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x62>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d104      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d050      	beq.n	8005488 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e6:	f7fc fa59 	bl	800189c <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d902      	bls.n	80053fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d13d      	bne.n	8005478 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800540a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005414:	d111      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800541e:	d004      	beq.n	800542a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005428:	d107      	bne.n	800543a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005438:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005442:	d10f      	bne.n	8005464 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e010      	b.n	800549a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	3b01      	subs	r3, #1
 8005486:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	d196      	bne.n	80053c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3728      	adds	r7, #40	; 0x28
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	20000000 	.word	0x20000000

080054a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054bc:	d111      	bne.n	80054e2 <SPI_EndRxTransaction+0x3a>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c6:	d004      	beq.n	80054d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d0:	d107      	bne.n	80054e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2200      	movs	r2, #0
 80054ea:	2180      	movs	r1, #128	; 0x80
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f7ff febd 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fc:	f043 0220 	orr.w	r2, r3, #32
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e023      	b.n	8005550 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005510:	d11d      	bne.n	800554e <SPI_EndRxTransaction+0xa6>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800551a:	d004      	beq.n	8005526 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005524:	d113      	bne.n	800554e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7ff ff22 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005542:	f043 0220 	orr.w	r2, r3, #32
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e000      	b.n	8005550 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff ff03 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005580:	f043 0220 	orr.w	r2, r3, #32
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e027      	b.n	80055dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	2200      	movs	r2, #0
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fe68 	bl	800526c <SPI_WaitFlagStateUntilTimeout>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d007      	beq.n	80055b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	f043 0220 	orr.w	r2, r3, #32
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e014      	b.n	80055dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f7ff fedc 	bl	800537c <SPI_WaitFifoStateUntilTimeout>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ce:	f043 0220 	orr.w	r2, r3, #32
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e000      	b.n	80055dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055ec:	f7fc f956 	bl	800189c <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0220 	bic.w	r2, r2, #32
 8005600:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	2164      	movs	r1, #100	; 0x64
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff ffa6 	bl	8005558 <SPI_EndRxTxTransaction>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	f043 0220 	orr.w	r2, r3, #32
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005622:	2b00      	cmp	r3, #0
 8005624:	d115      	bne.n	8005652 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b04      	cmp	r3, #4
 8005630:	d107      	bne.n	8005642 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f002 fa28 	bl	8007a90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005640:	e00e      	b.n	8005660 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f7ff fc46 	bl	8004edc <HAL_SPI_TxRxCpltCallback>
}
 8005650:	e006      	b.n	8005660 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7ff fc48 	bl	8004ef0 <HAL_SPI_ErrorCallback>
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800567e:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005680:	f7fc f90c 	bl	800189c <HAL_GetTick>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	2164      	movs	r1, #100	; 0x64
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff0c 	bl	80054a8 <SPI_EndRxTransaction>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569a:	f043 0220 	orr.w	r2, r3, #32
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d103      	bne.n	80056ba <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f002 f9ec 	bl	8007a90 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80056b8:	e002      	b.n	80056c0 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff fc18 	bl	8004ef0 <HAL_SPI_ErrorCallback>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056d0:	f7fc f8e4 	bl	800189c <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056e4:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	2164      	movs	r1, #100	; 0x64
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff ff34 	bl	8005558 <SPI_EndRxTxTransaction>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d005      	beq.n	8005702 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056fa:	f043 0220 	orr.w	r2, r3, #32
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10a      	bne.n	8005720 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800570a:	2300      	movs	r3, #0
 800570c:	60bb      	str	r3, [r7, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
 800571e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7ff fbdd 	bl	8004ef0 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8005736:	e002      	b.n	800573e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f002 f9bd 	bl	8007ab8 <HAL_SPI_TxCpltCallback>
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e049      	b.n	80057ec <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d106      	bne.n	8005772 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f841 	bl	80057f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2202      	movs	r2, #2
 8005776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f000 f9f7 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005816:	b2db      	uxtb	r3, r3
 8005818:	2b01      	cmp	r3, #1
 800581a:	d001      	beq.n	8005820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e04f      	b.n	80058c0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a23      	ldr	r2, [pc, #140]	; (80058cc <HAL_TIM_Base_Start_IT+0xc4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01d      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584a:	d018      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1f      	ldr	r2, [pc, #124]	; (80058d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d013      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1e      	ldr	r2, [pc, #120]	; (80058d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d00e      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1c      	ldr	r2, [pc, #112]	; (80058d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d009      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1b      	ldr	r2, [pc, #108]	; (80058dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d004      	beq.n	800587e <HAL_TIM_Base_Start_IT+0x76>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a19      	ldr	r2, [pc, #100]	; (80058e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d115      	bne.n	80058aa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	4b17      	ldr	r3, [pc, #92]	; (80058e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005886:	4013      	ands	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b06      	cmp	r3, #6
 800588e:	d015      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0xb4>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005896:	d011      	beq.n	80058bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a8:	e008      	b.n	80058bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	e000      	b.n	80058be <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800
 80058d8:	40000c00 	.word	0x40000c00
 80058dc:	40013400 	.word	0x40013400
 80058e0:	40014000 	.word	0x40014000
 80058e4:	00010007 	.word	0x00010007

080058e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d122      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	2b02      	cmp	r3, #2
 800590a:	d11b      	bne.n	8005944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f06f 0202 	mvn.w	r2, #2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f905 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005930:	e005      	b.n	800593e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f8f7 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f908 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	f003 0304 	and.w	r3, r3, #4
 800594e:	2b04      	cmp	r3, #4
 8005950:	d122      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d11b      	bne.n	8005998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f06f 0204 	mvn.w	r2, #4
 8005968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f8db 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005984:	e005      	b.n	8005992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f8cd 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8de 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d122      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b08      	cmp	r3, #8
 80059b2:	d11b      	bne.n	80059ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0208 	mvn.w	r2, #8
 80059bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2204      	movs	r2, #4
 80059c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8b1 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8a3 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8b4 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f003 0310 	and.w	r3, r3, #16
 80059f6:	2b10      	cmp	r3, #16
 80059f8:	d122      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d11b      	bne.n	8005a40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f06f 0210 	mvn.w	r2, #16
 8005a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2208      	movs	r2, #8
 8005a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f887 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005a2c:	e005      	b.n	8005a3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f879 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f88a 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d10e      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0201 	mvn.w	r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7fb fa3e 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a76:	2b80      	cmp	r3, #128	; 0x80
 8005a78:	d10e      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f914 	bl	8005cc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aa6:	d10e      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab2:	2b80      	cmp	r3, #128	; 0x80
 8005ab4:	d107      	bne.n	8005ac6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f907 	bl	8005cd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b40      	cmp	r3, #64	; 0x40
 8005ad2:	d10e      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d107      	bne.n	8005af2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 f838 	bl	8005b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0320 	and.w	r3, r3, #32
 8005afc:	2b20      	cmp	r3, #32
 8005afe:	d10e      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d107      	bne.n	8005b1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0220 	mvn.w	r2, #32
 8005b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8c7 	bl	8005cac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b1e:	bf00      	nop
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a40      	ldr	r2, [pc, #256]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a3d      	ldr	r2, [pc, #244]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3c      	ldr	r2, [pc, #240]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3b      	ldr	r2, [pc, #236]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3a      	ldr	r2, [pc, #232]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01f      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01b      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d017      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2b      	ldr	r2, [pc, #172]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00f      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a29      	ldr	r2, [pc, #164]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <TIM_Base_SetConfig+0x12c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <TIM_Base_SetConfig+0x130>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d108      	bne.n	8005c24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <TIM_Base_SetConfig+0x12c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <TIM_Base_SetConfig+0x130>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d103      	bne.n	8005c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	615a      	str	r2, [r3, #20]
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cb4:	bf00      	nop
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e040      	b.n	8005d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fb faaa 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2224      	movs	r2, #36	; 0x24
 8005d14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0201 	bic.w	r2, r2, #1
 8005d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 f82c 	bl	8005d84 <UART_SetConfig>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d101      	bne.n	8005d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e022      	b.n	8005d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fad8 	bl	80062f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 0201 	orr.w	r2, r2, #1
 8005d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 fb5f 	bl	8006438 <UART_CheckIdleState>
 8005d7a:	4603      	mov	r3, r0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d88:	b08a      	sub	sp, #40	; 0x28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	689a      	ldr	r2, [r3, #8]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	431a      	orrs	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4ba4      	ldr	r3, [pc, #656]	; (8006044 <UART_SetConfig+0x2c0>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	699b      	ldr	r3, [r3, #24]
 8005dda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a99      	ldr	r2, [pc, #612]	; (8006048 <UART_SetConfig+0x2c4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dec:	4313      	orrs	r3, r2
 8005dee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a90      	ldr	r2, [pc, #576]	; (800604c <UART_SetConfig+0x2c8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d126      	bne.n	8005e5c <UART_SetConfig+0xd8>
 8005e0e:	4b90      	ldr	r3, [pc, #576]	; (8006050 <UART_SetConfig+0x2cc>)
 8005e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e14:	f003 0303 	and.w	r3, r3, #3
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d81b      	bhi.n	8005e54 <UART_SetConfig+0xd0>
 8005e1c:	a201      	add	r2, pc, #4	; (adr r2, 8005e24 <UART_SetConfig+0xa0>)
 8005e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e22:	bf00      	nop
 8005e24:	08005e35 	.word	0x08005e35
 8005e28:	08005e45 	.word	0x08005e45
 8005e2c:	08005e3d 	.word	0x08005e3d
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3a:	e116      	b.n	800606a <UART_SetConfig+0x2e6>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e112      	b.n	800606a <UART_SetConfig+0x2e6>
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	e10e      	b.n	800606a <UART_SetConfig+0x2e6>
 8005e4c:	2308      	movs	r3, #8
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e52:	e10a      	b.n	800606a <UART_SetConfig+0x2e6>
 8005e54:	2310      	movs	r3, #16
 8005e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e5a:	e106      	b.n	800606a <UART_SetConfig+0x2e6>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a7c      	ldr	r2, [pc, #496]	; (8006054 <UART_SetConfig+0x2d0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d138      	bne.n	8005ed8 <UART_SetConfig+0x154>
 8005e66:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <UART_SetConfig+0x2cc>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f003 030c 	and.w	r3, r3, #12
 8005e70:	2b0c      	cmp	r3, #12
 8005e72:	d82d      	bhi.n	8005ed0 <UART_SetConfig+0x14c>
 8005e74:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0xf8>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005eb1 	.word	0x08005eb1
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	08005ed1 	.word	0x08005ed1
 8005e88:	08005ed1 	.word	0x08005ed1
 8005e8c:	08005ec1 	.word	0x08005ec1
 8005e90:	08005ed1 	.word	0x08005ed1
 8005e94:	08005ed1 	.word	0x08005ed1
 8005e98:	08005ed1 	.word	0x08005ed1
 8005e9c:	08005eb9 	.word	0x08005eb9
 8005ea0:	08005ed1 	.word	0x08005ed1
 8005ea4:	08005ed1 	.word	0x08005ed1
 8005ea8:	08005ed1 	.word	0x08005ed1
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e0d8      	b.n	800606a <UART_SetConfig+0x2e6>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ebe:	e0d4      	b.n	800606a <UART_SetConfig+0x2e6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ec6:	e0d0      	b.n	800606a <UART_SetConfig+0x2e6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ece:	e0cc      	b.n	800606a <UART_SetConfig+0x2e6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ed6:	e0c8      	b.n	800606a <UART_SetConfig+0x2e6>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a5e      	ldr	r2, [pc, #376]	; (8006058 <UART_SetConfig+0x2d4>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d125      	bne.n	8005f2e <UART_SetConfig+0x1aa>
 8005ee2:	4b5b      	ldr	r3, [pc, #364]	; (8006050 <UART_SetConfig+0x2cc>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d016      	beq.n	8005f1e <UART_SetConfig+0x19a>
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d818      	bhi.n	8005f26 <UART_SetConfig+0x1a2>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d00a      	beq.n	8005f0e <UART_SetConfig+0x18a>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d814      	bhi.n	8005f26 <UART_SetConfig+0x1a2>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <UART_SetConfig+0x182>
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d008      	beq.n	8005f16 <UART_SetConfig+0x192>
 8005f04:	e00f      	b.n	8005f26 <UART_SetConfig+0x1a2>
 8005f06:	2300      	movs	r3, #0
 8005f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0c:	e0ad      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f14:	e0a9      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f16:	2304      	movs	r3, #4
 8005f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1c:	e0a5      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f24:	e0a1      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f26:	2310      	movs	r3, #16
 8005f28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2c:	e09d      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a4a      	ldr	r2, [pc, #296]	; (800605c <UART_SetConfig+0x2d8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d125      	bne.n	8005f84 <UART_SetConfig+0x200>
 8005f38:	4b45      	ldr	r3, [pc, #276]	; (8006050 <UART_SetConfig+0x2cc>)
 8005f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f42:	2bc0      	cmp	r3, #192	; 0xc0
 8005f44:	d016      	beq.n	8005f74 <UART_SetConfig+0x1f0>
 8005f46:	2bc0      	cmp	r3, #192	; 0xc0
 8005f48:	d818      	bhi.n	8005f7c <UART_SetConfig+0x1f8>
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d00a      	beq.n	8005f64 <UART_SetConfig+0x1e0>
 8005f4e:	2b80      	cmp	r3, #128	; 0x80
 8005f50:	d814      	bhi.n	8005f7c <UART_SetConfig+0x1f8>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d002      	beq.n	8005f5c <UART_SetConfig+0x1d8>
 8005f56:	2b40      	cmp	r3, #64	; 0x40
 8005f58:	d008      	beq.n	8005f6c <UART_SetConfig+0x1e8>
 8005f5a:	e00f      	b.n	8005f7c <UART_SetConfig+0x1f8>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f62:	e082      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f64:	2302      	movs	r3, #2
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6a:	e07e      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f72:	e07a      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7a:	e076      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f82:	e072      	b.n	800606a <UART_SetConfig+0x2e6>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a35      	ldr	r2, [pc, #212]	; (8006060 <UART_SetConfig+0x2dc>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d12a      	bne.n	8005fe4 <UART_SetConfig+0x260>
 8005f8e:	4b30      	ldr	r3, [pc, #192]	; (8006050 <UART_SetConfig+0x2cc>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f9c:	d01a      	beq.n	8005fd4 <UART_SetConfig+0x250>
 8005f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fa2:	d81b      	bhi.n	8005fdc <UART_SetConfig+0x258>
 8005fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fa8:	d00c      	beq.n	8005fc4 <UART_SetConfig+0x240>
 8005faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fae:	d815      	bhi.n	8005fdc <UART_SetConfig+0x258>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <UART_SetConfig+0x238>
 8005fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb8:	d008      	beq.n	8005fcc <UART_SetConfig+0x248>
 8005fba:	e00f      	b.n	8005fdc <UART_SetConfig+0x258>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e052      	b.n	800606a <UART_SetConfig+0x2e6>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fca:	e04e      	b.n	800606a <UART_SetConfig+0x2e6>
 8005fcc:	2304      	movs	r3, #4
 8005fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fd2:	e04a      	b.n	800606a <UART_SetConfig+0x2e6>
 8005fd4:	2308      	movs	r3, #8
 8005fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fda:	e046      	b.n	800606a <UART_SetConfig+0x2e6>
 8005fdc:	2310      	movs	r3, #16
 8005fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fe2:	e042      	b.n	800606a <UART_SetConfig+0x2e6>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a17      	ldr	r2, [pc, #92]	; (8006048 <UART_SetConfig+0x2c4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d13a      	bne.n	8006064 <UART_SetConfig+0x2e0>
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <UART_SetConfig+0x2cc>)
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ffc:	d01a      	beq.n	8006034 <UART_SetConfig+0x2b0>
 8005ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006002:	d81b      	bhi.n	800603c <UART_SetConfig+0x2b8>
 8006004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006008:	d00c      	beq.n	8006024 <UART_SetConfig+0x2a0>
 800600a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800600e:	d815      	bhi.n	800603c <UART_SetConfig+0x2b8>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <UART_SetConfig+0x298>
 8006014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006018:	d008      	beq.n	800602c <UART_SetConfig+0x2a8>
 800601a:	e00f      	b.n	800603c <UART_SetConfig+0x2b8>
 800601c:	2300      	movs	r3, #0
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006022:	e022      	b.n	800606a <UART_SetConfig+0x2e6>
 8006024:	2302      	movs	r3, #2
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800602a:	e01e      	b.n	800606a <UART_SetConfig+0x2e6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006032:	e01a      	b.n	800606a <UART_SetConfig+0x2e6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800603a:	e016      	b.n	800606a <UART_SetConfig+0x2e6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006042:	e012      	b.n	800606a <UART_SetConfig+0x2e6>
 8006044:	efff69f3 	.word	0xefff69f3
 8006048:	40008000 	.word	0x40008000
 800604c:	40013800 	.word	0x40013800
 8006050:	40021000 	.word	0x40021000
 8006054:	40004400 	.word	0x40004400
 8006058:	40004800 	.word	0x40004800
 800605c:	40004c00 	.word	0x40004c00
 8006060:	40005000 	.word	0x40005000
 8006064:	2310      	movs	r3, #16
 8006066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a9f      	ldr	r2, [pc, #636]	; (80062ec <UART_SetConfig+0x568>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d17a      	bne.n	800616a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006078:	2b08      	cmp	r3, #8
 800607a:	d824      	bhi.n	80060c6 <UART_SetConfig+0x342>
 800607c:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <UART_SetConfig+0x300>)
 800607e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006082:	bf00      	nop
 8006084:	080060a9 	.word	0x080060a9
 8006088:	080060c7 	.word	0x080060c7
 800608c:	080060b1 	.word	0x080060b1
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060b7 	.word	0x080060b7
 8006098:	080060c7 	.word	0x080060c7
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080060c7 	.word	0x080060c7
 80060a4:	080060bf 	.word	0x080060bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a8:	f7fd fa92 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80060ac:	61f8      	str	r0, [r7, #28]
        break;
 80060ae:	e010      	b.n	80060d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060b0:	4b8f      	ldr	r3, [pc, #572]	; (80062f0 <UART_SetConfig+0x56c>)
 80060b2:	61fb      	str	r3, [r7, #28]
        break;
 80060b4:	e00d      	b.n	80060d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b6:	f7fd f9f3 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 80060ba:	61f8      	str	r0, [r7, #28]
        break;
 80060bc:	e009      	b.n	80060d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060c2:	61fb      	str	r3, [r7, #28]
        break;
 80060c4:	e005      	b.n	80060d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80fb 	beq.w	80062d0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	4413      	add	r3, r2
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d305      	bcc.n	80060f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060f0:	69fa      	ldr	r2, [r7, #28]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d903      	bls.n	80060fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060fc:	e0e8      	b.n	80062d0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	2200      	movs	r2, #0
 8006102:	461c      	mov	r4, r3
 8006104:	4615      	mov	r5, r2
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	f04f 0300 	mov.w	r3, #0
 800610e:	022b      	lsls	r3, r5, #8
 8006110:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006114:	0222      	lsls	r2, r4, #8
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	6849      	ldr	r1, [r1, #4]
 800611a:	0849      	lsrs	r1, r1, #1
 800611c:	2000      	movs	r0, #0
 800611e:	4688      	mov	r8, r1
 8006120:	4681      	mov	r9, r0
 8006122:	eb12 0a08 	adds.w	sl, r2, r8
 8006126:	eb43 0b09 	adc.w	fp, r3, r9
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	603b      	str	r3, [r7, #0]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006138:	4650      	mov	r0, sl
 800613a:	4659      	mov	r1, fp
 800613c:	f7fa f8a0 	bl	8000280 <__aeabi_uldivmod>
 8006140:	4602      	mov	r2, r0
 8006142:	460b      	mov	r3, r1
 8006144:	4613      	mov	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800614e:	d308      	bcc.n	8006162 <UART_SetConfig+0x3de>
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006156:	d204      	bcs.n	8006162 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e0b6      	b.n	80062d0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006168:	e0b2      	b.n	80062d0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006172:	d15e      	bne.n	8006232 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006178:	2b08      	cmp	r3, #8
 800617a:	d828      	bhi.n	80061ce <UART_SetConfig+0x44a>
 800617c:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <UART_SetConfig+0x400>)
 800617e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006182:	bf00      	nop
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	080061cf 	.word	0x080061cf
 8006194:	080061bf 	.word	0x080061bf
 8006198:	080061cf 	.word	0x080061cf
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061cf 	.word	0x080061cf
 80061a4:	080061c7 	.word	0x080061c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7fd fa12 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80061ac:	61f8      	str	r0, [r7, #28]
        break;
 80061ae:	e014      	b.n	80061da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fd fa24 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 80061b4:	61f8      	str	r0, [r7, #28]
        break;
 80061b6:	e010      	b.n	80061da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b4d      	ldr	r3, [pc, #308]	; (80062f0 <UART_SetConfig+0x56c>)
 80061ba:	61fb      	str	r3, [r7, #28]
        break;
 80061bc:	e00d      	b.n	80061da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fd f96f 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 80061c2:	61f8      	str	r0, [r7, #28]
        break;
 80061c4:	e009      	b.n	80061da <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ca:	61fb      	str	r3, [r7, #28]
        break;
 80061cc:	e005      	b.n	80061da <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d077      	beq.n	80062d0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	005a      	lsls	r2, r3, #1
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	441a      	add	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b0f      	cmp	r3, #15
 80061fa:	d916      	bls.n	800622a <UART_SetConfig+0x4a6>
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006202:	d212      	bcs.n	800622a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	b29b      	uxth	r3, r3
 8006208:	f023 030f 	bic.w	r3, r3, #15
 800620c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	085b      	lsrs	r3, r3, #1
 8006212:	b29b      	uxth	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	b29a      	uxth	r2, r3
 800621a:	8afb      	ldrh	r3, [r7, #22]
 800621c:	4313      	orrs	r3, r2
 800621e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	8afa      	ldrh	r2, [r7, #22]
 8006226:	60da      	str	r2, [r3, #12]
 8006228:	e052      	b.n	80062d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006230:	e04e      	b.n	80062d0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006236:	2b08      	cmp	r3, #8
 8006238:	d827      	bhi.n	800628a <UART_SetConfig+0x506>
 800623a:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0x4bc>)
 800623c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006240:	08006265 	.word	0x08006265
 8006244:	0800626d 	.word	0x0800626d
 8006248:	08006275 	.word	0x08006275
 800624c:	0800628b 	.word	0x0800628b
 8006250:	0800627b 	.word	0x0800627b
 8006254:	0800628b 	.word	0x0800628b
 8006258:	0800628b 	.word	0x0800628b
 800625c:	0800628b 	.word	0x0800628b
 8006260:	08006283 	.word	0x08006283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006264:	f7fd f9b4 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8006268:	61f8      	str	r0, [r7, #28]
        break;
 800626a:	e014      	b.n	8006296 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626c:	f7fd f9c6 	bl	80035fc <HAL_RCC_GetPCLK2Freq>
 8006270:	61f8      	str	r0, [r7, #28]
        break;
 8006272:	e010      	b.n	8006296 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006274:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <UART_SetConfig+0x56c>)
 8006276:	61fb      	str	r3, [r7, #28]
        break;
 8006278:	e00d      	b.n	8006296 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800627a:	f7fd f911 	bl	80034a0 <HAL_RCC_GetSysClockFreq>
 800627e:	61f8      	str	r0, [r7, #28]
        break;
 8006280:	e009      	b.n	8006296 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006286:	61fb      	str	r3, [r7, #28]
        break;
 8006288:	e005      	b.n	8006296 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006294:	bf00      	nop
    }

    if (pclk != 0U)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d019      	beq.n	80062d0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	085a      	lsrs	r2, r3, #1
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	441a      	add	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	2b0f      	cmp	r3, #15
 80062b4:	d909      	bls.n	80062ca <UART_SetConfig+0x546>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062bc:	d205      	bcs.n	80062ca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60da      	str	r2, [r3, #12]
 80062c8:	e002      	b.n	80062d0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80062dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3728      	adds	r7, #40	; 0x28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ea:	bf00      	nop
 80062ec:	40008000 	.word	0x40008000
 80062f0:	00f42400 	.word	0x00f42400

080062f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	f003 0301 	and.w	r3, r3, #1
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00a      	beq.n	8006340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00a      	beq.n	8006362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	f003 0308 	and.w	r3, r3, #8
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00a      	beq.n	8006384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	f003 0310 	and.w	r3, r3, #16
 800638c:	2b00      	cmp	r3, #0
 800638e:	d00a      	beq.n	80063a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d01a      	beq.n	800640a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f2:	d10a      	bne.n	800640a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00a      	beq.n	800642c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	605a      	str	r2, [r3, #4]
  }
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af02      	add	r7, sp, #8
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006448:	f7fb fa28 	bl	800189c <HAL_GetTick>
 800644c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 0308 	and.w	r3, r3, #8
 8006458:	2b08      	cmp	r3, #8
 800645a:	d10e      	bne.n	800647a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800645c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f82d 	bl	80064ca <UART_WaitOnFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e023      	b.n	80064c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0304 	and.w	r3, r3, #4
 8006484:	2b04      	cmp	r3, #4
 8006486:	d10e      	bne.n	80064a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006488:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f817 	bl	80064ca <UART_WaitOnFlagUntilTimeout>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e00d      	b.n	80064c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2220      	movs	r2, #32
 80064b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b09c      	sub	sp, #112	; 0x70
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064da:	e0a5      	b.n	8006628 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	f000 80a1 	beq.w	8006628 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e6:	f7fb f9d9 	bl	800189c <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d302      	bcc.n	80064fc <UART_WaitOnFlagUntilTimeout+0x32>
 80064f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d13e      	bne.n	800657a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006504:	e853 3f00 	ldrex	r3, [r3]
 8006508:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800650a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006510:	667b      	str	r3, [r7, #100]	; 0x64
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800651c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006520:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006522:	e841 2300 	strex	r3, r2, [r1]
 8006526:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800652a:	2b00      	cmp	r3, #0
 800652c:	d1e6      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3308      	adds	r3, #8
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800653e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006540:	f023 0301 	bic.w	r3, r3, #1
 8006544:	663b      	str	r3, [r7, #96]	; 0x60
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	3308      	adds	r3, #8
 800654c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800654e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800655c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e5      	bne.n	800652e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e067      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b00      	cmp	r3, #0
 8006586:	d04f      	beq.n	8006628 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006596:	d147      	bne.n	8006628 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
 80065c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3308      	adds	r3, #8
 80065da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	613b      	str	r3, [r7, #16]
   return(result);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f023 0301 	bic.w	r3, r3, #1
 80065ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	3308      	adds	r3, #8
 80065f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065f4:	623a      	str	r2, [r7, #32]
 80065f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	69f9      	ldr	r1, [r7, #28]
 80065fa:	6a3a      	ldr	r2, [r7, #32]
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	61bb      	str	r3, [r7, #24]
   return(result);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2220      	movs	r2, #32
 800660c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2220      	movs	r2, #32
 8006612:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2220      	movs	r2, #32
 8006618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e010      	b.n	800664a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69da      	ldr	r2, [r3, #28]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	4013      	ands	r3, r2
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	bf0c      	ite	eq
 8006638:	2301      	moveq	r3, #1
 800663a:	2300      	movne	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	79fb      	ldrb	r3, [r7, #7]
 8006642:	429a      	cmp	r2, r3
 8006644:	f43f af4a 	beq.w	80064dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3770      	adds	r7, #112	; 0x70
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006652:	b084      	sub	sp, #16
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	f107 001c 	add.w	r0, r7, #28
 8006660:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fa6f 	bl	8006b54 <USB_CoreReset>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800667a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
 800668c:	e005      	b.n	800669a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006692:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800669a:	7bfb      	ldrb	r3, [r7, #15]
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066a6:	b004      	add	sp, #16
 80066a8:	4770      	bx	lr

080066aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b083      	sub	sp, #12
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f023 0201 	bic.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d115      	bne.n	800671a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066fa:	2001      	movs	r0, #1
 80066fc:	f7fb f8da 	bl	80018b4 <HAL_Delay>
      ms++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3301      	adds	r3, #1
 8006704:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 fa16 	bl	8006b38 <USB_GetMode>
 800670c:	4603      	mov	r3, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d01e      	beq.n	8006750 <USB_SetCurrentMode+0x84>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b31      	cmp	r3, #49	; 0x31
 8006716:	d9f0      	bls.n	80066fa <USB_SetCurrentMode+0x2e>
 8006718:	e01a      	b.n	8006750 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d115      	bne.n	800674c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800672c:	2001      	movs	r0, #1
 800672e:	f7fb f8c1 	bl	80018b4 <HAL_Delay>
      ms++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f9fd 	bl	8006b38 <USB_GetMode>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <USB_SetCurrentMode+0x84>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b31      	cmp	r3, #49	; 0x31
 8006748:	d9f0      	bls.n	800672c <USB_SetCurrentMode+0x60>
 800674a:	e001      	b.n	8006750 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e005      	b.n	800675c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2b32      	cmp	r3, #50	; 0x32
 8006754:	d101      	bne.n	800675a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e000      	b.n	800675c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006764:	b084      	sub	sp, #16
 8006766:	b580      	push	{r7, lr}
 8006768:	b086      	sub	sp, #24
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006772:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006776:	2300      	movs	r3, #0
 8006778:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800677e:	2300      	movs	r3, #0
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	e009      	b.n	8006798 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3340      	adds	r3, #64	; 0x40
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	2200      	movs	r2, #0
 8006790:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	3301      	adds	r3, #1
 8006796:	613b      	str	r3, [r7, #16]
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	2b0e      	cmp	r3, #14
 800679c:	d9f2      	bls.n	8006784 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800679e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11c      	bne.n	80067de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	68fa      	ldr	r2, [r7, #12]
 80067ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067b2:	f043 0302 	orr.w	r3, r3, #2
 80067b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	e005      	b.n	80067ea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80067f0:	461a      	mov	r2, r3
 80067f2:	2300      	movs	r3, #0
 80067f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fc:	4619      	mov	r1, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	461a      	mov	r2, r3
 8006806:	680b      	ldr	r3, [r1, #0]
 8006808:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800680a:	2103      	movs	r1, #3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f959 	bl	8006ac4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006812:	2110      	movs	r1, #16
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f8f1 	bl	80069fc <USB_FlushTxFifo>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 f91d 	bl	8006a64 <USB_FlushRxFifo>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683a:	461a      	mov	r2, r3
 800683c:	2300      	movs	r3, #0
 800683e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006846:	461a      	mov	r2, r3
 8006848:	2300      	movs	r3, #0
 800684a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006852:	461a      	mov	r2, r3
 8006854:	2300      	movs	r3, #0
 8006856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
 800685c:	e043      	b.n	80068e6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	015a      	lsls	r2, r3, #5
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	4413      	add	r3, r2
 8006866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006874:	d118      	bne.n	80068a8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e013      	b.n	80068ba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e008      	b.n	80068ba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	015a      	lsls	r2, r3, #5
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b4:	461a      	mov	r2, r3
 80068b6:	2300      	movs	r3, #0
 80068b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c6:	461a      	mov	r2, r3
 80068c8:	2300      	movs	r3, #0
 80068ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	461a      	mov	r2, r3
 80068da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80068de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	3301      	adds	r3, #1
 80068e4:	613b      	str	r3, [r7, #16]
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d3b7      	bcc.n	800685e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e043      	b.n	800697c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	015a      	lsls	r2, r3, #5
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	4413      	add	r3, r2
 80068fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800690a:	d118      	bne.n	800693e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691e:	461a      	mov	r2, r3
 8006920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	e013      	b.n	8006950 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	461a      	mov	r2, r3
 8006936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	e008      	b.n	8006950 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	2300      	movs	r3, #0
 8006960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	461a      	mov	r2, r3
 8006970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	3301      	adds	r3, #1
 800697a:	613b      	str	r3, [r7, #16]
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	429a      	cmp	r2, r3
 8006982:	d3b7      	bcc.n	80068f4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006996:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80069a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f043 0210 	orr.w	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699a      	ldr	r2, [r3, #24]
 80069b6:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <USB_DevInit+0x294>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	f043 0208 	orr.w	r2, r3, #8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d107      	bne.n	80069e6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069de:	f043 0304 	orr.w	r3, r3, #4
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069f2:	b004      	add	sp, #16
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	803c3800 	.word	0x803c3800

080069fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4a13      	ldr	r2, [pc, #76]	; (8006a60 <USB_FlushTxFifo+0x64>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d901      	bls.n	8006a1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	e01b      	b.n	8006a54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	daf2      	bge.n	8006a0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	019b      	lsls	r3, r3, #6
 8006a2c:	f043 0220 	orr.w	r2, r3, #32
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3301      	adds	r3, #1
 8006a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	4a08      	ldr	r2, [pc, #32]	; (8006a60 <USB_FlushTxFifo+0x64>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d901      	bls.n	8006a46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e006      	b.n	8006a54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	f003 0320 	and.w	r3, r3, #32
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d0f0      	beq.n	8006a34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	00030d40 	.word	0x00030d40

08006a64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	4a11      	ldr	r2, [pc, #68]	; (8006ac0 <USB_FlushRxFifo+0x5c>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d901      	bls.n	8006a82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e018      	b.n	8006ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	daf2      	bge.n	8006a70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2210      	movs	r2, #16
 8006a92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3301      	adds	r3, #1
 8006a98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a08      	ldr	r2, [pc, #32]	; (8006ac0 <USB_FlushRxFifo+0x5c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d901      	bls.n	8006aa6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006aa2:	2303      	movs	r3, #3
 8006aa4:	e006      	b.n	8006ab4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f003 0310 	and.w	r3, r3, #16
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d0f0      	beq.n	8006a94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	00030d40 	.word	0x00030d40

08006ac4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	68f9      	ldr	r1, [r7, #12]
 8006ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b24:	f043 0302 	orr.w	r3, r3, #2
 8006b28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0301 	and.w	r3, r3, #1
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	3301      	adds	r3, #1
 8006b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a13      	ldr	r2, [pc, #76]	; (8006bb8 <USB_CoreReset+0x64>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e01b      	b.n	8006baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	daf2      	bge.n	8006b60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	f043 0201 	orr.w	r2, r3, #1
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <USB_CoreReset+0x64>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d901      	bls.n	8006b9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e006      	b.n	8006baa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	f003 0301 	and.w	r3, r3, #1
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d0f0      	beq.n	8006b8a <USB_CoreReset+0x36>

  return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	00030d40 	.word	0x00030d40

08006bbc <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	2b2f      	cmp	r3, #47	; 0x2f
 8006bca:	d906      	bls.n	8006bda <Hex2Num+0x1e>
 8006bcc:	79fb      	ldrb	r3, [r7, #7]
 8006bce:	2b39      	cmp	r3, #57	; 0x39
 8006bd0:	d803      	bhi.n	8006bda <Hex2Num+0x1e>
        return a - '0';
 8006bd2:	79fb      	ldrb	r3, [r7, #7]
 8006bd4:	3b30      	subs	r3, #48	; 0x30
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	e014      	b.n	8006c04 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b60      	cmp	r3, #96	; 0x60
 8006bde:	d906      	bls.n	8006bee <Hex2Num+0x32>
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	2b66      	cmp	r3, #102	; 0x66
 8006be4:	d803      	bhi.n	8006bee <Hex2Num+0x32>
        return (a - 'a') + 10;
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	3b57      	subs	r3, #87	; 0x57
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	e00a      	b.n	8006c04 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d906      	bls.n	8006c02 <Hex2Num+0x46>
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b46      	cmp	r3, #70	; 0x46
 8006bf8:	d803      	bhi.n	8006c02 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8006bfa:	79fb      	ldrb	r3, [r7, #7]
 8006bfc:	3b37      	subs	r3, #55	; 0x37
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	e000      	b.n	8006c04 <Hex2Num+0x48>
    }

    return 0;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006c22:	e012      	b.n	8006c4a <ParseHexNumber+0x3a>
        sum <<= 4;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	011b      	lsls	r3, r3, #4
 8006c28:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff ffc4 	bl	8006bbc <Hex2Num>
 8006c34:	4603      	mov	r3, r0
 8006c36:	461a      	mov	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
        ptr++;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3301      	adds	r3, #1
 8006c42:	607b      	str	r3, [r7, #4]
        i++;
 8006c44:	7afb      	ldrb	r3, [r7, #11]
 8006c46:	3301      	adds	r3, #1
 8006c48:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b2f      	cmp	r3, #47	; 0x2f
 8006c50:	d903      	bls.n	8006c5a <ParseHexNumber+0x4a>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b39      	cmp	r3, #57	; 0x39
 8006c58:	d9e4      	bls.n	8006c24 <ParseHexNumber+0x14>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b60      	cmp	r3, #96	; 0x60
 8006c60:	d903      	bls.n	8006c6a <ParseHexNumber+0x5a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b66      	cmp	r3, #102	; 0x66
 8006c68:	d9dc      	bls.n	8006c24 <ParseHexNumber+0x14>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d903      	bls.n	8006c7a <ParseHexNumber+0x6a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b46      	cmp	r3, #70	; 0x46
 8006c78:	d9d4      	bls.n	8006c24 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d002      	beq.n	8006c86 <ParseHexNumber+0x76>
        *cnt = i;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	7afa      	ldrb	r2, [r7, #11]
 8006c84:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8006c86:	68fb      	ldr	r3, [r7, #12]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	73fb      	strb	r3, [r7, #15]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b2d      	cmp	r3, #45	; 0x2d
 8006cac:	d119      	bne.n	8006ce2 <ParseNumber+0x52>
        minus = 1;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	607b      	str	r3, [r7, #4]
        i++;
 8006cb8:	7bbb      	ldrb	r3, [r7, #14]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8006cbe:	e010      	b.n	8006ce2 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	3b30      	subs	r3, #48	; 0x30
 8006cd2:	4413      	add	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]
        ptr++;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	607b      	str	r3, [r7, #4]
        i++;
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	2b2f      	cmp	r3, #47	; 0x2f
 8006ce8:	d903      	bls.n	8006cf2 <ParseNumber+0x62>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	2b39      	cmp	r3, #57	; 0x39
 8006cf0:	d9e6      	bls.n	8006cc0 <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <ParseNumber+0x6e>
        *cnt = i;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	7bba      	ldrb	r2, [r7, #14]
 8006cfc:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <ParseNumber+0x7a>
        return 0 - sum;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	425b      	negs	r3, r3
 8006d08:	e000      	b.n	8006d0c <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8006d0a:	68bb      	ldr	r3, [r7, #8]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8006d26:	e019      	b.n	8006d5c <ParseMAC+0x44>
    hexcnt = 1;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b3a      	cmp	r3, #58	; 0x3a
 8006d32:	d00e      	beq.n	8006d52 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8006d34:	f107 030e 	add.w	r3, r7, #14
 8006d38:	4619      	mov	r1, r3
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff ff68 	bl	8006c10 <ParseHexNumber>
 8006d40:	4601      	mov	r1, r0
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	73fa      	strb	r2, [r7, #15]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	b2ca      	uxtb	r2, r1
 8006d50:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4413      	add	r3, r2
 8006d5a:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e1      	bne.n	8006d28 <ParseMAC+0x10>
  }
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b084      	sub	sp, #16
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8006d7c:	e019      	b.n	8006db2 <ParseIP+0x44>
    hexcnt = 1;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2b2e      	cmp	r3, #46	; 0x2e
 8006d88:	d00e      	beq.n	8006da8 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 8006d8a:	f107 030e 	add.w	r3, r7, #14
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff ff7d 	bl	8006c90 <ParseNumber>
 8006d96:	4601      	mov	r1, r0
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	73fa      	strb	r2, [r7, #15]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	b2ca      	uxtb	r2, r1
 8006da6:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4413      	add	r3, r2
 8006db0:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e1      	bne.n	8006d7e <ParseIP+0x10>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	3302      	adds	r3, #2
 8006dd6:	4934      	ldr	r1, [pc, #208]	; (8006ea8 <AT_ParseInfo+0xe4>)
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f004 fb71 	bl	800b4c0 <strtok>
 8006dde:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8006de0:	e05a      	b.n	8006e98 <AT_ParseInfo+0xd4>
    switch (num++) {
 8006de2:	7afb      	ldrb	r3, [r7, #11]
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	72fa      	strb	r2, [r7, #11]
 8006de8:	2b06      	cmp	r3, #6
 8006dea:	d84f      	bhi.n	8006e8c <AT_ParseInfo+0xc8>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <AT_ParseInfo+0x30>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e11 	.word	0x08006e11
 8006df8:	08006e1f 	.word	0x08006e1f
 8006dfc:	08006e2f 	.word	0x08006e2f
 8006e00:	08006e3f 	.word	0x08006e3f
 8006e04:	08006e4f 	.word	0x08006e4f
 8006e08:	08006e5f 	.word	0x08006e5f
 8006e0c:	08006e73 	.word	0x08006e73
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	68f9      	ldr	r1, [r7, #12]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f004 fb29 	bl	800b46e <strncpy>
      break;
 8006e1c:	e037      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	3320      	adds	r3, #32
 8006e22:	2218      	movs	r2, #24
 8006e24:	68f9      	ldr	r1, [r7, #12]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f004 fb21 	bl	800b46e <strncpy>
      break;
 8006e2c:	e02f      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	3338      	adds	r3, #56	; 0x38
 8006e32:	2210      	movs	r2, #16
 8006e34:	68f9      	ldr	r1, [r7, #12]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f004 fb19 	bl	800b46e <strncpy>
      break;
 8006e3c:	e027      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3348      	adds	r3, #72	; 0x48
 8006e42:	2210      	movs	r2, #16
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f004 fb11 	bl	800b46e <strncpy>
      break;
 8006e4c:	e01f      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3358      	adds	r3, #88	; 0x58
 8006e52:	2210      	movs	r2, #16
 8006e54:	68f9      	ldr	r1, [r7, #12]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f004 fb09 	bl	800b46e <strncpy>
      break;
 8006e5c:	e017      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8006e5e:	2100      	movs	r1, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f7ff ff15 	bl	8006c90 <ParseNumber>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 8006e70:	e00d      	b.n	8006e8e <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 8006e72:	490e      	ldr	r1, [pc, #56]	; (8006eac <AT_ParseInfo+0xe8>)
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f004 fb23 	bl	800b4c0 <strtok>
 8006e7a:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3368      	adds	r3, #104	; 0x68
 8006e80:	2220      	movs	r2, #32
 8006e82:	68f9      	ldr	r1, [r7, #12]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f004 faf2 	bl	800b46e <strncpy>
      break;
 8006e8a:	e000      	b.n	8006e8e <AT_ParseInfo+0xca>

    default: break;
 8006e8c:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8006e8e:	4906      	ldr	r1, [pc, #24]	; (8006ea8 <AT_ParseInfo+0xe4>)
 8006e90:	2000      	movs	r0, #0
 8006e92:	f004 fb15 	bl	800b4c0 <strtok>
 8006e96:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1a1      	bne.n	8006de2 <AT_ParseInfo+0x1e>
  }
}
 8006e9e:	bf00      	nop
 8006ea0:	bf00      	nop
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	0800c06c 	.word	0x0800c06c
 8006eac:	0800c070 	.word	0x0800c070

08006eb0 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	3302      	adds	r3, #2
 8006ec2:	4952      	ldr	r1, [pc, #328]	; (800700c <AT_ParseConnSettings+0x15c>)
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f004 fafb 	bl	800b4c0 <strtok>
 8006eca:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 8006ecc:	e095      	b.n	8006ffa <AT_ParseConnSettings+0x14a>
    switch (num++) {
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	73fa      	strb	r2, [r7, #15]
 8006ed4:	2b0b      	cmp	r3, #11
 8006ed6:	d87f      	bhi.n	8006fd8 <AT_ParseConnSettings+0x128>
 8006ed8:	a201      	add	r2, pc, #4	; (adr r2, 8006ee0 <AT_ParseConnSettings+0x30>)
 8006eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ede:	bf00      	nop
 8006ee0:	08006f11 	.word	0x08006f11
 8006ee4:	08006f1f 	.word	0x08006f1f
 8006ee8:	08006f2f 	.word	0x08006f2f
 8006eec:	08006f43 	.word	0x08006f43
 8006ef0:	08006f57 	.word	0x08006f57
 8006ef4:	08006f6b 	.word	0x08006f6b
 8006ef8:	08006f79 	.word	0x08006f79
 8006efc:	08006f87 	.word	0x08006f87
 8006f00:	08006f95 	.word	0x08006f95
 8006f04:	08006fa3 	.word	0x08006fa3
 8006f08:	08006fb1 	.word	0x08006fb1
 8006f0c:	08006fc5 	.word	0x08006fc5
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	2221      	movs	r2, #33	; 0x21
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f004 faa9 	bl	800b46e <strncpy>
      break;
 8006f1c:	e05d      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	3321      	adds	r3, #33	; 0x21
 8006f22:	2221      	movs	r2, #33	; 0x21
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f004 faa1 	bl	800b46e <strncpy>
      break;
 8006f2c:	e055      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8006f2e:	2100      	movs	r1, #0
 8006f30:	68b8      	ldr	r0, [r7, #8]
 8006f32:	f7ff fead 	bl	8006c90 <ParseNumber>
 8006f36:	4603      	mov	r3, r0
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8006f40:	e04b      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8006f42:	2100      	movs	r1, #0
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f7ff fea3 	bl	8006c90 <ParseNumber>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8006f54:	e041      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8006f56:	2100      	movs	r1, #0
 8006f58:	68b8      	ldr	r0, [r7, #8]
 8006f5a:	f7ff fe99 	bl	8006c90 <ParseNumber>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8006f68:	e037      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	3348      	adds	r3, #72	; 0x48
 8006f6e:	4619      	mov	r1, r3
 8006f70:	68b8      	ldr	r0, [r7, #8]
 8006f72:	f7ff fefc 	bl	8006d6e <ParseIP>
      break;
 8006f76:	e030      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	334c      	adds	r3, #76	; 0x4c
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68b8      	ldr	r0, [r7, #8]
 8006f80:	f7ff fef5 	bl	8006d6e <ParseIP>
      break;
 8006f84:	e029      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	3350      	adds	r3, #80	; 0x50
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68b8      	ldr	r0, [r7, #8]
 8006f8e:	f7ff feee 	bl	8006d6e <ParseIP>
      break;
 8006f92:	e022      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	3354      	adds	r3, #84	; 0x54
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f7ff fee7 	bl	8006d6e <ParseIP>
      break;
 8006fa0:	e01b      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	3358      	adds	r3, #88	; 0x58
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	68b8      	ldr	r0, [r7, #8]
 8006faa:	f7ff fee0 	bl	8006d6e <ParseIP>
      break;
 8006fae:	e014      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	68b8      	ldr	r0, [r7, #8]
 8006fb4:	f7ff fe6c 	bl	8006c90 <ParseNumber>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	b2da      	uxtb	r2, r3
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 8006fc2:	e00a      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8006fc4:	2100      	movs	r1, #0
 8006fc6:	68b8      	ldr	r0, [r7, #8]
 8006fc8:	f7ff fe62 	bl	8006c90 <ParseNumber>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8006fd6:	e000      	b.n	8006fda <AT_ParseConnSettings+0x12a>

    default:
      break;
 8006fd8:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8006fda:	490c      	ldr	r1, [pc, #48]	; (800700c <AT_ParseConnSettings+0x15c>)
 8006fdc:	2000      	movs	r0, #0
 8006fde:	f004 fa6f 	bl	800b4c0 <strtok>
 8006fe2:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <AT_ParseConnSettings+0x14a>
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b2c      	cmp	r3, #44	; 0x2c
 8006ff2:	d102      	bne.n	8006ffa <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	f47f af66 	bne.w	8006ece <AT_ParseConnSettings+0x1e>
    }
  }
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	3710      	adds	r7, #16
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	0800c06c 	.word	0x0800c06c

08007010 <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 8007010:	b480      	push	{r7}
 8007012:	b083      	sub	sp, #12
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3302      	adds	r3, #2
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b31      	cmp	r3, #49	; 0x31
 8007022:	bf0c      	ite	eq
 8007024:	2301      	moveq	r3, #1
 8007026:	2300      	movne	r3, #0
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	701a      	strb	r2, [r3, #0]
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 800703c:	b590      	push	{r4, r7, lr}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  int ret = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	613b      	str	r3, [r7, #16]
  int16_t recv_len = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	82fb      	strh	r3, [r7, #22]
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8007056:	68b8      	ldr	r0, [r7, #8]
 8007058:	f7f9 f8ba 	bl	80001d0 <strlen>
 800705c:	4603      	mov	r3, r0
 800705e:	b299      	uxth	r1, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8007066:	461a      	mov	r2, r3
 8007068:	68b8      	ldr	r0, [r7, #8]
 800706a:	47a0      	blx	r4
 800706c:	4603      	mov	r3, r0
 800706e:	613b      	str	r3, [r7, #16]

  if( ret > 0)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	dd3e      	ble.n	80070f4 <AT_ExecuteCommand+0xb8>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	f8d2 28f8 	ldr.w	r2, [r2, #2296]	; 0x8f8
 8007082:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	4798      	blx	r3
 800708a:	4603      	mov	r3, r0
 800708c:	82fb      	strh	r3, [r7, #22]
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 800708e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd27      	ble.n	80070e6 <AT_ExecuteCommand+0xaa>
 8007096:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800709a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800709e:	dc22      	bgt.n	80070e6 <AT_ExecuteCommand+0xaa>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 80070a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80070a8:	d105      	bne.n	80070b6 <AT_ExecuteCommand+0x7a>
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 80070aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	3b01      	subs	r3, #1
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	82fb      	strh	r3, [r7, #22]
      }
      *(pdata + recv_len) = 0;
 80070b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	4413      	add	r3, r2
 80070be:	2200      	movs	r2, #0
 80070c0:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 80070c2:	490f      	ldr	r1, [pc, #60]	; (8007100 <AT_ExecuteCommand+0xc4>)
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f004 f9e5 	bl	800b494 <strstr>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <AT_ExecuteCommand+0x98>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e010      	b.n	80070f6 <AT_ExecuteCommand+0xba>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 80070d4:	490b      	ldr	r1, [pc, #44]	; (8007104 <AT_ExecuteCommand+0xc8>)
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f004 f9dc 	bl	800b494 <strstr>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <AT_ExecuteCommand+0xaa>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 80070e2:	2305      	movs	r3, #5
 80070e4:	e007      	b.n	80070f6 <AT_ExecuteCommand+0xba>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 80070e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80070ea:	f113 0f04 	cmn.w	r3, #4
 80070ee:	d101      	bne.n	80070f4 <AT_ExecuteCommand+0xb8>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 80070f0:	2306      	movs	r3, #6
 80070f2:	e000      	b.n	80070f6 <AT_ExecuteCommand+0xba>
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80070f4:	2304      	movs	r3, #4
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd90      	pop	{r4, r7, pc}
 80070fe:	bf00      	nop
 8007100:	0800c080 	.word	0x0800c080
 8007104:	0800c08c 	.word	0x0800c08c

08007108 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
	printf("Esta en es_wifi_init\r\n");
 8007110:	4815      	ldr	r0, [pc, #84]	; (8007168 <ES_WIFI_Init+0x60>)
 8007112:	f004 f8c7 	bl	800b2a4 <puts>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8007116:	2302      	movs	r3, #2
 8007118:	73fb      	strb	r3, [r7, #15]

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f247 5230 	movw	r2, #30000	; 0x7530
 8007120:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800712a:	2000      	movs	r0, #0
 800712c:	4798      	blx	r3
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d113      	bne.n	800715c <ES_WIFI_Init+0x54>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800713a:	461a      	mov	r2, r3
 800713c:	490b      	ldr	r1, [pc, #44]	; (800716c <ES_WIFI_Init+0x64>)
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff ff7c 	bl	800703c <AT_ExecuteCommand>
 8007144:	4603      	mov	r3, r0
 8007146:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 8007148:	7bfb      	ldrb	r3, [r7, #15]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <ES_WIFI_Init+0x54>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007154:	4619      	mov	r1, r3
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fe34 	bl	8006dc4 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	0800c09c 	.word	0x0800c09c
 800716c:	0800c0b4 	.word	0x0800c0b4

08007170 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
 800717c:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00b      	beq.n	800719c <ES_WIFI_RegisterBusIO+0x2c>
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d008      	beq.n	800719c <ES_WIFI_RegisterBusIO+0x2c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <ES_WIFI_RegisterBusIO+0x2c>
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <ES_WIFI_RegisterBusIO+0x2c>
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 800719c:	2302      	movs	r3, #2
 800719e:	e014      	b.n	80071ca <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
	...

080071d8 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4932      	ldr	r1, [pc, #200]	; (80072b8 <ES_WIFI_Connect+0xe0>)
 80071f0:	4618      	mov	r0, r3
 80071f2:	f004 f8d9 	bl	800b3a8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007202:	461a      	mov	r2, r3
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff ff19 	bl	800703c <AT_ExecuteCommand>
 800720a:	4603      	mov	r3, r0
 800720c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800720e:	7dfb      	ldrb	r3, [r7, #23]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d14b      	bne.n	80072ac <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	4927      	ldr	r1, [pc, #156]	; (80072bc <ES_WIFI_Connect+0xe4>)
 800721e:	4618      	mov	r0, r3
 8007220:	f004 f8c2 	bl	800b3a8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007230:	461a      	mov	r2, r3
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f7ff ff02 	bl	800703c <AT_ExecuteCommand>
 8007238:	4603      	mov	r3, r0
 800723a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d134      	bne.n	80072ac <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	491b      	ldr	r1, [pc, #108]	; (80072c0 <ES_WIFI_Connect+0xe8>)
 8007254:	4618      	mov	r0, r3
 8007256:	f004 f8a7 	bl	800b3a8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007266:	461a      	mov	r2, r3
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f7ff fee7 	bl	800703c <AT_ExecuteCommand>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d119      	bne.n	80072ac <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800727e:	4911      	ldr	r1, [pc, #68]	; (80072c4 <ES_WIFI_Connect+0xec>)
 8007280:	4618      	mov	r0, r3
 8007282:	f004 f891 	bl	800b3a8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007292:	461a      	mov	r2, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7ff fed1 	bl	800703c <AT_ExecuteCommand>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d103      	bne.n	80072ac <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 80072ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	0800c0cc 	.word	0x0800c0cc
 80072bc:	0800c0d4 	.word	0x0800c0d4
 80072c0:	0800c0dc 	.word	0x0800c0dc
 80072c4:	0800c0e4 	.word	0x0800c0e4

080072c8 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80072d6:	4911      	ldr	r1, [pc, #68]	; (800731c <ES_WIFI_IsConnected+0x54>)
 80072d8:	4618      	mov	r0, r3
 80072da:	f004 f865 	bl	800b3a8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80072ea:	461a      	mov	r2, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f7ff fea5 	bl	800703c <AT_ExecuteCommand>
 80072f2:	4603      	mov	r3, r0
 80072f4:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80072f6:	7bfb      	ldrb	r3, [r7, #15]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d108      	bne.n	800730e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	33d2      	adds	r3, #210	; 0xd2
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7ff fe81 	bl	8007010 <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	0800c0e8 	.word	0x0800c0e8

08007320 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800732e:	4910      	ldr	r1, [pc, #64]	; (8007370 <ES_WIFI_GetNetworkSettings+0x50>)
 8007330:	4618      	mov	r0, r3
 8007332:	f004 f839 	bl	800b3a8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007342:	461a      	mov	r2, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f7ff fe79 	bl	800703c <AT_ExecuteCommand>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 7294 	add.w	r2, r3, #296	; 0x128
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	338d      	adds	r3, #141	; 0x8d
 800735e:	4619      	mov	r1, r3
 8007360:	4610      	mov	r0, r2
 8007362:	f7ff fda5 	bl	8006eb0 <AT_ParseConnSettings>
  }

  UNLOCK_WIFI();
  return ret;
 8007366:	7bfb      	ldrb	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	0800c0f0 	.word	0x0800c0f0

08007374 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007384:	4912      	ldr	r1, [pc, #72]	; (80073d0 <ES_WIFI_GetMACAddress+0x5c>)
 8007386:	4618      	mov	r0, r3
 8007388:	f004 f80e 	bl	800b3a8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8007398:	461a      	mov	r2, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fe4e 	bl	800703c <AT_ExecuteCommand>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10c      	bne.n	80073c4 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80073b0:	3302      	adds	r3, #2
 80073b2:	4908      	ldr	r1, [pc, #32]	; (80073d4 <ES_WIFI_GetMACAddress+0x60>)
 80073b4:	4618      	mov	r0, r3
 80073b6:	f004 f883 	bl	800b4c0 <strtok>
 80073ba:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	68b8      	ldr	r0, [r7, #8]
 80073c0:	f7ff fcaa 	bl	8006d18 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	0800c140 	.word	0x0800c140
 80073d4:	0800c144 	.word	0x0800c144

080073d8 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	; 0x30
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 80073e0:	4b57      	ldr	r3, [pc, #348]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e4:	4a56      	ldr	r2, [pc, #344]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 80073e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ea:	6593      	str	r3, [r2, #88]	; 0x58
 80073ec:	4b54      	ldr	r3, [pc, #336]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 80073ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f8:	4b51      	ldr	r3, [pc, #324]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 80073fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fc:	4a50      	ldr	r2, [pc, #320]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 80073fe:	f043 0302 	orr.w	r3, r3, #2
 8007402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007404:	4b4e      	ldr	r3, [pc, #312]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 8007406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007410:	4b4b      	ldr	r3, [pc, #300]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 8007412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007414:	4a4a      	ldr	r2, [pc, #296]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 8007416:	f043 0304 	orr.w	r3, r3, #4
 800741a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800741c:	4b48      	ldr	r3, [pc, #288]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 800741e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007428:	4b45      	ldr	r3, [pc, #276]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	4a44      	ldr	r2, [pc, #272]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 800742e:	f043 0310 	orr.w	r3, r3, #16
 8007432:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007434:	4b42      	ldr	r3, [pc, #264]	; (8007540 <SPI_WIFI_MspInit+0x168>)
 8007436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8007440:	2200      	movs	r2, #0
 8007442:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007446:	483f      	ldr	r0, [pc, #252]	; (8007544 <SPI_WIFI_MspInit+0x16c>)
 8007448:	f7fa ff70 	bl	800232c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800744c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007450:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 8007452:	2301      	movs	r3, #1
 8007454:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800745a:	2300      	movs	r3, #0
 800745c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800745e:	f107 031c 	add.w	r3, r7, #28
 8007462:	4619      	mov	r1, r3
 8007464:	4837      	ldr	r0, [pc, #220]	; (8007544 <SPI_WIFI_MspInit+0x16c>)
 8007466:	f7fa fcab 	bl	8001dc0 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800746a:	2302      	movs	r3, #2
 800746c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800746e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007472:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8007474:	2300      	movs	r3, #0
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8007478:	2300      	movs	r3, #0
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800747c:	f107 031c 	add.w	r3, r7, #28
 8007480:	4619      	mov	r1, r3
 8007482:	4831      	ldr	r0, [pc, #196]	; (8007548 <SPI_WIFI_MspInit+0x170>)
 8007484:	f7fa fc9c 	bl	8001dc0 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 8007488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800748c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800748e:	2301      	movs	r3, #1
 8007490:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 8007492:	2300      	movs	r3, #0
 8007494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 8007496:	2300      	movs	r3, #0
 8007498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800749a:	2300      	movs	r3, #0
 800749c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800749e:	f107 031c 	add.w	r3, r7, #28
 80074a2:	4619      	mov	r1, r3
 80074a4:	4828      	ldr	r0, [pc, #160]	; (8007548 <SPI_WIFI_MspInit+0x170>)
 80074a6:	f7fa fc8b 	bl	8001dc0 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80074aa:	2201      	movs	r2, #1
 80074ac:	2101      	movs	r1, #1
 80074ae:	4826      	ldr	r0, [pc, #152]	; (8007548 <SPI_WIFI_MspInit+0x170>)
 80074b0:	f7fa ff3c 	bl	800232c <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 80074b4:	2301      	movs	r3, #1
 80074b6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80074b8:	2301      	movs	r3, #1
 80074ba:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80074c0:	2301      	movs	r3, #1
 80074c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80074c4:	f107 031c 	add.w	r3, r7, #28
 80074c8:	4619      	mov	r1, r3
 80074ca:	481f      	ldr	r0, [pc, #124]	; (8007548 <SPI_WIFI_MspInit+0x170>)
 80074cc:	f7fa fc78 	bl	8001dc0 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 80074d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074d4:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80074d6:	2302      	movs	r3, #2
 80074d8:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80074de:	2301      	movs	r3, #1
 80074e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80074e2:	2306      	movs	r3, #6
 80074e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 80074e6:	f107 031c 	add.w	r3, r7, #28
 80074ea:	4619      	mov	r1, r3
 80074ec:	4817      	ldr	r0, [pc, #92]	; (800754c <SPI_WIFI_MspInit+0x174>)
 80074ee:	f7fa fc67 	bl	8001dc0 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 80074f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074f6:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 80074f8:	2302      	movs	r3, #2
 80074fa:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8007500:	2301      	movs	r3, #1
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8007504:	2306      	movs	r3, #6
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8007508:	f107 031c 	add.w	r3, r7, #28
 800750c:	4619      	mov	r1, r3
 800750e:	480f      	ldr	r0, [pc, #60]	; (800754c <SPI_WIFI_MspInit+0x174>)
 8007510:	f7fa fc56 	bl	8001dc0 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 8007514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007518:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800751a:	2302      	movs	r3, #2
 800751c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800751e:	2301      	movs	r3, #1
 8007520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8007522:	2301      	movs	r3, #1
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8007526:	2306      	movs	r3, #6
 8007528:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800752a:	f107 031c 	add.w	r3, r7, #28
 800752e:	4619      	mov	r1, r3
 8007530:	4806      	ldr	r0, [pc, #24]	; (800754c <SPI_WIFI_MspInit+0x174>)
 8007532:	f7fa fc45 	bl	8001dc0 <HAL_GPIO_Init>
}
 8007536:	bf00      	nop
 8007538:	3730      	adds	r7, #48	; 0x30
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40021000 	.word	0x40021000
 8007544:	48000400 	.word	0x48000400
 8007548:	48001000 	.word	0x48001000
 800754c:	48000800 	.word	0x48000800

08007550 <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800755e:	88fb      	ldrh	r3, [r7, #6]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d145      	bne.n	80075f0 <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 8007564:	4b27      	ldr	r3, [pc, #156]	; (8007604 <SPI_WIFI_Init+0xb4>)
 8007566:	4a28      	ldr	r2, [pc, #160]	; (8007608 <SPI_WIFI_Init+0xb8>)
 8007568:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800756a:	4826      	ldr	r0, [pc, #152]	; (8007604 <SPI_WIFI_Init+0xb4>)
 800756c:	f7ff ff34 	bl	80073d8 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 8007570:	4b24      	ldr	r3, [pc, #144]	; (8007604 <SPI_WIFI_Init+0xb4>)
 8007572:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007576:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8007578:	4b22      	ldr	r3, [pc, #136]	; (8007604 <SPI_WIFI_Init+0xb4>)
 800757a:	2200      	movs	r2, #0
 800757c:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800757e:	4b21      	ldr	r3, [pc, #132]	; (8007604 <SPI_WIFI_Init+0xb4>)
 8007580:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8007584:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 8007586:	4b1f      	ldr	r3, [pc, #124]	; (8007604 <SPI_WIFI_Init+0xb4>)
 8007588:	2200      	movs	r2, #0
 800758a:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800758c:	4b1d      	ldr	r3, [pc, #116]	; (8007604 <SPI_WIFI_Init+0xb4>)
 800758e:	2200      	movs	r2, #0
 8007590:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 8007592:	4b1c      	ldr	r3, [pc, #112]	; (8007604 <SPI_WIFI_Init+0xb4>)
 8007594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007598:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800759a:	4b1a      	ldr	r3, [pc, #104]	; (8007604 <SPI_WIFI_Init+0xb4>)
 800759c:	2210      	movs	r2, #16
 800759e:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 80075a0:	4b18      	ldr	r3, [pc, #96]	; (8007604 <SPI_WIFI_Init+0xb4>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 80075a6:	4b17      	ldr	r3, [pc, #92]	; (8007604 <SPI_WIFI_Init+0xb4>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 80075ac:	4b15      	ldr	r3, [pc, #84]	; (8007604 <SPI_WIFI_Init+0xb4>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <SPI_WIFI_Init+0xb4>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 80075b8:	4812      	ldr	r0, [pc, #72]	; (8007604 <SPI_WIFI_Init+0xb4>)
 80075ba:	f7fc fd93 	bl	80040e4 <HAL_SPI_Init>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <SPI_WIFI_Init+0x7a>
    {
      return -1;
 80075c4:	f04f 33ff 	mov.w	r3, #4294967295
 80075c8:	e018      	b.n	80075fc <SPI_WIFI_Init+0xac>
    }

     /* Enable Interrupt for Data Ready pin , GPIO_PIN1 */
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 80075ca:	2200      	movs	r2, #0
 80075cc:	2100      	movs	r1, #0
 80075ce:	2007      	movs	r0, #7
 80075d0:	f7fa fa70 	bl	8001ab4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 80075d4:	2007      	movs	r0, #7
 80075d6:	f7fa fa89 	bl	8001aec <HAL_NVIC_EnableIRQ>
     
     /* Enable Interrupt for SPI tx and rx */
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	2033      	movs	r0, #51	; 0x33
 80075e0:	f7fa fa68 	bl	8001ab4 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 80075e4:	2033      	movs	r0, #51	; 0x33
 80075e6:	f7fa fa81 	bl	8001aec <HAL_NVIC_EnableIRQ>
    SEM_WAIT(spi_rx_sem, 1);
    SEM_WAIT(spi_tx_sem, 1);

#endif
    /* first call used for calibration */
    SPI_WIFI_DelayUs(10);
 80075ea:	200a      	movs	r0, #10
 80075ec:	f000 f9fe 	bl	80079ec <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 80075f0:	f000 f80c 	bl	800760c <SPI_WIFI_ResetModule>
 80075f4:	4603      	mov	r3, r0
 80075f6:	73fb      	strb	r3, [r7, #15]

  return rc;
 80075f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20000860 	.word	0x20000860
 8007608:	40003c00 	.word	0x40003c00

0800760c <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 8007612:	f7fa f943 	bl	800189c <HAL_GetTick>
 8007616:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800761c:	2200      	movs	r2, #0
 800761e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007622:	4830      	ldr	r0, [pc, #192]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 8007624:	f7fa fe82 	bl	800232c <HAL_GPIO_WritePin>
 8007628:	200a      	movs	r0, #10
 800762a:	f7fa f943 	bl	80018b4 <HAL_Delay>
 800762e:	2201      	movs	r2, #1
 8007630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007634:	482b      	ldr	r0, [pc, #172]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 8007636:	f7fa fe79 	bl	800232c <HAL_GPIO_WritePin>
 800763a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800763e:	f7fa f939 	bl	80018b4 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 8007642:	2200      	movs	r2, #0
 8007644:	2101      	movs	r1, #1
 8007646:	4827      	ldr	r0, [pc, #156]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 8007648:	f7fa fe70 	bl	800232c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800764c:	200f      	movs	r0, #15
 800764e:	f000 f9cd 	bl	80079ec <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 8007652:	e020      	b.n	8007696 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	463a      	mov	r2, r7
 8007658:	18d1      	adds	r1, r2, r3
 800765a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800765e:	2201      	movs	r2, #1
 8007660:	4821      	ldr	r0, [pc, #132]	; (80076e8 <SPI_WIFI_ResetModule+0xdc>)
 8007662:	f7fc fe0a 	bl	800427a <HAL_SPI_Receive>
 8007666:	4603      	mov	r3, r0
 8007668:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	3302      	adds	r3, #2
 800766e:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8007670:	f7fa f914 	bl	800189c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767e:	d202      	bcs.n	8007686 <SPI_WIFI_ResetModule+0x7a>
 8007680:	79fb      	ldrb	r3, [r7, #7]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d007      	beq.n	8007696 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS();
 8007686:	2201      	movs	r2, #1
 8007688:	2101      	movs	r1, #1
 800768a:	4816      	ldr	r0, [pc, #88]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 800768c:	f7fa fe4e 	bl	800232c <HAL_GPIO_WritePin>
      return -1;
 8007690:	f04f 33ff 	mov.w	r3, #4294967295
 8007694:	e021      	b.n	80076da <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 8007696:	2102      	movs	r1, #2
 8007698:	4812      	ldr	r0, [pc, #72]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 800769a:	f7fa fe2f 	bl	80022fc <HAL_GPIO_ReadPin>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d0d7      	beq.n	8007654 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS();
 80076a4:	2201      	movs	r2, #1
 80076a6:	2101      	movs	r1, #1
 80076a8:	480e      	ldr	r0, [pc, #56]	; (80076e4 <SPI_WIFI_ResetModule+0xd8>)
 80076aa:	f7fa fe3f 	bl	800232c <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80076ae:	783b      	ldrb	r3, [r7, #0]
 80076b0:	2b15      	cmp	r3, #21
 80076b2:	d10e      	bne.n	80076d2 <SPI_WIFI_ResetModule+0xc6>
 80076b4:	787b      	ldrb	r3, [r7, #1]
 80076b6:	2b15      	cmp	r3, #21
 80076b8:	d10b      	bne.n	80076d2 <SPI_WIFI_ResetModule+0xc6>
 80076ba:	78bb      	ldrb	r3, [r7, #2]
 80076bc:	2b0d      	cmp	r3, #13
 80076be:	d108      	bne.n	80076d2 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80076c0:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80076c2:	2b0a      	cmp	r3, #10
 80076c4:	d105      	bne.n	80076d2 <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80076c6:	793b      	ldrb	r3, [r7, #4]
 80076c8:	2b3e      	cmp	r3, #62	; 0x3e
 80076ca:	d102      	bne.n	80076d2 <SPI_WIFI_ResetModule+0xc6>
 80076cc:	797b      	ldrb	r3, [r7, #5]
 80076ce:	2b20      	cmp	r3, #32
 80076d0:	d002      	beq.n	80076d8 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 80076d2:	f04f 33ff 	mov.w	r3, #4294967295
 80076d6:	e000      	b.n	80076da <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	48001000 	.word	0x48001000
 80076e8:	20000860 	.word	0x20000860

080076ec <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 80076f0:	4802      	ldr	r0, [pc, #8]	; (80076fc <SPI_WIFI_DeInit+0x10>)
 80076f2:	f7fc fd9a 	bl	800422a <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	20000860 	.word	0x20000860

08007700 <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 8007708:	f7fa f8c8 	bl	800189c <HAL_GetTick>
 800770c:	4603      	mov	r3, r0
 800770e:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 8007710:	e00a      	b.n	8007728 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8007712:	f7fa f8c3 	bl	800189c <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	429a      	cmp	r2, r3
 8007720:	d902      	bls.n	8007728 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 8007722:	f04f 33ff 	mov.w	r3, #4294967295
 8007726:	e007      	b.n	8007738 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 8007728:	2102      	movs	r1, #2
 800772a:	4805      	ldr	r0, [pc, #20]	; (8007740 <wait_cmddata_rdy_high+0x40>)
 800772c:	f7fa fde6 	bl	80022fc <HAL_GPIO_ReadPin>
 8007730:	4603      	mov	r3, r0
 8007732:	2b01      	cmp	r3, #1
 8007734:	d1ed      	bne.n	8007712 <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	48001000 	.word	0x48001000

08007744 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800774c:	f7fa f8a6 	bl	800189c <HAL_GetTick>
 8007750:	4603      	mov	r3, r0
 8007752:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 8007754:	e00a      	b.n	800776c <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8007756:	f7fa f8a1 	bl	800189c <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	429a      	cmp	r2, r3
 8007764:	d902      	bls.n	800776c <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	e004      	b.n	8007776 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800776c:	4b04      	ldr	r3, [pc, #16]	; (8007780 <wait_cmddata_rdy_rising_event+0x3c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d0f0      	beq.n	8007756 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0;
 8007774:	2300      	movs	r3, #0
#endif
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	200008cc 	.word	0x200008cc

08007784 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 800778c:	f7fa f886 	bl	800189c <HAL_GetTick>
 8007790:	4603      	mov	r3, r0
 8007792:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 8007794:	e00a      	b.n	80077ac <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 8007796:	f7fa f881 	bl	800189c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	1ad2      	subs	r2, r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d902      	bls.n	80077ac <wait_spi_rx_event+0x28>
    {
      return -1;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295
 80077aa:	e004      	b.n	80077b6 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 80077ac:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <wait_spi_rx_event+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d0f0      	beq.n	8007796 <wait_spi_rx_event+0x12>
    }
  }
  return 0;
 80077b4:	2300      	movs	r3, #0
#endif
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200008c4 	.word	0x200008c4

080077c4 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout);
#else
  int tickstart = HAL_GetTick();
 80077cc:	f7fa f866 	bl	800189c <HAL_GetTick>
 80077d0:	4603      	mov	r3, r0
 80077d2:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 80077d4:	e00a      	b.n	80077ec <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 80077d6:	f7fa f861 	bl	800189c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d902      	bls.n	80077ec <wait_spi_tx_event+0x28>
    {
      return -1;
 80077e6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ea:	e004      	b.n	80077f6 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 80077ec:	4b04      	ldr	r3, [pc, #16]	; (8007800 <wait_spi_tx_event+0x3c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d0f0      	beq.n	80077d6 <wait_spi_tx_event+0x12>
    }
  }
  return 0;
 80077f4:	2300      	movs	r3, #0
#endif
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	200008c8 	.word	0x200008c8

08007804 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	460b      	mov	r3, r1
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 8007812:	2300      	movs	r3, #0
 8007814:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS();
 8007816:	2201      	movs	r2, #1
 8007818:	2101      	movs	r1, #1
 800781a:	4834      	ldr	r0, [pc, #208]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 800781c:	f7fa fd86 	bl	800232c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 8007820:	2003      	movs	r0, #3
 8007822:	f000 f8e3 	bl	80079ec <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4618      	mov	r0, r3
 800782a:	f7ff ff8b 	bl	8007744 <wait_cmddata_rdy_rising_event>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	da02      	bge.n	800783a <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8007834:	f06f 0302 	mvn.w	r3, #2
 8007838:	e054      	b.n	80078e4 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800783a:	2200      	movs	r2, #0
 800783c:	2101      	movs	r1, #1
 800783e:	482b      	ldr	r0, [pc, #172]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 8007840:	f7fa fd74 	bl	800232c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8007844:	200f      	movs	r0, #15
 8007846:	f000 f8d1 	bl	80079ec <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800784a:	e03d      	b.n	80078c8 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800784c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007850:	897b      	ldrh	r3, [r7, #10]
 8007852:	429a      	cmp	r2, r3
 8007854:	db02      	blt.n	800785c <SPI_WIFI_ReceiveData+0x58>
 8007856:	897b      	ldrh	r3, [r7, #10]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d13c      	bne.n	80078d6 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800785c:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <SPI_WIFI_ReceiveData+0xec>)
 800785e:	2201      	movs	r2, #1
 8007860:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8007862:	f107 0314 	add.w	r3, r7, #20
 8007866:	2201      	movs	r2, #1
 8007868:	4619      	mov	r1, r3
 800786a:	4822      	ldr	r0, [pc, #136]	; (80078f4 <SPI_WIFI_ReceiveData+0xf0>)
 800786c:	f7fd f8d6 	bl	8004a1c <HAL_SPI_Receive_IT>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d007      	beq.n	8007886 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 8007876:	2201      	movs	r2, #1
 8007878:	2101      	movs	r1, #1
 800787a:	481c      	ldr	r0, [pc, #112]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 800787c:	f7fa fd56 	bl	800232c <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 8007880:	f04f 33ff 	mov.w	r3, #4294967295
 8007884:	e02e      	b.n	80078e4 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	4618      	mov	r0, r3
 800788a:	f7ff ff7b 	bl	8007784 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800788e:	7d3a      	ldrb	r2, [r7, #20]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	3301      	adds	r3, #1
 8007898:	7d7a      	ldrb	r2, [r7, #21]
 800789a:	701a      	strb	r2, [r3, #0]
      length += 2;
 800789c:	8afb      	ldrh	r3, [r7, #22]
 800789e:	3302      	adds	r3, #2
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3302      	adds	r3, #2
 80078a8:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 80078aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078ae:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80078b2:	db09      	blt.n	80078c8 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 80078b4:	2201      	movs	r2, #1
 80078b6:	2101      	movs	r1, #1
 80078b8:	480c      	ldr	r0, [pc, #48]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 80078ba:	f7fa fd37 	bl	800232c <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();
 80078be:	f7ff fea5 	bl	800760c <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80078c2:	f06f 0303 	mvn.w	r3, #3
 80078c6:	e00d      	b.n	80078e4 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 80078c8:	2102      	movs	r1, #2
 80078ca:	4808      	ldr	r0, [pc, #32]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 80078cc:	f7fa fd16 	bl	80022fc <HAL_GPIO_ReadPin>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d0ba      	beq.n	800784c <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS();
 80078d6:	2201      	movs	r2, #1
 80078d8:	2101      	movs	r1, #1
 80078da:	4804      	ldr	r0, [pc, #16]	; (80078ec <SPI_WIFI_ReceiveData+0xe8>)
 80078dc:	f7fa fd26 	bl	800232c <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 80078e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	48001000 	.word	0x48001000
 80078f0:	200008c4 	.word	0x200008c4
 80078f4:	20000860 	.word	0x20000860

080078f8 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	460b      	mov	r3, r1
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fef9 	bl	8007700 <wait_cmddata_rdy_high>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	da02      	bge.n	800791a <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 8007914:	f04f 33ff 	mov.w	r3, #4294967295
 8007918:	e04f      	b.n	80079ba <SPI_WIFI_SendData+0xc2>
  }
    
  /* arm to detect rising event */
  cmddata_rdy_rising_event=1;
 800791a:	4b2a      	ldr	r3, [pc, #168]	; (80079c4 <SPI_WIFI_SendData+0xcc>)
 800791c:	2201      	movs	r2, #1
 800791e:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 8007920:	2200      	movs	r2, #0
 8007922:	2101      	movs	r1, #1
 8007924:	4828      	ldr	r0, [pc, #160]	; (80079c8 <SPI_WIFI_SendData+0xd0>)
 8007926:	f7fa fd01 	bl	800232c <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800792a:	200f      	movs	r0, #15
 800792c:	f000 f85e 	bl	80079ec <SPI_WIFI_DelayUs>
  if (len > 1)
 8007930:	897b      	ldrh	r3, [r7, #10]
 8007932:	2b01      	cmp	r3, #1
 8007934:	d919      	bls.n	800796a <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 8007936:	4b25      	ldr	r3, [pc, #148]	; (80079cc <SPI_WIFI_SendData+0xd4>)
 8007938:	2201      	movs	r2, #1
 800793a:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800793c:	897b      	ldrh	r3, [r7, #10]
 800793e:	085b      	lsrs	r3, r3, #1
 8007940:	b29b      	uxth	r3, r3
 8007942:	461a      	mov	r2, r3
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	4822      	ldr	r0, [pc, #136]	; (80079d0 <SPI_WIFI_SendData+0xd8>)
 8007948:	f7fc ffda 	bl	8004900 <HAL_SPI_Transmit_IT>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d007      	beq.n	8007962 <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 8007952:	2201      	movs	r2, #1
 8007954:	2101      	movs	r1, #1
 8007956:	481c      	ldr	r0, [pc, #112]	; (80079c8 <SPI_WIFI_SendData+0xd0>)
 8007958:	f7fa fce8 	bl	800232c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800795c:	f04f 33ff 	mov.w	r3, #4294967295
 8007960:	e02b      	b.n	80079ba <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff ff2d 	bl	80077c4 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	f003 0301 	and.w	r3, r3, #1
 8007970:	2b00      	cmp	r3, #0
 8007972:	d020      	beq.n	80079b6 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 8007974:	897b      	ldrh	r3, [r7, #10]
 8007976:	3b01      	subs	r3, #1
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4413      	add	r3, r2
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 8007980:	230a      	movs	r3, #10
 8007982:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 8007984:	4b11      	ldr	r3, [pc, #68]	; (80079cc <SPI_WIFI_SendData+0xd4>)
 8007986:	2201      	movs	r2, #1
 8007988:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800798a:	f107 0314 	add.w	r3, r7, #20
 800798e:	2201      	movs	r2, #1
 8007990:	4619      	mov	r1, r3
 8007992:	480f      	ldr	r0, [pc, #60]	; (80079d0 <SPI_WIFI_SendData+0xd8>)
 8007994:	f7fc ffb4 	bl	8004900 <HAL_SPI_Transmit_IT>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800799e:	2201      	movs	r2, #1
 80079a0:	2101      	movs	r1, #1
 80079a2:	4809      	ldr	r0, [pc, #36]	; (80079c8 <SPI_WIFI_SendData+0xd0>)
 80079a4:	f7fa fcc2 	bl	800232c <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 80079a8:	f04f 33ff 	mov.w	r3, #4294967295
 80079ac:	e005      	b.n	80079ba <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff07 	bl	80077c4 <wait_spi_tx_event>
    
  }
  return len;
 80079b6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	200008cc 	.word	0x200008cc
 80079c8:	48001000 	.word	0x48001000
 80079cc:	200008c8 	.word	0x200008c8
 80079d0:	20000860 	.word	0x20000860

080079d4 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7f9 ff69 	bl	80018b4 <HAL_Delay>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  volatile        uint32_t ct = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	60bb      	str	r3, [r7, #8]
  uint32_t        loop_per_us = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80079fc:	4b20      	ldr	r3, [pc, #128]	; (8007a80 <SPI_WIFI_DelayUs+0x94>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d122      	bne.n	8007a4a <SPI_WIFI_DelayUs+0x5e>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 8007a04:	4b1f      	ldr	r3, [pc, #124]	; (8007a84 <SPI_WIFI_DelayUs+0x98>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a1f      	ldr	r2, [pc, #124]	; (8007a88 <SPI_WIFI_DelayUs+0x9c>)
 8007a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a0e:	099b      	lsrs	r3, r3, #6
 8007a10:	613b      	str	r3, [r7, #16]
     uint32_t t = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
     ct = cycle_per_ms;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	60bb      	str	r3, [r7, #8]
     t = HAL_GetTick();
 8007a1a:	f7f9 ff3f 	bl	800189c <HAL_GetTick>
 8007a1e:	60f8      	str	r0, [r7, #12]
     while(ct) ct--;
 8007a20:	e002      	b.n	8007a28 <SPI_WIFI_DelayUs+0x3c>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	60bb      	str	r3, [r7, #8]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d1f9      	bne.n	8007a22 <SPI_WIFI_DelayUs+0x36>
     cycle_per_loop = HAL_GetTick()-t;
 8007a2e:	f7f9 ff35 	bl	800189c <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	4a11      	ldr	r2, [pc, #68]	; (8007a80 <SPI_WIFI_DelayUs+0x94>)
 8007a3a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 8007a3c:	4b10      	ldr	r3, [pc, #64]	; (8007a80 <SPI_WIFI_DelayUs+0x94>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <SPI_WIFI_DelayUs+0x5e>
 8007a44:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <SPI_WIFI_DelayUs+0x94>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 8007a4a:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <SPI_WIFI_DelayUs+0x98>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a0f      	ldr	r2, [pc, #60]	; (8007a8c <SPI_WIFI_DelayUs+0xa0>)
 8007a50:	fba2 2303 	umull	r2, r3, r2, r3
 8007a54:	0c9a      	lsrs	r2, r3, #18
 8007a56:	4b0a      	ldr	r3, [pc, #40]	; (8007a80 <SPI_WIFI_DelayUs+0x94>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5e:	617b      	str	r3, [r7, #20]
  ct = n * loop_per_us;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	fb02 f303 	mul.w	r3, r2, r3
 8007a68:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 8007a6a:	e002      	b.n	8007a72 <SPI_WIFI_DelayUs+0x86>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	60bb      	str	r3, [r7, #8]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d1f9      	bne.n	8007a6c <SPI_WIFI_DelayUs+0x80>
  return;
 8007a78:	bf00      	nop
}
 8007a7a:	3718      	adds	r7, #24
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	200008d0 	.word	0x200008d0
 8007a84:	20000000 	.word	0x20000000
 8007a88:	10624dd3 	.word	0x10624dd3
 8007a8c:	431bde83 	.word	0x431bde83

08007a90 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 8007a98:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <HAL_SPI_RxCpltCallback+0x24>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d002      	beq.n	8007aa6 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 8007aa0:	4b04      	ldr	r3, [pc, #16]	; (8007ab4 <HAL_SPI_RxCpltCallback+0x24>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
  }
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	200008c4 	.word	0x200008c4

08007ab8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <HAL_SPI_TxCpltCallback+0x24>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 8007ac8:	4b04      	ldr	r3, [pc, #16]	; (8007adc <HAL_SPI_TxCpltCallback+0x24>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
  }
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	200008c8 	.word	0x200008c8

08007ae0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 8007ae4:	4b05      	ldr	r3, [pc, #20]	; (8007afc <SPI_WIFI_ISR+0x1c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d102      	bne.n	8007af2 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 8007aec:	4b03      	ldr	r3, [pc, #12]	; (8007afc <SPI_WIFI_ISR+0x1c>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
   }
}
 8007af2:	bf00      	nop
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	200008cc 	.word	0x200008cc

08007b00 <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	71fb      	strb	r3, [r7, #7]
  printf("esta en wifi_init\r\n");
 8007b0a:	480e      	ldr	r0, [pc, #56]	; (8007b44 <WIFI_Init+0x44>)
 8007b0c:	f003 fbca 	bl	800b2a4 <puts>
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <WIFI_Init+0x48>)
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <WIFI_Init+0x4c>)
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	4b0d      	ldr	r3, [pc, #52]	; (8007b50 <WIFI_Init+0x50>)
 8007b1a:	4a0e      	ldr	r2, [pc, #56]	; (8007b54 <WIFI_Init+0x54>)
 8007b1c:	490e      	ldr	r1, [pc, #56]	; (8007b58 <WIFI_Init+0x58>)
 8007b1e:	480f      	ldr	r0, [pc, #60]	; (8007b5c <WIFI_Init+0x5c>)
 8007b20:	f7ff fb26 	bl	8007170 <ES_WIFI_RegisterBusIO>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <WIFI_Init+0x3a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8007b2a:	480c      	ldr	r0, [pc, #48]	; (8007b5c <WIFI_Init+0x5c>)
 8007b2c:	f7ff faec 	bl	8007108 <ES_WIFI_Init>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <WIFI_Init+0x3a>
    {
      ret = WIFI_STATUS_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	0800c50c 	.word	0x0800c50c
 8007b48:	08007805 	.word	0x08007805
 8007b4c:	080078f9 	.word	0x080078f9
 8007b50:	080079d5 	.word	0x080079d5
 8007b54:	080076ed 	.word	0x080076ed
 8007b58:	08007551 	.word	0x08007551
 8007b5c:	200008d4 	.word	0x200008d4

08007b60 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	75fb      	strb	r3, [r7, #23]
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 8007b72:	79fb      	ldrb	r3, [r7, #7]
 8007b74:	68ba      	ldr	r2, [r7, #8]
 8007b76:	68f9      	ldr	r1, [r7, #12]
 8007b78:	480b      	ldr	r0, [pc, #44]	; (8007ba8 <WIFI_Connect+0x48>)
 8007b7a:	f7ff fb2d 	bl	80071d8 <ES_WIFI_Connect>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d10b      	bne.n	8007b9c <WIFI_Connect+0x3c>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 8007b84:	4808      	ldr	r0, [pc, #32]	; (8007ba8 <WIFI_Connect+0x48>)
 8007b86:	f7ff fbcb 	bl	8007320 <ES_WIFI_GetNetworkSettings>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <WIFI_Connect+0x36>
    {
       ret = WIFI_STATUS_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	75fb      	strb	r3, [r7, #23]
 8007b94:	e002      	b.n	8007b9c <WIFI_Connect+0x3c>
    }else{
    	  printf("Probando conexion\r\n");
 8007b96:	4805      	ldr	r0, [pc, #20]	; (8007bac <WIFI_Connect+0x4c>)
 8007b98:	f003 fb84 	bl	800b2a4 <puts>
    }
  }
  return ret;
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	200008d4 	.word	0x200008d4
 8007bac:	0800c520 	.word	0x0800c520

08007bb0 <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b084      	sub	sp, #16
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	4806      	ldr	r0, [pc, #24]	; (8007bd8 <WIFI_GetMAC_Address+0x28>)
 8007bc0:	f7ff fbd8 	bl	8007374 <ES_WIFI_GetMACAddress>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	200008d4 	.word	0x200008d4

08007bdc <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8007be8:	4809      	ldr	r0, [pc, #36]	; (8007c10 <WIFI_GetIP_Address+0x34>)
 8007bea:	f7ff fb6d 	bl	80072c8 <ES_WIFI_IsConnected>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d107      	bne.n	8007c04 <WIFI_GetIP_Address+0x28>
 8007bf4:	4b06      	ldr	r3, [pc, #24]	; (8007c10 <WIFI_GetIP_Address+0x34>)
 8007bf6:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 8007bfa:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop
 8007c10:	200008d4 	.word	0x200008d4

08007c14 <__NVIC_SetPriority>:
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6039      	str	r1, [r7, #0]
 8007c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	db0a      	blt.n	8007c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	490c      	ldr	r1, [pc, #48]	; (8007c60 <__NVIC_SetPriority+0x4c>)
 8007c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c32:	0112      	lsls	r2, r2, #4
 8007c34:	b2d2      	uxtb	r2, r2
 8007c36:	440b      	add	r3, r1
 8007c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007c3c:	e00a      	b.n	8007c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	4908      	ldr	r1, [pc, #32]	; (8007c64 <__NVIC_SetPriority+0x50>)
 8007c44:	79fb      	ldrb	r3, [r7, #7]
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	3b04      	subs	r3, #4
 8007c4c:	0112      	lsls	r2, r2, #4
 8007c4e:	b2d2      	uxtb	r2, r2
 8007c50:	440b      	add	r3, r1
 8007c52:	761a      	strb	r2, [r3, #24]
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	e000e100 	.word	0xe000e100
 8007c64:	e000ed00 	.word	0xe000ed00

08007c68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007c6c:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <SysTick_Handler+0x1c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007c70:	f001 fd28 	bl	80096c4 <xTaskGetSchedulerState>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d001      	beq.n	8007c7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007c7a:	f002 fb0d 	bl	800a298 <xPortSysTickHandler>
  }
}
 8007c7e:	bf00      	nop
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	e000e010 	.word	0xe000e010

08007c88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	f06f 0004 	mvn.w	r0, #4
 8007c92:	f7ff ffbf 	bl	8007c14 <__NVIC_SetPriority>
#endif
}
 8007c96:	bf00      	nop
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca2:	f3ef 8305 	mrs	r3, IPSR
 8007ca6:	603b      	str	r3, [r7, #0]
  return(result);
 8007ca8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007cae:	f06f 0305 	mvn.w	r3, #5
 8007cb2:	607b      	str	r3, [r7, #4]
 8007cb4:	e00c      	b.n	8007cd0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007cb6:	4b0a      	ldr	r3, [pc, #40]	; (8007ce0 <osKernelInitialize+0x44>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007cbe:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <osKernelInitialize+0x44>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	607b      	str	r3, [r7, #4]
 8007cc8:	e002      	b.n	8007cd0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007cca:	f04f 33ff 	mov.w	r3, #4294967295
 8007cce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007cd0:	687b      	ldr	r3, [r7, #4]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	200011d4 	.word	0x200011d4

08007ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007cea:	f3ef 8305 	mrs	r3, IPSR
 8007cee:	603b      	str	r3, [r7, #0]
  return(result);
 8007cf0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <osKernelStart+0x1a>
    stat = osErrorISR;
 8007cf6:	f06f 0305 	mvn.w	r3, #5
 8007cfa:	607b      	str	r3, [r7, #4]
 8007cfc:	e010      	b.n	8007d20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <osKernelStart+0x48>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d109      	bne.n	8007d1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007d06:	f7ff ffbf 	bl	8007c88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007d0a:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <osKernelStart+0x48>)
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007d10:	f001 f87c 	bl	8008e0c <vTaskStartScheduler>
      stat = osOK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	607b      	str	r3, [r7, #4]
 8007d18:	e002      	b.n	8007d20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007d20:	687b      	ldr	r3, [r7, #4]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	bf00      	nop
 8007d2c:	200011d4 	.word	0x200011d4

08007d30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08e      	sub	sp, #56	; 0x38
 8007d34:	af04      	add	r7, sp, #16
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d40:	f3ef 8305 	mrs	r3, IPSR
 8007d44:	617b      	str	r3, [r7, #20]
  return(result);
 8007d46:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d17e      	bne.n	8007e4a <osThreadNew+0x11a>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d07b      	beq.n	8007e4a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007d56:	2318      	movs	r3, #24
 8007d58:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d62:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d045      	beq.n	8007df6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osThreadNew+0x48>
        name = attr->name;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <osThreadNew+0x6e>
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	2b38      	cmp	r3, #56	; 0x38
 8007d90:	d805      	bhi.n	8007d9e <osThreadNew+0x6e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <osThreadNew+0x72>
        return (NULL);
 8007d9e:	2300      	movs	r3, #0
 8007da0:	e054      	b.n	8007e4c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d003      	beq.n	8007db2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	089b      	lsrs	r3, r3, #2
 8007db0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00e      	beq.n	8007dd8 <osThreadNew+0xa8>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	2bbb      	cmp	r3, #187	; 0xbb
 8007dc0:	d90a      	bls.n	8007dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d002      	beq.n	8007dd8 <osThreadNew+0xa8>
        mem = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	61bb      	str	r3, [r7, #24]
 8007dd6:	e010      	b.n	8007dfa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d10c      	bne.n	8007dfa <osThreadNew+0xca>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d108      	bne.n	8007dfa <osThreadNew+0xca>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d104      	bne.n	8007dfa <osThreadNew+0xca>
          mem = 0;
 8007df0:	2300      	movs	r3, #0
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	e001      	b.n	8007dfa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d110      	bne.n	8007e22 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007e08:	9202      	str	r2, [sp, #8]
 8007e0a:	9301      	str	r3, [sp, #4]
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	6a3a      	ldr	r2, [r7, #32]
 8007e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fe0c 	bl	8008a34 <xTaskCreateStatic>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	613b      	str	r3, [r7, #16]
 8007e20:	e013      	b.n	8007e4a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d110      	bne.n	8007e4a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007e28:	6a3b      	ldr	r3, [r7, #32]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f107 0310 	add.w	r3, r7, #16
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e3a:	68f8      	ldr	r0, [r7, #12]
 8007e3c:	f000 fe57 	bl	8008aee <xTaskCreate>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d001      	beq.n	8007e4a <osThreadNew+0x11a>
            hTask = NULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007e4a:	693b      	ldr	r3, [r7, #16]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3728      	adds	r7, #40	; 0x28
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e5c:	f3ef 8305 	mrs	r3, IPSR
 8007e60:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e62:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <osDelay+0x1c>
    stat = osErrorISR;
 8007e68:	f06f 0305 	mvn.w	r3, #5
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e007      	b.n	8007e80 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 ff92 	bl	8008da4 <vTaskDelay>
    }
  }

  return (stat);
 8007e80:	68fb      	ldr	r3, [r7, #12]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007e8c:	b480      	push	{r7}
 8007e8e:	b085      	sub	sp, #20
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a07      	ldr	r2, [pc, #28]	; (8007eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8007e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4a06      	ldr	r2, [pc, #24]	; (8007ebc <vApplicationGetIdleTaskMemory+0x30>)
 8007ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2280      	movs	r2, #128	; 0x80
 8007ea8:	601a      	str	r2, [r3, #0]
}
 8007eaa:	bf00      	nop
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200011d8 	.word	0x200011d8
 8007ebc:	20001294 	.word	0x20001294

08007ec0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	4a07      	ldr	r2, [pc, #28]	; (8007eec <vApplicationGetTimerTaskMemory+0x2c>)
 8007ed0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4a06      	ldr	r2, [pc, #24]	; (8007ef0 <vApplicationGetTimerTaskMemory+0x30>)
 8007ed6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ede:	601a      	str	r2, [r3, #0]
}
 8007ee0:	bf00      	nop
 8007ee2:	3714      	adds	r7, #20
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr
 8007eec:	20001494 	.word	0x20001494
 8007ef0:	20001550 	.word	0x20001550

08007ef4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f103 0208 	add.w	r2, r3, #8
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f103 0208 	add.w	r2, r3, #8
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f103 0208 	add.w	r2, r3, #8
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr

08007f4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f4e:	b480      	push	{r7}
 8007f50:	b085      	sub	sp, #20
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	601a      	str	r2, [r3, #0]
}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007f96:	b480      	push	{r7}
 8007f98:	b085      	sub	sp, #20
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fac:	d103      	bne.n	8007fb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e00c      	b.n	8007fd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	e002      	b.n	8007fc4 <vListInsert+0x2e>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	60fb      	str	r3, [r7, #12]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d2f6      	bcs.n	8007fbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	68fa      	ldr	r2, [r7, #12]
 8007fe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
}
 8007ffc:	bf00      	nop
 8007ffe:	3714      	adds	r7, #20
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	6892      	ldr	r2, [r2, #8]
 800801e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	6852      	ldr	r2, [r2, #4]
 8008028:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	429a      	cmp	r2, r3
 8008032:	d103      	bne.n	800803c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689a      	ldr	r2, [r3, #8]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	1e5a      	subs	r2, r3, #1
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3714      	adds	r7, #20
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10a      	bne.n	8008086 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008074:	f383 8811 	msr	BASEPRI, r3
 8008078:	f3bf 8f6f 	isb	sy
 800807c:	f3bf 8f4f 	dsb	sy
 8008080:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008082:	bf00      	nop
 8008084:	e7fe      	b.n	8008084 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008086:	f002 f875 	bl	800a174 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	68f9      	ldr	r1, [r7, #12]
 8008094:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008096:	fb01 f303 	mul.w	r3, r1, r3
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b6:	3b01      	subs	r3, #1
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80080bc:	fb01 f303 	mul.w	r3, r1, r3
 80080c0:	441a      	add	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	22ff      	movs	r2, #255	; 0xff
 80080ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	22ff      	movs	r2, #255	; 0xff
 80080d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d114      	bne.n	8008106 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d01a      	beq.n	800811a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	3310      	adds	r3, #16
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f929 	bl	8009340 <xTaskRemoveFromEventList>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d012      	beq.n	800811a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80080f4:	4b0c      	ldr	r3, [pc, #48]	; (8008128 <xQueueGenericReset+0xcc>)
 80080f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	f3bf 8f6f 	isb	sy
 8008104:	e009      	b.n	800811a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3310      	adds	r3, #16
 800810a:	4618      	mov	r0, r3
 800810c:	f7ff fef2 	bl	8007ef4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3324      	adds	r3, #36	; 0x24
 8008114:	4618      	mov	r0, r3
 8008116:	f7ff feed 	bl	8007ef4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800811a:	f002 f85b 	bl	800a1d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800811e:	2301      	movs	r3, #1
}
 8008120:	4618      	mov	r0, r3
 8008122:	3710      	adds	r7, #16
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08e      	sub	sp, #56	; 0x38
 8008130:	af02      	add	r7, sp, #8
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800815c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800816e:	bf00      	nop
 8008170:	e7fe      	b.n	8008170 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <xQueueGenericCreateStatic+0x52>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <xQueueGenericCreateStatic+0x56>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <xQueueGenericCreateStatic+0x58>
 8008182:	2300      	movs	r3, #0
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10a      	bne.n	800819e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	623b      	str	r3, [r7, #32]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <xQueueGenericCreateStatic+0x7e>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d101      	bne.n	80081ae <xQueueGenericCreateStatic+0x82>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e000      	b.n	80081b0 <xQueueGenericCreateStatic+0x84>
 80081ae:	2300      	movs	r3, #0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d10a      	bne.n	80081ca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80081b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b8:	f383 8811 	msr	BASEPRI, r3
 80081bc:	f3bf 8f6f 	isb	sy
 80081c0:	f3bf 8f4f 	dsb	sy
 80081c4:	61fb      	str	r3, [r7, #28]
}
 80081c6:	bf00      	nop
 80081c8:	e7fe      	b.n	80081c8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80081ca:	2350      	movs	r3, #80	; 0x50
 80081cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b50      	cmp	r3, #80	; 0x50
 80081d2:	d00a      	beq.n	80081ea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	61bb      	str	r3, [r7, #24]
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80081ea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00d      	beq.n	8008212 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80081fe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	4613      	mov	r3, r2
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	68b9      	ldr	r1, [r7, #8]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 f805 	bl	800821c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008214:	4618      	mov	r0, r3
 8008216:	3730      	adds	r7, #48	; 0x30
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
 8008228:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d103      	bne.n	8008238 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e002      	b.n	800823e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800824a:	2101      	movs	r1, #1
 800824c:	69b8      	ldr	r0, [r7, #24]
 800824e:	f7ff ff05 	bl	800805c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	78fa      	ldrb	r2, [r7, #3]
 8008256:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b08e      	sub	sp, #56	; 0x38
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008272:	2300      	movs	r3, #0
 8008274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10a      	bne.n	8008296 <xQueueGenericSend+0x32>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <xQueueGenericSend+0x40>
 800829c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <xQueueGenericSend+0x44>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <xQueueGenericSend+0x46>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <xQueueGenericSend+0x60>
	__asm volatile
 80082ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b2:	f383 8811 	msr	BASEPRI, r3
 80082b6:	f3bf 8f6f 	isb	sy
 80082ba:	f3bf 8f4f 	dsb	sy
 80082be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082c0:	bf00      	nop
 80082c2:	e7fe      	b.n	80082c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d103      	bne.n	80082d2 <xQueueGenericSend+0x6e>
 80082ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d101      	bne.n	80082d6 <xQueueGenericSend+0x72>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e000      	b.n	80082d8 <xQueueGenericSend+0x74>
 80082d6:	2300      	movs	r3, #0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	623b      	str	r3, [r7, #32]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80082f2:	f001 f9e7 	bl	80096c4 <xTaskGetSchedulerState>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xQueueGenericSend+0x9e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <xQueueGenericSend+0xa2>
 8008302:	2301      	movs	r3, #1
 8008304:	e000      	b.n	8008308 <xQueueGenericSend+0xa4>
 8008306:	2300      	movs	r3, #0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d10a      	bne.n	8008322 <xQueueGenericSend+0xbe>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	61fb      	str	r3, [r7, #28]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008322:	f001 ff27 	bl	800a174 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <xQueueGenericSend+0xd4>
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	2b02      	cmp	r3, #2
 8008336:	d129      	bne.n	800838c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800833e:	f000 fa0b 	bl	8008758 <prvCopyDataToQueue>
 8008342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	2b00      	cmp	r3, #0
 800834a:	d010      	beq.n	800836e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800834c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834e:	3324      	adds	r3, #36	; 0x24
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fff5 	bl	8009340 <xTaskRemoveFromEventList>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d013      	beq.n	8008384 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800835c:	4b3f      	ldr	r3, [pc, #252]	; (800845c <xQueueGenericSend+0x1f8>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	f3bf 8f6f 	isb	sy
 800836c:	e00a      	b.n	8008384 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800836e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008370:	2b00      	cmp	r3, #0
 8008372:	d007      	beq.n	8008384 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008374:	4b39      	ldr	r3, [pc, #228]	; (800845c <xQueueGenericSend+0x1f8>)
 8008376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008384:	f001 ff26 	bl	800a1d4 <vPortExitCritical>
				return pdPASS;
 8008388:	2301      	movs	r3, #1
 800838a:	e063      	b.n	8008454 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d103      	bne.n	800839a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008392:	f001 ff1f 	bl	800a1d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008396:	2300      	movs	r3, #0
 8008398:	e05c      	b.n	8008454 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800839a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d106      	bne.n	80083ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a0:	f107 0314 	add.w	r3, r7, #20
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f82f 	bl	8009408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083aa:	2301      	movs	r3, #1
 80083ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083ae:	f001 ff11 	bl	800a1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b2:	f000 fd9b 	bl	8008eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083b6:	f001 fedd 	bl	800a174 <vPortEnterCritical>
 80083ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c0:	b25b      	sxtb	r3, r3
 80083c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c6:	d103      	bne.n	80083d0 <xQueueGenericSend+0x16c>
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083d6:	b25b      	sxtb	r3, r3
 80083d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083dc:	d103      	bne.n	80083e6 <xQueueGenericSend+0x182>
 80083de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083e6:	f001 fef5 	bl	800a1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083ea:	1d3a      	adds	r2, r7, #4
 80083ec:	f107 0314 	add.w	r3, r7, #20
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f001 f81e 	bl	8009434 <xTaskCheckForTimeOut>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d124      	bne.n	8008448 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80083fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008400:	f000 faa2 	bl	8008948 <prvIsQueueFull>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d018      	beq.n	800843c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800840a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840c:	3310      	adds	r3, #16
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	4611      	mov	r1, r2
 8008412:	4618      	mov	r0, r3
 8008414:	f000 ff44 	bl	80092a0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800841a:	f000 fa2d 	bl	8008878 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800841e:	f000 fd73 	bl	8008f08 <xTaskResumeAll>
 8008422:	4603      	mov	r3, r0
 8008424:	2b00      	cmp	r3, #0
 8008426:	f47f af7c 	bne.w	8008322 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800842a:	4b0c      	ldr	r3, [pc, #48]	; (800845c <xQueueGenericSend+0x1f8>)
 800842c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	e772      	b.n	8008322 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800843c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800843e:	f000 fa1b 	bl	8008878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008442:	f000 fd61 	bl	8008f08 <xTaskResumeAll>
 8008446:	e76c      	b.n	8008322 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844a:	f000 fa15 	bl	8008878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800844e:	f000 fd5b 	bl	8008f08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008454:	4618      	mov	r0, r3
 8008456:	3738      	adds	r7, #56	; 0x38
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b090      	sub	sp, #64	; 0x40
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d103      	bne.n	800849c <xQueueGenericSendFromISR+0x3c>
 8008494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <xQueueGenericSendFromISR+0x40>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <xQueueGenericSendFromISR+0x42>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10a      	bne.n	80084bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2b02      	cmp	r3, #2
 80084c0:	d103      	bne.n	80084ca <xQueueGenericSendFromISR+0x6a>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <xQueueGenericSendFromISR+0x6e>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e000      	b.n	80084d0 <xQueueGenericSendFromISR+0x70>
 80084ce:	2300      	movs	r3, #0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10a      	bne.n	80084ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80084d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	623b      	str	r3, [r7, #32]
}
 80084e6:	bf00      	nop
 80084e8:	e7fe      	b.n	80084e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80084ea:	f001 ff25 	bl	800a338 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80084ee:	f3ef 8211 	mrs	r2, BASEPRI
 80084f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f6:	f383 8811 	msr	BASEPRI, r3
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	f3bf 8f4f 	dsb	sy
 8008502:	61fa      	str	r2, [r7, #28]
 8008504:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008506:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008508:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800850e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008512:	429a      	cmp	r2, r3
 8008514:	d302      	bcc.n	800851c <xQueueGenericSendFromISR+0xbc>
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d12f      	bne.n	800857c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800851c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	68b9      	ldr	r1, [r7, #8]
 8008530:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008532:	f000 f911 	bl	8008758 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008536:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800853e:	d112      	bne.n	8008566 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	d016      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854a:	3324      	adds	r3, #36	; 0x24
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fef7 	bl	8009340 <xTaskRemoveFromEventList>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00e      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00b      	beq.n	8008576 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	e007      	b.n	8008576 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008566:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800856a:	3301      	adds	r3, #1
 800856c:	b2db      	uxtb	r3, r3
 800856e:	b25a      	sxtb	r2, r3
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008576:	2301      	movs	r3, #1
 8008578:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800857a:	e001      	b.n	8008580 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800857c:	2300      	movs	r3, #0
 800857e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008582:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800858a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800858c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800858e:	4618      	mov	r0, r3
 8008590:	3740      	adds	r7, #64	; 0x40
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
	...

08008598 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b08c      	sub	sp, #48	; 0x30
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <xQueueReceive+0x30>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	623b      	str	r3, [r7, #32]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d103      	bne.n	80085d6 <xQueueReceive+0x3e>
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <xQueueReceive+0x42>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <xQueueReceive+0x44>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <xQueueReceive+0x5e>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	61fb      	str	r3, [r7, #28]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085f6:	f001 f865 	bl	80096c4 <xTaskGetSchedulerState>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d102      	bne.n	8008606 <xQueueReceive+0x6e>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <xQueueReceive+0x72>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueReceive+0x74>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueReceive+0x8e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008626:	f001 fda5 	bl	800a174 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800862a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d01f      	beq.n	8008676 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800863a:	f000 f8f7 	bl	800882c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	1e5a      	subs	r2, r3, #1
 8008642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008644:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00f      	beq.n	800866e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008650:	3310      	adds	r3, #16
 8008652:	4618      	mov	r0, r3
 8008654:	f000 fe74 	bl	8009340 <xTaskRemoveFromEventList>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d007      	beq.n	800866e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800865e:	4b3d      	ldr	r3, [pc, #244]	; (8008754 <xQueueReceive+0x1bc>)
 8008660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008664:	601a      	str	r2, [r3, #0]
 8008666:	f3bf 8f4f 	dsb	sy
 800866a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800866e:	f001 fdb1 	bl	800a1d4 <vPortExitCritical>
				return pdPASS;
 8008672:	2301      	movs	r3, #1
 8008674:	e069      	b.n	800874a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d103      	bne.n	8008684 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800867c:	f001 fdaa 	bl	800a1d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008680:	2300      	movs	r3, #0
 8008682:	e062      	b.n	800874a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800868a:	f107 0310 	add.w	r3, r7, #16
 800868e:	4618      	mov	r0, r3
 8008690:	f000 feba 	bl	8009408 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008694:	2301      	movs	r3, #1
 8008696:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008698:	f001 fd9c 	bl	800a1d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800869c:	f000 fc26 	bl	8008eec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086a0:	f001 fd68 	bl	800a174 <vPortEnterCritical>
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086aa:	b25b      	sxtb	r3, r3
 80086ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b0:	d103      	bne.n	80086ba <xQueueReceive+0x122>
 80086b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c0:	b25b      	sxtb	r3, r3
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d103      	bne.n	80086d0 <xQueueReceive+0x138>
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d0:	f001 fd80 	bl	800a1d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086d4:	1d3a      	adds	r2, r7, #4
 80086d6:	f107 0310 	add.w	r3, r7, #16
 80086da:	4611      	mov	r1, r2
 80086dc:	4618      	mov	r0, r3
 80086de:	f000 fea9 	bl	8009434 <xTaskCheckForTimeOut>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d123      	bne.n	8008730 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086ea:	f000 f917 	bl	800891c <prvIsQueueEmpty>
 80086ee:	4603      	mov	r3, r0
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d017      	beq.n	8008724 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	3324      	adds	r3, #36	; 0x24
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fdcf 	bl	80092a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008704:	f000 f8b8 	bl	8008878 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008708:	f000 fbfe 	bl	8008f08 <xTaskResumeAll>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d189      	bne.n	8008626 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008712:	4b10      	ldr	r3, [pc, #64]	; (8008754 <xQueueReceive+0x1bc>)
 8008714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	e780      	b.n	8008626 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008726:	f000 f8a7 	bl	8008878 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800872a:	f000 fbed 	bl	8008f08 <xTaskResumeAll>
 800872e:	e77a      	b.n	8008626 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008732:	f000 f8a1 	bl	8008878 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008736:	f000 fbe7 	bl	8008f08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800873a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800873c:	f000 f8ee 	bl	800891c <prvIsQueueEmpty>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	f43f af6f 	beq.w	8008626 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008748:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800874a:	4618      	mov	r0, r3
 800874c:	3730      	adds	r7, #48	; 0x30
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	e000ed04 	.word	0xe000ed04

08008758 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008764:	2300      	movs	r3, #0
 8008766:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10d      	bne.n	8008792 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d14d      	bne.n	800881a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	4618      	mov	r0, r3
 8008784:	f000 ffbc 	bl	8009700 <xTaskPriorityDisinherit>
 8008788:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2200      	movs	r2, #0
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	e043      	b.n	800881a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d119      	bne.n	80087cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6858      	ldr	r0, [r3, #4]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a0:	461a      	mov	r2, r3
 80087a2:	68b9      	ldr	r1, [r7, #8]
 80087a4:	f002 f945 	bl	800aa32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	685a      	ldr	r2, [r3, #4]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	441a      	add	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d32b      	bcc.n	800881a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	605a      	str	r2, [r3, #4]
 80087ca:	e026      	b.n	800881a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	68d8      	ldr	r0, [r3, #12]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	461a      	mov	r2, r3
 80087d6:	68b9      	ldr	r1, [r7, #8]
 80087d8:	f002 f92b 	bl	800aa32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e4:	425b      	negs	r3, r3
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d207      	bcs.n	8008808 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689a      	ldr	r2, [r3, #8]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	425b      	negs	r3, r3
 8008802:	441a      	add	r2, r3
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b02      	cmp	r3, #2
 800880c:	d105      	bne.n	800881a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d002      	beq.n	800881a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	3b01      	subs	r3, #1
 8008818:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008822:	697b      	ldr	r3, [r7, #20]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3718      	adds	r7, #24
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	2b00      	cmp	r3, #0
 800883c:	d018      	beq.n	8008870 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	441a      	add	r2, r3
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68da      	ldr	r2, [r3, #12]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	429a      	cmp	r2, r3
 8008856:	d303      	bcc.n	8008860 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	68d9      	ldr	r1, [r3, #12]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008868:	461a      	mov	r2, r3
 800886a:	6838      	ldr	r0, [r7, #0]
 800886c:	f002 f8e1 	bl	800aa32 <memcpy>
	}
}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008880:	f001 fc78 	bl	800a174 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800888a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800888c:	e011      	b.n	80088b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d012      	beq.n	80088bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3324      	adds	r3, #36	; 0x24
 800889a:	4618      	mov	r0, r3
 800889c:	f000 fd50 	bl	8009340 <xTaskRemoveFromEventList>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80088a6:	f000 fe27 	bl	80094f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dce9      	bgt.n	800888e <prvUnlockQueue+0x16>
 80088ba:	e000      	b.n	80088be <prvUnlockQueue+0x46>
					break;
 80088bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	22ff      	movs	r2, #255	; 0xff
 80088c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088c6:	f001 fc85 	bl	800a1d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088ca:	f001 fc53 	bl	800a174 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d6:	e011      	b.n	80088fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d012      	beq.n	8008906 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3310      	adds	r3, #16
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fd2b 	bl	8009340 <xTaskRemoveFromEventList>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088f0:	f000 fe02 	bl	80094f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	dce9      	bgt.n	80088d8 <prvUnlockQueue+0x60>
 8008904:	e000      	b.n	8008908 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008906:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	22ff      	movs	r2, #255	; 0xff
 800890c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008910:	f001 fc60 	bl	800a1d4 <vPortExitCritical>
}
 8008914:	bf00      	nop
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008924:	f001 fc26 	bl	800a174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	2b00      	cmp	r3, #0
 800892e:	d102      	bne.n	8008936 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008930:	2301      	movs	r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	e001      	b.n	800893a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800893a:	f001 fc4b 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 800893e:	68fb      	ldr	r3, [r7, #12]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008950:	f001 fc10 	bl	800a174 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800895c:	429a      	cmp	r2, r3
 800895e:	d102      	bne.n	8008966 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008960:	2301      	movs	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e001      	b.n	800896a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800896a:	f001 fc33 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 800896e:	68fb      	ldr	r3, [r7, #12]
}
 8008970:	4618      	mov	r0, r3
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	e014      	b.n	80089b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008988:	4a0f      	ldr	r2, [pc, #60]	; (80089c8 <vQueueAddToRegistry+0x50>)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10b      	bne.n	80089ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008994:	490c      	ldr	r1, [pc, #48]	; (80089c8 <vQueueAddToRegistry+0x50>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	683a      	ldr	r2, [r7, #0]
 800899a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <vQueueAddToRegistry+0x50>)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	00db      	lsls	r3, r3, #3
 80089a4:	4413      	add	r3, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80089aa:	e006      	b.n	80089ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	3301      	adds	r3, #1
 80089b0:	60fb      	str	r3, [r7, #12]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2b07      	cmp	r3, #7
 80089b6:	d9e7      	bls.n	8008988 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089b8:	bf00      	nop
 80089ba:	bf00      	nop
 80089bc:	3714      	adds	r7, #20
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	20001950 	.word	0x20001950

080089cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089dc:	f001 fbca 	bl	800a174 <vPortEnterCritical>
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e6:	b25b      	sxtb	r3, r3
 80089e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ec:	d103      	bne.n	80089f6 <vQueueWaitForMessageRestricted+0x2a>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089fc:	b25b      	sxtb	r3, r3
 80089fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a02:	d103      	bne.n	8008a0c <vQueueWaitForMessageRestricted+0x40>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0c:	f001 fbe2 	bl	800a1d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d106      	bne.n	8008a26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	3324      	adds	r3, #36	; 0x24
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	68b9      	ldr	r1, [r7, #8]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f000 fc61 	bl	80092e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a26:	6978      	ldr	r0, [r7, #20]
 8008a28:	f7ff ff26 	bl	8008878 <prvUnlockQueue>
	}
 8008a2c:	bf00      	nop
 8008a2e:	3718      	adds	r7, #24
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08e      	sub	sp, #56	; 0x38
 8008a38:	af04      	add	r7, sp, #16
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	623b      	str	r3, [r7, #32]
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xTaskCreateStatic+0x46>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	61fb      	str	r3, [r7, #28]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a7a:	23bc      	movs	r3, #188	; 0xbc
 8008a7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2bbc      	cmp	r3, #188	; 0xbc
 8008a82:	d00a      	beq.n	8008a9a <xTaskCreateStatic+0x66>
	__asm volatile
 8008a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a88:	f383 8811 	msr	BASEPRI, r3
 8008a8c:	f3bf 8f6f 	isb	sy
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	61bb      	str	r3, [r7, #24]
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a9a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d01e      	beq.n	8008ae0 <xTaskCreateStatic+0xac>
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d01b      	beq.n	8008ae0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008aba:	2300      	movs	r3, #0
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	9302      	str	r3, [sp, #8]
 8008ac2:	f107 0314 	add.w	r3, r7, #20
 8008ac6:	9301      	str	r3, [sp, #4]
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f000 f850 	bl	8008b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ad8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008ada:	f000 f8f3 	bl	8008cc4 <prvAddNewTaskToReadyList>
 8008ade:	e001      	b.n	8008ae4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ae4:	697b      	ldr	r3, [r7, #20]
	}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3728      	adds	r7, #40	; 0x28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b08c      	sub	sp, #48	; 0x30
 8008af2:	af04      	add	r7, sp, #16
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	603b      	str	r3, [r7, #0]
 8008afa:	4613      	mov	r3, r2
 8008afc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008afe:	88fb      	ldrh	r3, [r7, #6]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fc58 	bl	800a3b8 <pvPortMalloc>
 8008b08:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00e      	beq.n	8008b2e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b10:	20bc      	movs	r0, #188	; 0xbc
 8008b12:	f001 fc51 	bl	800a3b8 <pvPortMalloc>
 8008b16:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	697a      	ldr	r2, [r7, #20]
 8008b22:	631a      	str	r2, [r3, #48]	; 0x30
 8008b24:	e005      	b.n	8008b32 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b26:	6978      	ldr	r0, [r7, #20]
 8008b28:	f001 fd12 	bl	800a550 <vPortFree>
 8008b2c:	e001      	b.n	8008b32 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d017      	beq.n	8008b68 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b40:	88fa      	ldrh	r2, [r7, #6]
 8008b42:	2300      	movs	r3, #0
 8008b44:	9303      	str	r3, [sp, #12]
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	9302      	str	r3, [sp, #8]
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	9301      	str	r3, [sp, #4]
 8008b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b50:	9300      	str	r3, [sp, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f000 f80e 	bl	8008b78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b5c:	69f8      	ldr	r0, [r7, #28]
 8008b5e:	f000 f8b1 	bl	8008cc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b62:	2301      	movs	r3, #1
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	e002      	b.n	8008b6e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b68:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	009b      	lsls	r3, r3, #2
 8008b8e:	461a      	mov	r2, r3
 8008b90:	21a5      	movs	r1, #165	; 0xa5
 8008b92:	f001 ff76 	bl	800aa82 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f023 0307 	bic.w	r3, r3, #7
 8008bae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	f003 0307 	and.w	r3, r3, #7
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	617b      	str	r3, [r7, #20]
}
 8008bcc:	bf00      	nop
 8008bce:	e7fe      	b.n	8008bce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d01f      	beq.n	8008c16 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e012      	b.n	8008c02 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	7819      	ldrb	r1, [r3, #0]
 8008be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	4413      	add	r3, r2
 8008bea:	3334      	adds	r3, #52	; 0x34
 8008bec:	460a      	mov	r2, r1
 8008bee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bf0:	68ba      	ldr	r2, [r7, #8]
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d006      	beq.n	8008c0a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	2b0f      	cmp	r3, #15
 8008c06:	d9e9      	bls.n	8008bdc <prvInitialiseNewTask+0x64>
 8008c08:	e000      	b.n	8008c0c <prvInitialiseNewTask+0x94>
			{
				break;
 8008c0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c14:	e003      	b.n	8008c1e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	2b37      	cmp	r3, #55	; 0x37
 8008c22:	d901      	bls.n	8008c28 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c24:	2337      	movs	r3, #55	; 0x37
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c2c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c36:	2200      	movs	r2, #0
 8008c38:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff f978 	bl	8007f34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	3318      	adds	r3, #24
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f7ff f973 	bl	8007f34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c62:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	3354      	adds	r3, #84	; 0x54
 8008c78:	2260      	movs	r2, #96	; 0x60
 8008c7a:	2100      	movs	r1, #0
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f001 ff00 	bl	800aa82 <memset>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c84:	4a0c      	ldr	r2, [pc, #48]	; (8008cb8 <prvInitialiseNewTask+0x140>)
 8008c86:	659a      	str	r2, [r3, #88]	; 0x58
 8008c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8a:	4a0c      	ldr	r2, [pc, #48]	; (8008cbc <prvInitialiseNewTask+0x144>)
 8008c8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <prvInitialiseNewTask+0x148>)
 8008c92:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	68f9      	ldr	r1, [r7, #12]
 8008c98:	69b8      	ldr	r0, [r7, #24]
 8008c9a:	f001 f941 	bl	8009f20 <pxPortInitialiseStack>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cb0:	bf00      	nop
 8008cb2:	3720      	adds	r7, #32
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}
 8008cb8:	0800c638 	.word	0x0800c638
 8008cbc:	0800c658 	.word	0x0800c658
 8008cc0:	0800c618 	.word	0x0800c618

08008cc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008ccc:	f001 fa52 	bl	800a174 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cd0:	4b2d      	ldr	r3, [pc, #180]	; (8008d88 <prvAddNewTaskToReadyList+0xc4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	4a2c      	ldr	r2, [pc, #176]	; (8008d88 <prvAddNewTaskToReadyList+0xc4>)
 8008cd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008cda:	4b2c      	ldr	r3, [pc, #176]	; (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d109      	bne.n	8008cf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008ce2:	4a2a      	ldr	r2, [pc, #168]	; (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ce8:	4b27      	ldr	r3, [pc, #156]	; (8008d88 <prvAddNewTaskToReadyList+0xc4>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d110      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cf0:	f000 fc26 	bl	8009540 <prvInitialiseTaskLists>
 8008cf4:	e00d      	b.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cf6:	4b26      	ldr	r3, [pc, #152]	; (8008d90 <prvAddNewTaskToReadyList+0xcc>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d109      	bne.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d802      	bhi.n	8008d12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d0c:	4a1f      	ldr	r2, [pc, #124]	; (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d12:	4b20      	ldr	r3, [pc, #128]	; (8008d94 <prvAddNewTaskToReadyList+0xd0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	3301      	adds	r3, #1
 8008d18:	4a1e      	ldr	r2, [pc, #120]	; (8008d94 <prvAddNewTaskToReadyList+0xd0>)
 8008d1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d1c:	4b1d      	ldr	r3, [pc, #116]	; (8008d94 <prvAddNewTaskToReadyList+0xd0>)
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d28:	4b1b      	ldr	r3, [pc, #108]	; (8008d98 <prvAddNewTaskToReadyList+0xd4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d903      	bls.n	8008d38 <prvAddNewTaskToReadyList+0x74>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d34:	4a18      	ldr	r2, [pc, #96]	; (8008d98 <prvAddNewTaskToReadyList+0xd4>)
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <prvAddNewTaskToReadyList+0xd8>)
 8008d46:	441a      	add	r2, r3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f7ff f8fd 	bl	8007f4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d54:	f001 fa3e 	bl	800a1d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d58:	4b0d      	ldr	r3, [pc, #52]	; (8008d90 <prvAddNewTaskToReadyList+0xcc>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00e      	beq.n	8008d7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d60:	4b0a      	ldr	r3, [pc, #40]	; (8008d8c <prvAddNewTaskToReadyList+0xc8>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d207      	bcs.n	8008d7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <prvAddNewTaskToReadyList+0xdc>)
 8008d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	f3bf 8f4f 	dsb	sy
 8008d7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7e:	bf00      	nop
 8008d80:	3708      	adds	r7, #8
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20001e64 	.word	0x20001e64
 8008d8c:	20001990 	.word	0x20001990
 8008d90:	20001e70 	.word	0x20001e70
 8008d94:	20001e80 	.word	0x20001e80
 8008d98:	20001e6c 	.word	0x20001e6c
 8008d9c:	20001994 	.word	0x20001994
 8008da0:	e000ed04 	.word	0xe000ed04

08008da4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008db6:	4b13      	ldr	r3, [pc, #76]	; (8008e04 <vTaskDelay+0x60>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00a      	beq.n	8008dd4 <vTaskDelay+0x30>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	60bb      	str	r3, [r7, #8]
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008dd4:	f000 f88a 	bl	8008eec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fcfe 	bl	80097dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008de0:	f000 f892 	bl	8008f08 <xTaskResumeAll>
 8008de4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d107      	bne.n	8008dfc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <vTaskDelay+0x64>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dfc:	bf00      	nop
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}
 8008e04:	20001e8c 	.word	0x20001e8c
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08a      	sub	sp, #40	; 0x28
 8008e10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e12:	2300      	movs	r3, #0
 8008e14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e1a:	463a      	mov	r2, r7
 8008e1c:	1d39      	adds	r1, r7, #4
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff f832 	bl	8007e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	9202      	str	r2, [sp, #8]
 8008e30:	9301      	str	r3, [sp, #4]
 8008e32:	2300      	movs	r3, #0
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	2300      	movs	r3, #0
 8008e38:	460a      	mov	r2, r1
 8008e3a:	4924      	ldr	r1, [pc, #144]	; (8008ecc <vTaskStartScheduler+0xc0>)
 8008e3c:	4824      	ldr	r0, [pc, #144]	; (8008ed0 <vTaskStartScheduler+0xc4>)
 8008e3e:	f7ff fdf9 	bl	8008a34 <xTaskCreateStatic>
 8008e42:	4603      	mov	r3, r0
 8008e44:	4a23      	ldr	r2, [pc, #140]	; (8008ed4 <vTaskStartScheduler+0xc8>)
 8008e46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e48:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <vTaskStartScheduler+0xc8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	e001      	b.n	8008e5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d102      	bne.n	8008e66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e60:	f000 fd10 	bl	8009884 <xTimerCreateTimerTask>
 8008e64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d11b      	bne.n	8008ea4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	613b      	str	r3, [r7, #16]
}
 8008e7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e80:	4b15      	ldr	r3, [pc, #84]	; (8008ed8 <vTaskStartScheduler+0xcc>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	3354      	adds	r3, #84	; 0x54
 8008e86:	4a15      	ldr	r2, [pc, #84]	; (8008edc <vTaskStartScheduler+0xd0>)
 8008e88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e8a:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <vTaskStartScheduler+0xd4>)
 8008e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e92:	4b14      	ldr	r3, [pc, #80]	; (8008ee4 <vTaskStartScheduler+0xd8>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e98:	4b13      	ldr	r3, [pc, #76]	; (8008ee8 <vTaskStartScheduler+0xdc>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e9e:	f001 f8c7 	bl	800a030 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ea2:	e00e      	b.n	8008ec2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d10a      	bne.n	8008ec2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	60fb      	str	r3, [r7, #12]
}
 8008ebe:	bf00      	nop
 8008ec0:	e7fe      	b.n	8008ec0 <vTaskStartScheduler+0xb4>
}
 8008ec2:	bf00      	nop
 8008ec4:	3718      	adds	r7, #24
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	0800c534 	.word	0x0800c534
 8008ed0:	08009511 	.word	0x08009511
 8008ed4:	20001e88 	.word	0x20001e88
 8008ed8:	20001990 	.word	0x20001990
 8008edc:	20000010 	.word	0x20000010
 8008ee0:	20001e84 	.word	0x20001e84
 8008ee4:	20001e70 	.word	0x20001e70
 8008ee8:	20001e68 	.word	0x20001e68

08008eec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ef0:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <vTaskSuspendAll+0x18>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	4a03      	ldr	r2, [pc, #12]	; (8008f04 <vTaskSuspendAll+0x18>)
 8008ef8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008efa:	bf00      	nop
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	20001e8c 	.word	0x20001e8c

08008f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f12:	2300      	movs	r3, #0
 8008f14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f16:	4b42      	ldr	r3, [pc, #264]	; (8009020 <xTaskResumeAll+0x118>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	603b      	str	r3, [r7, #0]
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f34:	f001 f91e 	bl	800a174 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f38:	4b39      	ldr	r3, [pc, #228]	; (8009020 <xTaskResumeAll+0x118>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	4a38      	ldr	r2, [pc, #224]	; (8009020 <xTaskResumeAll+0x118>)
 8008f40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f42:	4b37      	ldr	r3, [pc, #220]	; (8009020 <xTaskResumeAll+0x118>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d162      	bne.n	8009010 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f4a:	4b36      	ldr	r3, [pc, #216]	; (8009024 <xTaskResumeAll+0x11c>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d05e      	beq.n	8009010 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f52:	e02f      	b.n	8008fb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f54:	4b34      	ldr	r3, [pc, #208]	; (8009028 <xTaskResumeAll+0x120>)
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3318      	adds	r3, #24
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7ff f851 	bl	8008008 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3304      	adds	r3, #4
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff f84c 	bl	8008008 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <xTaskResumeAll+0x124>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d903      	bls.n	8008f84 <xTaskResumeAll+0x7c>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f80:	4a2a      	ldr	r2, [pc, #168]	; (800902c <xTaskResumeAll+0x124>)
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	4613      	mov	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4a27      	ldr	r2, [pc, #156]	; (8009030 <xTaskResumeAll+0x128>)
 8008f92:	441a      	add	r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3304      	adds	r3, #4
 8008f98:	4619      	mov	r1, r3
 8008f9a:	4610      	mov	r0, r2
 8008f9c:	f7fe ffd7 	bl	8007f4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4b23      	ldr	r3, [pc, #140]	; (8009034 <xTaskResumeAll+0x12c>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d302      	bcc.n	8008fb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fae:	4b22      	ldr	r3, [pc, #136]	; (8009038 <xTaskResumeAll+0x130>)
 8008fb0:	2201      	movs	r2, #1
 8008fb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <xTaskResumeAll+0x120>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1cb      	bne.n	8008f54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fc2:	f000 fb5f 	bl	8009684 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fc6:	4b1d      	ldr	r3, [pc, #116]	; (800903c <xTaskResumeAll+0x134>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d010      	beq.n	8008ff4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fd2:	f000 f847 	bl	8009064 <xTaskIncrementTick>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d002      	beq.n	8008fe2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <xTaskResumeAll+0x130>)
 8008fde:	2201      	movs	r2, #1
 8008fe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	3b01      	subs	r3, #1
 8008fe6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f1      	bne.n	8008fd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008fee:	4b13      	ldr	r3, [pc, #76]	; (800903c <xTaskResumeAll+0x134>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008ff4:	4b10      	ldr	r3, [pc, #64]	; (8009038 <xTaskResumeAll+0x130>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d009      	beq.n	8009010 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009000:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <xTaskResumeAll+0x138>)
 8009002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009010:	f001 f8e0 	bl	800a1d4 <vPortExitCritical>

	return xAlreadyYielded;
 8009014:	68bb      	ldr	r3, [r7, #8]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3710      	adds	r7, #16
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	20001e8c 	.word	0x20001e8c
 8009024:	20001e64 	.word	0x20001e64
 8009028:	20001e24 	.word	0x20001e24
 800902c:	20001e6c 	.word	0x20001e6c
 8009030:	20001994 	.word	0x20001994
 8009034:	20001990 	.word	0x20001990
 8009038:	20001e78 	.word	0x20001e78
 800903c:	20001e74 	.word	0x20001e74
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800904a:	4b05      	ldr	r3, [pc, #20]	; (8009060 <xTaskGetTickCount+0x1c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009050:	687b      	ldr	r3, [r7, #4]
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	20001e68 	.word	0x20001e68

08009064 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b086      	sub	sp, #24
 8009068:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800906e:	4b4f      	ldr	r3, [pc, #316]	; (80091ac <xTaskIncrementTick+0x148>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	f040 808f 	bne.w	8009196 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009078:	4b4d      	ldr	r3, [pc, #308]	; (80091b0 <xTaskIncrementTick+0x14c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009080:	4a4b      	ldr	r2, [pc, #300]	; (80091b0 <xTaskIncrementTick+0x14c>)
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d120      	bne.n	80090ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800908c:	4b49      	ldr	r3, [pc, #292]	; (80091b4 <xTaskIncrementTick+0x150>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <xTaskIncrementTick+0x48>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	603b      	str	r3, [r7, #0]
}
 80090a8:	bf00      	nop
 80090aa:	e7fe      	b.n	80090aa <xTaskIncrementTick+0x46>
 80090ac:	4b41      	ldr	r3, [pc, #260]	; (80091b4 <xTaskIncrementTick+0x150>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <xTaskIncrementTick+0x154>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a3f      	ldr	r2, [pc, #252]	; (80091b4 <xTaskIncrementTick+0x150>)
 80090b8:	6013      	str	r3, [r2, #0]
 80090ba:	4a3f      	ldr	r2, [pc, #252]	; (80091b8 <xTaskIncrementTick+0x154>)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	4b3e      	ldr	r3, [pc, #248]	; (80091bc <xTaskIncrementTick+0x158>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3301      	adds	r3, #1
 80090c6:	4a3d      	ldr	r2, [pc, #244]	; (80091bc <xTaskIncrementTick+0x158>)
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	f000 fadb 	bl	8009684 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090ce:	4b3c      	ldr	r3, [pc, #240]	; (80091c0 <xTaskIncrementTick+0x15c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d349      	bcc.n	800916c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090d8:	4b36      	ldr	r3, [pc, #216]	; (80091b4 <xTaskIncrementTick+0x150>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090e2:	4b37      	ldr	r3, [pc, #220]	; (80091c0 <xTaskIncrementTick+0x15c>)
 80090e4:	f04f 32ff 	mov.w	r2, #4294967295
 80090e8:	601a      	str	r2, [r3, #0]
					break;
 80090ea:	e03f      	b.n	800916c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090ec:	4b31      	ldr	r3, [pc, #196]	; (80091b4 <xTaskIncrementTick+0x150>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d203      	bcs.n	800910c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009104:	4a2e      	ldr	r2, [pc, #184]	; (80091c0 <xTaskIncrementTick+0x15c>)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800910a:	e02f      	b.n	800916c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	3304      	adds	r3, #4
 8009110:	4618      	mov	r0, r3
 8009112:	f7fe ff79 	bl	8008008 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	3318      	adds	r3, #24
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe ff70 	bl	8008008 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800912c:	4b25      	ldr	r3, [pc, #148]	; (80091c4 <xTaskIncrementTick+0x160>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	429a      	cmp	r2, r3
 8009132:	d903      	bls.n	800913c <xTaskIncrementTick+0xd8>
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	4a22      	ldr	r2, [pc, #136]	; (80091c4 <xTaskIncrementTick+0x160>)
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <xTaskIncrementTick+0x164>)
 800914a:	441a      	add	r2, r3
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3304      	adds	r3, #4
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f7fe fefb 	bl	8007f4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <xTaskIncrementTick+0x168>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009162:	429a      	cmp	r2, r3
 8009164:	d3b8      	bcc.n	80090d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800916a:	e7b5      	b.n	80090d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800916c:	4b17      	ldr	r3, [pc, #92]	; (80091cc <xTaskIncrementTick+0x168>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009172:	4915      	ldr	r1, [pc, #84]	; (80091c8 <xTaskIncrementTick+0x164>)
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	440b      	add	r3, r1
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d901      	bls.n	8009188 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009184:	2301      	movs	r3, #1
 8009186:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009188:	4b11      	ldr	r3, [pc, #68]	; (80091d0 <xTaskIncrementTick+0x16c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009190:	2301      	movs	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	e004      	b.n	80091a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009196:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <xTaskIncrementTick+0x170>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	3301      	adds	r3, #1
 800919c:	4a0d      	ldr	r2, [pc, #52]	; (80091d4 <xTaskIncrementTick+0x170>)
 800919e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091a0:	697b      	ldr	r3, [r7, #20]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	3718      	adds	r7, #24
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	20001e8c 	.word	0x20001e8c
 80091b0:	20001e68 	.word	0x20001e68
 80091b4:	20001e1c 	.word	0x20001e1c
 80091b8:	20001e20 	.word	0x20001e20
 80091bc:	20001e7c 	.word	0x20001e7c
 80091c0:	20001e84 	.word	0x20001e84
 80091c4:	20001e6c 	.word	0x20001e6c
 80091c8:	20001994 	.word	0x20001994
 80091cc:	20001990 	.word	0x20001990
 80091d0:	20001e78 	.word	0x20001e78
 80091d4:	20001e74 	.word	0x20001e74

080091d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091d8:	b480      	push	{r7}
 80091da:	b085      	sub	sp, #20
 80091dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091de:	4b2a      	ldr	r3, [pc, #168]	; (8009288 <vTaskSwitchContext+0xb0>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d003      	beq.n	80091ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091e6:	4b29      	ldr	r3, [pc, #164]	; (800928c <vTaskSwitchContext+0xb4>)
 80091e8:	2201      	movs	r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091ec:	e046      	b.n	800927c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80091ee:	4b27      	ldr	r3, [pc, #156]	; (800928c <vTaskSwitchContext+0xb4>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f4:	4b26      	ldr	r3, [pc, #152]	; (8009290 <vTaskSwitchContext+0xb8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e010      	b.n	800921e <vTaskSwitchContext+0x46>
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10a      	bne.n	8009218 <vTaskSwitchContext+0x40>
	__asm volatile
 8009202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009206:	f383 8811 	msr	BASEPRI, r3
 800920a:	f3bf 8f6f 	isb	sy
 800920e:	f3bf 8f4f 	dsb	sy
 8009212:	607b      	str	r3, [r7, #4]
}
 8009214:	bf00      	nop
 8009216:	e7fe      	b.n	8009216 <vTaskSwitchContext+0x3e>
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	3b01      	subs	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]
 800921e:	491d      	ldr	r1, [pc, #116]	; (8009294 <vTaskSwitchContext+0xbc>)
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4613      	mov	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	440b      	add	r3, r1
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d0e4      	beq.n	80091fc <vTaskSwitchContext+0x24>
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a15      	ldr	r2, [pc, #84]	; (8009294 <vTaskSwitchContext+0xbc>)
 800923e:	4413      	add	r3, r2
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	605a      	str	r2, [r3, #4]
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	685a      	ldr	r2, [r3, #4]
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3308      	adds	r3, #8
 8009254:	429a      	cmp	r2, r3
 8009256:	d104      	bne.n	8009262 <vTaskSwitchContext+0x8a>
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	605a      	str	r2, [r3, #4]
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	68db      	ldr	r3, [r3, #12]
 8009268:	4a0b      	ldr	r2, [pc, #44]	; (8009298 <vTaskSwitchContext+0xc0>)
 800926a:	6013      	str	r3, [r2, #0]
 800926c:	4a08      	ldr	r2, [pc, #32]	; (8009290 <vTaskSwitchContext+0xb8>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009272:	4b09      	ldr	r3, [pc, #36]	; (8009298 <vTaskSwitchContext+0xc0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3354      	adds	r3, #84	; 0x54
 8009278:	4a08      	ldr	r2, [pc, #32]	; (800929c <vTaskSwitchContext+0xc4>)
 800927a:	6013      	str	r3, [r2, #0]
}
 800927c:	bf00      	nop
 800927e:	3714      	adds	r7, #20
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	20001e8c 	.word	0x20001e8c
 800928c:	20001e78 	.word	0x20001e78
 8009290:	20001e6c 	.word	0x20001e6c
 8009294:	20001994 	.word	0x20001994
 8009298:	20001990 	.word	0x20001990
 800929c:	20000010 	.word	0x20000010

080092a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60fb      	str	r3, [r7, #12]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092c6:	4b07      	ldr	r3, [pc, #28]	; (80092e4 <vTaskPlaceOnEventList+0x44>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3318      	adds	r3, #24
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7fe fe61 	bl	8007f96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80092d4:	2101      	movs	r1, #1
 80092d6:	6838      	ldr	r0, [r7, #0]
 80092d8:	f000 fa80 	bl	80097dc <prvAddCurrentTaskToDelayedList>
}
 80092dc:	bf00      	nop
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20001990 	.word	0x20001990

080092e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092fe:	f383 8811 	msr	BASEPRI, r3
 8009302:	f3bf 8f6f 	isb	sy
 8009306:	f3bf 8f4f 	dsb	sy
 800930a:	617b      	str	r3, [r7, #20]
}
 800930c:	bf00      	nop
 800930e:	e7fe      	b.n	800930e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009310:	4b0a      	ldr	r3, [pc, #40]	; (800933c <vTaskPlaceOnEventListRestricted+0x54>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	3318      	adds	r3, #24
 8009316:	4619      	mov	r1, r3
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f7fe fe18 	bl	8007f4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d002      	beq.n	800932a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009324:	f04f 33ff 	mov.w	r3, #4294967295
 8009328:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	68b8      	ldr	r0, [r7, #8]
 800932e:	f000 fa55 	bl	80097dc <prvAddCurrentTaskToDelayedList>
	}
 8009332:	bf00      	nop
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20001990 	.word	0x20001990

08009340 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10a      	bne.n	800936c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	60fb      	str	r3, [r7, #12]
}
 8009368:	bf00      	nop
 800936a:	e7fe      	b.n	800936a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	3318      	adds	r3, #24
 8009370:	4618      	mov	r0, r3
 8009372:	f7fe fe49 	bl	8008008 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009376:	4b1e      	ldr	r3, [pc, #120]	; (80093f0 <xTaskRemoveFromEventList+0xb0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d11d      	bne.n	80093ba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	3304      	adds	r3, #4
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fe40 	bl	8008008 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800938c:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <xTaskRemoveFromEventList+0xb4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	429a      	cmp	r2, r3
 8009392:	d903      	bls.n	800939c <xTaskRemoveFromEventList+0x5c>
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	4a16      	ldr	r2, [pc, #88]	; (80093f4 <xTaskRemoveFromEventList+0xb4>)
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a0:	4613      	mov	r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4413      	add	r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	4a13      	ldr	r2, [pc, #76]	; (80093f8 <xTaskRemoveFromEventList+0xb8>)
 80093aa:	441a      	add	r2, r3
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	3304      	adds	r3, #4
 80093b0:	4619      	mov	r1, r3
 80093b2:	4610      	mov	r0, r2
 80093b4:	f7fe fdcb 	bl	8007f4e <vListInsertEnd>
 80093b8:	e005      	b.n	80093c6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	3318      	adds	r3, #24
 80093be:	4619      	mov	r1, r3
 80093c0:	480e      	ldr	r0, [pc, #56]	; (80093fc <xTaskRemoveFromEventList+0xbc>)
 80093c2:	f7fe fdc4 	bl	8007f4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ca:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <xTaskRemoveFromEventList+0xc0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d905      	bls.n	80093e0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093d4:	2301      	movs	r3, #1
 80093d6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093d8:	4b0a      	ldr	r3, [pc, #40]	; (8009404 <xTaskRemoveFromEventList+0xc4>)
 80093da:	2201      	movs	r2, #1
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	e001      	b.n	80093e4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80093e0:	2300      	movs	r3, #0
 80093e2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093e4:	697b      	ldr	r3, [r7, #20]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3718      	adds	r7, #24
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20001e8c 	.word	0x20001e8c
 80093f4:	20001e6c 	.word	0x20001e6c
 80093f8:	20001994 	.word	0x20001994
 80093fc:	20001e24 	.word	0x20001e24
 8009400:	20001990 	.word	0x20001990
 8009404:	20001e78 	.word	0x20001e78

08009408 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009408:	b480      	push	{r7}
 800940a:	b083      	sub	sp, #12
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009410:	4b06      	ldr	r3, [pc, #24]	; (800942c <vTaskInternalSetTimeOutState+0x24>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009418:	4b05      	ldr	r3, [pc, #20]	; (8009430 <vTaskInternalSetTimeOutState+0x28>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	605a      	str	r2, [r3, #4]
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr
 800942c:	20001e7c 	.word	0x20001e7c
 8009430:	20001e68 	.word	0x20001e68

08009434 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	613b      	str	r3, [r7, #16]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d10a      	bne.n	8009476 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009476:	f000 fe7d 	bl	800a174 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800947a:	4b1d      	ldr	r3, [pc, #116]	; (80094f0 <xTaskCheckForTimeOut+0xbc>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	69ba      	ldr	r2, [r7, #24]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009492:	d102      	bne.n	800949a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e023      	b.n	80094e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b15      	ldr	r3, [pc, #84]	; (80094f4 <xTaskCheckForTimeOut+0xc0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d007      	beq.n	80094b6 <xTaskCheckForTimeOut+0x82>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d302      	bcc.n	80094b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	61fb      	str	r3, [r7, #28]
 80094b4:	e015      	b.n	80094e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d20b      	bcs.n	80094d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	1ad2      	subs	r2, r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff ff9b 	bl	8009408 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	61fb      	str	r3, [r7, #28]
 80094d6:	e004      	b.n	80094e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094de:	2301      	movs	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094e2:	f000 fe77 	bl	800a1d4 <vPortExitCritical>

	return xReturn;
 80094e6:	69fb      	ldr	r3, [r7, #28]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20001e68 	.word	0x20001e68
 80094f4:	20001e7c 	.word	0x20001e7c

080094f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094f8:	b480      	push	{r7}
 80094fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094fc:	4b03      	ldr	r3, [pc, #12]	; (800950c <vTaskMissedYield+0x14>)
 80094fe:	2201      	movs	r2, #1
 8009500:	601a      	str	r2, [r3, #0]
}
 8009502:	bf00      	nop
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	20001e78 	.word	0x20001e78

08009510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009518:	f000 f852 	bl	80095c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800951c:	4b06      	ldr	r3, [pc, #24]	; (8009538 <prvIdleTask+0x28>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d9f9      	bls.n	8009518 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <prvIdleTask+0x2c>)
 8009526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800952a:	601a      	str	r2, [r3, #0]
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009534:	e7f0      	b.n	8009518 <prvIdleTask+0x8>
 8009536:	bf00      	nop
 8009538:	20001994 	.word	0x20001994
 800953c:	e000ed04 	.word	0xe000ed04

08009540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009546:	2300      	movs	r3, #0
 8009548:	607b      	str	r3, [r7, #4]
 800954a:	e00c      	b.n	8009566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4a12      	ldr	r2, [pc, #72]	; (80095a0 <prvInitialiseTaskLists+0x60>)
 8009558:	4413      	add	r3, r2
 800955a:	4618      	mov	r0, r3
 800955c:	f7fe fcca 	bl	8007ef4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	3301      	adds	r3, #1
 8009564:	607b      	str	r3, [r7, #4]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b37      	cmp	r3, #55	; 0x37
 800956a:	d9ef      	bls.n	800954c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800956c:	480d      	ldr	r0, [pc, #52]	; (80095a4 <prvInitialiseTaskLists+0x64>)
 800956e:	f7fe fcc1 	bl	8007ef4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009572:	480d      	ldr	r0, [pc, #52]	; (80095a8 <prvInitialiseTaskLists+0x68>)
 8009574:	f7fe fcbe 	bl	8007ef4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009578:	480c      	ldr	r0, [pc, #48]	; (80095ac <prvInitialiseTaskLists+0x6c>)
 800957a:	f7fe fcbb 	bl	8007ef4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800957e:	480c      	ldr	r0, [pc, #48]	; (80095b0 <prvInitialiseTaskLists+0x70>)
 8009580:	f7fe fcb8 	bl	8007ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009584:	480b      	ldr	r0, [pc, #44]	; (80095b4 <prvInitialiseTaskLists+0x74>)
 8009586:	f7fe fcb5 	bl	8007ef4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800958a:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <prvInitialiseTaskLists+0x78>)
 800958c:	4a05      	ldr	r2, [pc, #20]	; (80095a4 <prvInitialiseTaskLists+0x64>)
 800958e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009590:	4b0a      	ldr	r3, [pc, #40]	; (80095bc <prvInitialiseTaskLists+0x7c>)
 8009592:	4a05      	ldr	r2, [pc, #20]	; (80095a8 <prvInitialiseTaskLists+0x68>)
 8009594:	601a      	str	r2, [r3, #0]
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	20001994 	.word	0x20001994
 80095a4:	20001df4 	.word	0x20001df4
 80095a8:	20001e08 	.word	0x20001e08
 80095ac:	20001e24 	.word	0x20001e24
 80095b0:	20001e38 	.word	0x20001e38
 80095b4:	20001e50 	.word	0x20001e50
 80095b8:	20001e1c 	.word	0x20001e1c
 80095bc:	20001e20 	.word	0x20001e20

080095c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095c6:	e019      	b.n	80095fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095c8:	f000 fdd4 	bl	800a174 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095cc:	4b10      	ldr	r3, [pc, #64]	; (8009610 <prvCheckTasksWaitingTermination+0x50>)
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3304      	adds	r3, #4
 80095d8:	4618      	mov	r0, r3
 80095da:	f7fe fd15 	bl	8008008 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095de:	4b0d      	ldr	r3, [pc, #52]	; (8009614 <prvCheckTasksWaitingTermination+0x54>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	3b01      	subs	r3, #1
 80095e4:	4a0b      	ldr	r2, [pc, #44]	; (8009614 <prvCheckTasksWaitingTermination+0x54>)
 80095e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80095e8:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <prvCheckTasksWaitingTermination+0x58>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	4a0a      	ldr	r2, [pc, #40]	; (8009618 <prvCheckTasksWaitingTermination+0x58>)
 80095f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095f2:	f000 fdef 	bl	800a1d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f810 	bl	800961c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095fc:	4b06      	ldr	r3, [pc, #24]	; (8009618 <prvCheckTasksWaitingTermination+0x58>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e1      	bne.n	80095c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009604:	bf00      	nop
 8009606:	bf00      	nop
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20001e38 	.word	0x20001e38
 8009614:	20001e64 	.word	0x20001e64
 8009618:	20001e4c 	.word	0x20001e4c

0800961c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	3354      	adds	r3, #84	; 0x54
 8009628:	4618      	mov	r0, r3
 800962a:	f001 fe51 	bl	800b2d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009634:	2b00      	cmp	r3, #0
 8009636:	d108      	bne.n	800964a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963c:	4618      	mov	r0, r3
 800963e:	f000 ff87 	bl	800a550 <vPortFree>
				vPortFree( pxTCB );
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 ff84 	bl	800a550 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009648:	e018      	b.n	800967c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009650:	2b01      	cmp	r3, #1
 8009652:	d103      	bne.n	800965c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 ff7b 	bl	800a550 <vPortFree>
	}
 800965a:	e00f      	b.n	800967c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009662:	2b02      	cmp	r3, #2
 8009664:	d00a      	beq.n	800967c <prvDeleteTCB+0x60>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	f383 8811 	msr	BASEPRI, r3
 800966e:	f3bf 8f6f 	isb	sy
 8009672:	f3bf 8f4f 	dsb	sy
 8009676:	60fb      	str	r3, [r7, #12]
}
 8009678:	bf00      	nop
 800967a:	e7fe      	b.n	800967a <prvDeleteTCB+0x5e>
	}
 800967c:	bf00      	nop
 800967e:	3710      	adds	r7, #16
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800968a:	4b0c      	ldr	r3, [pc, #48]	; (80096bc <prvResetNextTaskUnblockTime+0x38>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d104      	bne.n	800969e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009694:	4b0a      	ldr	r3, [pc, #40]	; (80096c0 <prvResetNextTaskUnblockTime+0x3c>)
 8009696:	f04f 32ff 	mov.w	r2, #4294967295
 800969a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800969c:	e008      	b.n	80096b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800969e:	4b07      	ldr	r3, [pc, #28]	; (80096bc <prvResetNextTaskUnblockTime+0x38>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	4a04      	ldr	r2, [pc, #16]	; (80096c0 <prvResetNextTaskUnblockTime+0x3c>)
 80096ae:	6013      	str	r3, [r2, #0]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20001e1c 	.word	0x20001e1c
 80096c0:	20001e84 	.word	0x20001e84

080096c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096ca:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <xTaskGetSchedulerState+0x34>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d102      	bne.n	80096d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096d2:	2301      	movs	r3, #1
 80096d4:	607b      	str	r3, [r7, #4]
 80096d6:	e008      	b.n	80096ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <xTaskGetSchedulerState+0x38>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d102      	bne.n	80096e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096e0:	2302      	movs	r3, #2
 80096e2:	607b      	str	r3, [r7, #4]
 80096e4:	e001      	b.n	80096ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096e6:	2300      	movs	r3, #0
 80096e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096ea:	687b      	ldr	r3, [r7, #4]
	}
 80096ec:	4618      	mov	r0, r3
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	20001e70 	.word	0x20001e70
 80096fc:	20001e8c 	.word	0x20001e8c

08009700 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800970c:	2300      	movs	r3, #0
 800970e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d056      	beq.n	80097c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <xTaskPriorityDisinherit+0xd0>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	429a      	cmp	r2, r3
 800971e:	d00a      	beq.n	8009736 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	60fb      	str	r3, [r7, #12]
}
 8009732:	bf00      	nop
 8009734:	e7fe      	b.n	8009734 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	60bb      	str	r3, [r7, #8]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009758:	1e5a      	subs	r2, r3, #1
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009766:	429a      	cmp	r2, r3
 8009768:	d02c      	beq.n	80097c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800976e:	2b00      	cmp	r3, #0
 8009770:	d128      	bne.n	80097c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	3304      	adds	r3, #4
 8009776:	4618      	mov	r0, r3
 8009778:	f7fe fc46 	bl	8008008 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	4b0f      	ldr	r3, [pc, #60]	; (80097d4 <xTaskPriorityDisinherit+0xd4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d903      	bls.n	80097a4 <xTaskPriorityDisinherit+0xa4>
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a0:	4a0c      	ldr	r2, [pc, #48]	; (80097d4 <xTaskPriorityDisinherit+0xd4>)
 80097a2:	6013      	str	r3, [r2, #0]
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <xTaskPriorityDisinherit+0xd8>)
 80097b2:	441a      	add	r2, r3
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	3304      	adds	r3, #4
 80097b8:	4619      	mov	r1, r3
 80097ba:	4610      	mov	r0, r2
 80097bc:	f7fe fbc7 	bl	8007f4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80097c0:	2301      	movs	r3, #1
 80097c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097c4:	697b      	ldr	r3, [r7, #20]
	}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3718      	adds	r7, #24
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
 80097ce:	bf00      	nop
 80097d0:	20001990 	.word	0x20001990
 80097d4:	20001e6c 	.word	0x20001e6c
 80097d8:	20001994 	.word	0x20001994

080097dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80097e6:	4b21      	ldr	r3, [pc, #132]	; (800986c <prvAddCurrentTaskToDelayedList+0x90>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097ec:	4b20      	ldr	r3, [pc, #128]	; (8009870 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3304      	adds	r3, #4
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fe fc08 	bl	8008008 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fe:	d10a      	bne.n	8009816 <prvAddCurrentTaskToDelayedList+0x3a>
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009806:	4b1a      	ldr	r3, [pc, #104]	; (8009870 <prvAddCurrentTaskToDelayedList+0x94>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3304      	adds	r3, #4
 800980c:	4619      	mov	r1, r3
 800980e:	4819      	ldr	r0, [pc, #100]	; (8009874 <prvAddCurrentTaskToDelayedList+0x98>)
 8009810:	f7fe fb9d 	bl	8007f4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009814:	e026      	b.n	8009864 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4413      	add	r3, r2
 800981c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800981e:	4b14      	ldr	r3, [pc, #80]	; (8009870 <prvAddCurrentTaskToDelayedList+0x94>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68ba      	ldr	r2, [r7, #8]
 8009824:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	429a      	cmp	r2, r3
 800982c:	d209      	bcs.n	8009842 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800982e:	4b12      	ldr	r3, [pc, #72]	; (8009878 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <prvAddCurrentTaskToDelayedList+0x94>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3304      	adds	r3, #4
 8009838:	4619      	mov	r1, r3
 800983a:	4610      	mov	r0, r2
 800983c:	f7fe fbab 	bl	8007f96 <vListInsert>
}
 8009840:	e010      	b.n	8009864 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009842:	4b0e      	ldr	r3, [pc, #56]	; (800987c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009844:	681a      	ldr	r2, [r3, #0]
 8009846:	4b0a      	ldr	r3, [pc, #40]	; (8009870 <prvAddCurrentTaskToDelayedList+0x94>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3304      	adds	r3, #4
 800984c:	4619      	mov	r1, r3
 800984e:	4610      	mov	r0, r2
 8009850:	f7fe fba1 	bl	8007f96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	429a      	cmp	r2, r3
 800985c:	d202      	bcs.n	8009864 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800985e:	4a08      	ldr	r2, [pc, #32]	; (8009880 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	6013      	str	r3, [r2, #0]
}
 8009864:	bf00      	nop
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}
 800986c:	20001e68 	.word	0x20001e68
 8009870:	20001990 	.word	0x20001990
 8009874:	20001e50 	.word	0x20001e50
 8009878:	20001e20 	.word	0x20001e20
 800987c:	20001e1c 	.word	0x20001e1c
 8009880:	20001e84 	.word	0x20001e84

08009884 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	; 0x28
 8009888:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800988e:	f000 fb07 	bl	8009ea0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009892:	4b1c      	ldr	r3, [pc, #112]	; (8009904 <xTimerCreateTimerTask+0x80>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d021      	beq.n	80098de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80098a2:	1d3a      	adds	r2, r7, #4
 80098a4:	f107 0108 	add.w	r1, r7, #8
 80098a8:	f107 030c 	add.w	r3, r7, #12
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fe fb07 	bl	8007ec0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	9202      	str	r2, [sp, #8]
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	2302      	movs	r3, #2
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	2300      	movs	r3, #0
 80098c2:	460a      	mov	r2, r1
 80098c4:	4910      	ldr	r1, [pc, #64]	; (8009908 <xTimerCreateTimerTask+0x84>)
 80098c6:	4811      	ldr	r0, [pc, #68]	; (800990c <xTimerCreateTimerTask+0x88>)
 80098c8:	f7ff f8b4 	bl	8008a34 <xTaskCreateStatic>
 80098cc:	4603      	mov	r3, r0
 80098ce:	4a10      	ldr	r2, [pc, #64]	; (8009910 <xTimerCreateTimerTask+0x8c>)
 80098d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80098d2:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <xTimerCreateTimerTask+0x8c>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d001      	beq.n	80098de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d10a      	bne.n	80098fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80098e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e8:	f383 8811 	msr	BASEPRI, r3
 80098ec:	f3bf 8f6f 	isb	sy
 80098f0:	f3bf 8f4f 	dsb	sy
 80098f4:	613b      	str	r3, [r7, #16]
}
 80098f6:	bf00      	nop
 80098f8:	e7fe      	b.n	80098f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80098fa:	697b      	ldr	r3, [r7, #20]
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3718      	adds	r7, #24
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20001ec0 	.word	0x20001ec0
 8009908:	0800c53c 	.word	0x0800c53c
 800990c:	08009a49 	.word	0x08009a49
 8009910:	20001ec4 	.word	0x20001ec4

08009914 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009922:	2300      	movs	r3, #0
 8009924:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <xTimerGenericCommand+0x2e>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	f383 8811 	msr	BASEPRI, r3
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	f3bf 8f4f 	dsb	sy
 800993c:	623b      	str	r3, [r7, #32]
}
 800993e:	bf00      	nop
 8009940:	e7fe      	b.n	8009940 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009942:	4b1a      	ldr	r3, [pc, #104]	; (80099ac <xTimerGenericCommand+0x98>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d02a      	beq.n	80099a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	2b05      	cmp	r3, #5
 800995a:	dc18      	bgt.n	800998e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800995c:	f7ff feb2 	bl	80096c4 <xTaskGetSchedulerState>
 8009960:	4603      	mov	r3, r0
 8009962:	2b02      	cmp	r3, #2
 8009964:	d109      	bne.n	800997a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <xTimerGenericCommand+0x98>)
 8009968:	6818      	ldr	r0, [r3, #0]
 800996a:	f107 0110 	add.w	r1, r7, #16
 800996e:	2300      	movs	r3, #0
 8009970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009972:	f7fe fc77 	bl	8008264 <xQueueGenericSend>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24
 8009978:	e012      	b.n	80099a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800997a:	4b0c      	ldr	r3, [pc, #48]	; (80099ac <xTimerGenericCommand+0x98>)
 800997c:	6818      	ldr	r0, [r3, #0]
 800997e:	f107 0110 	add.w	r1, r7, #16
 8009982:	2300      	movs	r3, #0
 8009984:	2200      	movs	r2, #0
 8009986:	f7fe fc6d 	bl	8008264 <xQueueGenericSend>
 800998a:	6278      	str	r0, [r7, #36]	; 0x24
 800998c:	e008      	b.n	80099a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800998e:	4b07      	ldr	r3, [pc, #28]	; (80099ac <xTimerGenericCommand+0x98>)
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f107 0110 	add.w	r1, r7, #16
 8009996:	2300      	movs	r3, #0
 8009998:	683a      	ldr	r2, [r7, #0]
 800999a:	f7fe fd61 	bl	8008460 <xQueueGenericSendFromISR>
 800999e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3728      	adds	r7, #40	; 0x28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20001ec0 	.word	0x20001ec0

080099b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af02      	add	r7, sp, #8
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099ba:	4b22      	ldr	r3, [pc, #136]	; (8009a44 <prvProcessExpiredTimer+0x94>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3304      	adds	r3, #4
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7fe fb1d 	bl	8008008 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d022      	beq.n	8009a22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	699a      	ldr	r2, [r3, #24]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	18d1      	adds	r1, r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	6978      	ldr	r0, [r7, #20]
 80099ea:	f000 f8d1 	bl	8009b90 <prvInsertTimerInActiveList>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d01f      	beq.n	8009a34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80099f4:	2300      	movs	r3, #0
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	2300      	movs	r3, #0
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	2100      	movs	r1, #0
 80099fe:	6978      	ldr	r0, [r7, #20]
 8009a00:	f7ff ff88 	bl	8009914 <xTimerGenericCommand>
 8009a04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d113      	bne.n	8009a34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	60fb      	str	r3, [r7, #12]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a28:	f023 0301 	bic.w	r3, r3, #1
 8009a2c:	b2da      	uxtb	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	6978      	ldr	r0, [r7, #20]
 8009a3a:	4798      	blx	r3
}
 8009a3c:	bf00      	nop
 8009a3e:	3718      	adds	r7, #24
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20001eb8 	.word	0x20001eb8

08009a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a50:	f107 0308 	add.w	r3, r7, #8
 8009a54:	4618      	mov	r0, r3
 8009a56:	f000 f857 	bl	8009b08 <prvGetNextExpireTime>
 8009a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	4619      	mov	r1, r3
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f803 	bl	8009a6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009a66:	f000 f8d5 	bl	8009c14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009a6a:	e7f1      	b.n	8009a50 <prvTimerTask+0x8>

08009a6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009a76:	f7ff fa39 	bl	8008eec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009a7a:	f107 0308 	add.w	r3, r7, #8
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f866 	bl	8009b50 <prvSampleTimeNow>
 8009a84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d130      	bne.n	8009aee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d10a      	bne.n	8009aa8 <prvProcessTimerOrBlockTask+0x3c>
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d806      	bhi.n	8009aa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009a9a:	f7ff fa35 	bl	8008f08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009a9e:	68f9      	ldr	r1, [r7, #12]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f7ff ff85 	bl	80099b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009aa6:	e024      	b.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009aae:	4b13      	ldr	r3, [pc, #76]	; (8009afc <prvProcessTimerOrBlockTask+0x90>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <prvProcessTimerOrBlockTask+0x50>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e000      	b.n	8009abe <prvProcessTimerOrBlockTask+0x52>
 8009abc:	2300      	movs	r3, #0
 8009abe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ac0:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <prvProcessTimerOrBlockTask+0x94>)
 8009ac2:	6818      	ldr	r0, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	f7fe ff7d 	bl	80089cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009ad2:	f7ff fa19 	bl	8008f08 <xTaskResumeAll>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009adc:	4b09      	ldr	r3, [pc, #36]	; (8009b04 <prvProcessTimerOrBlockTask+0x98>)
 8009ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae2:	601a      	str	r2, [r3, #0]
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	f3bf 8f6f 	isb	sy
}
 8009aec:	e001      	b.n	8009af2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009aee:	f7ff fa0b 	bl	8008f08 <xTaskResumeAll>
}
 8009af2:	bf00      	nop
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20001ebc 	.word	0x20001ebc
 8009b00:	20001ec0 	.word	0x20001ec0
 8009b04:	e000ed04 	.word	0xe000ed04

08009b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b10:	4b0e      	ldr	r3, [pc, #56]	; (8009b4c <prvGetNextExpireTime+0x44>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d101      	bne.n	8009b1e <prvGetNextExpireTime+0x16>
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	e000      	b.n	8009b20 <prvGetNextExpireTime+0x18>
 8009b1e:	2200      	movs	r2, #0
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d105      	bne.n	8009b38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b2c:	4b07      	ldr	r3, [pc, #28]	; (8009b4c <prvGetNextExpireTime+0x44>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	60fb      	str	r3, [r7, #12]
 8009b36:	e001      	b.n	8009b3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	20001eb8 	.word	0x20001eb8

08009b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009b58:	f7ff fa74 	bl	8009044 <xTaskGetTickCount>
 8009b5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009b5e:	4b0b      	ldr	r3, [pc, #44]	; (8009b8c <prvSampleTimeNow+0x3c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d205      	bcs.n	8009b74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009b68:	f000 f936 	bl	8009dd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	601a      	str	r2, [r3, #0]
 8009b72:	e002      	b.n	8009b7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009b7a:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <prvSampleTimeNow+0x3c>)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009b80:	68fb      	ldr	r3, [r7, #12]
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3710      	adds	r7, #16
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20001ec8 	.word	0x20001ec8

08009b90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b086      	sub	sp, #24
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d812      	bhi.n	8009bdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	1ad2      	subs	r2, r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	699b      	ldr	r3, [r3, #24]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d302      	bcc.n	8009bca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	617b      	str	r3, [r7, #20]
 8009bc8:	e01b      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009bca:	4b10      	ldr	r3, [pc, #64]	; (8009c0c <prvInsertTimerInActiveList+0x7c>)
 8009bcc:	681a      	ldr	r2, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	f7fe f9de 	bl	8007f96 <vListInsert>
 8009bda:	e012      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d206      	bcs.n	8009bf2 <prvInsertTimerInActiveList+0x62>
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d302      	bcc.n	8009bf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009bec:	2301      	movs	r3, #1
 8009bee:	617b      	str	r3, [r7, #20]
 8009bf0:	e007      	b.n	8009c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bf2:	4b07      	ldr	r3, [pc, #28]	; (8009c10 <prvInsertTimerInActiveList+0x80>)
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	f7fe f9ca 	bl	8007f96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20001ebc 	.word	0x20001ebc
 8009c10:	20001eb8 	.word	0x20001eb8

08009c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08e      	sub	sp, #56	; 0x38
 8009c18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c1a:	e0ca      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	da18      	bge.n	8009c54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009c22:	1d3b      	adds	r3, r7, #4
 8009c24:	3304      	adds	r3, #4
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	61fb      	str	r3, [r7, #28]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4a:	6850      	ldr	r0, [r2, #4]
 8009c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c4e:	6892      	ldr	r2, [r2, #8]
 8009c50:	4611      	mov	r1, r2
 8009c52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	f2c0 80aa 	blt.w	8009db0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d004      	beq.n	8009c72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	3304      	adds	r3, #4
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fe f9cb 	bl	8008008 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c72:	463b      	mov	r3, r7
 8009c74:	4618      	mov	r0, r3
 8009c76:	f7ff ff6b 	bl	8009b50 <prvSampleTimeNow>
 8009c7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2b09      	cmp	r3, #9
 8009c80:	f200 8097 	bhi.w	8009db2 <prvProcessReceivedCommands+0x19e>
 8009c84:	a201      	add	r2, pc, #4	; (adr r2, 8009c8c <prvProcessReceivedCommands+0x78>)
 8009c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c8a:	bf00      	nop
 8009c8c:	08009cb5 	.word	0x08009cb5
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009cb5 	.word	0x08009cb5
 8009c98:	08009d29 	.word	0x08009d29
 8009c9c:	08009d3d 	.word	0x08009d3d
 8009ca0:	08009d87 	.word	0x08009d87
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cb5 	.word	0x08009cb5
 8009cac:	08009d29 	.word	0x08009d29
 8009cb0:	08009d3d 	.word	0x08009d3d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cba:	f043 0301 	orr.w	r3, r3, #1
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	18d1      	adds	r1, r2, r3
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd4:	f7ff ff5c 	bl	8009b90 <prvInsertTimerInActiveList>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d069      	beq.n	8009db2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ce4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009cec:	f003 0304 	and.w	r3, r3, #4
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d05e      	beq.n	8009db2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	2300      	movs	r3, #0
 8009d02:	2100      	movs	r1, #0
 8009d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d06:	f7ff fe05 	bl	8009914 <xTimerGenericCommand>
 8009d0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d14f      	bne.n	8009db2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	61bb      	str	r3, [r7, #24]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d2e:	f023 0301 	bic.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009d3a:	e03a      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d52:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10a      	bne.n	8009d72 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	617b      	str	r3, [r7, #20]
}
 8009d6e:	bf00      	nop
 8009d70:	e7fe      	b.n	8009d70 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d74:	699a      	ldr	r2, [r3, #24]
 8009d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d80:	f7ff ff06 	bl	8009b90 <prvInsertTimerInActiveList>
					break;
 8009d84:	e015      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d8c:	f003 0302 	and.w	r3, r3, #2
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d103      	bne.n	8009d9c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009d94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d96:	f000 fbdb 	bl	800a550 <vPortFree>
 8009d9a:	e00a      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009da2:	f023 0301 	bic.w	r3, r3, #1
 8009da6:	b2da      	uxtb	r2, r3
 8009da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009daa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009dae:	e000      	b.n	8009db2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009db0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <prvProcessReceivedCommands+0x1c0>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	1d39      	adds	r1, r7, #4
 8009db8:	2200      	movs	r2, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7fe fbec 	bl	8008598 <xQueueReceive>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	f47f af2a 	bne.w	8009c1c <prvProcessReceivedCommands+0x8>
	}
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	3730      	adds	r7, #48	; 0x30
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	20001ec0 	.word	0x20001ec0

08009dd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009dde:	e048      	b.n	8009e72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009de0:	4b2d      	ldr	r3, [pc, #180]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b2b      	ldr	r3, [pc, #172]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3304      	adds	r3, #4
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fe f905 	bl	8008008 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	6a1b      	ldr	r3, [r3, #32]
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d02e      	beq.n	8009e72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d90e      	bls.n	8009e44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e32:	4b19      	ldr	r3, [pc, #100]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e34:	681a      	ldr	r2, [r3, #0]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3304      	adds	r3, #4
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	4610      	mov	r0, r2
 8009e3e:	f7fe f8aa 	bl	8007f96 <vListInsert>
 8009e42:	e016      	b.n	8009e72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009e44:	2300      	movs	r3, #0
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	2300      	movs	r3, #0
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f7ff fd60 	bl	8009914 <xTimerGenericCommand>
 8009e54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	603b      	str	r3, [r7, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009e72:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d1b1      	bne.n	8009de0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009e7c:	4b06      	ldr	r3, [pc, #24]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009e82:	4b06      	ldr	r3, [pc, #24]	; (8009e9c <prvSwitchTimerLists+0xc4>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a04      	ldr	r2, [pc, #16]	; (8009e98 <prvSwitchTimerLists+0xc0>)
 8009e88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009e8a:	4a04      	ldr	r2, [pc, #16]	; (8009e9c <prvSwitchTimerLists+0xc4>)
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	6013      	str	r3, [r2, #0]
}
 8009e90:	bf00      	nop
 8009e92:	3718      	adds	r7, #24
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	20001eb8 	.word	0x20001eb8
 8009e9c:	20001ebc 	.word	0x20001ebc

08009ea0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009ea6:	f000 f965 	bl	800a174 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009eaa:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d120      	bne.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009eb2:	4814      	ldr	r0, [pc, #80]	; (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009eb4:	f7fe f81e 	bl	8007ef4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009eb8:	4813      	ldr	r0, [pc, #76]	; (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009eba:	f7fe f81b 	bl	8007ef4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009ebe:	4b13      	ldr	r3, [pc, #76]	; (8009f0c <prvCheckForValidListAndQueue+0x6c>)
 8009ec0:	4a10      	ldr	r2, [pc, #64]	; (8009f04 <prvCheckForValidListAndQueue+0x64>)
 8009ec2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009ec4:	4b12      	ldr	r3, [pc, #72]	; (8009f10 <prvCheckForValidListAndQueue+0x70>)
 8009ec6:	4a10      	ldr	r2, [pc, #64]	; (8009f08 <prvCheckForValidListAndQueue+0x68>)
 8009ec8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	4b11      	ldr	r3, [pc, #68]	; (8009f14 <prvCheckForValidListAndQueue+0x74>)
 8009ed0:	4a11      	ldr	r2, [pc, #68]	; (8009f18 <prvCheckForValidListAndQueue+0x78>)
 8009ed2:	2110      	movs	r1, #16
 8009ed4:	200a      	movs	r0, #10
 8009ed6:	f7fe f929 	bl	800812c <xQueueGenericCreateStatic>
 8009eda:	4603      	mov	r3, r0
 8009edc:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ede:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d005      	beq.n	8009ef4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009ee8:	4b05      	ldr	r3, [pc, #20]	; (8009f00 <prvCheckForValidListAndQueue+0x60>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	490b      	ldr	r1, [pc, #44]	; (8009f1c <prvCheckForValidListAndQueue+0x7c>)
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fd42 	bl	8008978 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ef4:	f000 f96e 	bl	800a1d4 <vPortExitCritical>
}
 8009ef8:	bf00      	nop
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	20001ec0 	.word	0x20001ec0
 8009f04:	20001e90 	.word	0x20001e90
 8009f08:	20001ea4 	.word	0x20001ea4
 8009f0c:	20001eb8 	.word	0x20001eb8
 8009f10:	20001ebc 	.word	0x20001ebc
 8009f14:	20001f6c 	.word	0x20001f6c
 8009f18:	20001ecc 	.word	0x20001ecc
 8009f1c:	0800c544 	.word	0x0800c544

08009f20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	3b04      	subs	r3, #4
 8009f30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3b04      	subs	r3, #4
 8009f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f023 0201 	bic.w	r2, r3, #1
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3b04      	subs	r3, #4
 8009f4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f50:	4a0c      	ldr	r2, [pc, #48]	; (8009f84 <pxPortInitialiseStack+0x64>)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3b14      	subs	r3, #20
 8009f5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f06f 0202 	mvn.w	r2, #2
 8009f6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b20      	subs	r3, #32
 8009f74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009f76:	68fb      	ldr	r3, [r7, #12]
}
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	08009f89 	.word	0x08009f89

08009f88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009f88:	b480      	push	{r7}
 8009f8a:	b085      	sub	sp, #20
 8009f8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009f92:	4b12      	ldr	r3, [pc, #72]	; (8009fdc <prvTaskExitError+0x54>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9a:	d00a      	beq.n	8009fb2 <prvTaskExitError+0x2a>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	60fb      	str	r3, [r7, #12]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <prvTaskExitError+0x28>
	__asm volatile
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	60bb      	str	r3, [r7, #8]
}
 8009fc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009fc6:	bf00      	nop
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0fc      	beq.n	8009fc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009fce:	bf00      	nop
 8009fd0:	bf00      	nop
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	2000000c 	.word	0x2000000c

08009fe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009fe0:	4b07      	ldr	r3, [pc, #28]	; (800a000 <pxCurrentTCBConst2>)
 8009fe2:	6819      	ldr	r1, [r3, #0]
 8009fe4:	6808      	ldr	r0, [r1, #0]
 8009fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fea:	f380 8809 	msr	PSP, r0
 8009fee:	f3bf 8f6f 	isb	sy
 8009ff2:	f04f 0000 	mov.w	r0, #0
 8009ff6:	f380 8811 	msr	BASEPRI, r0
 8009ffa:	4770      	bx	lr
 8009ffc:	f3af 8000 	nop.w

0800a000 <pxCurrentTCBConst2>:
 800a000:	20001990 	.word	0x20001990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a004:	bf00      	nop
 800a006:	bf00      	nop

0800a008 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a008:	4808      	ldr	r0, [pc, #32]	; (800a02c <prvPortStartFirstTask+0x24>)
 800a00a:	6800      	ldr	r0, [r0, #0]
 800a00c:	6800      	ldr	r0, [r0, #0]
 800a00e:	f380 8808 	msr	MSP, r0
 800a012:	f04f 0000 	mov.w	r0, #0
 800a016:	f380 8814 	msr	CONTROL, r0
 800a01a:	b662      	cpsie	i
 800a01c:	b661      	cpsie	f
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	f3bf 8f6f 	isb	sy
 800a026:	df00      	svc	0
 800a028:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a02a:	bf00      	nop
 800a02c:	e000ed08 	.word	0xe000ed08

0800a030 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a036:	4b46      	ldr	r3, [pc, #280]	; (800a150 <xPortStartScheduler+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a46      	ldr	r2, [pc, #280]	; (800a154 <xPortStartScheduler+0x124>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d10a      	bne.n	800a056 <xPortStartScheduler+0x26>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	f383 8811 	msr	BASEPRI, r3
 800a048:	f3bf 8f6f 	isb	sy
 800a04c:	f3bf 8f4f 	dsb	sy
 800a050:	613b      	str	r3, [r7, #16]
}
 800a052:	bf00      	nop
 800a054:	e7fe      	b.n	800a054 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a056:	4b3e      	ldr	r3, [pc, #248]	; (800a150 <xPortStartScheduler+0x120>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a3f      	ldr	r2, [pc, #252]	; (800a158 <xPortStartScheduler+0x128>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d10a      	bne.n	800a076 <xPortStartScheduler+0x46>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	60fb      	str	r3, [r7, #12]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a076:	4b39      	ldr	r3, [pc, #228]	; (800a15c <xPortStartScheduler+0x12c>)
 800a078:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	22ff      	movs	r2, #255	; 0xff
 800a086:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a090:	78fb      	ldrb	r3, [r7, #3]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	4b31      	ldr	r3, [pc, #196]	; (800a160 <xPortStartScheduler+0x130>)
 800a09c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a09e:	4b31      	ldr	r3, [pc, #196]	; (800a164 <xPortStartScheduler+0x134>)
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0a4:	e009      	b.n	800a0ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a0a6:	4b2f      	ldr	r3, [pc, #188]	; (800a164 <xPortStartScheduler+0x134>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4a2d      	ldr	r2, [pc, #180]	; (800a164 <xPortStartScheduler+0x134>)
 800a0ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a0b0:	78fb      	ldrb	r3, [r7, #3]
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	005b      	lsls	r3, r3, #1
 800a0b6:	b2db      	uxtb	r3, r3
 800a0b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0ba:	78fb      	ldrb	r3, [r7, #3]
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b80      	cmp	r3, #128	; 0x80
 800a0c4:	d0ef      	beq.n	800a0a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a0c6:	4b27      	ldr	r3, [pc, #156]	; (800a164 <xPortStartScheduler+0x134>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1c3 0307 	rsb	r3, r3, #7
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d00a      	beq.n	800a0e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	60bb      	str	r3, [r7, #8]
}
 800a0e4:	bf00      	nop
 800a0e6:	e7fe      	b.n	800a0e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a0e8:	4b1e      	ldr	r3, [pc, #120]	; (800a164 <xPortStartScheduler+0x134>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	021b      	lsls	r3, r3, #8
 800a0ee:	4a1d      	ldr	r2, [pc, #116]	; (800a164 <xPortStartScheduler+0x134>)
 800a0f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a0f2:	4b1c      	ldr	r3, [pc, #112]	; (800a164 <xPortStartScheduler+0x134>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0fa:	4a1a      	ldr	r2, [pc, #104]	; (800a164 <xPortStartScheduler+0x134>)
 800a0fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a106:	4b18      	ldr	r3, [pc, #96]	; (800a168 <xPortStartScheduler+0x138>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a17      	ldr	r2, [pc, #92]	; (800a168 <xPortStartScheduler+0x138>)
 800a10c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a110:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <xPortStartScheduler+0x138>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a14      	ldr	r2, [pc, #80]	; (800a168 <xPortStartScheduler+0x138>)
 800a118:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a11c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a11e:	f000 f8dd 	bl	800a2dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a122:	4b12      	ldr	r3, [pc, #72]	; (800a16c <xPortStartScheduler+0x13c>)
 800a124:	2200      	movs	r2, #0
 800a126:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a128:	f000 f8fc 	bl	800a324 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a12c:	4b10      	ldr	r3, [pc, #64]	; (800a170 <xPortStartScheduler+0x140>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <xPortStartScheduler+0x140>)
 800a132:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a136:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a138:	f7ff ff66 	bl	800a008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a13c:	f7ff f84c 	bl	80091d8 <vTaskSwitchContext>
	prvTaskExitError();
 800a140:	f7ff ff22 	bl	8009f88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	e000ed00 	.word	0xe000ed00
 800a154:	410fc271 	.word	0x410fc271
 800a158:	410fc270 	.word	0x410fc270
 800a15c:	e000e400 	.word	0xe000e400
 800a160:	20001fbc 	.word	0x20001fbc
 800a164:	20001fc0 	.word	0x20001fc0
 800a168:	e000ed20 	.word	0xe000ed20
 800a16c:	2000000c 	.word	0x2000000c
 800a170:	e000ef34 	.word	0xe000ef34

0800a174 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	607b      	str	r3, [r7, #4]
}
 800a18c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a18e:	4b0f      	ldr	r3, [pc, #60]	; (800a1cc <vPortEnterCritical+0x58>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	3301      	adds	r3, #1
 800a194:	4a0d      	ldr	r2, [pc, #52]	; (800a1cc <vPortEnterCritical+0x58>)
 800a196:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a198:	4b0c      	ldr	r3, [pc, #48]	; (800a1cc <vPortEnterCritical+0x58>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d10f      	bne.n	800a1c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1a0:	4b0b      	ldr	r3, [pc, #44]	; (800a1d0 <vPortEnterCritical+0x5c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	603b      	str	r3, [r7, #0]
}
 800a1bc:	bf00      	nop
 800a1be:	e7fe      	b.n	800a1be <vPortEnterCritical+0x4a>
	}
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	2000000c 	.word	0x2000000c
 800a1d0:	e000ed04 	.word	0xe000ed04

0800a1d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a1da:	4b12      	ldr	r3, [pc, #72]	; (800a224 <vPortExitCritical+0x50>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10a      	bne.n	800a1f8 <vPortExitCritical+0x24>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	607b      	str	r3, [r7, #4]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a1f8:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <vPortExitCritical+0x50>)
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	4a09      	ldr	r2, [pc, #36]	; (800a224 <vPortExitCritical+0x50>)
 800a200:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <vPortExitCritical+0x50>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <vPortExitCritical+0x42>
 800a20a:	2300      	movs	r3, #0
 800a20c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	f383 8811 	msr	BASEPRI, r3
}
 800a214:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a216:	bf00      	nop
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	2000000c 	.word	0x2000000c
	...

0800a230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a230:	f3ef 8009 	mrs	r0, PSP
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	4b15      	ldr	r3, [pc, #84]	; (800a290 <pxCurrentTCBConst>)
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	f01e 0f10 	tst.w	lr, #16
 800a240:	bf08      	it	eq
 800a242:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a246:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a24a:	6010      	str	r0, [r2, #0]
 800a24c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a250:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a254:	f380 8811 	msr	BASEPRI, r0
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	f3bf 8f6f 	isb	sy
 800a260:	f7fe ffba 	bl	80091d8 <vTaskSwitchContext>
 800a264:	f04f 0000 	mov.w	r0, #0
 800a268:	f380 8811 	msr	BASEPRI, r0
 800a26c:	bc09      	pop	{r0, r3}
 800a26e:	6819      	ldr	r1, [r3, #0]
 800a270:	6808      	ldr	r0, [r1, #0]
 800a272:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a276:	f01e 0f10 	tst.w	lr, #16
 800a27a:	bf08      	it	eq
 800a27c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a280:	f380 8809 	msr	PSP, r0
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	f3af 8000 	nop.w

0800a290 <pxCurrentTCBConst>:
 800a290:	20001990 	.word	0x20001990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop

0800a298 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	607b      	str	r3, [r7, #4]
}
 800a2b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2b2:	f7fe fed7 	bl	8009064 <xTaskIncrementTick>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d003      	beq.n	800a2c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2bc:	4b06      	ldr	r3, [pc, #24]	; (800a2d8 <xPortSysTickHandler+0x40>)
 800a2be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	f383 8811 	msr	BASEPRI, r3
}
 800a2ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	e000ed04 	.word	0xe000ed04

0800a2dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2dc:	b480      	push	{r7}
 800a2de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2e0:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <vPortSetupTimerInterrupt+0x34>)
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2e6:	4b0b      	ldr	r3, [pc, #44]	; (800a314 <vPortSetupTimerInterrupt+0x38>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2ec:	4b0a      	ldr	r3, [pc, #40]	; (800a318 <vPortSetupTimerInterrupt+0x3c>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a0a      	ldr	r2, [pc, #40]	; (800a31c <vPortSetupTimerInterrupt+0x40>)
 800a2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a2f6:	099b      	lsrs	r3, r3, #6
 800a2f8:	4a09      	ldr	r2, [pc, #36]	; (800a320 <vPortSetupTimerInterrupt+0x44>)
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a2fe:	4b04      	ldr	r3, [pc, #16]	; (800a310 <vPortSetupTimerInterrupt+0x34>)
 800a300:	2207      	movs	r2, #7
 800a302:	601a      	str	r2, [r3, #0]
}
 800a304:	bf00      	nop
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
 800a30e:	bf00      	nop
 800a310:	e000e010 	.word	0xe000e010
 800a314:	e000e018 	.word	0xe000e018
 800a318:	20000000 	.word	0x20000000
 800a31c:	10624dd3 	.word	0x10624dd3
 800a320:	e000e014 	.word	0xe000e014

0800a324 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a324:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a334 <vPortEnableVFP+0x10>
 800a328:	6801      	ldr	r1, [r0, #0]
 800a32a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a32e:	6001      	str	r1, [r0, #0]
 800a330:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a332:	bf00      	nop
 800a334:	e000ed88 	.word	0xe000ed88

0800a338 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a33e:	f3ef 8305 	mrs	r3, IPSR
 800a342:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2b0f      	cmp	r3, #15
 800a348:	d914      	bls.n	800a374 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a34a:	4a17      	ldr	r2, [pc, #92]	; (800a3a8 <vPortValidateInterruptPriority+0x70>)
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a354:	4b15      	ldr	r3, [pc, #84]	; (800a3ac <vPortValidateInterruptPriority+0x74>)
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	7afa      	ldrb	r2, [r7, #11]
 800a35a:	429a      	cmp	r2, r3
 800a35c:	d20a      	bcs.n	800a374 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	607b      	str	r3, [r7, #4]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a374:	4b0e      	ldr	r3, [pc, #56]	; (800a3b0 <vPortValidateInterruptPriority+0x78>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a37c:	4b0d      	ldr	r3, [pc, #52]	; (800a3b4 <vPortValidateInterruptPriority+0x7c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d90a      	bls.n	800a39a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	603b      	str	r3, [r7, #0]
}
 800a396:	bf00      	nop
 800a398:	e7fe      	b.n	800a398 <vPortValidateInterruptPriority+0x60>
	}
 800a39a:	bf00      	nop
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	e000e3f0 	.word	0xe000e3f0
 800a3ac:	20001fbc 	.word	0x20001fbc
 800a3b0:	e000ed0c 	.word	0xe000ed0c
 800a3b4:	20001fc0 	.word	0x20001fc0

0800a3b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	; 0x28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a3c4:	f7fe fd92 	bl	8008eec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a3c8:	4b5b      	ldr	r3, [pc, #364]	; (800a538 <pvPortMalloc+0x180>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a3d0:	f000 f920 	bl	800a614 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a3d4:	4b59      	ldr	r3, [pc, #356]	; (800a53c <pvPortMalloc+0x184>)
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	f040 8093 	bne.w	800a508 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01d      	beq.n	800a424 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f003 0307 	and.w	r3, r3, #7
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d014      	beq.n	800a424 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f023 0307 	bic.w	r3, r3, #7
 800a400:	3308      	adds	r3, #8
 800a402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <pvPortMalloc+0x6c>
	__asm volatile
 800a40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a412:	f383 8811 	msr	BASEPRI, r3
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	f3bf 8f4f 	dsb	sy
 800a41e:	617b      	str	r3, [r7, #20]
}
 800a420:	bf00      	nop
 800a422:	e7fe      	b.n	800a422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d06e      	beq.n	800a508 <pvPortMalloc+0x150>
 800a42a:	4b45      	ldr	r3, [pc, #276]	; (800a540 <pvPortMalloc+0x188>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d869      	bhi.n	800a508 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a434:	4b43      	ldr	r3, [pc, #268]	; (800a544 <pvPortMalloc+0x18c>)
 800a436:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a438:	4b42      	ldr	r3, [pc, #264]	; (800a544 <pvPortMalloc+0x18c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a43e:	e004      	b.n	800a44a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	429a      	cmp	r2, r3
 800a452:	d903      	bls.n	800a45c <pvPortMalloc+0xa4>
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1f1      	bne.n	800a440 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a45c:	4b36      	ldr	r3, [pc, #216]	; (800a538 <pvPortMalloc+0x180>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a462:	429a      	cmp	r2, r3
 800a464:	d050      	beq.n	800a508 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2208      	movs	r2, #8
 800a46c:	4413      	add	r3, r2
 800a46e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	6a3b      	ldr	r3, [r7, #32]
 800a476:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	2308      	movs	r3, #8
 800a482:	005b      	lsls	r3, r3, #1
 800a484:	429a      	cmp	r2, r3
 800a486:	d91f      	bls.n	800a4c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	4413      	add	r3, r2
 800a48e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	613b      	str	r3, [r7, #16]
}
 800a4ac:	bf00      	nop
 800a4ae:	e7fe      	b.n	800a4ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a4c2:	69b8      	ldr	r0, [r7, #24]
 800a4c4:	f000 f908 	bl	800a6d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a4c8:	4b1d      	ldr	r3, [pc, #116]	; (800a540 <pvPortMalloc+0x188>)
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	4a1b      	ldr	r2, [pc, #108]	; (800a540 <pvPortMalloc+0x188>)
 800a4d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a4d6:	4b1a      	ldr	r3, [pc, #104]	; (800a540 <pvPortMalloc+0x188>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b1b      	ldr	r3, [pc, #108]	; (800a548 <pvPortMalloc+0x190>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d203      	bcs.n	800a4ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a4e2:	4b17      	ldr	r3, [pc, #92]	; (800a540 <pvPortMalloc+0x188>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a18      	ldr	r2, [pc, #96]	; (800a548 <pvPortMalloc+0x190>)
 800a4e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	685a      	ldr	r2, [r3, #4]
 800a4ee:	4b13      	ldr	r3, [pc, #76]	; (800a53c <pvPortMalloc+0x184>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a4fe:	4b13      	ldr	r3, [pc, #76]	; (800a54c <pvPortMalloc+0x194>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	3301      	adds	r3, #1
 800a504:	4a11      	ldr	r2, [pc, #68]	; (800a54c <pvPortMalloc+0x194>)
 800a506:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a508:	f7fe fcfe 	bl	8008f08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	f003 0307 	and.w	r3, r3, #7
 800a512:	2b00      	cmp	r3, #0
 800a514:	d00a      	beq.n	800a52c <pvPortMalloc+0x174>
	__asm volatile
 800a516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51a:	f383 8811 	msr	BASEPRI, r3
 800a51e:	f3bf 8f6f 	isb	sy
 800a522:	f3bf 8f4f 	dsb	sy
 800a526:	60fb      	str	r3, [r7, #12]
}
 800a528:	bf00      	nop
 800a52a:	e7fe      	b.n	800a52a <pvPortMalloc+0x172>
	return pvReturn;
 800a52c:	69fb      	ldr	r3, [r7, #28]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3728      	adds	r7, #40	; 0x28
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20003354 	.word	0x20003354
 800a53c:	20003368 	.word	0x20003368
 800a540:	20003358 	.word	0x20003358
 800a544:	2000334c 	.word	0x2000334c
 800a548:	2000335c 	.word	0x2000335c
 800a54c:	20003360 	.word	0x20003360

0800a550 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b086      	sub	sp, #24
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d04d      	beq.n	800a5fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a562:	2308      	movs	r3, #8
 800a564:	425b      	negs	r3, r3
 800a566:	697a      	ldr	r2, [r7, #20]
 800a568:	4413      	add	r3, r2
 800a56a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	4b24      	ldr	r3, [pc, #144]	; (800a608 <vPortFree+0xb8>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4013      	ands	r3, r2
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <vPortFree+0x44>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60fb      	str	r3, [r7, #12]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <vPortFree+0x62>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	60bb      	str	r3, [r7, #8]
}
 800a5ae:	bf00      	nop
 800a5b0:	e7fe      	b.n	800a5b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <vPortFree+0xb8>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d01e      	beq.n	800a5fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d11a      	bne.n	800a5fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	685a      	ldr	r2, [r3, #4]
 800a5cc:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <vPortFree+0xb8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	43db      	mvns	r3, r3
 800a5d2:	401a      	ands	r2, r3
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a5d8:	f7fe fc88 	bl	8008eec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	; (800a60c <vPortFree+0xbc>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	4a09      	ldr	r2, [pc, #36]	; (800a60c <vPortFree+0xbc>)
 800a5e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a5ea:	6938      	ldr	r0, [r7, #16]
 800a5ec:	f000 f874 	bl	800a6d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a5f0:	4b07      	ldr	r3, [pc, #28]	; (800a610 <vPortFree+0xc0>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	3301      	adds	r3, #1
 800a5f6:	4a06      	ldr	r2, [pc, #24]	; (800a610 <vPortFree+0xc0>)
 800a5f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a5fa:	f7fe fc85 	bl	8008f08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a5fe:	bf00      	nop
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20003368 	.word	0x20003368
 800a60c:	20003358 	.word	0x20003358
 800a610:	20003364 	.word	0x20003364

0800a614 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a614:	b480      	push	{r7}
 800a616:	b085      	sub	sp, #20
 800a618:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a61a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a61e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a620:	4b27      	ldr	r3, [pc, #156]	; (800a6c0 <prvHeapInit+0xac>)
 800a622:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f003 0307 	and.w	r3, r3, #7
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d00c      	beq.n	800a648 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3307      	adds	r3, #7
 800a632:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	4a1f      	ldr	r2, [pc, #124]	; (800a6c0 <prvHeapInit+0xac>)
 800a644:	4413      	add	r3, r2
 800a646:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a64c:	4a1d      	ldr	r2, [pc, #116]	; (800a6c4 <prvHeapInit+0xb0>)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a652:	4b1c      	ldr	r3, [pc, #112]	; (800a6c4 <prvHeapInit+0xb0>)
 800a654:	2200      	movs	r2, #0
 800a656:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	4413      	add	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a660:	2208      	movs	r2, #8
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	1a9b      	subs	r3, r3, r2
 800a666:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f023 0307 	bic.w	r3, r3, #7
 800a66e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	4a15      	ldr	r2, [pc, #84]	; (800a6c8 <prvHeapInit+0xb4>)
 800a674:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a676:	4b14      	ldr	r3, [pc, #80]	; (800a6c8 <prvHeapInit+0xb4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2200      	movs	r2, #0
 800a67c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a67e:	4b12      	ldr	r3, [pc, #72]	; (800a6c8 <prvHeapInit+0xb4>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68fa      	ldr	r2, [r7, #12]
 800a68e:	1ad2      	subs	r2, r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <prvHeapInit+0xb4>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	4a0a      	ldr	r2, [pc, #40]	; (800a6cc <prvHeapInit+0xb8>)
 800a6a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	685b      	ldr	r3, [r3, #4]
 800a6a8:	4a09      	ldr	r2, [pc, #36]	; (800a6d0 <prvHeapInit+0xbc>)
 800a6aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a6ac:	4b09      	ldr	r3, [pc, #36]	; (800a6d4 <prvHeapInit+0xc0>)
 800a6ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a6b2:	601a      	str	r2, [r3, #0]
}
 800a6b4:	bf00      	nop
 800a6b6:	3714      	adds	r7, #20
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6be:	4770      	bx	lr
 800a6c0:	20001fc4 	.word	0x20001fc4
 800a6c4:	2000334c 	.word	0x2000334c
 800a6c8:	20003354 	.word	0x20003354
 800a6cc:	2000335c 	.word	0x2000335c
 800a6d0:	20003358 	.word	0x20003358
 800a6d4:	20003368 	.word	0x20003368

0800a6d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a6e0:	4b28      	ldr	r3, [pc, #160]	; (800a784 <prvInsertBlockIntoFreeList+0xac>)
 800a6e2:	60fb      	str	r3, [r7, #12]
 800a6e4:	e002      	b.n	800a6ec <prvInsertBlockIntoFreeList+0x14>
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	60fb      	str	r3, [r7, #12]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d8f7      	bhi.n	800a6e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	68ba      	ldr	r2, [r7, #8]
 800a700:	4413      	add	r3, r2
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	429a      	cmp	r2, r3
 800a706:	d108      	bne.n	800a71a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	441a      	add	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	685b      	ldr	r3, [r3, #4]
 800a722:	68ba      	ldr	r2, [r7, #8]
 800a724:	441a      	add	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d118      	bne.n	800a760 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681a      	ldr	r2, [r3, #0]
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <prvInsertBlockIntoFreeList+0xb0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	429a      	cmp	r2, r3
 800a738:	d00d      	beq.n	800a756 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685a      	ldr	r2, [r3, #4]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	441a      	add	r2, r3
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	e008      	b.n	800a768 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a756:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <prvInsertBlockIntoFreeList+0xb0>)
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	601a      	str	r2, [r3, #0]
 800a75e:	e003      	b.n	800a768 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d002      	beq.n	800a776 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a776:	bf00      	nop
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr
 800a782:	bf00      	nop
 800a784:	2000334c 	.word	0x2000334c
 800a788:	20003354 	.word	0x20003354

0800a78c <__assert_func>:
 800a78c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a78e:	4614      	mov	r4, r2
 800a790:	461a      	mov	r2, r3
 800a792:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <__assert_func+0x2c>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	68d8      	ldr	r0, [r3, #12]
 800a79a:	b14c      	cbz	r4, 800a7b0 <__assert_func+0x24>
 800a79c:	4b07      	ldr	r3, [pc, #28]	; (800a7bc <__assert_func+0x30>)
 800a79e:	9100      	str	r1, [sp, #0]
 800a7a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7a4:	4906      	ldr	r1, [pc, #24]	; (800a7c0 <__assert_func+0x34>)
 800a7a6:	462b      	mov	r3, r5
 800a7a8:	f000 f8ea 	bl	800a980 <fiprintf>
 800a7ac:	f000 ffb6 	bl	800b71c <abort>
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <__assert_func+0x38>)
 800a7b2:	461c      	mov	r4, r3
 800a7b4:	e7f3      	b.n	800a79e <__assert_func+0x12>
 800a7b6:	bf00      	nop
 800a7b8:	20000010 	.word	0x20000010
 800a7bc:	0800c5dc 	.word	0x0800c5dc
 800a7c0:	0800c5e9 	.word	0x0800c5e9
 800a7c4:	0800c617 	.word	0x0800c617

0800a7c8 <__errno>:
 800a7c8:	4b01      	ldr	r3, [pc, #4]	; (800a7d0 <__errno+0x8>)
 800a7ca:	6818      	ldr	r0, [r3, #0]
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	20000010 	.word	0x20000010

0800a7d4 <std>:
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	4604      	mov	r4, r0
 800a7da:	e9c0 3300 	strd	r3, r3, [r0]
 800a7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7e2:	6083      	str	r3, [r0, #8]
 800a7e4:	8181      	strh	r1, [r0, #12]
 800a7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a7e8:	81c2      	strh	r2, [r0, #14]
 800a7ea:	6183      	str	r3, [r0, #24]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	2208      	movs	r2, #8
 800a7f0:	305c      	adds	r0, #92	; 0x5c
 800a7f2:	f000 f946 	bl	800aa82 <memset>
 800a7f6:	4b05      	ldr	r3, [pc, #20]	; (800a80c <std+0x38>)
 800a7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a7fa:	4b05      	ldr	r3, [pc, #20]	; (800a810 <std+0x3c>)
 800a7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7fe:	4b05      	ldr	r3, [pc, #20]	; (800a814 <std+0x40>)
 800a800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a802:	4b05      	ldr	r3, [pc, #20]	; (800a818 <std+0x44>)
 800a804:	6224      	str	r4, [r4, #32]
 800a806:	6323      	str	r3, [r4, #48]	; 0x30
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	0800b3e9 	.word	0x0800b3e9
 800a810:	0800b40b 	.word	0x0800b40b
 800a814:	0800b443 	.word	0x0800b443
 800a818:	0800b467 	.word	0x0800b467

0800a81c <_cleanup_r>:
 800a81c:	4901      	ldr	r1, [pc, #4]	; (800a824 <_cleanup_r+0x8>)
 800a81e:	f000 b8c1 	b.w	800a9a4 <_fwalk_reent>
 800a822:	bf00      	nop
 800a824:	0800b859 	.word	0x0800b859

0800a828 <__sfmoreglue>:
 800a828:	b570      	push	{r4, r5, r6, lr}
 800a82a:	2268      	movs	r2, #104	; 0x68
 800a82c:	1e4d      	subs	r5, r1, #1
 800a82e:	4355      	muls	r5, r2
 800a830:	460e      	mov	r6, r1
 800a832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a836:	f000 f94d 	bl	800aad4 <_malloc_r>
 800a83a:	4604      	mov	r4, r0
 800a83c:	b140      	cbz	r0, 800a850 <__sfmoreglue+0x28>
 800a83e:	2100      	movs	r1, #0
 800a840:	e9c0 1600 	strd	r1, r6, [r0]
 800a844:	300c      	adds	r0, #12
 800a846:	60a0      	str	r0, [r4, #8]
 800a848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a84c:	f000 f919 	bl	800aa82 <memset>
 800a850:	4620      	mov	r0, r4
 800a852:	bd70      	pop	{r4, r5, r6, pc}

0800a854 <__sfp_lock_acquire>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__sfp_lock_acquire+0x8>)
 800a856:	f000 b8ea 	b.w	800aa2e <__retarget_lock_acquire_recursive>
 800a85a:	bf00      	nop
 800a85c:	2000336d 	.word	0x2000336d

0800a860 <__sfp_lock_release>:
 800a860:	4801      	ldr	r0, [pc, #4]	; (800a868 <__sfp_lock_release+0x8>)
 800a862:	f000 b8e5 	b.w	800aa30 <__retarget_lock_release_recursive>
 800a866:	bf00      	nop
 800a868:	2000336d 	.word	0x2000336d

0800a86c <__sinit_lock_acquire>:
 800a86c:	4801      	ldr	r0, [pc, #4]	; (800a874 <__sinit_lock_acquire+0x8>)
 800a86e:	f000 b8de 	b.w	800aa2e <__retarget_lock_acquire_recursive>
 800a872:	bf00      	nop
 800a874:	2000336e 	.word	0x2000336e

0800a878 <__sinit_lock_release>:
 800a878:	4801      	ldr	r0, [pc, #4]	; (800a880 <__sinit_lock_release+0x8>)
 800a87a:	f000 b8d9 	b.w	800aa30 <__retarget_lock_release_recursive>
 800a87e:	bf00      	nop
 800a880:	2000336e 	.word	0x2000336e

0800a884 <__sinit>:
 800a884:	b510      	push	{r4, lr}
 800a886:	4604      	mov	r4, r0
 800a888:	f7ff fff0 	bl	800a86c <__sinit_lock_acquire>
 800a88c:	69a3      	ldr	r3, [r4, #24]
 800a88e:	b11b      	cbz	r3, 800a898 <__sinit+0x14>
 800a890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a894:	f7ff bff0 	b.w	800a878 <__sinit_lock_release>
 800a898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a89c:	6523      	str	r3, [r4, #80]	; 0x50
 800a89e:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <__sinit+0x68>)
 800a8a0:	4a13      	ldr	r2, [pc, #76]	; (800a8f0 <__sinit+0x6c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	bf04      	itt	eq
 800a8aa:	2301      	moveq	r3, #1
 800a8ac:	61a3      	streq	r3, [r4, #24]
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	f000 f820 	bl	800a8f4 <__sfp>
 800a8b4:	6060      	str	r0, [r4, #4]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 f81c 	bl	800a8f4 <__sfp>
 800a8bc:	60a0      	str	r0, [r4, #8]
 800a8be:	4620      	mov	r0, r4
 800a8c0:	f000 f818 	bl	800a8f4 <__sfp>
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	60e0      	str	r0, [r4, #12]
 800a8c8:	2104      	movs	r1, #4
 800a8ca:	6860      	ldr	r0, [r4, #4]
 800a8cc:	f7ff ff82 	bl	800a7d4 <std>
 800a8d0:	68a0      	ldr	r0, [r4, #8]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	2109      	movs	r1, #9
 800a8d6:	f7ff ff7d 	bl	800a7d4 <std>
 800a8da:	68e0      	ldr	r0, [r4, #12]
 800a8dc:	2202      	movs	r2, #2
 800a8de:	2112      	movs	r1, #18
 800a8e0:	f7ff ff78 	bl	800a7d4 <std>
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	61a3      	str	r3, [r4, #24]
 800a8e8:	e7d2      	b.n	800a890 <__sinit+0xc>
 800a8ea:	bf00      	nop
 800a8ec:	0800c678 	.word	0x0800c678
 800a8f0:	0800a81d 	.word	0x0800a81d

0800a8f4 <__sfp>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	4607      	mov	r7, r0
 800a8f8:	f7ff ffac 	bl	800a854 <__sfp_lock_acquire>
 800a8fc:	4b1e      	ldr	r3, [pc, #120]	; (800a978 <__sfp+0x84>)
 800a8fe:	681e      	ldr	r6, [r3, #0]
 800a900:	69b3      	ldr	r3, [r6, #24]
 800a902:	b913      	cbnz	r3, 800a90a <__sfp+0x16>
 800a904:	4630      	mov	r0, r6
 800a906:	f7ff ffbd 	bl	800a884 <__sinit>
 800a90a:	3648      	adds	r6, #72	; 0x48
 800a90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a910:	3b01      	subs	r3, #1
 800a912:	d503      	bpl.n	800a91c <__sfp+0x28>
 800a914:	6833      	ldr	r3, [r6, #0]
 800a916:	b30b      	cbz	r3, 800a95c <__sfp+0x68>
 800a918:	6836      	ldr	r6, [r6, #0]
 800a91a:	e7f7      	b.n	800a90c <__sfp+0x18>
 800a91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a920:	b9d5      	cbnz	r5, 800a958 <__sfp+0x64>
 800a922:	4b16      	ldr	r3, [pc, #88]	; (800a97c <__sfp+0x88>)
 800a924:	60e3      	str	r3, [r4, #12]
 800a926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a92a:	6665      	str	r5, [r4, #100]	; 0x64
 800a92c:	f000 f87e 	bl	800aa2c <__retarget_lock_init_recursive>
 800a930:	f7ff ff96 	bl	800a860 <__sfp_lock_release>
 800a934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a93c:	6025      	str	r5, [r4, #0]
 800a93e:	61a5      	str	r5, [r4, #24]
 800a940:	2208      	movs	r2, #8
 800a942:	4629      	mov	r1, r5
 800a944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a948:	f000 f89b 	bl	800aa82 <memset>
 800a94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a954:	4620      	mov	r0, r4
 800a956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a958:	3468      	adds	r4, #104	; 0x68
 800a95a:	e7d9      	b.n	800a910 <__sfp+0x1c>
 800a95c:	2104      	movs	r1, #4
 800a95e:	4638      	mov	r0, r7
 800a960:	f7ff ff62 	bl	800a828 <__sfmoreglue>
 800a964:	4604      	mov	r4, r0
 800a966:	6030      	str	r0, [r6, #0]
 800a968:	2800      	cmp	r0, #0
 800a96a:	d1d5      	bne.n	800a918 <__sfp+0x24>
 800a96c:	f7ff ff78 	bl	800a860 <__sfp_lock_release>
 800a970:	230c      	movs	r3, #12
 800a972:	603b      	str	r3, [r7, #0]
 800a974:	e7ee      	b.n	800a954 <__sfp+0x60>
 800a976:	bf00      	nop
 800a978:	0800c678 	.word	0x0800c678
 800a97c:	ffff0001 	.word	0xffff0001

0800a980 <fiprintf>:
 800a980:	b40e      	push	{r1, r2, r3}
 800a982:	b503      	push	{r0, r1, lr}
 800a984:	4601      	mov	r1, r0
 800a986:	ab03      	add	r3, sp, #12
 800a988:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <fiprintf+0x20>)
 800a98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a98e:	6800      	ldr	r0, [r0, #0]
 800a990:	9301      	str	r3, [sp, #4]
 800a992:	f000 f93d 	bl	800ac10 <_vfiprintf_r>
 800a996:	b002      	add	sp, #8
 800a998:	f85d eb04 	ldr.w	lr, [sp], #4
 800a99c:	b003      	add	sp, #12
 800a99e:	4770      	bx	lr
 800a9a0:	20000010 	.word	0x20000010

0800a9a4 <_fwalk_reent>:
 800a9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9a8:	4606      	mov	r6, r0
 800a9aa:	4688      	mov	r8, r1
 800a9ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a9b0:	2700      	movs	r7, #0
 800a9b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9b6:	f1b9 0901 	subs.w	r9, r9, #1
 800a9ba:	d505      	bpl.n	800a9c8 <_fwalk_reent+0x24>
 800a9bc:	6824      	ldr	r4, [r4, #0]
 800a9be:	2c00      	cmp	r4, #0
 800a9c0:	d1f7      	bne.n	800a9b2 <_fwalk_reent+0xe>
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c8:	89ab      	ldrh	r3, [r5, #12]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d907      	bls.n	800a9de <_fwalk_reent+0x3a>
 800a9ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	d003      	beq.n	800a9de <_fwalk_reent+0x3a>
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4630      	mov	r0, r6
 800a9da:	47c0      	blx	r8
 800a9dc:	4307      	orrs	r7, r0
 800a9de:	3568      	adds	r5, #104	; 0x68
 800a9e0:	e7e9      	b.n	800a9b6 <_fwalk_reent+0x12>
	...

0800a9e4 <__libc_init_array>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4d0d      	ldr	r5, [pc, #52]	; (800aa1c <__libc_init_array+0x38>)
 800a9e8:	4c0d      	ldr	r4, [pc, #52]	; (800aa20 <__libc_init_array+0x3c>)
 800a9ea:	1b64      	subs	r4, r4, r5
 800a9ec:	10a4      	asrs	r4, r4, #2
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	42a6      	cmp	r6, r4
 800a9f2:	d109      	bne.n	800aa08 <__libc_init_array+0x24>
 800a9f4:	4d0b      	ldr	r5, [pc, #44]	; (800aa24 <__libc_init_array+0x40>)
 800a9f6:	4c0c      	ldr	r4, [pc, #48]	; (800aa28 <__libc_init_array+0x44>)
 800a9f8:	f001 fa4c 	bl	800be94 <_init>
 800a9fc:	1b64      	subs	r4, r4, r5
 800a9fe:	10a4      	asrs	r4, r4, #2
 800aa00:	2600      	movs	r6, #0
 800aa02:	42a6      	cmp	r6, r4
 800aa04:	d105      	bne.n	800aa12 <__libc_init_array+0x2e>
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0c:	4798      	blx	r3
 800aa0e:	3601      	adds	r6, #1
 800aa10:	e7ee      	b.n	800a9f0 <__libc_init_array+0xc>
 800aa12:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa16:	4798      	blx	r3
 800aa18:	3601      	adds	r6, #1
 800aa1a:	e7f2      	b.n	800aa02 <__libc_init_array+0x1e>
 800aa1c:	0800c72c 	.word	0x0800c72c
 800aa20:	0800c72c 	.word	0x0800c72c
 800aa24:	0800c72c 	.word	0x0800c72c
 800aa28:	0800c730 	.word	0x0800c730

0800aa2c <__retarget_lock_init_recursive>:
 800aa2c:	4770      	bx	lr

0800aa2e <__retarget_lock_acquire_recursive>:
 800aa2e:	4770      	bx	lr

0800aa30 <__retarget_lock_release_recursive>:
 800aa30:	4770      	bx	lr

0800aa32 <memcpy>:
 800aa32:	440a      	add	r2, r1
 800aa34:	4291      	cmp	r1, r2
 800aa36:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa3a:	d100      	bne.n	800aa3e <memcpy+0xc>
 800aa3c:	4770      	bx	lr
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa48:	4291      	cmp	r1, r2
 800aa4a:	d1f9      	bne.n	800aa40 <memcpy+0xe>
 800aa4c:	bd10      	pop	{r4, pc}

0800aa4e <memmove>:
 800aa4e:	4288      	cmp	r0, r1
 800aa50:	b510      	push	{r4, lr}
 800aa52:	eb01 0402 	add.w	r4, r1, r2
 800aa56:	d902      	bls.n	800aa5e <memmove+0x10>
 800aa58:	4284      	cmp	r4, r0
 800aa5a:	4623      	mov	r3, r4
 800aa5c:	d807      	bhi.n	800aa6e <memmove+0x20>
 800aa5e:	1e43      	subs	r3, r0, #1
 800aa60:	42a1      	cmp	r1, r4
 800aa62:	d008      	beq.n	800aa76 <memmove+0x28>
 800aa64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa68:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa6c:	e7f8      	b.n	800aa60 <memmove+0x12>
 800aa6e:	4402      	add	r2, r0
 800aa70:	4601      	mov	r1, r0
 800aa72:	428a      	cmp	r2, r1
 800aa74:	d100      	bne.n	800aa78 <memmove+0x2a>
 800aa76:	bd10      	pop	{r4, pc}
 800aa78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa7c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa80:	e7f7      	b.n	800aa72 <memmove+0x24>

0800aa82 <memset>:
 800aa82:	4402      	add	r2, r0
 800aa84:	4603      	mov	r3, r0
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d100      	bne.n	800aa8c <memset+0xa>
 800aa8a:	4770      	bx	lr
 800aa8c:	f803 1b01 	strb.w	r1, [r3], #1
 800aa90:	e7f9      	b.n	800aa86 <memset+0x4>
	...

0800aa94 <sbrk_aligned>:
 800aa94:	b570      	push	{r4, r5, r6, lr}
 800aa96:	4e0e      	ldr	r6, [pc, #56]	; (800aad0 <sbrk_aligned+0x3c>)
 800aa98:	460c      	mov	r4, r1
 800aa9a:	6831      	ldr	r1, [r6, #0]
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	b911      	cbnz	r1, 800aaa6 <sbrk_aligned+0x12>
 800aaa0:	f000 fc72 	bl	800b388 <_sbrk_r>
 800aaa4:	6030      	str	r0, [r6, #0]
 800aaa6:	4621      	mov	r1, r4
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f000 fc6d 	bl	800b388 <_sbrk_r>
 800aaae:	1c43      	adds	r3, r0, #1
 800aab0:	d00a      	beq.n	800aac8 <sbrk_aligned+0x34>
 800aab2:	1cc4      	adds	r4, r0, #3
 800aab4:	f024 0403 	bic.w	r4, r4, #3
 800aab8:	42a0      	cmp	r0, r4
 800aaba:	d007      	beq.n	800aacc <sbrk_aligned+0x38>
 800aabc:	1a21      	subs	r1, r4, r0
 800aabe:	4628      	mov	r0, r5
 800aac0:	f000 fc62 	bl	800b388 <_sbrk_r>
 800aac4:	3001      	adds	r0, #1
 800aac6:	d101      	bne.n	800aacc <sbrk_aligned+0x38>
 800aac8:	f04f 34ff 	mov.w	r4, #4294967295
 800aacc:	4620      	mov	r0, r4
 800aace:	bd70      	pop	{r4, r5, r6, pc}
 800aad0:	20003374 	.word	0x20003374

0800aad4 <_malloc_r>:
 800aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad8:	1ccd      	adds	r5, r1, #3
 800aada:	f025 0503 	bic.w	r5, r5, #3
 800aade:	3508      	adds	r5, #8
 800aae0:	2d0c      	cmp	r5, #12
 800aae2:	bf38      	it	cc
 800aae4:	250c      	movcc	r5, #12
 800aae6:	2d00      	cmp	r5, #0
 800aae8:	4607      	mov	r7, r0
 800aaea:	db01      	blt.n	800aaf0 <_malloc_r+0x1c>
 800aaec:	42a9      	cmp	r1, r5
 800aaee:	d905      	bls.n	800aafc <_malloc_r+0x28>
 800aaf0:	230c      	movs	r3, #12
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	2600      	movs	r6, #0
 800aaf6:	4630      	mov	r0, r6
 800aaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aafc:	4e2e      	ldr	r6, [pc, #184]	; (800abb8 <_malloc_r+0xe4>)
 800aafe:	f000 ff67 	bl	800b9d0 <__malloc_lock>
 800ab02:	6833      	ldr	r3, [r6, #0]
 800ab04:	461c      	mov	r4, r3
 800ab06:	bb34      	cbnz	r4, 800ab56 <_malloc_r+0x82>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	f7ff ffc2 	bl	800aa94 <sbrk_aligned>
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	4604      	mov	r4, r0
 800ab14:	d14d      	bne.n	800abb2 <_malloc_r+0xde>
 800ab16:	6834      	ldr	r4, [r6, #0]
 800ab18:	4626      	mov	r6, r4
 800ab1a:	2e00      	cmp	r6, #0
 800ab1c:	d140      	bne.n	800aba0 <_malloc_r+0xcc>
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	4631      	mov	r1, r6
 800ab22:	4638      	mov	r0, r7
 800ab24:	eb04 0803 	add.w	r8, r4, r3
 800ab28:	f000 fc2e 	bl	800b388 <_sbrk_r>
 800ab2c:	4580      	cmp	r8, r0
 800ab2e:	d13a      	bne.n	800aba6 <_malloc_r+0xd2>
 800ab30:	6821      	ldr	r1, [r4, #0]
 800ab32:	3503      	adds	r5, #3
 800ab34:	1a6d      	subs	r5, r5, r1
 800ab36:	f025 0503 	bic.w	r5, r5, #3
 800ab3a:	3508      	adds	r5, #8
 800ab3c:	2d0c      	cmp	r5, #12
 800ab3e:	bf38      	it	cc
 800ab40:	250c      	movcc	r5, #12
 800ab42:	4629      	mov	r1, r5
 800ab44:	4638      	mov	r0, r7
 800ab46:	f7ff ffa5 	bl	800aa94 <sbrk_aligned>
 800ab4a:	3001      	adds	r0, #1
 800ab4c:	d02b      	beq.n	800aba6 <_malloc_r+0xd2>
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	442b      	add	r3, r5
 800ab52:	6023      	str	r3, [r4, #0]
 800ab54:	e00e      	b.n	800ab74 <_malloc_r+0xa0>
 800ab56:	6822      	ldr	r2, [r4, #0]
 800ab58:	1b52      	subs	r2, r2, r5
 800ab5a:	d41e      	bmi.n	800ab9a <_malloc_r+0xc6>
 800ab5c:	2a0b      	cmp	r2, #11
 800ab5e:	d916      	bls.n	800ab8e <_malloc_r+0xba>
 800ab60:	1961      	adds	r1, r4, r5
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	6025      	str	r5, [r4, #0]
 800ab66:	bf18      	it	ne
 800ab68:	6059      	strne	r1, [r3, #4]
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	bf08      	it	eq
 800ab6e:	6031      	streq	r1, [r6, #0]
 800ab70:	5162      	str	r2, [r4, r5]
 800ab72:	604b      	str	r3, [r1, #4]
 800ab74:	4638      	mov	r0, r7
 800ab76:	f104 060b 	add.w	r6, r4, #11
 800ab7a:	f000 ff2f 	bl	800b9dc <__malloc_unlock>
 800ab7e:	f026 0607 	bic.w	r6, r6, #7
 800ab82:	1d23      	adds	r3, r4, #4
 800ab84:	1af2      	subs	r2, r6, r3
 800ab86:	d0b6      	beq.n	800aaf6 <_malloc_r+0x22>
 800ab88:	1b9b      	subs	r3, r3, r6
 800ab8a:	50a3      	str	r3, [r4, r2]
 800ab8c:	e7b3      	b.n	800aaf6 <_malloc_r+0x22>
 800ab8e:	6862      	ldr	r2, [r4, #4]
 800ab90:	42a3      	cmp	r3, r4
 800ab92:	bf0c      	ite	eq
 800ab94:	6032      	streq	r2, [r6, #0]
 800ab96:	605a      	strne	r2, [r3, #4]
 800ab98:	e7ec      	b.n	800ab74 <_malloc_r+0xa0>
 800ab9a:	4623      	mov	r3, r4
 800ab9c:	6864      	ldr	r4, [r4, #4]
 800ab9e:	e7b2      	b.n	800ab06 <_malloc_r+0x32>
 800aba0:	4634      	mov	r4, r6
 800aba2:	6876      	ldr	r6, [r6, #4]
 800aba4:	e7b9      	b.n	800ab1a <_malloc_r+0x46>
 800aba6:	230c      	movs	r3, #12
 800aba8:	603b      	str	r3, [r7, #0]
 800abaa:	4638      	mov	r0, r7
 800abac:	f000 ff16 	bl	800b9dc <__malloc_unlock>
 800abb0:	e7a1      	b.n	800aaf6 <_malloc_r+0x22>
 800abb2:	6025      	str	r5, [r4, #0]
 800abb4:	e7de      	b.n	800ab74 <_malloc_r+0xa0>
 800abb6:	bf00      	nop
 800abb8:	20003370 	.word	0x20003370

0800abbc <__sfputc_r>:
 800abbc:	6893      	ldr	r3, [r2, #8]
 800abbe:	3b01      	subs	r3, #1
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	b410      	push	{r4}
 800abc4:	6093      	str	r3, [r2, #8]
 800abc6:	da08      	bge.n	800abda <__sfputc_r+0x1e>
 800abc8:	6994      	ldr	r4, [r2, #24]
 800abca:	42a3      	cmp	r3, r4
 800abcc:	db01      	blt.n	800abd2 <__sfputc_r+0x16>
 800abce:	290a      	cmp	r1, #10
 800abd0:	d103      	bne.n	800abda <__sfputc_r+0x1e>
 800abd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abd6:	f000 bccf 	b.w	800b578 <__swbuf_r>
 800abda:	6813      	ldr	r3, [r2, #0]
 800abdc:	1c58      	adds	r0, r3, #1
 800abde:	6010      	str	r0, [r2, #0]
 800abe0:	7019      	strb	r1, [r3, #0]
 800abe2:	4608      	mov	r0, r1
 800abe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <__sfputs_r>:
 800abea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	4614      	mov	r4, r2
 800abf2:	18d5      	adds	r5, r2, r3
 800abf4:	42ac      	cmp	r4, r5
 800abf6:	d101      	bne.n	800abfc <__sfputs_r+0x12>
 800abf8:	2000      	movs	r0, #0
 800abfa:	e007      	b.n	800ac0c <__sfputs_r+0x22>
 800abfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac00:	463a      	mov	r2, r7
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7ff ffda 	bl	800abbc <__sfputc_r>
 800ac08:	1c43      	adds	r3, r0, #1
 800ac0a:	d1f3      	bne.n	800abf4 <__sfputs_r+0xa>
 800ac0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac10 <_vfiprintf_r>:
 800ac10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac14:	460d      	mov	r5, r1
 800ac16:	b09d      	sub	sp, #116	; 0x74
 800ac18:	4614      	mov	r4, r2
 800ac1a:	4698      	mov	r8, r3
 800ac1c:	4606      	mov	r6, r0
 800ac1e:	b118      	cbz	r0, 800ac28 <_vfiprintf_r+0x18>
 800ac20:	6983      	ldr	r3, [r0, #24]
 800ac22:	b90b      	cbnz	r3, 800ac28 <_vfiprintf_r+0x18>
 800ac24:	f7ff fe2e 	bl	800a884 <__sinit>
 800ac28:	4b89      	ldr	r3, [pc, #548]	; (800ae50 <_vfiprintf_r+0x240>)
 800ac2a:	429d      	cmp	r5, r3
 800ac2c:	d11b      	bne.n	800ac66 <_vfiprintf_r+0x56>
 800ac2e:	6875      	ldr	r5, [r6, #4]
 800ac30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac32:	07d9      	lsls	r1, r3, #31
 800ac34:	d405      	bmi.n	800ac42 <_vfiprintf_r+0x32>
 800ac36:	89ab      	ldrh	r3, [r5, #12]
 800ac38:	059a      	lsls	r2, r3, #22
 800ac3a:	d402      	bmi.n	800ac42 <_vfiprintf_r+0x32>
 800ac3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac3e:	f7ff fef6 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800ac42:	89ab      	ldrh	r3, [r5, #12]
 800ac44:	071b      	lsls	r3, r3, #28
 800ac46:	d501      	bpl.n	800ac4c <_vfiprintf_r+0x3c>
 800ac48:	692b      	ldr	r3, [r5, #16]
 800ac4a:	b9eb      	cbnz	r3, 800ac88 <_vfiprintf_r+0x78>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f000 fcf6 	bl	800b640 <__swsetup_r>
 800ac54:	b1c0      	cbz	r0, 800ac88 <_vfiprintf_r+0x78>
 800ac56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac58:	07dc      	lsls	r4, r3, #31
 800ac5a:	d50e      	bpl.n	800ac7a <_vfiprintf_r+0x6a>
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	b01d      	add	sp, #116	; 0x74
 800ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac66:	4b7b      	ldr	r3, [pc, #492]	; (800ae54 <_vfiprintf_r+0x244>)
 800ac68:	429d      	cmp	r5, r3
 800ac6a:	d101      	bne.n	800ac70 <_vfiprintf_r+0x60>
 800ac6c:	68b5      	ldr	r5, [r6, #8]
 800ac6e:	e7df      	b.n	800ac30 <_vfiprintf_r+0x20>
 800ac70:	4b79      	ldr	r3, [pc, #484]	; (800ae58 <_vfiprintf_r+0x248>)
 800ac72:	429d      	cmp	r5, r3
 800ac74:	bf08      	it	eq
 800ac76:	68f5      	ldreq	r5, [r6, #12]
 800ac78:	e7da      	b.n	800ac30 <_vfiprintf_r+0x20>
 800ac7a:	89ab      	ldrh	r3, [r5, #12]
 800ac7c:	0598      	lsls	r0, r3, #22
 800ac7e:	d4ed      	bmi.n	800ac5c <_vfiprintf_r+0x4c>
 800ac80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac82:	f7ff fed5 	bl	800aa30 <__retarget_lock_release_recursive>
 800ac86:	e7e9      	b.n	800ac5c <_vfiprintf_r+0x4c>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8c:	2320      	movs	r3, #32
 800ac8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac96:	2330      	movs	r3, #48	; 0x30
 800ac98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ae5c <_vfiprintf_r+0x24c>
 800ac9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aca0:	f04f 0901 	mov.w	r9, #1
 800aca4:	4623      	mov	r3, r4
 800aca6:	469a      	mov	sl, r3
 800aca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acac:	b10a      	cbz	r2, 800acb2 <_vfiprintf_r+0xa2>
 800acae:	2a25      	cmp	r2, #37	; 0x25
 800acb0:	d1f9      	bne.n	800aca6 <_vfiprintf_r+0x96>
 800acb2:	ebba 0b04 	subs.w	fp, sl, r4
 800acb6:	d00b      	beq.n	800acd0 <_vfiprintf_r+0xc0>
 800acb8:	465b      	mov	r3, fp
 800acba:	4622      	mov	r2, r4
 800acbc:	4629      	mov	r1, r5
 800acbe:	4630      	mov	r0, r6
 800acc0:	f7ff ff93 	bl	800abea <__sfputs_r>
 800acc4:	3001      	adds	r0, #1
 800acc6:	f000 80aa 	beq.w	800ae1e <_vfiprintf_r+0x20e>
 800acca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800accc:	445a      	add	r2, fp
 800acce:	9209      	str	r2, [sp, #36]	; 0x24
 800acd0:	f89a 3000 	ldrb.w	r3, [sl]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 80a2 	beq.w	800ae1e <_vfiprintf_r+0x20e>
 800acda:	2300      	movs	r3, #0
 800acdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ace0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace4:	f10a 0a01 	add.w	sl, sl, #1
 800ace8:	9304      	str	r3, [sp, #16]
 800acea:	9307      	str	r3, [sp, #28]
 800acec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acf0:	931a      	str	r3, [sp, #104]	; 0x68
 800acf2:	4654      	mov	r4, sl
 800acf4:	2205      	movs	r2, #5
 800acf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acfa:	4858      	ldr	r0, [pc, #352]	; (800ae5c <_vfiprintf_r+0x24c>)
 800acfc:	f7f5 fa70 	bl	80001e0 <memchr>
 800ad00:	9a04      	ldr	r2, [sp, #16]
 800ad02:	b9d8      	cbnz	r0, 800ad3c <_vfiprintf_r+0x12c>
 800ad04:	06d1      	lsls	r1, r2, #27
 800ad06:	bf44      	itt	mi
 800ad08:	2320      	movmi	r3, #32
 800ad0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad0e:	0713      	lsls	r3, r2, #28
 800ad10:	bf44      	itt	mi
 800ad12:	232b      	movmi	r3, #43	; 0x2b
 800ad14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad18:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1e:	d015      	beq.n	800ad4c <_vfiprintf_r+0x13c>
 800ad20:	9a07      	ldr	r2, [sp, #28]
 800ad22:	4654      	mov	r4, sl
 800ad24:	2000      	movs	r0, #0
 800ad26:	f04f 0c0a 	mov.w	ip, #10
 800ad2a:	4621      	mov	r1, r4
 800ad2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad30:	3b30      	subs	r3, #48	; 0x30
 800ad32:	2b09      	cmp	r3, #9
 800ad34:	d94e      	bls.n	800add4 <_vfiprintf_r+0x1c4>
 800ad36:	b1b0      	cbz	r0, 800ad66 <_vfiprintf_r+0x156>
 800ad38:	9207      	str	r2, [sp, #28]
 800ad3a:	e014      	b.n	800ad66 <_vfiprintf_r+0x156>
 800ad3c:	eba0 0308 	sub.w	r3, r0, r8
 800ad40:	fa09 f303 	lsl.w	r3, r9, r3
 800ad44:	4313      	orrs	r3, r2
 800ad46:	9304      	str	r3, [sp, #16]
 800ad48:	46a2      	mov	sl, r4
 800ad4a:	e7d2      	b.n	800acf2 <_vfiprintf_r+0xe2>
 800ad4c:	9b03      	ldr	r3, [sp, #12]
 800ad4e:	1d19      	adds	r1, r3, #4
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	9103      	str	r1, [sp, #12]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bfbb      	ittet	lt
 800ad58:	425b      	neglt	r3, r3
 800ad5a:	f042 0202 	orrlt.w	r2, r2, #2
 800ad5e:	9307      	strge	r3, [sp, #28]
 800ad60:	9307      	strlt	r3, [sp, #28]
 800ad62:	bfb8      	it	lt
 800ad64:	9204      	strlt	r2, [sp, #16]
 800ad66:	7823      	ldrb	r3, [r4, #0]
 800ad68:	2b2e      	cmp	r3, #46	; 0x2e
 800ad6a:	d10c      	bne.n	800ad86 <_vfiprintf_r+0x176>
 800ad6c:	7863      	ldrb	r3, [r4, #1]
 800ad6e:	2b2a      	cmp	r3, #42	; 0x2a
 800ad70:	d135      	bne.n	800adde <_vfiprintf_r+0x1ce>
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	1d1a      	adds	r2, r3, #4
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	9203      	str	r2, [sp, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	bfb8      	it	lt
 800ad7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad82:	3402      	adds	r4, #2
 800ad84:	9305      	str	r3, [sp, #20]
 800ad86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ae6c <_vfiprintf_r+0x25c>
 800ad8a:	7821      	ldrb	r1, [r4, #0]
 800ad8c:	2203      	movs	r2, #3
 800ad8e:	4650      	mov	r0, sl
 800ad90:	f7f5 fa26 	bl	80001e0 <memchr>
 800ad94:	b140      	cbz	r0, 800ada8 <_vfiprintf_r+0x198>
 800ad96:	2340      	movs	r3, #64	; 0x40
 800ad98:	eba0 000a 	sub.w	r0, r0, sl
 800ad9c:	fa03 f000 	lsl.w	r0, r3, r0
 800ada0:	9b04      	ldr	r3, [sp, #16]
 800ada2:	4303      	orrs	r3, r0
 800ada4:	3401      	adds	r4, #1
 800ada6:	9304      	str	r3, [sp, #16]
 800ada8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adac:	482c      	ldr	r0, [pc, #176]	; (800ae60 <_vfiprintf_r+0x250>)
 800adae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adb2:	2206      	movs	r2, #6
 800adb4:	f7f5 fa14 	bl	80001e0 <memchr>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d03f      	beq.n	800ae3c <_vfiprintf_r+0x22c>
 800adbc:	4b29      	ldr	r3, [pc, #164]	; (800ae64 <_vfiprintf_r+0x254>)
 800adbe:	bb1b      	cbnz	r3, 800ae08 <_vfiprintf_r+0x1f8>
 800adc0:	9b03      	ldr	r3, [sp, #12]
 800adc2:	3307      	adds	r3, #7
 800adc4:	f023 0307 	bic.w	r3, r3, #7
 800adc8:	3308      	adds	r3, #8
 800adca:	9303      	str	r3, [sp, #12]
 800adcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adce:	443b      	add	r3, r7
 800add0:	9309      	str	r3, [sp, #36]	; 0x24
 800add2:	e767      	b.n	800aca4 <_vfiprintf_r+0x94>
 800add4:	fb0c 3202 	mla	r2, ip, r2, r3
 800add8:	460c      	mov	r4, r1
 800adda:	2001      	movs	r0, #1
 800addc:	e7a5      	b.n	800ad2a <_vfiprintf_r+0x11a>
 800adde:	2300      	movs	r3, #0
 800ade0:	3401      	adds	r4, #1
 800ade2:	9305      	str	r3, [sp, #20]
 800ade4:	4619      	mov	r1, r3
 800ade6:	f04f 0c0a 	mov.w	ip, #10
 800adea:	4620      	mov	r0, r4
 800adec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adf0:	3a30      	subs	r2, #48	; 0x30
 800adf2:	2a09      	cmp	r2, #9
 800adf4:	d903      	bls.n	800adfe <_vfiprintf_r+0x1ee>
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d0c5      	beq.n	800ad86 <_vfiprintf_r+0x176>
 800adfa:	9105      	str	r1, [sp, #20]
 800adfc:	e7c3      	b.n	800ad86 <_vfiprintf_r+0x176>
 800adfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae02:	4604      	mov	r4, r0
 800ae04:	2301      	movs	r3, #1
 800ae06:	e7f0      	b.n	800adea <_vfiprintf_r+0x1da>
 800ae08:	ab03      	add	r3, sp, #12
 800ae0a:	9300      	str	r3, [sp, #0]
 800ae0c:	462a      	mov	r2, r5
 800ae0e:	4b16      	ldr	r3, [pc, #88]	; (800ae68 <_vfiprintf_r+0x258>)
 800ae10:	a904      	add	r1, sp, #16
 800ae12:	4630      	mov	r0, r6
 800ae14:	f3af 8000 	nop.w
 800ae18:	4607      	mov	r7, r0
 800ae1a:	1c78      	adds	r0, r7, #1
 800ae1c:	d1d6      	bne.n	800adcc <_vfiprintf_r+0x1bc>
 800ae1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae20:	07d9      	lsls	r1, r3, #31
 800ae22:	d405      	bmi.n	800ae30 <_vfiprintf_r+0x220>
 800ae24:	89ab      	ldrh	r3, [r5, #12]
 800ae26:	059a      	lsls	r2, r3, #22
 800ae28:	d402      	bmi.n	800ae30 <_vfiprintf_r+0x220>
 800ae2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae2c:	f7ff fe00 	bl	800aa30 <__retarget_lock_release_recursive>
 800ae30:	89ab      	ldrh	r3, [r5, #12]
 800ae32:	065b      	lsls	r3, r3, #25
 800ae34:	f53f af12 	bmi.w	800ac5c <_vfiprintf_r+0x4c>
 800ae38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae3a:	e711      	b.n	800ac60 <_vfiprintf_r+0x50>
 800ae3c:	ab03      	add	r3, sp, #12
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	462a      	mov	r2, r5
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <_vfiprintf_r+0x258>)
 800ae44:	a904      	add	r1, sp, #16
 800ae46:	4630      	mov	r0, r6
 800ae48:	f000 f880 	bl	800af4c <_printf_i>
 800ae4c:	e7e4      	b.n	800ae18 <_vfiprintf_r+0x208>
 800ae4e:	bf00      	nop
 800ae50:	0800c638 	.word	0x0800c638
 800ae54:	0800c658 	.word	0x0800c658
 800ae58:	0800c618 	.word	0x0800c618
 800ae5c:	0800c67c 	.word	0x0800c67c
 800ae60:	0800c686 	.word	0x0800c686
 800ae64:	00000000 	.word	0x00000000
 800ae68:	0800abeb 	.word	0x0800abeb
 800ae6c:	0800c682 	.word	0x0800c682

0800ae70 <_printf_common>:
 800ae70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae74:	4616      	mov	r6, r2
 800ae76:	4699      	mov	r9, r3
 800ae78:	688a      	ldr	r2, [r1, #8]
 800ae7a:	690b      	ldr	r3, [r1, #16]
 800ae7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae80:	4293      	cmp	r3, r2
 800ae82:	bfb8      	it	lt
 800ae84:	4613      	movlt	r3, r2
 800ae86:	6033      	str	r3, [r6, #0]
 800ae88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	460c      	mov	r4, r1
 800ae90:	b10a      	cbz	r2, 800ae96 <_printf_common+0x26>
 800ae92:	3301      	adds	r3, #1
 800ae94:	6033      	str	r3, [r6, #0]
 800ae96:	6823      	ldr	r3, [r4, #0]
 800ae98:	0699      	lsls	r1, r3, #26
 800ae9a:	bf42      	ittt	mi
 800ae9c:	6833      	ldrmi	r3, [r6, #0]
 800ae9e:	3302      	addmi	r3, #2
 800aea0:	6033      	strmi	r3, [r6, #0]
 800aea2:	6825      	ldr	r5, [r4, #0]
 800aea4:	f015 0506 	ands.w	r5, r5, #6
 800aea8:	d106      	bne.n	800aeb8 <_printf_common+0x48>
 800aeaa:	f104 0a19 	add.w	sl, r4, #25
 800aeae:	68e3      	ldr	r3, [r4, #12]
 800aeb0:	6832      	ldr	r2, [r6, #0]
 800aeb2:	1a9b      	subs	r3, r3, r2
 800aeb4:	42ab      	cmp	r3, r5
 800aeb6:	dc26      	bgt.n	800af06 <_printf_common+0x96>
 800aeb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aebc:	1e13      	subs	r3, r2, #0
 800aebe:	6822      	ldr	r2, [r4, #0]
 800aec0:	bf18      	it	ne
 800aec2:	2301      	movne	r3, #1
 800aec4:	0692      	lsls	r2, r2, #26
 800aec6:	d42b      	bmi.n	800af20 <_printf_common+0xb0>
 800aec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aecc:	4649      	mov	r1, r9
 800aece:	4638      	mov	r0, r7
 800aed0:	47c0      	blx	r8
 800aed2:	3001      	adds	r0, #1
 800aed4:	d01e      	beq.n	800af14 <_printf_common+0xa4>
 800aed6:	6823      	ldr	r3, [r4, #0]
 800aed8:	68e5      	ldr	r5, [r4, #12]
 800aeda:	6832      	ldr	r2, [r6, #0]
 800aedc:	f003 0306 	and.w	r3, r3, #6
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	bf08      	it	eq
 800aee4:	1aad      	subeq	r5, r5, r2
 800aee6:	68a3      	ldr	r3, [r4, #8]
 800aee8:	6922      	ldr	r2, [r4, #16]
 800aeea:	bf0c      	ite	eq
 800aeec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef0:	2500      	movne	r5, #0
 800aef2:	4293      	cmp	r3, r2
 800aef4:	bfc4      	itt	gt
 800aef6:	1a9b      	subgt	r3, r3, r2
 800aef8:	18ed      	addgt	r5, r5, r3
 800aefa:	2600      	movs	r6, #0
 800aefc:	341a      	adds	r4, #26
 800aefe:	42b5      	cmp	r5, r6
 800af00:	d11a      	bne.n	800af38 <_printf_common+0xc8>
 800af02:	2000      	movs	r0, #0
 800af04:	e008      	b.n	800af18 <_printf_common+0xa8>
 800af06:	2301      	movs	r3, #1
 800af08:	4652      	mov	r2, sl
 800af0a:	4649      	mov	r1, r9
 800af0c:	4638      	mov	r0, r7
 800af0e:	47c0      	blx	r8
 800af10:	3001      	adds	r0, #1
 800af12:	d103      	bne.n	800af1c <_printf_common+0xac>
 800af14:	f04f 30ff 	mov.w	r0, #4294967295
 800af18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1c:	3501      	adds	r5, #1
 800af1e:	e7c6      	b.n	800aeae <_printf_common+0x3e>
 800af20:	18e1      	adds	r1, r4, r3
 800af22:	1c5a      	adds	r2, r3, #1
 800af24:	2030      	movs	r0, #48	; 0x30
 800af26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af2a:	4422      	add	r2, r4
 800af2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af34:	3302      	adds	r3, #2
 800af36:	e7c7      	b.n	800aec8 <_printf_common+0x58>
 800af38:	2301      	movs	r3, #1
 800af3a:	4622      	mov	r2, r4
 800af3c:	4649      	mov	r1, r9
 800af3e:	4638      	mov	r0, r7
 800af40:	47c0      	blx	r8
 800af42:	3001      	adds	r0, #1
 800af44:	d0e6      	beq.n	800af14 <_printf_common+0xa4>
 800af46:	3601      	adds	r6, #1
 800af48:	e7d9      	b.n	800aefe <_printf_common+0x8e>
	...

0800af4c <_printf_i>:
 800af4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af50:	7e0f      	ldrb	r7, [r1, #24]
 800af52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af54:	2f78      	cmp	r7, #120	; 0x78
 800af56:	4691      	mov	r9, r2
 800af58:	4680      	mov	r8, r0
 800af5a:	460c      	mov	r4, r1
 800af5c:	469a      	mov	sl, r3
 800af5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af62:	d807      	bhi.n	800af74 <_printf_i+0x28>
 800af64:	2f62      	cmp	r7, #98	; 0x62
 800af66:	d80a      	bhi.n	800af7e <_printf_i+0x32>
 800af68:	2f00      	cmp	r7, #0
 800af6a:	f000 80d8 	beq.w	800b11e <_printf_i+0x1d2>
 800af6e:	2f58      	cmp	r7, #88	; 0x58
 800af70:	f000 80a3 	beq.w	800b0ba <_printf_i+0x16e>
 800af74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af7c:	e03a      	b.n	800aff4 <_printf_i+0xa8>
 800af7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af82:	2b15      	cmp	r3, #21
 800af84:	d8f6      	bhi.n	800af74 <_printf_i+0x28>
 800af86:	a101      	add	r1, pc, #4	; (adr r1, 800af8c <_printf_i+0x40>)
 800af88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af8c:	0800afe5 	.word	0x0800afe5
 800af90:	0800aff9 	.word	0x0800aff9
 800af94:	0800af75 	.word	0x0800af75
 800af98:	0800af75 	.word	0x0800af75
 800af9c:	0800af75 	.word	0x0800af75
 800afa0:	0800af75 	.word	0x0800af75
 800afa4:	0800aff9 	.word	0x0800aff9
 800afa8:	0800af75 	.word	0x0800af75
 800afac:	0800af75 	.word	0x0800af75
 800afb0:	0800af75 	.word	0x0800af75
 800afb4:	0800af75 	.word	0x0800af75
 800afb8:	0800b105 	.word	0x0800b105
 800afbc:	0800b029 	.word	0x0800b029
 800afc0:	0800b0e7 	.word	0x0800b0e7
 800afc4:	0800af75 	.word	0x0800af75
 800afc8:	0800af75 	.word	0x0800af75
 800afcc:	0800b127 	.word	0x0800b127
 800afd0:	0800af75 	.word	0x0800af75
 800afd4:	0800b029 	.word	0x0800b029
 800afd8:	0800af75 	.word	0x0800af75
 800afdc:	0800af75 	.word	0x0800af75
 800afe0:	0800b0ef 	.word	0x0800b0ef
 800afe4:	682b      	ldr	r3, [r5, #0]
 800afe6:	1d1a      	adds	r2, r3, #4
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	602a      	str	r2, [r5, #0]
 800afec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aff4:	2301      	movs	r3, #1
 800aff6:	e0a3      	b.n	800b140 <_printf_i+0x1f4>
 800aff8:	6820      	ldr	r0, [r4, #0]
 800affa:	6829      	ldr	r1, [r5, #0]
 800affc:	0606      	lsls	r6, r0, #24
 800affe:	f101 0304 	add.w	r3, r1, #4
 800b002:	d50a      	bpl.n	800b01a <_printf_i+0xce>
 800b004:	680e      	ldr	r6, [r1, #0]
 800b006:	602b      	str	r3, [r5, #0]
 800b008:	2e00      	cmp	r6, #0
 800b00a:	da03      	bge.n	800b014 <_printf_i+0xc8>
 800b00c:	232d      	movs	r3, #45	; 0x2d
 800b00e:	4276      	negs	r6, r6
 800b010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b014:	485e      	ldr	r0, [pc, #376]	; (800b190 <_printf_i+0x244>)
 800b016:	230a      	movs	r3, #10
 800b018:	e019      	b.n	800b04e <_printf_i+0x102>
 800b01a:	680e      	ldr	r6, [r1, #0]
 800b01c:	602b      	str	r3, [r5, #0]
 800b01e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b022:	bf18      	it	ne
 800b024:	b236      	sxthne	r6, r6
 800b026:	e7ef      	b.n	800b008 <_printf_i+0xbc>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	6820      	ldr	r0, [r4, #0]
 800b02c:	1d19      	adds	r1, r3, #4
 800b02e:	6029      	str	r1, [r5, #0]
 800b030:	0601      	lsls	r1, r0, #24
 800b032:	d501      	bpl.n	800b038 <_printf_i+0xec>
 800b034:	681e      	ldr	r6, [r3, #0]
 800b036:	e002      	b.n	800b03e <_printf_i+0xf2>
 800b038:	0646      	lsls	r6, r0, #25
 800b03a:	d5fb      	bpl.n	800b034 <_printf_i+0xe8>
 800b03c:	881e      	ldrh	r6, [r3, #0]
 800b03e:	4854      	ldr	r0, [pc, #336]	; (800b190 <_printf_i+0x244>)
 800b040:	2f6f      	cmp	r7, #111	; 0x6f
 800b042:	bf0c      	ite	eq
 800b044:	2308      	moveq	r3, #8
 800b046:	230a      	movne	r3, #10
 800b048:	2100      	movs	r1, #0
 800b04a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b04e:	6865      	ldr	r5, [r4, #4]
 800b050:	60a5      	str	r5, [r4, #8]
 800b052:	2d00      	cmp	r5, #0
 800b054:	bfa2      	ittt	ge
 800b056:	6821      	ldrge	r1, [r4, #0]
 800b058:	f021 0104 	bicge.w	r1, r1, #4
 800b05c:	6021      	strge	r1, [r4, #0]
 800b05e:	b90e      	cbnz	r6, 800b064 <_printf_i+0x118>
 800b060:	2d00      	cmp	r5, #0
 800b062:	d04d      	beq.n	800b100 <_printf_i+0x1b4>
 800b064:	4615      	mov	r5, r2
 800b066:	fbb6 f1f3 	udiv	r1, r6, r3
 800b06a:	fb03 6711 	mls	r7, r3, r1, r6
 800b06e:	5dc7      	ldrb	r7, [r0, r7]
 800b070:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b074:	4637      	mov	r7, r6
 800b076:	42bb      	cmp	r3, r7
 800b078:	460e      	mov	r6, r1
 800b07a:	d9f4      	bls.n	800b066 <_printf_i+0x11a>
 800b07c:	2b08      	cmp	r3, #8
 800b07e:	d10b      	bne.n	800b098 <_printf_i+0x14c>
 800b080:	6823      	ldr	r3, [r4, #0]
 800b082:	07de      	lsls	r6, r3, #31
 800b084:	d508      	bpl.n	800b098 <_printf_i+0x14c>
 800b086:	6923      	ldr	r3, [r4, #16]
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	4299      	cmp	r1, r3
 800b08c:	bfde      	ittt	le
 800b08e:	2330      	movle	r3, #48	; 0x30
 800b090:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b094:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b098:	1b52      	subs	r2, r2, r5
 800b09a:	6122      	str	r2, [r4, #16]
 800b09c:	f8cd a000 	str.w	sl, [sp]
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	aa03      	add	r2, sp, #12
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	4640      	mov	r0, r8
 800b0a8:	f7ff fee2 	bl	800ae70 <_printf_common>
 800b0ac:	3001      	adds	r0, #1
 800b0ae:	d14c      	bne.n	800b14a <_printf_i+0x1fe>
 800b0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b4:	b004      	add	sp, #16
 800b0b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ba:	4835      	ldr	r0, [pc, #212]	; (800b190 <_printf_i+0x244>)
 800b0bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0c0:	6829      	ldr	r1, [r5, #0]
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0c8:	6029      	str	r1, [r5, #0]
 800b0ca:	061d      	lsls	r5, r3, #24
 800b0cc:	d514      	bpl.n	800b0f8 <_printf_i+0x1ac>
 800b0ce:	07df      	lsls	r7, r3, #31
 800b0d0:	bf44      	itt	mi
 800b0d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b0d6:	6023      	strmi	r3, [r4, #0]
 800b0d8:	b91e      	cbnz	r6, 800b0e2 <_printf_i+0x196>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	f023 0320 	bic.w	r3, r3, #32
 800b0e0:	6023      	str	r3, [r4, #0]
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	e7b0      	b.n	800b048 <_printf_i+0xfc>
 800b0e6:	6823      	ldr	r3, [r4, #0]
 800b0e8:	f043 0320 	orr.w	r3, r3, #32
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	2378      	movs	r3, #120	; 0x78
 800b0f0:	4828      	ldr	r0, [pc, #160]	; (800b194 <_printf_i+0x248>)
 800b0f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0f6:	e7e3      	b.n	800b0c0 <_printf_i+0x174>
 800b0f8:	0659      	lsls	r1, r3, #25
 800b0fa:	bf48      	it	mi
 800b0fc:	b2b6      	uxthmi	r6, r6
 800b0fe:	e7e6      	b.n	800b0ce <_printf_i+0x182>
 800b100:	4615      	mov	r5, r2
 800b102:	e7bb      	b.n	800b07c <_printf_i+0x130>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	6826      	ldr	r6, [r4, #0]
 800b108:	6961      	ldr	r1, [r4, #20]
 800b10a:	1d18      	adds	r0, r3, #4
 800b10c:	6028      	str	r0, [r5, #0]
 800b10e:	0635      	lsls	r5, r6, #24
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	d501      	bpl.n	800b118 <_printf_i+0x1cc>
 800b114:	6019      	str	r1, [r3, #0]
 800b116:	e002      	b.n	800b11e <_printf_i+0x1d2>
 800b118:	0670      	lsls	r0, r6, #25
 800b11a:	d5fb      	bpl.n	800b114 <_printf_i+0x1c8>
 800b11c:	8019      	strh	r1, [r3, #0]
 800b11e:	2300      	movs	r3, #0
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	4615      	mov	r5, r2
 800b124:	e7ba      	b.n	800b09c <_printf_i+0x150>
 800b126:	682b      	ldr	r3, [r5, #0]
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	602a      	str	r2, [r5, #0]
 800b12c:	681d      	ldr	r5, [r3, #0]
 800b12e:	6862      	ldr	r2, [r4, #4]
 800b130:	2100      	movs	r1, #0
 800b132:	4628      	mov	r0, r5
 800b134:	f7f5 f854 	bl	80001e0 <memchr>
 800b138:	b108      	cbz	r0, 800b13e <_printf_i+0x1f2>
 800b13a:	1b40      	subs	r0, r0, r5
 800b13c:	6060      	str	r0, [r4, #4]
 800b13e:	6863      	ldr	r3, [r4, #4]
 800b140:	6123      	str	r3, [r4, #16]
 800b142:	2300      	movs	r3, #0
 800b144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b148:	e7a8      	b.n	800b09c <_printf_i+0x150>
 800b14a:	6923      	ldr	r3, [r4, #16]
 800b14c:	462a      	mov	r2, r5
 800b14e:	4649      	mov	r1, r9
 800b150:	4640      	mov	r0, r8
 800b152:	47d0      	blx	sl
 800b154:	3001      	adds	r0, #1
 800b156:	d0ab      	beq.n	800b0b0 <_printf_i+0x164>
 800b158:	6823      	ldr	r3, [r4, #0]
 800b15a:	079b      	lsls	r3, r3, #30
 800b15c:	d413      	bmi.n	800b186 <_printf_i+0x23a>
 800b15e:	68e0      	ldr	r0, [r4, #12]
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	4298      	cmp	r0, r3
 800b164:	bfb8      	it	lt
 800b166:	4618      	movlt	r0, r3
 800b168:	e7a4      	b.n	800b0b4 <_printf_i+0x168>
 800b16a:	2301      	movs	r3, #1
 800b16c:	4632      	mov	r2, r6
 800b16e:	4649      	mov	r1, r9
 800b170:	4640      	mov	r0, r8
 800b172:	47d0      	blx	sl
 800b174:	3001      	adds	r0, #1
 800b176:	d09b      	beq.n	800b0b0 <_printf_i+0x164>
 800b178:	3501      	adds	r5, #1
 800b17a:	68e3      	ldr	r3, [r4, #12]
 800b17c:	9903      	ldr	r1, [sp, #12]
 800b17e:	1a5b      	subs	r3, r3, r1
 800b180:	42ab      	cmp	r3, r5
 800b182:	dcf2      	bgt.n	800b16a <_printf_i+0x21e>
 800b184:	e7eb      	b.n	800b15e <_printf_i+0x212>
 800b186:	2500      	movs	r5, #0
 800b188:	f104 0619 	add.w	r6, r4, #25
 800b18c:	e7f5      	b.n	800b17a <_printf_i+0x22e>
 800b18e:	bf00      	nop
 800b190:	0800c68d 	.word	0x0800c68d
 800b194:	0800c69e 	.word	0x0800c69e

0800b198 <iprintf>:
 800b198:	b40f      	push	{r0, r1, r2, r3}
 800b19a:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <iprintf+0x2c>)
 800b19c:	b513      	push	{r0, r1, r4, lr}
 800b19e:	681c      	ldr	r4, [r3, #0]
 800b1a0:	b124      	cbz	r4, 800b1ac <iprintf+0x14>
 800b1a2:	69a3      	ldr	r3, [r4, #24]
 800b1a4:	b913      	cbnz	r3, 800b1ac <iprintf+0x14>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f7ff fb6c 	bl	800a884 <__sinit>
 800b1ac:	ab05      	add	r3, sp, #20
 800b1ae:	9a04      	ldr	r2, [sp, #16]
 800b1b0:	68a1      	ldr	r1, [r4, #8]
 800b1b2:	9301      	str	r3, [sp, #4]
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	f7ff fd2b 	bl	800ac10 <_vfiprintf_r>
 800b1ba:	b002      	add	sp, #8
 800b1bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1c0:	b004      	add	sp, #16
 800b1c2:	4770      	bx	lr
 800b1c4:	20000010 	.word	0x20000010

0800b1c8 <_puts_r>:
 800b1c8:	b570      	push	{r4, r5, r6, lr}
 800b1ca:	460e      	mov	r6, r1
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	b118      	cbz	r0, 800b1d8 <_puts_r+0x10>
 800b1d0:	6983      	ldr	r3, [r0, #24]
 800b1d2:	b90b      	cbnz	r3, 800b1d8 <_puts_r+0x10>
 800b1d4:	f7ff fb56 	bl	800a884 <__sinit>
 800b1d8:	69ab      	ldr	r3, [r5, #24]
 800b1da:	68ac      	ldr	r4, [r5, #8]
 800b1dc:	b913      	cbnz	r3, 800b1e4 <_puts_r+0x1c>
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7ff fb50 	bl	800a884 <__sinit>
 800b1e4:	4b2c      	ldr	r3, [pc, #176]	; (800b298 <_puts_r+0xd0>)
 800b1e6:	429c      	cmp	r4, r3
 800b1e8:	d120      	bne.n	800b22c <_puts_r+0x64>
 800b1ea:	686c      	ldr	r4, [r5, #4]
 800b1ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1ee:	07db      	lsls	r3, r3, #31
 800b1f0:	d405      	bmi.n	800b1fe <_puts_r+0x36>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	0598      	lsls	r0, r3, #22
 800b1f6:	d402      	bmi.n	800b1fe <_puts_r+0x36>
 800b1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1fa:	f7ff fc18 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800b1fe:	89a3      	ldrh	r3, [r4, #12]
 800b200:	0719      	lsls	r1, r3, #28
 800b202:	d51d      	bpl.n	800b240 <_puts_r+0x78>
 800b204:	6923      	ldr	r3, [r4, #16]
 800b206:	b1db      	cbz	r3, 800b240 <_puts_r+0x78>
 800b208:	3e01      	subs	r6, #1
 800b20a:	68a3      	ldr	r3, [r4, #8]
 800b20c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b210:	3b01      	subs	r3, #1
 800b212:	60a3      	str	r3, [r4, #8]
 800b214:	bb39      	cbnz	r1, 800b266 <_puts_r+0x9e>
 800b216:	2b00      	cmp	r3, #0
 800b218:	da38      	bge.n	800b28c <_puts_r+0xc4>
 800b21a:	4622      	mov	r2, r4
 800b21c:	210a      	movs	r1, #10
 800b21e:	4628      	mov	r0, r5
 800b220:	f000 f9aa 	bl	800b578 <__swbuf_r>
 800b224:	3001      	adds	r0, #1
 800b226:	d011      	beq.n	800b24c <_puts_r+0x84>
 800b228:	250a      	movs	r5, #10
 800b22a:	e011      	b.n	800b250 <_puts_r+0x88>
 800b22c:	4b1b      	ldr	r3, [pc, #108]	; (800b29c <_puts_r+0xd4>)
 800b22e:	429c      	cmp	r4, r3
 800b230:	d101      	bne.n	800b236 <_puts_r+0x6e>
 800b232:	68ac      	ldr	r4, [r5, #8]
 800b234:	e7da      	b.n	800b1ec <_puts_r+0x24>
 800b236:	4b1a      	ldr	r3, [pc, #104]	; (800b2a0 <_puts_r+0xd8>)
 800b238:	429c      	cmp	r4, r3
 800b23a:	bf08      	it	eq
 800b23c:	68ec      	ldreq	r4, [r5, #12]
 800b23e:	e7d5      	b.n	800b1ec <_puts_r+0x24>
 800b240:	4621      	mov	r1, r4
 800b242:	4628      	mov	r0, r5
 800b244:	f000 f9fc 	bl	800b640 <__swsetup_r>
 800b248:	2800      	cmp	r0, #0
 800b24a:	d0dd      	beq.n	800b208 <_puts_r+0x40>
 800b24c:	f04f 35ff 	mov.w	r5, #4294967295
 800b250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b252:	07da      	lsls	r2, r3, #31
 800b254:	d405      	bmi.n	800b262 <_puts_r+0x9a>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	059b      	lsls	r3, r3, #22
 800b25a:	d402      	bmi.n	800b262 <_puts_r+0x9a>
 800b25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b25e:	f7ff fbe7 	bl	800aa30 <__retarget_lock_release_recursive>
 800b262:	4628      	mov	r0, r5
 800b264:	bd70      	pop	{r4, r5, r6, pc}
 800b266:	2b00      	cmp	r3, #0
 800b268:	da04      	bge.n	800b274 <_puts_r+0xac>
 800b26a:	69a2      	ldr	r2, [r4, #24]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	dc06      	bgt.n	800b27e <_puts_r+0xb6>
 800b270:	290a      	cmp	r1, #10
 800b272:	d004      	beq.n	800b27e <_puts_r+0xb6>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	6022      	str	r2, [r4, #0]
 800b27a:	7019      	strb	r1, [r3, #0]
 800b27c:	e7c5      	b.n	800b20a <_puts_r+0x42>
 800b27e:	4622      	mov	r2, r4
 800b280:	4628      	mov	r0, r5
 800b282:	f000 f979 	bl	800b578 <__swbuf_r>
 800b286:	3001      	adds	r0, #1
 800b288:	d1bf      	bne.n	800b20a <_puts_r+0x42>
 800b28a:	e7df      	b.n	800b24c <_puts_r+0x84>
 800b28c:	6823      	ldr	r3, [r4, #0]
 800b28e:	250a      	movs	r5, #10
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	6022      	str	r2, [r4, #0]
 800b294:	701d      	strb	r5, [r3, #0]
 800b296:	e7db      	b.n	800b250 <_puts_r+0x88>
 800b298:	0800c638 	.word	0x0800c638
 800b29c:	0800c658 	.word	0x0800c658
 800b2a0:	0800c618 	.word	0x0800c618

0800b2a4 <puts>:
 800b2a4:	4b02      	ldr	r3, [pc, #8]	; (800b2b0 <puts+0xc>)
 800b2a6:	4601      	mov	r1, r0
 800b2a8:	6818      	ldr	r0, [r3, #0]
 800b2aa:	f7ff bf8d 	b.w	800b1c8 <_puts_r>
 800b2ae:	bf00      	nop
 800b2b0:	20000010 	.word	0x20000010

0800b2b4 <cleanup_glue>:
 800b2b4:	b538      	push	{r3, r4, r5, lr}
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	6809      	ldr	r1, [r1, #0]
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	b109      	cbz	r1, 800b2c2 <cleanup_glue+0xe>
 800b2be:	f7ff fff9 	bl	800b2b4 <cleanup_glue>
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2ca:	f000 bb8d 	b.w	800b9e8 <_free_r>
	...

0800b2d0 <_reclaim_reent>:
 800b2d0:	4b2c      	ldr	r3, [pc, #176]	; (800b384 <_reclaim_reent+0xb4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4283      	cmp	r3, r0
 800b2d6:	b570      	push	{r4, r5, r6, lr}
 800b2d8:	4604      	mov	r4, r0
 800b2da:	d051      	beq.n	800b380 <_reclaim_reent+0xb0>
 800b2dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2de:	b143      	cbz	r3, 800b2f2 <_reclaim_reent+0x22>
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d14a      	bne.n	800b37c <_reclaim_reent+0xac>
 800b2e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e8:	6819      	ldr	r1, [r3, #0]
 800b2ea:	b111      	cbz	r1, 800b2f2 <_reclaim_reent+0x22>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fb7b 	bl	800b9e8 <_free_r>
 800b2f2:	6961      	ldr	r1, [r4, #20]
 800b2f4:	b111      	cbz	r1, 800b2fc <_reclaim_reent+0x2c>
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 fb76 	bl	800b9e8 <_free_r>
 800b2fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2fe:	b111      	cbz	r1, 800b306 <_reclaim_reent+0x36>
 800b300:	4620      	mov	r0, r4
 800b302:	f000 fb71 	bl	800b9e8 <_free_r>
 800b306:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b308:	b111      	cbz	r1, 800b310 <_reclaim_reent+0x40>
 800b30a:	4620      	mov	r0, r4
 800b30c:	f000 fb6c 	bl	800b9e8 <_free_r>
 800b310:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b312:	b111      	cbz	r1, 800b31a <_reclaim_reent+0x4a>
 800b314:	4620      	mov	r0, r4
 800b316:	f000 fb67 	bl	800b9e8 <_free_r>
 800b31a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b31c:	b111      	cbz	r1, 800b324 <_reclaim_reent+0x54>
 800b31e:	4620      	mov	r0, r4
 800b320:	f000 fb62 	bl	800b9e8 <_free_r>
 800b324:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b326:	b111      	cbz	r1, 800b32e <_reclaim_reent+0x5e>
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fb5d 	bl	800b9e8 <_free_r>
 800b32e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b330:	b111      	cbz	r1, 800b338 <_reclaim_reent+0x68>
 800b332:	4620      	mov	r0, r4
 800b334:	f000 fb58 	bl	800b9e8 <_free_r>
 800b338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b33a:	b111      	cbz	r1, 800b342 <_reclaim_reent+0x72>
 800b33c:	4620      	mov	r0, r4
 800b33e:	f000 fb53 	bl	800b9e8 <_free_r>
 800b342:	69a3      	ldr	r3, [r4, #24]
 800b344:	b1e3      	cbz	r3, 800b380 <_reclaim_reent+0xb0>
 800b346:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b348:	4620      	mov	r0, r4
 800b34a:	4798      	blx	r3
 800b34c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b34e:	b1b9      	cbz	r1, 800b380 <_reclaim_reent+0xb0>
 800b350:	4620      	mov	r0, r4
 800b352:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b356:	f7ff bfad 	b.w	800b2b4 <cleanup_glue>
 800b35a:	5949      	ldr	r1, [r1, r5]
 800b35c:	b941      	cbnz	r1, 800b370 <_reclaim_reent+0xa0>
 800b35e:	3504      	adds	r5, #4
 800b360:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b362:	2d80      	cmp	r5, #128	; 0x80
 800b364:	68d9      	ldr	r1, [r3, #12]
 800b366:	d1f8      	bne.n	800b35a <_reclaim_reent+0x8a>
 800b368:	4620      	mov	r0, r4
 800b36a:	f000 fb3d 	bl	800b9e8 <_free_r>
 800b36e:	e7ba      	b.n	800b2e6 <_reclaim_reent+0x16>
 800b370:	680e      	ldr	r6, [r1, #0]
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fb38 	bl	800b9e8 <_free_r>
 800b378:	4631      	mov	r1, r6
 800b37a:	e7ef      	b.n	800b35c <_reclaim_reent+0x8c>
 800b37c:	2500      	movs	r5, #0
 800b37e:	e7ef      	b.n	800b360 <_reclaim_reent+0x90>
 800b380:	bd70      	pop	{r4, r5, r6, pc}
 800b382:	bf00      	nop
 800b384:	20000010 	.word	0x20000010

0800b388 <_sbrk_r>:
 800b388:	b538      	push	{r3, r4, r5, lr}
 800b38a:	4d06      	ldr	r5, [pc, #24]	; (800b3a4 <_sbrk_r+0x1c>)
 800b38c:	2300      	movs	r3, #0
 800b38e:	4604      	mov	r4, r0
 800b390:	4608      	mov	r0, r1
 800b392:	602b      	str	r3, [r5, #0]
 800b394:	f7f6 f9e4 	bl	8001760 <_sbrk>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	d102      	bne.n	800b3a2 <_sbrk_r+0x1a>
 800b39c:	682b      	ldr	r3, [r5, #0]
 800b39e:	b103      	cbz	r3, 800b3a2 <_sbrk_r+0x1a>
 800b3a0:	6023      	str	r3, [r4, #0]
 800b3a2:	bd38      	pop	{r3, r4, r5, pc}
 800b3a4:	20003378 	.word	0x20003378

0800b3a8 <siprintf>:
 800b3a8:	b40e      	push	{r1, r2, r3}
 800b3aa:	b500      	push	{lr}
 800b3ac:	b09c      	sub	sp, #112	; 0x70
 800b3ae:	ab1d      	add	r3, sp, #116	; 0x74
 800b3b0:	9002      	str	r0, [sp, #8]
 800b3b2:	9006      	str	r0, [sp, #24]
 800b3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3b8:	4809      	ldr	r0, [pc, #36]	; (800b3e0 <siprintf+0x38>)
 800b3ba:	9107      	str	r1, [sp, #28]
 800b3bc:	9104      	str	r1, [sp, #16]
 800b3be:	4909      	ldr	r1, [pc, #36]	; (800b3e4 <siprintf+0x3c>)
 800b3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c4:	9105      	str	r1, [sp, #20]
 800b3c6:	6800      	ldr	r0, [r0, #0]
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	a902      	add	r1, sp, #8
 800b3cc:	f000 fbe2 	bl	800bb94 <_svfiprintf_r>
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	701a      	strb	r2, [r3, #0]
 800b3d6:	b01c      	add	sp, #112	; 0x70
 800b3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3dc:	b003      	add	sp, #12
 800b3de:	4770      	bx	lr
 800b3e0:	20000010 	.word	0x20000010
 800b3e4:	ffff0208 	.word	0xffff0208

0800b3e8 <__sread>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	460c      	mov	r4, r1
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	f000 fcd0 	bl	800bd94 <_read_r>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	bfab      	itete	ge
 800b3f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b3fc:	181b      	addge	r3, r3, r0
 800b3fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b402:	bfac      	ite	ge
 800b404:	6563      	strge	r3, [r4, #84]	; 0x54
 800b406:	81a3      	strhlt	r3, [r4, #12]
 800b408:	bd10      	pop	{r4, pc}

0800b40a <__swrite>:
 800b40a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40e:	461f      	mov	r7, r3
 800b410:	898b      	ldrh	r3, [r1, #12]
 800b412:	05db      	lsls	r3, r3, #23
 800b414:	4605      	mov	r5, r0
 800b416:	460c      	mov	r4, r1
 800b418:	4616      	mov	r6, r2
 800b41a:	d505      	bpl.n	800b428 <__swrite+0x1e>
 800b41c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b420:	2302      	movs	r3, #2
 800b422:	2200      	movs	r2, #0
 800b424:	f000 fa54 	bl	800b8d0 <_lseek_r>
 800b428:	89a3      	ldrh	r3, [r4, #12]
 800b42a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b432:	81a3      	strh	r3, [r4, #12]
 800b434:	4632      	mov	r2, r6
 800b436:	463b      	mov	r3, r7
 800b438:	4628      	mov	r0, r5
 800b43a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43e:	f000 b8ed 	b.w	800b61c <_write_r>

0800b442 <__sseek>:
 800b442:	b510      	push	{r4, lr}
 800b444:	460c      	mov	r4, r1
 800b446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b44a:	f000 fa41 	bl	800b8d0 <_lseek_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	bf15      	itete	ne
 800b454:	6560      	strne	r0, [r4, #84]	; 0x54
 800b456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b45a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b45e:	81a3      	strheq	r3, [r4, #12]
 800b460:	bf18      	it	ne
 800b462:	81a3      	strhne	r3, [r4, #12]
 800b464:	bd10      	pop	{r4, pc}

0800b466 <__sclose>:
 800b466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46a:	f000 b95f 	b.w	800b72c <_close_r>

0800b46e <strncpy>:
 800b46e:	b510      	push	{r4, lr}
 800b470:	3901      	subs	r1, #1
 800b472:	4603      	mov	r3, r0
 800b474:	b132      	cbz	r2, 800b484 <strncpy+0x16>
 800b476:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b47a:	f803 4b01 	strb.w	r4, [r3], #1
 800b47e:	3a01      	subs	r2, #1
 800b480:	2c00      	cmp	r4, #0
 800b482:	d1f7      	bne.n	800b474 <strncpy+0x6>
 800b484:	441a      	add	r2, r3
 800b486:	2100      	movs	r1, #0
 800b488:	4293      	cmp	r3, r2
 800b48a:	d100      	bne.n	800b48e <strncpy+0x20>
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	f803 1b01 	strb.w	r1, [r3], #1
 800b492:	e7f9      	b.n	800b488 <strncpy+0x1a>

0800b494 <strstr>:
 800b494:	780a      	ldrb	r2, [r1, #0]
 800b496:	b570      	push	{r4, r5, r6, lr}
 800b498:	b96a      	cbnz	r2, 800b4b6 <strstr+0x22>
 800b49a:	bd70      	pop	{r4, r5, r6, pc}
 800b49c:	429a      	cmp	r2, r3
 800b49e:	d109      	bne.n	800b4b4 <strstr+0x20>
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	4605      	mov	r5, r0
 800b4a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d0f6      	beq.n	800b49a <strstr+0x6>
 800b4ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b4b0:	429e      	cmp	r6, r3
 800b4b2:	d0f7      	beq.n	800b4a4 <strstr+0x10>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	7803      	ldrb	r3, [r0, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1ef      	bne.n	800b49c <strstr+0x8>
 800b4bc:	4618      	mov	r0, r3
 800b4be:	e7ec      	b.n	800b49a <strstr+0x6>

0800b4c0 <strtok>:
 800b4c0:	4b16      	ldr	r3, [pc, #88]	; (800b51c <strtok+0x5c>)
 800b4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b4c4:	681e      	ldr	r6, [r3, #0]
 800b4c6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	b9fc      	cbnz	r4, 800b50c <strtok+0x4c>
 800b4cc:	2050      	movs	r0, #80	; 0x50
 800b4ce:	9101      	str	r1, [sp, #4]
 800b4d0:	f000 fa76 	bl	800b9c0 <malloc>
 800b4d4:	9901      	ldr	r1, [sp, #4]
 800b4d6:	65b0      	str	r0, [r6, #88]	; 0x58
 800b4d8:	4602      	mov	r2, r0
 800b4da:	b920      	cbnz	r0, 800b4e6 <strtok+0x26>
 800b4dc:	4b10      	ldr	r3, [pc, #64]	; (800b520 <strtok+0x60>)
 800b4de:	4811      	ldr	r0, [pc, #68]	; (800b524 <strtok+0x64>)
 800b4e0:	2157      	movs	r1, #87	; 0x57
 800b4e2:	f7ff f953 	bl	800a78c <__assert_func>
 800b4e6:	e9c0 4400 	strd	r4, r4, [r0]
 800b4ea:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b4ee:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b4f2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b4f6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b4fa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b4fe:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b502:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b506:	6184      	str	r4, [r0, #24]
 800b508:	7704      	strb	r4, [r0, #28]
 800b50a:	6244      	str	r4, [r0, #36]	; 0x24
 800b50c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b50e:	2301      	movs	r3, #1
 800b510:	4628      	mov	r0, r5
 800b512:	b002      	add	sp, #8
 800b514:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b518:	f000 b806 	b.w	800b528 <__strtok_r>
 800b51c:	20000010 	.word	0x20000010
 800b520:	0800c6af 	.word	0x0800c6af
 800b524:	0800c6c6 	.word	0x0800c6c6

0800b528 <__strtok_r>:
 800b528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52a:	b908      	cbnz	r0, 800b530 <__strtok_r+0x8>
 800b52c:	6810      	ldr	r0, [r2, #0]
 800b52e:	b188      	cbz	r0, 800b554 <__strtok_r+0x2c>
 800b530:	4604      	mov	r4, r0
 800b532:	4620      	mov	r0, r4
 800b534:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b538:	460f      	mov	r7, r1
 800b53a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b53e:	b91e      	cbnz	r6, 800b548 <__strtok_r+0x20>
 800b540:	b965      	cbnz	r5, 800b55c <__strtok_r+0x34>
 800b542:	6015      	str	r5, [r2, #0]
 800b544:	4628      	mov	r0, r5
 800b546:	e005      	b.n	800b554 <__strtok_r+0x2c>
 800b548:	42b5      	cmp	r5, r6
 800b54a:	d1f6      	bne.n	800b53a <__strtok_r+0x12>
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1f0      	bne.n	800b532 <__strtok_r+0xa>
 800b550:	6014      	str	r4, [r2, #0]
 800b552:	7003      	strb	r3, [r0, #0]
 800b554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b556:	461c      	mov	r4, r3
 800b558:	e00c      	b.n	800b574 <__strtok_r+0x4c>
 800b55a:	b915      	cbnz	r5, 800b562 <__strtok_r+0x3a>
 800b55c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b560:	460e      	mov	r6, r1
 800b562:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b566:	42ab      	cmp	r3, r5
 800b568:	d1f7      	bne.n	800b55a <__strtok_r+0x32>
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0f3      	beq.n	800b556 <__strtok_r+0x2e>
 800b56e:	2300      	movs	r3, #0
 800b570:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b574:	6014      	str	r4, [r2, #0]
 800b576:	e7ed      	b.n	800b554 <__strtok_r+0x2c>

0800b578 <__swbuf_r>:
 800b578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b57a:	460e      	mov	r6, r1
 800b57c:	4614      	mov	r4, r2
 800b57e:	4605      	mov	r5, r0
 800b580:	b118      	cbz	r0, 800b58a <__swbuf_r+0x12>
 800b582:	6983      	ldr	r3, [r0, #24]
 800b584:	b90b      	cbnz	r3, 800b58a <__swbuf_r+0x12>
 800b586:	f7ff f97d 	bl	800a884 <__sinit>
 800b58a:	4b21      	ldr	r3, [pc, #132]	; (800b610 <__swbuf_r+0x98>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d12b      	bne.n	800b5e8 <__swbuf_r+0x70>
 800b590:	686c      	ldr	r4, [r5, #4]
 800b592:	69a3      	ldr	r3, [r4, #24]
 800b594:	60a3      	str	r3, [r4, #8]
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	071a      	lsls	r2, r3, #28
 800b59a:	d52f      	bpl.n	800b5fc <__swbuf_r+0x84>
 800b59c:	6923      	ldr	r3, [r4, #16]
 800b59e:	b36b      	cbz	r3, 800b5fc <__swbuf_r+0x84>
 800b5a0:	6923      	ldr	r3, [r4, #16]
 800b5a2:	6820      	ldr	r0, [r4, #0]
 800b5a4:	1ac0      	subs	r0, r0, r3
 800b5a6:	6963      	ldr	r3, [r4, #20]
 800b5a8:	b2f6      	uxtb	r6, r6
 800b5aa:	4283      	cmp	r3, r0
 800b5ac:	4637      	mov	r7, r6
 800b5ae:	dc04      	bgt.n	800b5ba <__swbuf_r+0x42>
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	4628      	mov	r0, r5
 800b5b4:	f000 f950 	bl	800b858 <_fflush_r>
 800b5b8:	bb30      	cbnz	r0, 800b608 <__swbuf_r+0x90>
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	3b01      	subs	r3, #1
 800b5be:	60a3      	str	r3, [r4, #8]
 800b5c0:	6823      	ldr	r3, [r4, #0]
 800b5c2:	1c5a      	adds	r2, r3, #1
 800b5c4:	6022      	str	r2, [r4, #0]
 800b5c6:	701e      	strb	r6, [r3, #0]
 800b5c8:	6963      	ldr	r3, [r4, #20]
 800b5ca:	3001      	adds	r0, #1
 800b5cc:	4283      	cmp	r3, r0
 800b5ce:	d004      	beq.n	800b5da <__swbuf_r+0x62>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	07db      	lsls	r3, r3, #31
 800b5d4:	d506      	bpl.n	800b5e4 <__swbuf_r+0x6c>
 800b5d6:	2e0a      	cmp	r6, #10
 800b5d8:	d104      	bne.n	800b5e4 <__swbuf_r+0x6c>
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 f93b 	bl	800b858 <_fflush_r>
 800b5e2:	b988      	cbnz	r0, 800b608 <__swbuf_r+0x90>
 800b5e4:	4638      	mov	r0, r7
 800b5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5e8:	4b0a      	ldr	r3, [pc, #40]	; (800b614 <__swbuf_r+0x9c>)
 800b5ea:	429c      	cmp	r4, r3
 800b5ec:	d101      	bne.n	800b5f2 <__swbuf_r+0x7a>
 800b5ee:	68ac      	ldr	r4, [r5, #8]
 800b5f0:	e7cf      	b.n	800b592 <__swbuf_r+0x1a>
 800b5f2:	4b09      	ldr	r3, [pc, #36]	; (800b618 <__swbuf_r+0xa0>)
 800b5f4:	429c      	cmp	r4, r3
 800b5f6:	bf08      	it	eq
 800b5f8:	68ec      	ldreq	r4, [r5, #12]
 800b5fa:	e7ca      	b.n	800b592 <__swbuf_r+0x1a>
 800b5fc:	4621      	mov	r1, r4
 800b5fe:	4628      	mov	r0, r5
 800b600:	f000 f81e 	bl	800b640 <__swsetup_r>
 800b604:	2800      	cmp	r0, #0
 800b606:	d0cb      	beq.n	800b5a0 <__swbuf_r+0x28>
 800b608:	f04f 37ff 	mov.w	r7, #4294967295
 800b60c:	e7ea      	b.n	800b5e4 <__swbuf_r+0x6c>
 800b60e:	bf00      	nop
 800b610:	0800c638 	.word	0x0800c638
 800b614:	0800c658 	.word	0x0800c658
 800b618:	0800c618 	.word	0x0800c618

0800b61c <_write_r>:
 800b61c:	b538      	push	{r3, r4, r5, lr}
 800b61e:	4d07      	ldr	r5, [pc, #28]	; (800b63c <_write_r+0x20>)
 800b620:	4604      	mov	r4, r0
 800b622:	4608      	mov	r0, r1
 800b624:	4611      	mov	r1, r2
 800b626:	2200      	movs	r2, #0
 800b628:	602a      	str	r2, [r5, #0]
 800b62a:	461a      	mov	r2, r3
 800b62c:	f7f5 fb94 	bl	8000d58 <_write>
 800b630:	1c43      	adds	r3, r0, #1
 800b632:	d102      	bne.n	800b63a <_write_r+0x1e>
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	b103      	cbz	r3, 800b63a <_write_r+0x1e>
 800b638:	6023      	str	r3, [r4, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	20003378 	.word	0x20003378

0800b640 <__swsetup_r>:
 800b640:	4b32      	ldr	r3, [pc, #200]	; (800b70c <__swsetup_r+0xcc>)
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	681d      	ldr	r5, [r3, #0]
 800b646:	4606      	mov	r6, r0
 800b648:	460c      	mov	r4, r1
 800b64a:	b125      	cbz	r5, 800b656 <__swsetup_r+0x16>
 800b64c:	69ab      	ldr	r3, [r5, #24]
 800b64e:	b913      	cbnz	r3, 800b656 <__swsetup_r+0x16>
 800b650:	4628      	mov	r0, r5
 800b652:	f7ff f917 	bl	800a884 <__sinit>
 800b656:	4b2e      	ldr	r3, [pc, #184]	; (800b710 <__swsetup_r+0xd0>)
 800b658:	429c      	cmp	r4, r3
 800b65a:	d10f      	bne.n	800b67c <__swsetup_r+0x3c>
 800b65c:	686c      	ldr	r4, [r5, #4]
 800b65e:	89a3      	ldrh	r3, [r4, #12]
 800b660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b664:	0719      	lsls	r1, r3, #28
 800b666:	d42c      	bmi.n	800b6c2 <__swsetup_r+0x82>
 800b668:	06dd      	lsls	r5, r3, #27
 800b66a:	d411      	bmi.n	800b690 <__swsetup_r+0x50>
 800b66c:	2309      	movs	r3, #9
 800b66e:	6033      	str	r3, [r6, #0]
 800b670:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b674:	81a3      	strh	r3, [r4, #12]
 800b676:	f04f 30ff 	mov.w	r0, #4294967295
 800b67a:	e03e      	b.n	800b6fa <__swsetup_r+0xba>
 800b67c:	4b25      	ldr	r3, [pc, #148]	; (800b714 <__swsetup_r+0xd4>)
 800b67e:	429c      	cmp	r4, r3
 800b680:	d101      	bne.n	800b686 <__swsetup_r+0x46>
 800b682:	68ac      	ldr	r4, [r5, #8]
 800b684:	e7eb      	b.n	800b65e <__swsetup_r+0x1e>
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <__swsetup_r+0xd8>)
 800b688:	429c      	cmp	r4, r3
 800b68a:	bf08      	it	eq
 800b68c:	68ec      	ldreq	r4, [r5, #12]
 800b68e:	e7e6      	b.n	800b65e <__swsetup_r+0x1e>
 800b690:	0758      	lsls	r0, r3, #29
 800b692:	d512      	bpl.n	800b6ba <__swsetup_r+0x7a>
 800b694:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b696:	b141      	cbz	r1, 800b6aa <__swsetup_r+0x6a>
 800b698:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b69c:	4299      	cmp	r1, r3
 800b69e:	d002      	beq.n	800b6a6 <__swsetup_r+0x66>
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	f000 f9a1 	bl	800b9e8 <_free_r>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b6aa:	89a3      	ldrh	r3, [r4, #12]
 800b6ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6063      	str	r3, [r4, #4]
 800b6b6:	6923      	ldr	r3, [r4, #16]
 800b6b8:	6023      	str	r3, [r4, #0]
 800b6ba:	89a3      	ldrh	r3, [r4, #12]
 800b6bc:	f043 0308 	orr.w	r3, r3, #8
 800b6c0:	81a3      	strh	r3, [r4, #12]
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	b94b      	cbnz	r3, 800b6da <__swsetup_r+0x9a>
 800b6c6:	89a3      	ldrh	r3, [r4, #12]
 800b6c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b6cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b6d0:	d003      	beq.n	800b6da <__swsetup_r+0x9a>
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	f000 f933 	bl	800b940 <__smakebuf_r>
 800b6da:	89a0      	ldrh	r0, [r4, #12]
 800b6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b6e0:	f010 0301 	ands.w	r3, r0, #1
 800b6e4:	d00a      	beq.n	800b6fc <__swsetup_r+0xbc>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	6963      	ldr	r3, [r4, #20]
 800b6ec:	425b      	negs	r3, r3
 800b6ee:	61a3      	str	r3, [r4, #24]
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b943      	cbnz	r3, 800b706 <__swsetup_r+0xc6>
 800b6f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b6f8:	d1ba      	bne.n	800b670 <__swsetup_r+0x30>
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	0781      	lsls	r1, r0, #30
 800b6fe:	bf58      	it	pl
 800b700:	6963      	ldrpl	r3, [r4, #20]
 800b702:	60a3      	str	r3, [r4, #8]
 800b704:	e7f4      	b.n	800b6f0 <__swsetup_r+0xb0>
 800b706:	2000      	movs	r0, #0
 800b708:	e7f7      	b.n	800b6fa <__swsetup_r+0xba>
 800b70a:	bf00      	nop
 800b70c:	20000010 	.word	0x20000010
 800b710:	0800c638 	.word	0x0800c638
 800b714:	0800c658 	.word	0x0800c658
 800b718:	0800c618 	.word	0x0800c618

0800b71c <abort>:
 800b71c:	b508      	push	{r3, lr}
 800b71e:	2006      	movs	r0, #6
 800b720:	f000 fb72 	bl	800be08 <raise>
 800b724:	2001      	movs	r0, #1
 800b726:	f7f5 ffbf 	bl	80016a8 <_exit>
	...

0800b72c <_close_r>:
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4d06      	ldr	r5, [pc, #24]	; (800b748 <_close_r+0x1c>)
 800b730:	2300      	movs	r3, #0
 800b732:	4604      	mov	r4, r0
 800b734:	4608      	mov	r0, r1
 800b736:	602b      	str	r3, [r5, #0]
 800b738:	f7f5 ffdd 	bl	80016f6 <_close>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d102      	bne.n	800b746 <_close_r+0x1a>
 800b740:	682b      	ldr	r3, [r5, #0]
 800b742:	b103      	cbz	r3, 800b746 <_close_r+0x1a>
 800b744:	6023      	str	r3, [r4, #0]
 800b746:	bd38      	pop	{r3, r4, r5, pc}
 800b748:	20003378 	.word	0x20003378

0800b74c <__sflush_r>:
 800b74c:	898a      	ldrh	r2, [r1, #12]
 800b74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b752:	4605      	mov	r5, r0
 800b754:	0710      	lsls	r0, r2, #28
 800b756:	460c      	mov	r4, r1
 800b758:	d458      	bmi.n	800b80c <__sflush_r+0xc0>
 800b75a:	684b      	ldr	r3, [r1, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dc05      	bgt.n	800b76c <__sflush_r+0x20>
 800b760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	dc02      	bgt.n	800b76c <__sflush_r+0x20>
 800b766:	2000      	movs	r0, #0
 800b768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b76e:	2e00      	cmp	r6, #0
 800b770:	d0f9      	beq.n	800b766 <__sflush_r+0x1a>
 800b772:	2300      	movs	r3, #0
 800b774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b778:	682f      	ldr	r7, [r5, #0]
 800b77a:	602b      	str	r3, [r5, #0]
 800b77c:	d032      	beq.n	800b7e4 <__sflush_r+0x98>
 800b77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	075a      	lsls	r2, r3, #29
 800b784:	d505      	bpl.n	800b792 <__sflush_r+0x46>
 800b786:	6863      	ldr	r3, [r4, #4]
 800b788:	1ac0      	subs	r0, r0, r3
 800b78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b78c:	b10b      	cbz	r3, 800b792 <__sflush_r+0x46>
 800b78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b790:	1ac0      	subs	r0, r0, r3
 800b792:	2300      	movs	r3, #0
 800b794:	4602      	mov	r2, r0
 800b796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b798:	6a21      	ldr	r1, [r4, #32]
 800b79a:	4628      	mov	r0, r5
 800b79c:	47b0      	blx	r6
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	89a3      	ldrh	r3, [r4, #12]
 800b7a2:	d106      	bne.n	800b7b2 <__sflush_r+0x66>
 800b7a4:	6829      	ldr	r1, [r5, #0]
 800b7a6:	291d      	cmp	r1, #29
 800b7a8:	d82c      	bhi.n	800b804 <__sflush_r+0xb8>
 800b7aa:	4a2a      	ldr	r2, [pc, #168]	; (800b854 <__sflush_r+0x108>)
 800b7ac:	40ca      	lsrs	r2, r1
 800b7ae:	07d6      	lsls	r6, r2, #31
 800b7b0:	d528      	bpl.n	800b804 <__sflush_r+0xb8>
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	6062      	str	r2, [r4, #4]
 800b7b6:	04d9      	lsls	r1, r3, #19
 800b7b8:	6922      	ldr	r2, [r4, #16]
 800b7ba:	6022      	str	r2, [r4, #0]
 800b7bc:	d504      	bpl.n	800b7c8 <__sflush_r+0x7c>
 800b7be:	1c42      	adds	r2, r0, #1
 800b7c0:	d101      	bne.n	800b7c6 <__sflush_r+0x7a>
 800b7c2:	682b      	ldr	r3, [r5, #0]
 800b7c4:	b903      	cbnz	r3, 800b7c8 <__sflush_r+0x7c>
 800b7c6:	6560      	str	r0, [r4, #84]	; 0x54
 800b7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ca:	602f      	str	r7, [r5, #0]
 800b7cc:	2900      	cmp	r1, #0
 800b7ce:	d0ca      	beq.n	800b766 <__sflush_r+0x1a>
 800b7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d4:	4299      	cmp	r1, r3
 800b7d6:	d002      	beq.n	800b7de <__sflush_r+0x92>
 800b7d8:	4628      	mov	r0, r5
 800b7da:	f000 f905 	bl	800b9e8 <_free_r>
 800b7de:	2000      	movs	r0, #0
 800b7e0:	6360      	str	r0, [r4, #52]	; 0x34
 800b7e2:	e7c1      	b.n	800b768 <__sflush_r+0x1c>
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	47b0      	blx	r6
 800b7ec:	1c41      	adds	r1, r0, #1
 800b7ee:	d1c7      	bne.n	800b780 <__sflush_r+0x34>
 800b7f0:	682b      	ldr	r3, [r5, #0]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d0c4      	beq.n	800b780 <__sflush_r+0x34>
 800b7f6:	2b1d      	cmp	r3, #29
 800b7f8:	d001      	beq.n	800b7fe <__sflush_r+0xb2>
 800b7fa:	2b16      	cmp	r3, #22
 800b7fc:	d101      	bne.n	800b802 <__sflush_r+0xb6>
 800b7fe:	602f      	str	r7, [r5, #0]
 800b800:	e7b1      	b.n	800b766 <__sflush_r+0x1a>
 800b802:	89a3      	ldrh	r3, [r4, #12]
 800b804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b808:	81a3      	strh	r3, [r4, #12]
 800b80a:	e7ad      	b.n	800b768 <__sflush_r+0x1c>
 800b80c:	690f      	ldr	r7, [r1, #16]
 800b80e:	2f00      	cmp	r7, #0
 800b810:	d0a9      	beq.n	800b766 <__sflush_r+0x1a>
 800b812:	0793      	lsls	r3, r2, #30
 800b814:	680e      	ldr	r6, [r1, #0]
 800b816:	bf08      	it	eq
 800b818:	694b      	ldreq	r3, [r1, #20]
 800b81a:	600f      	str	r7, [r1, #0]
 800b81c:	bf18      	it	ne
 800b81e:	2300      	movne	r3, #0
 800b820:	eba6 0807 	sub.w	r8, r6, r7
 800b824:	608b      	str	r3, [r1, #8]
 800b826:	f1b8 0f00 	cmp.w	r8, #0
 800b82a:	dd9c      	ble.n	800b766 <__sflush_r+0x1a>
 800b82c:	6a21      	ldr	r1, [r4, #32]
 800b82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b830:	4643      	mov	r3, r8
 800b832:	463a      	mov	r2, r7
 800b834:	4628      	mov	r0, r5
 800b836:	47b0      	blx	r6
 800b838:	2800      	cmp	r0, #0
 800b83a:	dc06      	bgt.n	800b84a <__sflush_r+0xfe>
 800b83c:	89a3      	ldrh	r3, [r4, #12]
 800b83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b842:	81a3      	strh	r3, [r4, #12]
 800b844:	f04f 30ff 	mov.w	r0, #4294967295
 800b848:	e78e      	b.n	800b768 <__sflush_r+0x1c>
 800b84a:	4407      	add	r7, r0
 800b84c:	eba8 0800 	sub.w	r8, r8, r0
 800b850:	e7e9      	b.n	800b826 <__sflush_r+0xda>
 800b852:	bf00      	nop
 800b854:	20400001 	.word	0x20400001

0800b858 <_fflush_r>:
 800b858:	b538      	push	{r3, r4, r5, lr}
 800b85a:	690b      	ldr	r3, [r1, #16]
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	b913      	cbnz	r3, 800b868 <_fflush_r+0x10>
 800b862:	2500      	movs	r5, #0
 800b864:	4628      	mov	r0, r5
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	b118      	cbz	r0, 800b872 <_fflush_r+0x1a>
 800b86a:	6983      	ldr	r3, [r0, #24]
 800b86c:	b90b      	cbnz	r3, 800b872 <_fflush_r+0x1a>
 800b86e:	f7ff f809 	bl	800a884 <__sinit>
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <_fflush_r+0x6c>)
 800b874:	429c      	cmp	r4, r3
 800b876:	d11b      	bne.n	800b8b0 <_fflush_r+0x58>
 800b878:	686c      	ldr	r4, [r5, #4]
 800b87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d0ef      	beq.n	800b862 <_fflush_r+0xa>
 800b882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b884:	07d0      	lsls	r0, r2, #31
 800b886:	d404      	bmi.n	800b892 <_fflush_r+0x3a>
 800b888:	0599      	lsls	r1, r3, #22
 800b88a:	d402      	bmi.n	800b892 <_fflush_r+0x3a>
 800b88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b88e:	f7ff f8ce 	bl	800aa2e <__retarget_lock_acquire_recursive>
 800b892:	4628      	mov	r0, r5
 800b894:	4621      	mov	r1, r4
 800b896:	f7ff ff59 	bl	800b74c <__sflush_r>
 800b89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b89c:	07da      	lsls	r2, r3, #31
 800b89e:	4605      	mov	r5, r0
 800b8a0:	d4e0      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	059b      	lsls	r3, r3, #22
 800b8a6:	d4dd      	bmi.n	800b864 <_fflush_r+0xc>
 800b8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b8aa:	f7ff f8c1 	bl	800aa30 <__retarget_lock_release_recursive>
 800b8ae:	e7d9      	b.n	800b864 <_fflush_r+0xc>
 800b8b0:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <_fflush_r+0x70>)
 800b8b2:	429c      	cmp	r4, r3
 800b8b4:	d101      	bne.n	800b8ba <_fflush_r+0x62>
 800b8b6:	68ac      	ldr	r4, [r5, #8]
 800b8b8:	e7df      	b.n	800b87a <_fflush_r+0x22>
 800b8ba:	4b04      	ldr	r3, [pc, #16]	; (800b8cc <_fflush_r+0x74>)
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	bf08      	it	eq
 800b8c0:	68ec      	ldreq	r4, [r5, #12]
 800b8c2:	e7da      	b.n	800b87a <_fflush_r+0x22>
 800b8c4:	0800c638 	.word	0x0800c638
 800b8c8:	0800c658 	.word	0x0800c658
 800b8cc:	0800c618 	.word	0x0800c618

0800b8d0 <_lseek_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d07      	ldr	r5, [pc, #28]	; (800b8f0 <_lseek_r+0x20>)
 800b8d4:	4604      	mov	r4, r0
 800b8d6:	4608      	mov	r0, r1
 800b8d8:	4611      	mov	r1, r2
 800b8da:	2200      	movs	r2, #0
 800b8dc:	602a      	str	r2, [r5, #0]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f7f5 ff30 	bl	8001744 <_lseek>
 800b8e4:	1c43      	adds	r3, r0, #1
 800b8e6:	d102      	bne.n	800b8ee <_lseek_r+0x1e>
 800b8e8:	682b      	ldr	r3, [r5, #0]
 800b8ea:	b103      	cbz	r3, 800b8ee <_lseek_r+0x1e>
 800b8ec:	6023      	str	r3, [r4, #0]
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	20003378 	.word	0x20003378

0800b8f4 <__swhatbuf_r>:
 800b8f4:	b570      	push	{r4, r5, r6, lr}
 800b8f6:	460e      	mov	r6, r1
 800b8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8fc:	2900      	cmp	r1, #0
 800b8fe:	b096      	sub	sp, #88	; 0x58
 800b900:	4614      	mov	r4, r2
 800b902:	461d      	mov	r5, r3
 800b904:	da08      	bge.n	800b918 <__swhatbuf_r+0x24>
 800b906:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	602a      	str	r2, [r5, #0]
 800b90e:	061a      	lsls	r2, r3, #24
 800b910:	d410      	bmi.n	800b934 <__swhatbuf_r+0x40>
 800b912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b916:	e00e      	b.n	800b936 <__swhatbuf_r+0x42>
 800b918:	466a      	mov	r2, sp
 800b91a:	f000 fa91 	bl	800be40 <_fstat_r>
 800b91e:	2800      	cmp	r0, #0
 800b920:	dbf1      	blt.n	800b906 <__swhatbuf_r+0x12>
 800b922:	9a01      	ldr	r2, [sp, #4]
 800b924:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b928:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b92c:	425a      	negs	r2, r3
 800b92e:	415a      	adcs	r2, r3
 800b930:	602a      	str	r2, [r5, #0]
 800b932:	e7ee      	b.n	800b912 <__swhatbuf_r+0x1e>
 800b934:	2340      	movs	r3, #64	; 0x40
 800b936:	2000      	movs	r0, #0
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	b016      	add	sp, #88	; 0x58
 800b93c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b940 <__smakebuf_r>:
 800b940:	898b      	ldrh	r3, [r1, #12]
 800b942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b944:	079d      	lsls	r5, r3, #30
 800b946:	4606      	mov	r6, r0
 800b948:	460c      	mov	r4, r1
 800b94a:	d507      	bpl.n	800b95c <__smakebuf_r+0x1c>
 800b94c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b950:	6023      	str	r3, [r4, #0]
 800b952:	6123      	str	r3, [r4, #16]
 800b954:	2301      	movs	r3, #1
 800b956:	6163      	str	r3, [r4, #20]
 800b958:	b002      	add	sp, #8
 800b95a:	bd70      	pop	{r4, r5, r6, pc}
 800b95c:	ab01      	add	r3, sp, #4
 800b95e:	466a      	mov	r2, sp
 800b960:	f7ff ffc8 	bl	800b8f4 <__swhatbuf_r>
 800b964:	9900      	ldr	r1, [sp, #0]
 800b966:	4605      	mov	r5, r0
 800b968:	4630      	mov	r0, r6
 800b96a:	f7ff f8b3 	bl	800aad4 <_malloc_r>
 800b96e:	b948      	cbnz	r0, 800b984 <__smakebuf_r+0x44>
 800b970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b974:	059a      	lsls	r2, r3, #22
 800b976:	d4ef      	bmi.n	800b958 <__smakebuf_r+0x18>
 800b978:	f023 0303 	bic.w	r3, r3, #3
 800b97c:	f043 0302 	orr.w	r3, r3, #2
 800b980:	81a3      	strh	r3, [r4, #12]
 800b982:	e7e3      	b.n	800b94c <__smakebuf_r+0xc>
 800b984:	4b0d      	ldr	r3, [pc, #52]	; (800b9bc <__smakebuf_r+0x7c>)
 800b986:	62b3      	str	r3, [r6, #40]	; 0x28
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	6020      	str	r0, [r4, #0]
 800b98c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b990:	81a3      	strh	r3, [r4, #12]
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	6163      	str	r3, [r4, #20]
 800b996:	9b01      	ldr	r3, [sp, #4]
 800b998:	6120      	str	r0, [r4, #16]
 800b99a:	b15b      	cbz	r3, 800b9b4 <__smakebuf_r+0x74>
 800b99c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 fa5f 	bl	800be64 <_isatty_r>
 800b9a6:	b128      	cbz	r0, 800b9b4 <__smakebuf_r+0x74>
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	f023 0303 	bic.w	r3, r3, #3
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	81a3      	strh	r3, [r4, #12]
 800b9b4:	89a0      	ldrh	r0, [r4, #12]
 800b9b6:	4305      	orrs	r5, r0
 800b9b8:	81a5      	strh	r5, [r4, #12]
 800b9ba:	e7cd      	b.n	800b958 <__smakebuf_r+0x18>
 800b9bc:	0800a81d 	.word	0x0800a81d

0800b9c0 <malloc>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <malloc+0xc>)
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	f7ff b885 	b.w	800aad4 <_malloc_r>
 800b9ca:	bf00      	nop
 800b9cc:	20000010 	.word	0x20000010

0800b9d0 <__malloc_lock>:
 800b9d0:	4801      	ldr	r0, [pc, #4]	; (800b9d8 <__malloc_lock+0x8>)
 800b9d2:	f7ff b82c 	b.w	800aa2e <__retarget_lock_acquire_recursive>
 800b9d6:	bf00      	nop
 800b9d8:	2000336c 	.word	0x2000336c

0800b9dc <__malloc_unlock>:
 800b9dc:	4801      	ldr	r0, [pc, #4]	; (800b9e4 <__malloc_unlock+0x8>)
 800b9de:	f7ff b827 	b.w	800aa30 <__retarget_lock_release_recursive>
 800b9e2:	bf00      	nop
 800b9e4:	2000336c 	.word	0x2000336c

0800b9e8 <_free_r>:
 800b9e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9ea:	2900      	cmp	r1, #0
 800b9ec:	d044      	beq.n	800ba78 <_free_r+0x90>
 800b9ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9f2:	9001      	str	r0, [sp, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9fa:	bfb8      	it	lt
 800b9fc:	18e4      	addlt	r4, r4, r3
 800b9fe:	f7ff ffe7 	bl	800b9d0 <__malloc_lock>
 800ba02:	4a1e      	ldr	r2, [pc, #120]	; (800ba7c <_free_r+0x94>)
 800ba04:	9801      	ldr	r0, [sp, #4]
 800ba06:	6813      	ldr	r3, [r2, #0]
 800ba08:	b933      	cbnz	r3, 800ba18 <_free_r+0x30>
 800ba0a:	6063      	str	r3, [r4, #4]
 800ba0c:	6014      	str	r4, [r2, #0]
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba14:	f7ff bfe2 	b.w	800b9dc <__malloc_unlock>
 800ba18:	42a3      	cmp	r3, r4
 800ba1a:	d908      	bls.n	800ba2e <_free_r+0x46>
 800ba1c:	6825      	ldr	r5, [r4, #0]
 800ba1e:	1961      	adds	r1, r4, r5
 800ba20:	428b      	cmp	r3, r1
 800ba22:	bf01      	itttt	eq
 800ba24:	6819      	ldreq	r1, [r3, #0]
 800ba26:	685b      	ldreq	r3, [r3, #4]
 800ba28:	1949      	addeq	r1, r1, r5
 800ba2a:	6021      	streq	r1, [r4, #0]
 800ba2c:	e7ed      	b.n	800ba0a <_free_r+0x22>
 800ba2e:	461a      	mov	r2, r3
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	b10b      	cbz	r3, 800ba38 <_free_r+0x50>
 800ba34:	42a3      	cmp	r3, r4
 800ba36:	d9fa      	bls.n	800ba2e <_free_r+0x46>
 800ba38:	6811      	ldr	r1, [r2, #0]
 800ba3a:	1855      	adds	r5, r2, r1
 800ba3c:	42a5      	cmp	r5, r4
 800ba3e:	d10b      	bne.n	800ba58 <_free_r+0x70>
 800ba40:	6824      	ldr	r4, [r4, #0]
 800ba42:	4421      	add	r1, r4
 800ba44:	1854      	adds	r4, r2, r1
 800ba46:	42a3      	cmp	r3, r4
 800ba48:	6011      	str	r1, [r2, #0]
 800ba4a:	d1e0      	bne.n	800ba0e <_free_r+0x26>
 800ba4c:	681c      	ldr	r4, [r3, #0]
 800ba4e:	685b      	ldr	r3, [r3, #4]
 800ba50:	6053      	str	r3, [r2, #4]
 800ba52:	4421      	add	r1, r4
 800ba54:	6011      	str	r1, [r2, #0]
 800ba56:	e7da      	b.n	800ba0e <_free_r+0x26>
 800ba58:	d902      	bls.n	800ba60 <_free_r+0x78>
 800ba5a:	230c      	movs	r3, #12
 800ba5c:	6003      	str	r3, [r0, #0]
 800ba5e:	e7d6      	b.n	800ba0e <_free_r+0x26>
 800ba60:	6825      	ldr	r5, [r4, #0]
 800ba62:	1961      	adds	r1, r4, r5
 800ba64:	428b      	cmp	r3, r1
 800ba66:	bf04      	itt	eq
 800ba68:	6819      	ldreq	r1, [r3, #0]
 800ba6a:	685b      	ldreq	r3, [r3, #4]
 800ba6c:	6063      	str	r3, [r4, #4]
 800ba6e:	bf04      	itt	eq
 800ba70:	1949      	addeq	r1, r1, r5
 800ba72:	6021      	streq	r1, [r4, #0]
 800ba74:	6054      	str	r4, [r2, #4]
 800ba76:	e7ca      	b.n	800ba0e <_free_r+0x26>
 800ba78:	b003      	add	sp, #12
 800ba7a:	bd30      	pop	{r4, r5, pc}
 800ba7c:	20003370 	.word	0x20003370

0800ba80 <_realloc_r>:
 800ba80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba84:	4680      	mov	r8, r0
 800ba86:	4614      	mov	r4, r2
 800ba88:	460e      	mov	r6, r1
 800ba8a:	b921      	cbnz	r1, 800ba96 <_realloc_r+0x16>
 800ba8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba90:	4611      	mov	r1, r2
 800ba92:	f7ff b81f 	b.w	800aad4 <_malloc_r>
 800ba96:	b92a      	cbnz	r2, 800baa4 <_realloc_r+0x24>
 800ba98:	f7ff ffa6 	bl	800b9e8 <_free_r>
 800ba9c:	4625      	mov	r5, r4
 800ba9e:	4628      	mov	r0, r5
 800baa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baa4:	f000 f9ee 	bl	800be84 <_malloc_usable_size_r>
 800baa8:	4284      	cmp	r4, r0
 800baaa:	4607      	mov	r7, r0
 800baac:	d802      	bhi.n	800bab4 <_realloc_r+0x34>
 800baae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bab2:	d812      	bhi.n	800bada <_realloc_r+0x5a>
 800bab4:	4621      	mov	r1, r4
 800bab6:	4640      	mov	r0, r8
 800bab8:	f7ff f80c 	bl	800aad4 <_malloc_r>
 800babc:	4605      	mov	r5, r0
 800babe:	2800      	cmp	r0, #0
 800bac0:	d0ed      	beq.n	800ba9e <_realloc_r+0x1e>
 800bac2:	42bc      	cmp	r4, r7
 800bac4:	4622      	mov	r2, r4
 800bac6:	4631      	mov	r1, r6
 800bac8:	bf28      	it	cs
 800baca:	463a      	movcs	r2, r7
 800bacc:	f7fe ffb1 	bl	800aa32 <memcpy>
 800bad0:	4631      	mov	r1, r6
 800bad2:	4640      	mov	r0, r8
 800bad4:	f7ff ff88 	bl	800b9e8 <_free_r>
 800bad8:	e7e1      	b.n	800ba9e <_realloc_r+0x1e>
 800bada:	4635      	mov	r5, r6
 800badc:	e7df      	b.n	800ba9e <_realloc_r+0x1e>

0800bade <__ssputs_r>:
 800bade:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae2:	688e      	ldr	r6, [r1, #8]
 800bae4:	429e      	cmp	r6, r3
 800bae6:	4682      	mov	sl, r0
 800bae8:	460c      	mov	r4, r1
 800baea:	4690      	mov	r8, r2
 800baec:	461f      	mov	r7, r3
 800baee:	d838      	bhi.n	800bb62 <__ssputs_r+0x84>
 800baf0:	898a      	ldrh	r2, [r1, #12]
 800baf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baf6:	d032      	beq.n	800bb5e <__ssputs_r+0x80>
 800baf8:	6825      	ldr	r5, [r4, #0]
 800bafa:	6909      	ldr	r1, [r1, #16]
 800bafc:	eba5 0901 	sub.w	r9, r5, r1
 800bb00:	6965      	ldr	r5, [r4, #20]
 800bb02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	444b      	add	r3, r9
 800bb0e:	106d      	asrs	r5, r5, #1
 800bb10:	429d      	cmp	r5, r3
 800bb12:	bf38      	it	cc
 800bb14:	461d      	movcc	r5, r3
 800bb16:	0553      	lsls	r3, r2, #21
 800bb18:	d531      	bpl.n	800bb7e <__ssputs_r+0xa0>
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7fe ffda 	bl	800aad4 <_malloc_r>
 800bb20:	4606      	mov	r6, r0
 800bb22:	b950      	cbnz	r0, 800bb3a <__ssputs_r+0x5c>
 800bb24:	230c      	movs	r3, #12
 800bb26:	f8ca 3000 	str.w	r3, [sl]
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	f04f 30ff 	mov.w	r0, #4294967295
 800bb36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb3a:	6921      	ldr	r1, [r4, #16]
 800bb3c:	464a      	mov	r2, r9
 800bb3e:	f7fe ff78 	bl	800aa32 <memcpy>
 800bb42:	89a3      	ldrh	r3, [r4, #12]
 800bb44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb4c:	81a3      	strh	r3, [r4, #12]
 800bb4e:	6126      	str	r6, [r4, #16]
 800bb50:	6165      	str	r5, [r4, #20]
 800bb52:	444e      	add	r6, r9
 800bb54:	eba5 0509 	sub.w	r5, r5, r9
 800bb58:	6026      	str	r6, [r4, #0]
 800bb5a:	60a5      	str	r5, [r4, #8]
 800bb5c:	463e      	mov	r6, r7
 800bb5e:	42be      	cmp	r6, r7
 800bb60:	d900      	bls.n	800bb64 <__ssputs_r+0x86>
 800bb62:	463e      	mov	r6, r7
 800bb64:	6820      	ldr	r0, [r4, #0]
 800bb66:	4632      	mov	r2, r6
 800bb68:	4641      	mov	r1, r8
 800bb6a:	f7fe ff70 	bl	800aa4e <memmove>
 800bb6e:	68a3      	ldr	r3, [r4, #8]
 800bb70:	1b9b      	subs	r3, r3, r6
 800bb72:	60a3      	str	r3, [r4, #8]
 800bb74:	6823      	ldr	r3, [r4, #0]
 800bb76:	4433      	add	r3, r6
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	2000      	movs	r0, #0
 800bb7c:	e7db      	b.n	800bb36 <__ssputs_r+0x58>
 800bb7e:	462a      	mov	r2, r5
 800bb80:	f7ff ff7e 	bl	800ba80 <_realloc_r>
 800bb84:	4606      	mov	r6, r0
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d1e1      	bne.n	800bb4e <__ssputs_r+0x70>
 800bb8a:	6921      	ldr	r1, [r4, #16]
 800bb8c:	4650      	mov	r0, sl
 800bb8e:	f7ff ff2b 	bl	800b9e8 <_free_r>
 800bb92:	e7c7      	b.n	800bb24 <__ssputs_r+0x46>

0800bb94 <_svfiprintf_r>:
 800bb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb98:	4698      	mov	r8, r3
 800bb9a:	898b      	ldrh	r3, [r1, #12]
 800bb9c:	061b      	lsls	r3, r3, #24
 800bb9e:	b09d      	sub	sp, #116	; 0x74
 800bba0:	4607      	mov	r7, r0
 800bba2:	460d      	mov	r5, r1
 800bba4:	4614      	mov	r4, r2
 800bba6:	d50e      	bpl.n	800bbc6 <_svfiprintf_r+0x32>
 800bba8:	690b      	ldr	r3, [r1, #16]
 800bbaa:	b963      	cbnz	r3, 800bbc6 <_svfiprintf_r+0x32>
 800bbac:	2140      	movs	r1, #64	; 0x40
 800bbae:	f7fe ff91 	bl	800aad4 <_malloc_r>
 800bbb2:	6028      	str	r0, [r5, #0]
 800bbb4:	6128      	str	r0, [r5, #16]
 800bbb6:	b920      	cbnz	r0, 800bbc2 <_svfiprintf_r+0x2e>
 800bbb8:	230c      	movs	r3, #12
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbc0:	e0d1      	b.n	800bd66 <_svfiprintf_r+0x1d2>
 800bbc2:	2340      	movs	r3, #64	; 0x40
 800bbc4:	616b      	str	r3, [r5, #20]
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbca:	2320      	movs	r3, #32
 800bbcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbd4:	2330      	movs	r3, #48	; 0x30
 800bbd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd80 <_svfiprintf_r+0x1ec>
 800bbda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbde:	f04f 0901 	mov.w	r9, #1
 800bbe2:	4623      	mov	r3, r4
 800bbe4:	469a      	mov	sl, r3
 800bbe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbea:	b10a      	cbz	r2, 800bbf0 <_svfiprintf_r+0x5c>
 800bbec:	2a25      	cmp	r2, #37	; 0x25
 800bbee:	d1f9      	bne.n	800bbe4 <_svfiprintf_r+0x50>
 800bbf0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbf4:	d00b      	beq.n	800bc0e <_svfiprintf_r+0x7a>
 800bbf6:	465b      	mov	r3, fp
 800bbf8:	4622      	mov	r2, r4
 800bbfa:	4629      	mov	r1, r5
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff ff6e 	bl	800bade <__ssputs_r>
 800bc02:	3001      	adds	r0, #1
 800bc04:	f000 80aa 	beq.w	800bd5c <_svfiprintf_r+0x1c8>
 800bc08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc0a:	445a      	add	r2, fp
 800bc0c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 80a2 	beq.w	800bd5c <_svfiprintf_r+0x1c8>
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc22:	f10a 0a01 	add.w	sl, sl, #1
 800bc26:	9304      	str	r3, [sp, #16]
 800bc28:	9307      	str	r3, [sp, #28]
 800bc2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc2e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc30:	4654      	mov	r4, sl
 800bc32:	2205      	movs	r2, #5
 800bc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc38:	4851      	ldr	r0, [pc, #324]	; (800bd80 <_svfiprintf_r+0x1ec>)
 800bc3a:	f7f4 fad1 	bl	80001e0 <memchr>
 800bc3e:	9a04      	ldr	r2, [sp, #16]
 800bc40:	b9d8      	cbnz	r0, 800bc7a <_svfiprintf_r+0xe6>
 800bc42:	06d0      	lsls	r0, r2, #27
 800bc44:	bf44      	itt	mi
 800bc46:	2320      	movmi	r3, #32
 800bc48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc4c:	0711      	lsls	r1, r2, #28
 800bc4e:	bf44      	itt	mi
 800bc50:	232b      	movmi	r3, #43	; 0x2b
 800bc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc56:	f89a 3000 	ldrb.w	r3, [sl]
 800bc5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5c:	d015      	beq.n	800bc8a <_svfiprintf_r+0xf6>
 800bc5e:	9a07      	ldr	r2, [sp, #28]
 800bc60:	4654      	mov	r4, sl
 800bc62:	2000      	movs	r0, #0
 800bc64:	f04f 0c0a 	mov.w	ip, #10
 800bc68:	4621      	mov	r1, r4
 800bc6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc6e:	3b30      	subs	r3, #48	; 0x30
 800bc70:	2b09      	cmp	r3, #9
 800bc72:	d94e      	bls.n	800bd12 <_svfiprintf_r+0x17e>
 800bc74:	b1b0      	cbz	r0, 800bca4 <_svfiprintf_r+0x110>
 800bc76:	9207      	str	r2, [sp, #28]
 800bc78:	e014      	b.n	800bca4 <_svfiprintf_r+0x110>
 800bc7a:	eba0 0308 	sub.w	r3, r0, r8
 800bc7e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc82:	4313      	orrs	r3, r2
 800bc84:	9304      	str	r3, [sp, #16]
 800bc86:	46a2      	mov	sl, r4
 800bc88:	e7d2      	b.n	800bc30 <_svfiprintf_r+0x9c>
 800bc8a:	9b03      	ldr	r3, [sp, #12]
 800bc8c:	1d19      	adds	r1, r3, #4
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	9103      	str	r1, [sp, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfbb      	ittet	lt
 800bc96:	425b      	neglt	r3, r3
 800bc98:	f042 0202 	orrlt.w	r2, r2, #2
 800bc9c:	9307      	strge	r3, [sp, #28]
 800bc9e:	9307      	strlt	r3, [sp, #28]
 800bca0:	bfb8      	it	lt
 800bca2:	9204      	strlt	r2, [sp, #16]
 800bca4:	7823      	ldrb	r3, [r4, #0]
 800bca6:	2b2e      	cmp	r3, #46	; 0x2e
 800bca8:	d10c      	bne.n	800bcc4 <_svfiprintf_r+0x130>
 800bcaa:	7863      	ldrb	r3, [r4, #1]
 800bcac:	2b2a      	cmp	r3, #42	; 0x2a
 800bcae:	d135      	bne.n	800bd1c <_svfiprintf_r+0x188>
 800bcb0:	9b03      	ldr	r3, [sp, #12]
 800bcb2:	1d1a      	adds	r2, r3, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	9203      	str	r2, [sp, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	bfb8      	it	lt
 800bcbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcc0:	3402      	adds	r4, #2
 800bcc2:	9305      	str	r3, [sp, #20]
 800bcc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd90 <_svfiprintf_r+0x1fc>
 800bcc8:	7821      	ldrb	r1, [r4, #0]
 800bcca:	2203      	movs	r2, #3
 800bccc:	4650      	mov	r0, sl
 800bcce:	f7f4 fa87 	bl	80001e0 <memchr>
 800bcd2:	b140      	cbz	r0, 800bce6 <_svfiprintf_r+0x152>
 800bcd4:	2340      	movs	r3, #64	; 0x40
 800bcd6:	eba0 000a 	sub.w	r0, r0, sl
 800bcda:	fa03 f000 	lsl.w	r0, r3, r0
 800bcde:	9b04      	ldr	r3, [sp, #16]
 800bce0:	4303      	orrs	r3, r0
 800bce2:	3401      	adds	r4, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcea:	4826      	ldr	r0, [pc, #152]	; (800bd84 <_svfiprintf_r+0x1f0>)
 800bcec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcf0:	2206      	movs	r2, #6
 800bcf2:	f7f4 fa75 	bl	80001e0 <memchr>
 800bcf6:	2800      	cmp	r0, #0
 800bcf8:	d038      	beq.n	800bd6c <_svfiprintf_r+0x1d8>
 800bcfa:	4b23      	ldr	r3, [pc, #140]	; (800bd88 <_svfiprintf_r+0x1f4>)
 800bcfc:	bb1b      	cbnz	r3, 800bd46 <_svfiprintf_r+0x1b2>
 800bcfe:	9b03      	ldr	r3, [sp, #12]
 800bd00:	3307      	adds	r3, #7
 800bd02:	f023 0307 	bic.w	r3, r3, #7
 800bd06:	3308      	adds	r3, #8
 800bd08:	9303      	str	r3, [sp, #12]
 800bd0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd0c:	4433      	add	r3, r6
 800bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd10:	e767      	b.n	800bbe2 <_svfiprintf_r+0x4e>
 800bd12:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd16:	460c      	mov	r4, r1
 800bd18:	2001      	movs	r0, #1
 800bd1a:	e7a5      	b.n	800bc68 <_svfiprintf_r+0xd4>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	3401      	adds	r4, #1
 800bd20:	9305      	str	r3, [sp, #20]
 800bd22:	4619      	mov	r1, r3
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd2e:	3a30      	subs	r2, #48	; 0x30
 800bd30:	2a09      	cmp	r2, #9
 800bd32:	d903      	bls.n	800bd3c <_svfiprintf_r+0x1a8>
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d0c5      	beq.n	800bcc4 <_svfiprintf_r+0x130>
 800bd38:	9105      	str	r1, [sp, #20]
 800bd3a:	e7c3      	b.n	800bcc4 <_svfiprintf_r+0x130>
 800bd3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd40:	4604      	mov	r4, r0
 800bd42:	2301      	movs	r3, #1
 800bd44:	e7f0      	b.n	800bd28 <_svfiprintf_r+0x194>
 800bd46:	ab03      	add	r3, sp, #12
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	4b0f      	ldr	r3, [pc, #60]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd4e:	a904      	add	r1, sp, #16
 800bd50:	4638      	mov	r0, r7
 800bd52:	f3af 8000 	nop.w
 800bd56:	1c42      	adds	r2, r0, #1
 800bd58:	4606      	mov	r6, r0
 800bd5a:	d1d6      	bne.n	800bd0a <_svfiprintf_r+0x176>
 800bd5c:	89ab      	ldrh	r3, [r5, #12]
 800bd5e:	065b      	lsls	r3, r3, #25
 800bd60:	f53f af2c 	bmi.w	800bbbc <_svfiprintf_r+0x28>
 800bd64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd66:	b01d      	add	sp, #116	; 0x74
 800bd68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd6c:	ab03      	add	r3, sp, #12
 800bd6e:	9300      	str	r3, [sp, #0]
 800bd70:	462a      	mov	r2, r5
 800bd72:	4b06      	ldr	r3, [pc, #24]	; (800bd8c <_svfiprintf_r+0x1f8>)
 800bd74:	a904      	add	r1, sp, #16
 800bd76:	4638      	mov	r0, r7
 800bd78:	f7ff f8e8 	bl	800af4c <_printf_i>
 800bd7c:	e7eb      	b.n	800bd56 <_svfiprintf_r+0x1c2>
 800bd7e:	bf00      	nop
 800bd80:	0800c67c 	.word	0x0800c67c
 800bd84:	0800c686 	.word	0x0800c686
 800bd88:	00000000 	.word	0x00000000
 800bd8c:	0800badf 	.word	0x0800badf
 800bd90:	0800c682 	.word	0x0800c682

0800bd94 <_read_r>:
 800bd94:	b538      	push	{r3, r4, r5, lr}
 800bd96:	4d07      	ldr	r5, [pc, #28]	; (800bdb4 <_read_r+0x20>)
 800bd98:	4604      	mov	r4, r0
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	2200      	movs	r2, #0
 800bda0:	602a      	str	r2, [r5, #0]
 800bda2:	461a      	mov	r2, r3
 800bda4:	f7f5 fc8a 	bl	80016bc <_read>
 800bda8:	1c43      	adds	r3, r0, #1
 800bdaa:	d102      	bne.n	800bdb2 <_read_r+0x1e>
 800bdac:	682b      	ldr	r3, [r5, #0]
 800bdae:	b103      	cbz	r3, 800bdb2 <_read_r+0x1e>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	bd38      	pop	{r3, r4, r5, pc}
 800bdb4:	20003378 	.word	0x20003378

0800bdb8 <_raise_r>:
 800bdb8:	291f      	cmp	r1, #31
 800bdba:	b538      	push	{r3, r4, r5, lr}
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	460d      	mov	r5, r1
 800bdc0:	d904      	bls.n	800bdcc <_raise_r+0x14>
 800bdc2:	2316      	movs	r3, #22
 800bdc4:	6003      	str	r3, [r0, #0]
 800bdc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdca:	bd38      	pop	{r3, r4, r5, pc}
 800bdcc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bdce:	b112      	cbz	r2, 800bdd6 <_raise_r+0x1e>
 800bdd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdd4:	b94b      	cbnz	r3, 800bdea <_raise_r+0x32>
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f000 f830 	bl	800be3c <_getpid_r>
 800bddc:	462a      	mov	r2, r5
 800bdde:	4601      	mov	r1, r0
 800bde0:	4620      	mov	r0, r4
 800bde2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde6:	f000 b817 	b.w	800be18 <_kill_r>
 800bdea:	2b01      	cmp	r3, #1
 800bdec:	d00a      	beq.n	800be04 <_raise_r+0x4c>
 800bdee:	1c59      	adds	r1, r3, #1
 800bdf0:	d103      	bne.n	800bdfa <_raise_r+0x42>
 800bdf2:	2316      	movs	r3, #22
 800bdf4:	6003      	str	r3, [r0, #0]
 800bdf6:	2001      	movs	r0, #1
 800bdf8:	e7e7      	b.n	800bdca <_raise_r+0x12>
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be00:	4628      	mov	r0, r5
 800be02:	4798      	blx	r3
 800be04:	2000      	movs	r0, #0
 800be06:	e7e0      	b.n	800bdca <_raise_r+0x12>

0800be08 <raise>:
 800be08:	4b02      	ldr	r3, [pc, #8]	; (800be14 <raise+0xc>)
 800be0a:	4601      	mov	r1, r0
 800be0c:	6818      	ldr	r0, [r3, #0]
 800be0e:	f7ff bfd3 	b.w	800bdb8 <_raise_r>
 800be12:	bf00      	nop
 800be14:	20000010 	.word	0x20000010

0800be18 <_kill_r>:
 800be18:	b538      	push	{r3, r4, r5, lr}
 800be1a:	4d07      	ldr	r5, [pc, #28]	; (800be38 <_kill_r+0x20>)
 800be1c:	2300      	movs	r3, #0
 800be1e:	4604      	mov	r4, r0
 800be20:	4608      	mov	r0, r1
 800be22:	4611      	mov	r1, r2
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	f7f5 fc2f 	bl	8001688 <_kill>
 800be2a:	1c43      	adds	r3, r0, #1
 800be2c:	d102      	bne.n	800be34 <_kill_r+0x1c>
 800be2e:	682b      	ldr	r3, [r5, #0]
 800be30:	b103      	cbz	r3, 800be34 <_kill_r+0x1c>
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	bd38      	pop	{r3, r4, r5, pc}
 800be36:	bf00      	nop
 800be38:	20003378 	.word	0x20003378

0800be3c <_getpid_r>:
 800be3c:	f7f5 bc1c 	b.w	8001678 <_getpid>

0800be40 <_fstat_r>:
 800be40:	b538      	push	{r3, r4, r5, lr}
 800be42:	4d07      	ldr	r5, [pc, #28]	; (800be60 <_fstat_r+0x20>)
 800be44:	2300      	movs	r3, #0
 800be46:	4604      	mov	r4, r0
 800be48:	4608      	mov	r0, r1
 800be4a:	4611      	mov	r1, r2
 800be4c:	602b      	str	r3, [r5, #0]
 800be4e:	f7f5 fc5e 	bl	800170e <_fstat>
 800be52:	1c43      	adds	r3, r0, #1
 800be54:	d102      	bne.n	800be5c <_fstat_r+0x1c>
 800be56:	682b      	ldr	r3, [r5, #0]
 800be58:	b103      	cbz	r3, 800be5c <_fstat_r+0x1c>
 800be5a:	6023      	str	r3, [r4, #0]
 800be5c:	bd38      	pop	{r3, r4, r5, pc}
 800be5e:	bf00      	nop
 800be60:	20003378 	.word	0x20003378

0800be64 <_isatty_r>:
 800be64:	b538      	push	{r3, r4, r5, lr}
 800be66:	4d06      	ldr	r5, [pc, #24]	; (800be80 <_isatty_r+0x1c>)
 800be68:	2300      	movs	r3, #0
 800be6a:	4604      	mov	r4, r0
 800be6c:	4608      	mov	r0, r1
 800be6e:	602b      	str	r3, [r5, #0]
 800be70:	f7f5 fc5d 	bl	800172e <_isatty>
 800be74:	1c43      	adds	r3, r0, #1
 800be76:	d102      	bne.n	800be7e <_isatty_r+0x1a>
 800be78:	682b      	ldr	r3, [r5, #0]
 800be7a:	b103      	cbz	r3, 800be7e <_isatty_r+0x1a>
 800be7c:	6023      	str	r3, [r4, #0]
 800be7e:	bd38      	pop	{r3, r4, r5, pc}
 800be80:	20003378 	.word	0x20003378

0800be84 <_malloc_usable_size_r>:
 800be84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be88:	1f18      	subs	r0, r3, #4
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	bfbc      	itt	lt
 800be8e:	580b      	ldrlt	r3, [r1, r0]
 800be90:	18c0      	addlt	r0, r0, r3
 800be92:	4770      	bx	lr

0800be94 <_init>:
 800be94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be96:	bf00      	nop
 800be98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be9a:	bc08      	pop	{r3}
 800be9c:	469e      	mov	lr, r3
 800be9e:	4770      	bx	lr

0800bea0 <_fini>:
 800bea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bea2:	bf00      	nop
 800bea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea6:	bc08      	pop	{r3}
 800bea8:	469e      	mov	lr, r3
 800beaa:	4770      	bx	lr

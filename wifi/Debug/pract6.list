
pract6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a644  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a968  0800a968  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a970  0800a970  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a970  0800a970  0001a970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a974  0800a974  0001a974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800a978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000221c  200000a8  0800aa20  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022c4  0800aa20  000222c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ca3d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052f4  00000000  00000000  0004cb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  00051e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a8  00000000  00000000  000543c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006fc2  00000000  00000000  00056768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002980f  00000000  00000000  0005d72a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010cf7a  00000000  00000000  00086f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00193eb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a9c8  00000000  00000000  00193f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a7bc 	.word	0x0800a7bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800a7bc 	.word	0x0800a7bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800057c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000580:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d013      	beq.n	80005b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800058c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000590:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000594:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000598:	2b00      	cmp	r3, #0
 800059a:	d00b      	beq.n	80005b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800059c:	e000      	b.n	80005a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800059e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d0f9      	beq.n	800059e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005b4:	687b      	ldr	r3, [r7, #4]
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
	...

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 f8cd 	bl	8001766 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f840 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fa0a 	bl	80009e8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80005d4:	f000 f89e 	bl	8000714 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80005d8:	f000 f8d4 	bl	8000784 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80005dc:	f000 f912 	bl	8000804 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80005e0:	f000 f936 	bl	8000850 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f972 	bl	80008cc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80005e8:	f000 f9a0 	bl	800092c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ec:	f000 f9ce 	bl	800098c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  status_acc = BSP_ACCELERO_Init_INT();
 80005f0:	f000 fbc8 	bl	8000d84 <BSP_ACCELERO_Init_INT>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <main+0x70>)
 80005fa:	701a      	strb	r2, [r3, #0]
  if (status_acc == ACCELERO_OK){
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <main+0x70>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d102      	bne.n	800060a <main+0x46>
	  printf("Acelerometro inicializado\r\n");
 8000604:	480c      	ldr	r0, [pc, #48]	; (8000638 <main+0x74>)
 8000606:	f009 fa7d 	bl	8009b04 <puts>
  }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800060a:	f005 ff55 	bl	80064b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (4, sizeof(uint8_t), &myQueue01_attributes);
 800060e:	4a0b      	ldr	r2, [pc, #44]	; (800063c <main+0x78>)
 8000610:	2101      	movs	r1, #1
 8000612:	2004      	movs	r0, #4
 8000614:	f006 f911 	bl	800683a <osMessageQueueNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a09      	ldr	r2, [pc, #36]	; (8000640 <main+0x7c>)
 800061c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sendAccel */
  sendAccelHandle = osThreadNew(sendAccel_func, NULL, &sendAccel_attributes);
 800061e:	4a09      	ldr	r2, [pc, #36]	; (8000644 <main+0x80>)
 8000620:	2100      	movs	r1, #0
 8000622:	4809      	ldr	r0, [pc, #36]	; (8000648 <main+0x84>)
 8000624:	f005 ffa7 	bl	8006576 <osThreadNew>
 8000628:	4603      	mov	r3, r0
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <main+0x88>)
 800062c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062e:	f005 ff67 	bl	8006500 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000632:	e7fe      	b.n	8000632 <main+0x6e>
 8000634:	20000814 	.word	0x20000814
 8000638:	0800a7ec 	.word	0x0800a7ec
 800063c:	0800a870 	.word	0x0800a870
 8000640:	20000810 	.word	0x20000810
 8000644:	0800a84c 	.word	0x0800a84c
 8000648:	08000e31 	.word	0x08000e31
 800064c:	2000080c 	.word	0x2000080c

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	; 0x58
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	2244      	movs	r2, #68	; 0x44
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f009 f92d 	bl	80098be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
 8000670:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000676:	f002 fd1f 	bl	80030b8 <HAL_PWREx_ControlVoltageScaling>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000680:	f000 fc0e 	bl	8000ea0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000684:	f002 fcfa 	bl	800307c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000688:	4b21      	ldr	r3, [pc, #132]	; (8000710 <SystemClock_Config+0xc0>)
 800068a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800068e:	4a20      	ldr	r2, [pc, #128]	; (8000710 <SystemClock_Config+0xc0>)
 8000690:	f023 0318 	bic.w	r3, r3, #24
 8000694:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000698:	2314      	movs	r3, #20
 800069a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006a8:	2360      	movs	r3, #96	; 0x60
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006b8:	2328      	movs	r3, #40	; 0x28
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fe15 	bl	80032fc <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006d8:	f000 fbe2 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f0:	463b      	mov	r3, r7
 80006f2:	2104      	movs	r1, #4
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 f9dd 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000700:	f000 fbce 	bl	8000ea0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000704:	f003 ff16 	bl	8004534 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000708:	bf00      	nop
 800070a:	3758      	adds	r7, #88	; 0x58
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000718:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_DFSDM1_Init+0x68>)
 800071a:	4a19      	ldr	r2, [pc, #100]	; (8000780 <MX_DFSDM1_Init+0x6c>)
 800071c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000720:	2201      	movs	r2, #1
 8000722:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000724:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_DFSDM1_Init+0x68>)
 800072c:	2202      	movs	r2, #2
 800072e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_DFSDM1_Init+0x68>)
 800073e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000742:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800074a:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_DFSDM1_Init+0x68>)
 800074c:	2204      	movs	r2, #4
 800074e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000752:	2200      	movs	r2, #0
 8000754:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000758:	2201      	movs	r2, #1
 800075a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_DFSDM1_Init+0x68>)
 800075e:	2200      	movs	r2, #0
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_DFSDM1_Init+0x68>)
 8000764:	2200      	movs	r2, #0
 8000766:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_DFSDM1_Init+0x68>)
 800076a:	f001 f93b 	bl	80019e4 <HAL_DFSDM_ChannelInit>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000774:	f000 fb94 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000c4 	.word	0x200000c4
 8000780:	40016020 	.word	0x40016020

08000784 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000788:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <MX_I2C2_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <MX_I2C2_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_I2C2_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <MX_I2C2_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <MX_I2C2_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_I2C2_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007c0:	f001 fcea 	bl	8002198 <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 fb69 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007d2:	f002 fa73 	bl	8002cbc <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 fb60 	bl	8000ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_I2C2_Init+0x74>)
 80007e4:	f002 fab5 	bl	8002d52 <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 fb57 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200000fc 	.word	0x200000fc
 80007fc:	40005800 	.word	0x40005800
 8000800:	10909cec 	.word	0x10909cec

08000804 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800080a:	4a10      	ldr	r2, [pc, #64]	; (800084c <MX_QUADSPI_Init+0x48>)
 800080c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000810:	2202      	movs	r2, #2
 8000812:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000816:	2204      	movs	r2, #4
 8000818:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800081c:	2210      	movs	r2, #16
 800081e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000820:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000822:	2217      	movs	r2, #23
 8000824:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000826:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_QUADSPI_Init+0x44>)
 800082e:	2200      	movs	r2, #0
 8000830:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_QUADSPI_Init+0x44>)
 8000834:	f002 fca6 	bl	8003184 <HAL_QSPI_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800083e:	f000 fb2f 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000150 	.word	0x20000150
 800084c:	a0001000 	.word	0xa0001000

08000850 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_SPI3_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI3_Init+0x74>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI3_Init+0x74>)
 800086a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800086e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI3_Init+0x74>)
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI3_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI3_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI3_Init+0x74>)
 800089e:	2207      	movs	r2, #7
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_SPI3_Init+0x74>)
 80008b0:	f004 f822 	bl	80048f8 <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 faf1 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000194 	.word	0x20000194
 80008c8:	40003c00 	.word	0x40003c00

080008cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART1_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x58>)
 8000910:	f004 fb66 	bl	8004fe0 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f000 fac1 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001f8 	.word	0x200001f8
 8000928:	40013800 	.word	0x40013800

0800092c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART3_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART3_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART3_UART_Init+0x58>)
 8000970:	f004 fb36 	bl	8004fe0 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 fa91 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000027c 	.word	0x2000027c
 8000988:	40004800 	.word	0x40004800

0800098c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000996:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2206      	movs	r2, #6
 800099c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2202      	movs	r2, #2
 80009a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2202      	movs	r2, #2
 80009a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009d0:	f002 fa0b 	bl	8002dea <HAL_PCD_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009da:	f000 fa61 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000300 	.word	0x20000300

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	; 0x28
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
 80009fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009fe:	4bbd      	ldr	r3, [pc, #756]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4abc      	ldr	r2, [pc, #752]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a04:	f043 0310 	orr.w	r3, r3, #16
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4bba      	ldr	r3, [pc, #744]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0310 	and.w	r3, r3, #16
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4bb7      	ldr	r3, [pc, #732]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	4ab6      	ldr	r2, [pc, #728]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a22:	4bb4      	ldr	r3, [pc, #720]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4bb1      	ldr	r3, [pc, #708]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4ab0      	ldr	r2, [pc, #704]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4bae      	ldr	r3, [pc, #696]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4bab      	ldr	r3, [pc, #684]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4aaa      	ldr	r2, [pc, #680]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4ba8      	ldr	r3, [pc, #672]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a5e:	4ba5      	ldr	r3, [pc, #660]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4aa4      	ldr	r2, [pc, #656]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a64:	f043 0308 	orr.w	r3, r3, #8
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4ba2      	ldr	r3, [pc, #648]	; (8000cf4 <MX_GPIO_Init+0x30c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0308 	and.w	r3, r3, #8
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000a7c:	489e      	ldr	r0, [pc, #632]	; (8000cf8 <MX_GPIO_Init+0x310>)
 8000a7e:	f001 fb5b 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f248 1104 	movw	r1, #33028	; 0x8104
 8000a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8c:	f001 fb54 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a90:	2200      	movs	r2, #0
 8000a92:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000a96:	4899      	ldr	r0, [pc, #612]	; (8000cfc <MX_GPIO_Init+0x314>)
 8000a98:	f001 fb4e 	bl	8002138 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000aa2:	4897      	ldr	r0, [pc, #604]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000aa4:	f001 fb48 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	4894      	ldr	r0, [pc, #592]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000ab0:	f001 fb42 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000aba:	4892      	ldr	r0, [pc, #584]	; (8000d04 <MX_GPIO_Init+0x31c>)
 8000abc:	f001 fb3c 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	488d      	ldr	r0, [pc, #564]	; (8000cfc <MX_GPIO_Init+0x314>)
 8000ac6:	f001 fb37 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	488a      	ldr	r0, [pc, #552]	; (8000cf8 <MX_GPIO_Init+0x310>)
 8000ad0:	f001 fb32 	bl	8002138 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ad4:	f240 1315 	movw	r3, #277	; 0x115
 8000ad8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ada:	2301      	movs	r3, #1
 8000adc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	4882      	ldr	r0, [pc, #520]	; (8000cf8 <MX_GPIO_Init+0x310>)
 8000aee:	f001 f885 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000af2:	236a      	movs	r3, #106	; 0x6a
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	487c      	ldr	r0, [pc, #496]	; (8000cf8 <MX_GPIO_Init+0x310>)
 8000b08:	f001 f878 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4878      	ldr	r0, [pc, #480]	; (8000d04 <MX_GPIO_Init+0x31c>)
 8000b24:	f001 f86a 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b28:	233f      	movs	r3, #63	; 0x3f
 8000b2a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b2c:	230b      	movs	r3, #11
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4872      	ldr	r0, [pc, #456]	; (8000d04 <MX_GPIO_Init+0x31c>)
 8000b3c:	f001 f85e 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000b40:	2303      	movs	r3, #3
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000b50:	2308      	movs	r3, #8
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f001 f84d 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000b62:	f248 1304 	movw	r3, #33028	; 0x8104
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f001 f83d 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b92:	2301      	movs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f001 f82c 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ba8:	230b      	movs	r3, #11
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f001 f81f 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000bbe:	23e0      	movs	r3, #224	; 0xe0
 8000bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bdc:	f001 f80e 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4841      	ldr	r0, [pc, #260]	; (8000cfc <MX_GPIO_Init+0x314>)
 8000bf6:	f001 f801 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	483b      	ldr	r0, [pc, #236]	; (8000cfc <MX_GPIO_Init+0x314>)
 8000c0e:	f000 fff5 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c12:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c16:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4834      	ldr	r0, [pc, #208]	; (8000cfc <MX_GPIO_Init+0x314>)
 8000c2c:	f000 ffe6 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c30:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c34:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	482e      	ldr	r0, [pc, #184]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000c48:	f000 ffd8 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000c4c:	f243 0381 	movw	r3, #12417	; 0x3081
 8000c50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4826      	ldr	r0, [pc, #152]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000c66:	f000 ffc9 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000c6a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c70:	2301      	movs	r3, #1
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7c:	f107 0314 	add.w	r3, r7, #20
 8000c80:	4619      	mov	r1, r3
 8000c82:	4820      	ldr	r0, [pc, #128]	; (8000d04 <MX_GPIO_Init+0x31c>)
 8000c84:	f000 ffba 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000c88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c8e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4819      	ldr	r0, [pc, #100]	; (8000d04 <MX_GPIO_Init+0x31c>)
 8000ca0:	f000 ffac 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb4:	2305      	movs	r3, #5
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4810      	ldr	r0, [pc, #64]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000cc0:	f000 ff9c 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000cc4:	2378      	movs	r3, #120	; 0x78
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd4:	2307      	movs	r3, #7
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4808      	ldr	r0, [pc, #32]	; (8000d00 <MX_GPIO_Init+0x318>)
 8000ce0:	f000 ff8c 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000ce4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ce8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cea:	2312      	movs	r3, #18
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e00a      	b.n	8000d08 <MX_GPIO_Init+0x320>
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48001000 	.word	0x48001000
 8000cfc:	48000400 	.word	0x48000400
 8000d00:	48000c00 	.word	0x48000c00
 8000d04:	48000800 	.word	0x48000800
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d0e:	2304      	movs	r3, #4
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <MX_GPIO_Init+0x360>)
 8000d1a:	f000 ff6f 	bl	8001bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2105      	movs	r1, #5
 8000d22:	2017      	movs	r0, #23
 8000d24:	f000 fe34 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d28:	2017      	movs	r0, #23
 8000d2a:	f000 fe4d 	bl	80019c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2105      	movs	r1, #5
 8000d32:	2028      	movs	r0, #40	; 0x28
 8000d34:	f000 fe2c 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d38:	2028      	movs	r0, #40	; 0x28
 8000d3a:	f000 fe45 	bl	80019c8 <HAL_NVIC_EnableIRQ>

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	; 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	48000400 	.word	0x48000400

08000d4c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	e009      	b.n	8000d72 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	1c5a      	adds	r2, r3, #1
 8000d62:	60ba      	str	r2, [r7, #8]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff fc04 	bl	8000574 <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	dbf1      	blt.n	8000d5e <_write+0x12>
	}
	return len;
 8000d7a:	687b      	ldr	r3, [r7, #4]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <BSP_ACCELERO_Init_INT>:
ACCELERO_StatusTypeDef BSP_ACCELERO_Init_INT(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
	ACCELERO_StatusTypeDef ret;
	ret = BSP_ACCELERO_Init();
 8000d8a:	f005 f9e3 	bl	8006154 <BSP_ACCELERO_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	if (ret == ACCELERO_OK)
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d12f      	bne.n	8000df8 <BSP_ACCELERO_Init_INT+0x74>
	{
		/* Initialize interruption*/
		uint8_t tmp;
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G);
 8000d98:	210b      	movs	r1, #11
 8000d9a:	20d4      	movs	r0, #212	; 0xd4
 8000d9c:	f005 f99e 	bl	80060dc <SENSOR_IO_Read>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000daa:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_DRDY_PULSE_CFG_G, tmp);
 8000dac:	79bb      	ldrb	r3, [r7, #6]
 8000dae:	461a      	mov	r2, r3
 8000db0:	210b      	movs	r1, #11
 8000db2:	20d4      	movs	r0, #212	; 0xd4
 8000db4:	f005 f978 	bl	80060a8 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL);
 8000db8:	210d      	movs	r1, #13
 8000dba:	20d4      	movs	r0, #212	; 0xd4
 8000dbc:	f005 f98e 	bl	80060dc <SENSOR_IO_Read>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71bb      	strb	r3, [r7, #6]
		tmp |=0b00000001;
 8000dc4:	79bb      	ldrb	r3, [r7, #6]
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_INT1_CTRL, tmp);
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	210d      	movs	r1, #13
 8000dd2:	20d4      	movs	r0, #212	; 0xd4
 8000dd4:	f005 f968 	bl	80060a8 <SENSOR_IO_Write>
		tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG);
 8000dd8:	211a      	movs	r1, #26
 8000dda:	20d4      	movs	r0, #212	; 0xd4
 8000ddc:	f005 f97e 	bl	80060dc <SENSOR_IO_Read>
 8000de0:	4603      	mov	r3, r0
 8000de2:	71bb      	strb	r3, [r7, #6]
		tmp |=0b10000000;
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dea:	71bb      	strb	r3, [r7, #6]
		SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_MASTER_CONFIG, tmp);
 8000dec:	79bb      	ldrb	r3, [r7, #6]
 8000dee:	461a      	mov	r2, r3
 8000df0:	211a      	movs	r1, #26
 8000df2:	20d4      	movs	r0, #212	; 0xd4
 8000df4:	f005 f958 	bl	80060a8 <SENSOR_IO_Write>
	}
	return ret;
 8000df8:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LSM6DSL_INT1_EXTI11_Pin)
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e14:	d105      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		/* Aquí escribiremos nuestra funcionalidad*/
		osThreadFlagsSet(sendAccelHandle,0x0001U);
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_GPIO_EXTI_Callback+0x28>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f005 fc3d 	bl	800669c <osThreadFlagsSet>
	}
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000080c 	.word	0x2000080c

08000e30 <sendAccel_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_sendAccel_func */
void sendAccel_func(void *argument)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t nticks = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
	int16_t DataXYZ[3];
	int16_t *pDataXYZ = DataXYZ;
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	613b      	str	r3, [r7, #16]
	/* Infinite loop */
	for(;;)
	{
		nticks = osKernelGetTickCount();
 8000e42:	f005 fb83 	bl	800654c <osKernelGetTickCount>
 8000e46:	6178      	str	r0, [r7, #20]
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000e48:	6938      	ldr	r0, [r7, #16]
 8000e4a:	f005 f9c1 	bl	80061d0 <BSP_ACCELERO_AccGetXYZ>
		printf("Tick: %ld	Eje x: %d	Eje y: %d	Eje z: %d\r\n",nticks,DataXYZ[0],DataXYZ[1],DataXYZ[2]);
 8000e4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000e52:	461a      	mov	r2, r3
 8000e54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	460b      	mov	r3, r1
 8000e62:	6979      	ldr	r1, [r7, #20]
 8000e64:	4804      	ldr	r0, [pc, #16]	; (8000e78 <sendAccel_func+0x48>)
 8000e66:	f008 fdc7 	bl	80099f8 <iprintf>
		osThreadFlagsWait(0x0001U, osFlagsWaitAny, pdMS_TO_TICKS(1000));
 8000e6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2001      	movs	r0, #1
 8000e72:	f005 fc61 	bl	8006738 <osThreadFlagsWait>
		nticks = osKernelGetTickCount();
 8000e76:	e7e4      	b.n	8000e42 <sendAccel_func+0x12>
 8000e78:	0800a808 	.word	0x0800a808

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 fc83 	bl	8001798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40001000 	.word	0x40001000

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <Error_Handler+0x8>
	...

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_MspInit+0x4c>)
 8000ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	603b      	str	r3, [r7, #0]
 8000ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	f06f 0001 	mvn.w	r0, #1
 8000eea:	f000 fd51 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0ac      	sub	sp, #176	; 0xb0
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2288      	movs	r2, #136	; 0x88
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f008 fcce 	bl	80098be <memset>
  if(DFSDM1_Init == 0)
 8000f22:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d142      	bne.n	8000fb0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000f2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f810 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000f46:	f7ff ffab 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f54:	6613      	str	r3, [r2, #96]	; 0x60
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a15      	ldr	r2, [pc, #84]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f68:	f043 0310 	orr.w	r3, r3, #16
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0310 	and.w	r3, r3, #16
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000f7a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f82:	2302      	movs	r3, #2
 8000f84:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000f94:	2306      	movs	r3, #6
 8000f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000fa2:	f000 fe2b 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a02      	ldr	r2, [pc, #8]	; (8000fb8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000fae:	6013      	str	r3, [r2, #0]
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	37b0      	adds	r7, #176	; 0xb0
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000818 	.word	0x20000818
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48001000 	.word	0x48001000

08000fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ac      	sub	sp, #176	; 0xb0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2288      	movs	r2, #136	; 0x88
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 fc6a 	bl	80098be <memset>
  if(hi2c->Instance==I2C2)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_I2C_MspInit+0xb0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13b      	bne.n	800106c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f002 ffad 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff ff48 	bl	8000ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 8001012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 800101e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001028:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800102c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001030:	2312      	movs	r3, #18
 8001032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001042:	2304      	movs	r3, #4
 8001044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104c:	4619      	mov	r1, r3
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <HAL_I2C_MspInit+0xb8>)
 8001050:	f000 fdd4 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 800105a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800105e:	6593      	str	r3, [r2, #88]	; 0x58
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <HAL_I2C_MspInit+0xb4>)
 8001062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001064:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37b0      	adds	r7, #176	; 0xb0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40005800 	.word	0x40005800
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_I2C_MspDeInit+0x3c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d10f      	bne.n	80010b2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_I2C_MspDeInit+0x40>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <HAL_I2C_MspDeInit+0x40>)
 8001098:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800109e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <HAL_I2C_MspDeInit+0x44>)
 80010a4:	f000 ff54 	bl	8001f50 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80010a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <HAL_I2C_MspDeInit+0x44>)
 80010ae:	f000 ff4f 	bl	8001f50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40005800 	.word	0x40005800
 80010c0:	40021000 	.word	0x40021000
 80010c4:	48000400 	.word	0x48000400

080010c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <HAL_QSPI_MspInit+0x7c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d128      	bne.n	800113c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 80010ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010ee:	4a16      	ldr	r2, [pc, #88]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 80010f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f4:	6513      	str	r3, [r2, #80]	; 0x50
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 80010f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_QSPI_MspInit+0x80>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800111a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800111e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800112c:	230a      	movs	r3, #10
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_QSPI_MspInit+0x84>)
 8001138:	f000 fd60 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	; 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	a0001000 	.word	0xa0001000
 8001148:	40021000 	.word	0x40021000
 800114c:	48001000 	.word	0x48001000

08001150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_SPI_MspInit+0x7c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d128      	bne.n	80011c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 8001178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117c:	6593      	str	r3, [r2, #88]	; 0x58
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001182:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 8001190:	f043 0304 	orr.w	r3, r3, #4
 8001194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <HAL_SPI_MspInit+0x80>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80011a2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b4:	2306      	movs	r3, #6
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <HAL_SPI_MspInit+0x84>)
 80011c0:	f000 fd1c 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80011c4:	bf00      	nop
 80011c6:	3728      	adds	r7, #40	; 0x28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40003c00 	.word	0x40003c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000800 	.word	0x48000800

080011d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0ae      	sub	sp, #184	; 0xb8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2288      	movs	r2, #136	; 0x88
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f008 fb60 	bl	80098be <memset>
  if(huart->Instance==USART1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_UART_MspInit+0x134>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d13b      	bne.n	8001280 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800120c:	2300      	movs	r3, #0
 800120e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4618      	mov	r0, r3
 8001216:	f002 fea3 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001220:	f7ff fe3e 	bl	8000ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001224:	4b3a      	ldr	r3, [pc, #232]	; (8001310 <HAL_UART_MspInit+0x138>)
 8001226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001228:	4a39      	ldr	r2, [pc, #228]	; (8001310 <HAL_UART_MspInit+0x138>)
 800122a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122e:	6613      	str	r3, [r2, #96]	; 0x60
 8001230:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_UART_MspInit+0x138>)
 8001232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123c:	4b34      	ldr	r3, [pc, #208]	; (8001310 <HAL_UART_MspInit+0x138>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001240:	4a33      	ldr	r2, [pc, #204]	; (8001310 <HAL_UART_MspInit+0x138>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <HAL_UART_MspInit+0x138>)
 800124a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001254:	23c0      	movs	r3, #192	; 0xc0
 8001256:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800126c:	2307      	movs	r3, #7
 800126e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001276:	4619      	mov	r1, r3
 8001278:	4826      	ldr	r0, [pc, #152]	; (8001314 <HAL_UART_MspInit+0x13c>)
 800127a:	f000 fcbf 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800127e:	e040      	b.n	8001302 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <HAL_UART_MspInit+0x140>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13b      	bne.n	8001302 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800128a:	2304      	movs	r3, #4
 800128c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800128e:	2300      	movs	r3, #0
 8001290:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4618      	mov	r0, r3
 8001298:	f002 fe62 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 80012a2:	f7ff fdfd 	bl	8000ea0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a6:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012c4:	f043 0308 	orr.w	r3, r3, #8
 80012c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <HAL_UART_MspInit+0x138>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ce:	f003 0308 	and.w	r3, r3, #8
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80012d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012f6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	; (800131c <HAL_UART_MspInit+0x144>)
 80012fe:	f000 fc7d 	bl	8001bfc <HAL_GPIO_Init>
}
 8001302:	bf00      	nop
 8001304:	37b8      	adds	r7, #184	; 0xb8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40013800 	.word	0x40013800
 8001310:	40021000 	.word	0x40021000
 8001314:	48000400 	.word	0x48000400
 8001318:	40004800 	.word	0x40004800
 800131c:	48000c00 	.word	0x48000c00

08001320 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b0ac      	sub	sp, #176	; 0xb0
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2288      	movs	r2, #136	; 0x88
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f008 fabc 	bl	80098be <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800134e:	d17c      	bne.n	800144a <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800135a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800135e:	2301      	movs	r3, #1
 8001360:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001366:	2318      	movs	r3, #24
 8001368:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800136a:	2307      	movs	r3, #7
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001376:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f002 fded 	bl	8003f60 <HAL_RCCEx_PeriphCLKConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 800138c:	f7ff fd88 	bl	8000ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_PCD_MspInit+0x134>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <HAL_PCD_MspInit+0x134>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <HAL_PCD_MspInit+0x134>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80013a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f000 fc19 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80013ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80013ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013e4:	230a      	movs	r3, #10
 80013e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 fc02 	bl	8001bfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013f8:	4b16      	ldr	r3, [pc, #88]	; (8001454 <HAL_PCD_MspInit+0x134>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	4a15      	ldr	r2, [pc, #84]	; (8001454 <HAL_PCD_MspInit+0x134>)
 80013fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001402:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_PCD_MspInit+0x134>)
 8001406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_PCD_MspInit+0x134>)
 8001412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d114      	bne.n	8001446 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_PCD_MspInit+0x134>)
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_PCD_MspInit+0x134>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6593      	str	r3, [r2, #88]	; 0x58
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_PCD_MspInit+0x134>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001434:	f001 fe96 	bl	8003164 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_PCD_MspInit+0x134>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_PCD_MspInit+0x134>)
 800143e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001442:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001444:	e001      	b.n	800144a <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001446:	f001 fe8d 	bl	8003164 <HAL_PWREx_EnableVddUSB>
}
 800144a:	bf00      	nop
 800144c:	37b0      	adds	r7, #176	; 0xb0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	; 0x38
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001466:	4b34      	ldr	r3, [pc, #208]	; (8001538 <HAL_InitTick+0xe0>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	4a33      	ldr	r2, [pc, #204]	; (8001538 <HAL_InitTick+0xe0>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6593      	str	r3, [r2, #88]	; 0x58
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <HAL_InitTick+0xe0>)
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800147e:	f107 0210 	add.w	r2, r7, #16
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4611      	mov	r1, r2
 8001488:	4618      	mov	r0, r3
 800148a:	f002 fcd7 	bl	8003e3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	2b00      	cmp	r3, #0
 8001496:	d103      	bne.n	80014a0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001498:	f002 fca4 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 800149c:	6378      	str	r0, [r7, #52]	; 0x34
 800149e:	e004      	b.n	80014aa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014a0:	f002 fca0 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 80014a4:	4603      	mov	r3, r0
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ac:	4a23      	ldr	r2, [pc, #140]	; (800153c <HAL_InitTick+0xe4>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	3b01      	subs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_InitTick+0xe8>)
 80014ba:	4a22      	ldr	r2, [pc, #136]	; (8001544 <HAL_InitTick+0xec>)
 80014bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_InitTick+0xe8>)
 80014c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80014c6:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <HAL_InitTick+0xe8>)
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <HAL_InitTick+0xe8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d2:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <HAL_InitTick+0xe8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d8:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_InitTick+0xe8>)
 80014da:	2200      	movs	r2, #0
 80014dc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80014de:	4818      	ldr	r0, [pc, #96]	; (8001540 <HAL_InitTick+0xe8>)
 80014e0:	f003 faad 	bl	8004a3e <HAL_TIM_Base_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d11b      	bne.n	800152a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014f2:	4813      	ldr	r0, [pc, #76]	; (8001540 <HAL_InitTick+0xe8>)
 80014f4:	f003 fb04 	bl	8004b00 <HAL_TIM_Base_Start_IT>
 80014f8:	4603      	mov	r3, r0
 80014fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001502:	2b00      	cmp	r3, #0
 8001504:	d111      	bne.n	800152a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001506:	2036      	movs	r0, #54	; 0x36
 8001508:	f000 fa5e 	bl	80019c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b0f      	cmp	r3, #15
 8001510:	d808      	bhi.n	8001524 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001512:	2200      	movs	r2, #0
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	2036      	movs	r0, #54	; 0x36
 8001518:	f000 fa3a 	bl	8001990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800151c:	4a0a      	ldr	r2, [pc, #40]	; (8001548 <HAL_InitTick+0xf0>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e002      	b.n	800152a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800152a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800152e:	4618      	mov	r0, r3
 8001530:	3738      	adds	r7, #56	; 0x38
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	431bde83 	.word	0x431bde83
 8001540:	2000081c 	.word	0x2000081c
 8001544:	40001000 	.word	0x40001000
 8001548:	20000004 	.word	0x20000004

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800157c:	2020      	movs	r0, #32
 800157e:	f000 fdf3 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001582:	2040      	movs	r0, #64	; 0x40
 8001584:	f000 fdf0 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001588:	2080      	movs	r0, #128	; 0x80
 800158a:	f000 fded 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800158e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001592:	f000 fde9 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}

0800159a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800159e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015a2:	f000 fde1 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80015a6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015aa:	f000 fddd 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80015ae:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015b2:	f000 fdd9 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80015b6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80015ba:	f000 fdd5 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80015be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015c2:	f000 fdd1 	bl	8002168 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d0:	4802      	ldr	r0, [pc, #8]	; (80015dc <TIM6_DAC_IRQHandler+0x10>)
 80015d2:	f003 fb05 	bl	8004be0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2000081c 	.word	0x2000081c

080015e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	e00a      	b.n	8001608 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f2:	f3af 8000 	nop.w
 80015f6:	4601      	mov	r1, r0
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	1c5a      	adds	r2, r3, #1
 80015fc:	60ba      	str	r2, [r7, #8]
 80015fe:	b2ca      	uxtb	r2, r1
 8001600:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	3301      	adds	r3, #1
 8001606:	617b      	str	r3, [r7, #20]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbf0      	blt.n	80015f2 <_read+0x12>
  }

  return len;
 8001610:	687b      	ldr	r3, [r7, #4]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <_close>:
  }
  return len;
}

int _close(int file)
{
 800161a:	b480      	push	{r7}
 800161c:	b083      	sub	sp, #12
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001626:	4618      	mov	r0, r3
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
 800163a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001642:	605a      	str	r2, [r3, #4]
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_isatty>:

int _isatty(int file)
{
 8001652:	b480      	push	{r7}
 8001654:	b083      	sub	sp, #12
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
	...

08001684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <_sbrk+0x5c>)
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <_sbrk+0x60>)
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001698:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <_sbrk+0x64>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a0:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <_sbrk+0x64>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	; (80016ec <_sbrk+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016a6:	4b10      	ldr	r3, [pc, #64]	; (80016e8 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d207      	bcs.n	80016c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b4:	f007 ffd2 	bl	800965c <__errno>
 80016b8:	4603      	mov	r3, r0
 80016ba:	220c      	movs	r2, #12
 80016bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016be:	f04f 33ff 	mov.w	r3, #4294967295
 80016c2:	e009      	b.n	80016d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ca:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <_sbrk+0x64>)
 80016d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3718      	adds	r7, #24
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20018000 	.word	0x20018000
 80016e4:	00000400 	.word	0x00000400
 80016e8:	20000868 	.word	0x20000868
 80016ec:	200022c8 	.word	0x200022c8

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f008 f887 	bl	8009854 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001746:	f7fe ff3d 	bl	80005c4 <main>

0800174a <LoopForever>:

LoopForever:
    b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800174c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001758:	0800a978 	.word	0x0800a978
  ldr r2, =_sbss
 800175c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001760:	200022c4 	.word	0x200022c4

08001764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_2_IRQHandler>

08001766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001770:	2003      	movs	r0, #3
 8001772:	f000 f902 	bl	800197a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001776:	200f      	movs	r0, #15
 8001778:	f7ff fe6e 	bl	8001458 <HAL_InitTick>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d002      	beq.n	8001788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e001      	b.n	800178c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001788:	f7ff fb90 	bl	8000eac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800178c:	79fb      	ldrb	r3, [r7, #7]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x20>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_IncTick+0x24>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_IncTick+0x24>)
 80017aa:	6013      	str	r3, [r2, #0]
}
 80017ac:	bf00      	nop
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000008 	.word	0x20000008
 80017bc:	2000086c 	.word	0x2000086c

080017c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  return uwTick;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <HAL_GetTick+0x14>)
 80017c6:	681b      	ldr	r3, [r3, #0]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	2000086c 	.word	0x2000086c

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f7ff ffee 	bl	80017c0 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f7ff ffde 	bl	80017c0 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000008 	.word	0x20000008

08001820 <__NVIC_SetPriorityGrouping>:
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ff4c 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b086      	sub	sp, #24
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019a2:	f7ff ff61 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019a6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	f7ff ffb1 	bl	8001914 <NVIC_EncodePriority>
 80019b2:	4602      	mov	r2, r0
 80019b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b8:	4611      	mov	r1, r2
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff ff80 	bl	80018c0 <__NVIC_SetPriority>
}
 80019c0:	bf00      	nop
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff ff54 	bl	8001884 <__NVIC_EnableIRQ>
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0ac      	b.n	8001b50 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f8b2 	bl	8001b64 <DFSDM_GetChannelFromInstance>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4a55      	ldr	r2, [pc, #340]	; (8001b58 <HAL_DFSDM_ChannelInit+0x174>)
 8001a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e09f      	b.n	8001b50 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff fa73 	bl	8000efc <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001a16:	4b51      	ldr	r3, [pc, #324]	; (8001b5c <HAL_DFSDM_ChannelInit+0x178>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	4a4f      	ldr	r2, [pc, #316]	; (8001b5c <HAL_DFSDM_ChannelInit+0x178>)
 8001a1e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001a20:	4b4e      	ldr	r3, [pc, #312]	; (8001b5c <HAL_DFSDM_ChannelInit+0x178>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d125      	bne.n	8001a74 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001a28:	4b4d      	ldr	r3, [pc, #308]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4c      	ldr	r2, [pc, #304]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a2e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001a32:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001a34:	4b4a      	ldr	r3, [pc, #296]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4948      	ldr	r1, [pc, #288]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001a42:	4b47      	ldr	r3, [pc, #284]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a46      	ldr	r2, [pc, #280]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a48:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001a4c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	791b      	ldrb	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d108      	bne.n	8001a68 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	041b      	lsls	r3, r3, #16
 8001a62:	493f      	ldr	r1, [pc, #252]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <HAL_DFSDM_ChannelInit+0x17c>)
 8001a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001a72:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001a82:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6819      	ldr	r1, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a92:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001a98:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 020f 	bic.w	r2, r2, #15
 8001ab0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6819      	ldr	r1, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001ad8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f002 0207 	and.w	r2, r2, #7
 8001b04:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b30:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 f810 	bl	8001b64 <DFSDM_GetChannelFromInstance>
 8001b44:	4602      	mov	r2, r0
 8001b46:	4904      	ldr	r1, [pc, #16]	; (8001b58 <HAL_DFSDM_ChannelInit+0x174>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000874 	.word	0x20000874
 8001b5c:	20000870 	.word	0x20000870
 8001b60:	40016000 	.word	0x40016000

08001b64 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a1c      	ldr	r2, [pc, #112]	; (8001be0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d102      	bne.n	8001b7a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e02b      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <DFSDM_GetChannelFromInstance+0x80>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d102      	bne.n	8001b88 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	e024      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <DFSDM_GetChannelFromInstance+0x84>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d102      	bne.n	8001b96 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001b90:	2302      	movs	r3, #2
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e01d      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <DFSDM_GetChannelFromInstance+0x88>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d102      	bne.n	8001ba4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e016      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a12      	ldr	r2, [pc, #72]	; (8001bf0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d102      	bne.n	8001bb2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001bac:	2305      	movs	r3, #5
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	e00f      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <DFSDM_GetChannelFromInstance+0x90>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d102      	bne.n	8001bc0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001bba:	2306      	movs	r3, #6
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	e008      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <DFSDM_GetChannelFromInstance+0x94>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d102      	bne.n	8001bce <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001bc8:	2307      	movs	r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	e001      	b.n	8001bd2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40016000 	.word	0x40016000
 8001be4:	40016020 	.word	0x40016020
 8001be8:	40016040 	.word	0x40016040
 8001bec:	40016080 	.word	0x40016080
 8001bf0:	400160a0 	.word	0x400160a0
 8001bf4:	400160c0 	.word	0x400160c0
 8001bf8:	400160e0 	.word	0x400160e0

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b087      	sub	sp, #28
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e17f      	b.n	8001f0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 8171 	beq.w	8001f06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d005      	beq.n	8001c3c <HAL_GPIO_Init+0x40>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d130      	bne.n	8001c9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c72:	2201      	movs	r2, #1
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 0201 	and.w	r2, r3, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 0303 	and.w	r3, r3, #3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d118      	bne.n	8001cdc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	693a      	ldr	r2, [r7, #16]
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	6939      	ldr	r1, [r7, #16]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80ac 	beq.w	8001f06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db2:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	6613      	str	r3, [r2, #96]	; 0x60
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x330>)
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc6:	4a5a      	ldr	r2, [pc, #360]	; (8001f30 <HAL_GPIO_Init+0x334>)
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	089b      	lsrs	r3, r3, #2
 8001dcc:	3302      	adds	r3, #2
 8001dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	f003 0303 	and.w	r3, r3, #3
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	220f      	movs	r2, #15
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df0:	d025      	beq.n	8001e3e <HAL_GPIO_Init+0x242>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_GPIO_Init+0x338>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d01f      	beq.n	8001e3a <HAL_GPIO_Init+0x23e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_GPIO_Init+0x33c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d019      	beq.n	8001e36 <HAL_GPIO_Init+0x23a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x340>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d013      	beq.n	8001e32 <HAL_GPIO_Init+0x236>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x344>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00d      	beq.n	8001e2e <HAL_GPIO_Init+0x232>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_GPIO_Init+0x348>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d007      	beq.n	8001e2a <HAL_GPIO_Init+0x22e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x34c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d101      	bne.n	8001e26 <HAL_GPIO_Init+0x22a>
 8001e22:	2306      	movs	r3, #6
 8001e24:	e00c      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e26:	2307      	movs	r3, #7
 8001e28:	e00a      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	e008      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e32:	2303      	movs	r3, #3
 8001e34:	e004      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e36:	2302      	movs	r3, #2
 8001e38:	e002      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e000      	b.n	8001e40 <HAL_GPIO_Init+0x244>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	f002 0203 	and.w	r2, r2, #3
 8001e46:	0092      	lsls	r2, r2, #2
 8001e48:	4093      	lsls	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_GPIO_Init+0x334>)
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	089b      	lsrs	r3, r3, #2
 8001e56:	3302      	adds	r3, #2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e82:	4a32      	ldr	r2, [pc, #200]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eac:	4a27      	ldr	r2, [pc, #156]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eb2:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed6:	4a1d      	ldr	r2, [pc, #116]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_GPIO_Init+0x350>)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f47f ae78 	bne.w	8001c0c <HAL_GPIO_Init+0x10>
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	371c      	adds	r7, #28
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	48001000 	.word	0x48001000
 8001f44:	48001400 	.word	0x48001400
 8001f48:	48001800 	.word	0x48001800
 8001f4c:	40010400 	.word	0x40010400

08001f50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f5e:	e0cd      	b.n	80020fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f60:	2201      	movs	r2, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80c0 	beq.w	80020f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f76:	4a68      	ldr	r2, [pc, #416]	; (8002118 <HAL_GPIO_DeInit+0x1c8>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4013      	ands	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f9e:	d025      	beq.n	8001fec <HAL_GPIO_DeInit+0x9c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a5e      	ldr	r2, [pc, #376]	; (800211c <HAL_GPIO_DeInit+0x1cc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d01f      	beq.n	8001fe8 <HAL_GPIO_DeInit+0x98>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	4a5d      	ldr	r2, [pc, #372]	; (8002120 <HAL_GPIO_DeInit+0x1d0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d019      	beq.n	8001fe4 <HAL_GPIO_DeInit+0x94>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_GPIO_DeInit+0x1d4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_GPIO_DeInit+0x90>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_GPIO_DeInit+0x1d8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_DeInit+0x8c>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_DeInit+0x1dc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_DeInit+0x88>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_GPIO_DeInit+0x1e0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_DeInit+0x84>
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	e00c      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	e00a      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fd8:	2305      	movs	r3, #5
 8001fda:	e008      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fdc:	2304      	movs	r3, #4
 8001fde:	e006      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e004      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e002      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_GPIO_DeInit+0x9e>
 8001fec:	2300      	movs	r3, #0
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	f002 0203 	and.w	r2, r2, #3
 8001ff4:	0092      	lsls	r2, r2, #2
 8001ff6:	4093      	lsls	r3, r2
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d132      	bne.n	8002064 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	43db      	mvns	r3, r3
 8002006:	494b      	ldr	r1, [pc, #300]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 8002008:	4013      	ands	r3, r2
 800200a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800200c:	4b49      	ldr	r3, [pc, #292]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	43db      	mvns	r3, r3
 8002014:	4947      	ldr	r1, [pc, #284]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 8002016:	4013      	ands	r3, r2
 8002018:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	4944      	ldr	r1, [pc, #272]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 8002024:	4013      	ands	r3, r2
 8002026:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002028:	4b42      	ldr	r3, [pc, #264]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	4940      	ldr	r1, [pc, #256]	; (8002134 <HAL_GPIO_DeInit+0x1e4>)
 8002032:	4013      	ands	r3, r2
 8002034:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	220f      	movs	r2, #15
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_GPIO_DeInit+0x1c8>)
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43da      	mvns	r2, r3
 8002056:	4830      	ldr	r0, [pc, #192]	; (8002118 <HAL_GPIO_DeInit+0x1c8>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	089b      	lsrs	r3, r3, #2
 800205c:	400a      	ands	r2, r1
 800205e:	3302      	adds	r3, #2
 8002060:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	2103      	movs	r1, #3
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	08da      	lsrs	r2, r3, #3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3208      	adds	r2, #8
 8002080:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	220f      	movs	r2, #15
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	697a      	ldr	r2, [r7, #20]
 8002096:	08d2      	lsrs	r2, r2, #3
 8002098:	4019      	ands	r1, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2103      	movs	r1, #3
 80020ac:	fa01 f303 	lsl.w	r3, r1, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	2101      	movs	r1, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	401a      	ands	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2103      	movs	r1, #3
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	401a      	ands	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020e6:	2101      	movs	r1, #1
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	3301      	adds	r3, #1
 80020fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	f47f af2b 	bne.w	8001f60 <HAL_GPIO_DeInit+0x10>
  }
}
 800210a:	bf00      	nop
 800210c:	bf00      	nop
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40010000 	.word	0x40010000
 800211c:	48000400 	.word	0x48000400
 8002120:	48000800 	.word	0x48000800
 8002124:	48000c00 	.word	0x48000c00
 8002128:	48001000 	.word	0x48001000
 800212c:	48001400 	.word	0x48001400
 8002130:	48001800 	.word	0x48001800
 8002134:	40010400 	.word	0x40010400

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002154:	e002      	b.n	800215c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002156:	887a      	ldrh	r2, [r7, #2]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	4013      	ands	r3, r2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d006      	beq.n	800218c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002180:	88fb      	ldrh	r3, [r7, #6]
 8002182:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fe3c 	bl	8000e04 <HAL_GPIO_EXTI_Callback>
  }
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40010400 	.word	0x40010400

08002198 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e081      	b.n	80022ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d106      	bne.n	80021c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f7fe ff00 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2224      	movs	r2, #36	; 0x24
 80021c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e006      	b.n	8002220 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800221e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b02      	cmp	r3, #2
 8002226:	d104      	bne.n	8002232 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002230:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69d9      	ldr	r1, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e021      	b.n	800230c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f7fe fecd 	bl	8001080 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	4608      	mov	r0, r1
 800231e:	4611      	mov	r1, r2
 8002320:	461a      	mov	r2, r3
 8002322:	4603      	mov	r3, r0
 8002324:	817b      	strh	r3, [r7, #10]
 8002326:	460b      	mov	r3, r1
 8002328:	813b      	strh	r3, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	f040 80f9 	bne.w	800252e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d002      	beq.n	8002348 <HAL_I2C_Mem_Write+0x34>
 8002342:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0ed      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_I2C_Mem_Write+0x4e>
 800235e:	2302      	movs	r3, #2
 8002360:	e0e6      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800236a:	f7ff fa29 	bl	80017c0 <HAL_GetTick>
 800236e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2319      	movs	r3, #25
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fac3 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0d1      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2221      	movs	r2, #33	; 0x21
 8002390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2240      	movs	r2, #64	; 0x40
 8002398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6a3a      	ldr	r2, [r7, #32]
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b4:	88f8      	ldrh	r0, [r7, #6]
 80023b6:	893a      	ldrh	r2, [r7, #8]
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	4603      	mov	r3, r0
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9d3 	bl	8002770 <I2C_RequestMemoryWrite>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0a9      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	2bff      	cmp	r3, #255	; 0xff
 80023e4:	d90e      	bls.n	8002404 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	22ff      	movs	r2, #255	; 0xff
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	8979      	ldrh	r1, [r7, #10]
 80023f4:	2300      	movs	r3, #0
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fc2b 	bl	8002c58 <I2C_TransferConfig>
 8002402:	e00f      	b.n	8002424 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29a      	uxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002412:	b2da      	uxtb	r2, r3
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	2300      	movs	r3, #0
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 fc1a 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 faad 	bl	8002988 <I2C_WaitOnTXISFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e07b      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d034      	beq.n	80024dc <HAL_I2C_Mem_Write+0x1c8>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b00      	cmp	r3, #0
 8002478:	d130      	bne.n	80024dc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	2200      	movs	r2, #0
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fa3f 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d001      	beq.n	8002494 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e04d      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2bff      	cmp	r3, #255	; 0xff
 800249c:	d90e      	bls.n	80024bc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	22ff      	movs	r2, #255	; 0xff
 80024a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	8979      	ldrh	r1, [r7, #10]
 80024ac:	2300      	movs	r3, #0
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fbcf 	bl	8002c58 <I2C_TransferConfig>
 80024ba:	e00f      	b.n	80024dc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	8979      	ldrh	r1, [r7, #10]
 80024ce:	2300      	movs	r3, #0
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fbbe 	bl	8002c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d19e      	bne.n	8002424 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fa8c 	bl	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e01a      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2220      	movs	r2, #32
 8002500:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_I2C_Mem_Write+0x224>)
 800250e:	400b      	ands	r3, r1
 8002510:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2220      	movs	r2, #32
 8002516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800252e:	2302      	movs	r3, #2
  }
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	fe00e800 	.word	0xfe00e800

0800253c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b088      	sub	sp, #32
 8002540:	af02      	add	r7, sp, #8
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4603      	mov	r3, r0
 800254c:	817b      	strh	r3, [r7, #10]
 800254e:	460b      	mov	r3, r1
 8002550:	813b      	strh	r3, [r7, #8]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b20      	cmp	r3, #32
 8002560:	f040 80fd 	bne.w	800275e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002564:	6a3b      	ldr	r3, [r7, #32]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d002      	beq.n	8002570 <HAL_I2C_Mem_Read+0x34>
 800256a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d105      	bne.n	800257c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002576:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e0f1      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_I2C_Mem_Read+0x4e>
 8002586:	2302      	movs	r3, #2
 8002588:	e0ea      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002592:	f7ff f915 	bl	80017c0 <HAL_GetTick>
 8002596:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2319      	movs	r3, #25
 800259e:	2201      	movs	r2, #1
 80025a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 f9af 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e0d5      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2222      	movs	r2, #34	; 0x22
 80025b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2240      	movs	r2, #64	; 0x40
 80025c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2200      	movs	r2, #0
 80025da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025dc:	88f8      	ldrh	r0, [r7, #6]
 80025de:	893a      	ldrh	r2, [r7, #8]
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	4603      	mov	r3, r0
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f913 	bl	8002818 <I2C_RequestMemoryRead>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d005      	beq.n	8002604 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0ad      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002608:	b29b      	uxth	r3, r3
 800260a:	2bff      	cmp	r3, #255	; 0xff
 800260c:	d90e      	bls.n	800262c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	22ff      	movs	r2, #255	; 0xff
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002618:	b2da      	uxtb	r2, r3
 800261a:	8979      	ldrh	r1, [r7, #10]
 800261c:	4b52      	ldr	r3, [pc, #328]	; (8002768 <HAL_I2C_Mem_Read+0x22c>)
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 fb17 	bl	8002c58 <I2C_TransferConfig>
 800262a:	e00f      	b.n	800264c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263a:	b2da      	uxtb	r2, r3
 800263c:	8979      	ldrh	r1, [r7, #10]
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_I2C_Mem_Read+0x22c>)
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb06 	bl	8002c58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002652:	2200      	movs	r2, #0
 8002654:	2104      	movs	r1, #4
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f956 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e07c      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002682:	3b01      	subs	r3, #1
 8002684:	b29a      	uxth	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d034      	beq.n	800270c <HAL_I2C_Mem_Read+0x1d0>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d130      	bne.n	800270c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	2200      	movs	r2, #0
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f927 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e04d      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d90e      	bls.n	80026ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	22ff      	movs	r2, #255	; 0xff
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	8979      	ldrh	r1, [r7, #10]
 80026dc:	2300      	movs	r3, #0
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026e4:	68f8      	ldr	r0, [r7, #12]
 80026e6:	f000 fab7 	bl	8002c58 <I2C_TransferConfig>
 80026ea:	e00f      	b.n	800270c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	8979      	ldrh	r1, [r7, #10]
 80026fe:	2300      	movs	r3, #0
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 faa6 	bl	8002c58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d19a      	bne.n	800264c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f974 	bl	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e01a      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2220      	movs	r2, #32
 8002730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_I2C_Mem_Read+0x230>)
 800273e:	400b      	ands	r3, r1
 8002740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	80002400 	.word	0x80002400
 800276c:	fe00e800 	.word	0xfe00e800

08002770 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4603      	mov	r3, r0
 8002780:	817b      	strh	r3, [r7, #10]
 8002782:	460b      	mov	r3, r1
 8002784:	813b      	strh	r3, [r7, #8]
 8002786:	4613      	mov	r3, r2
 8002788:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	8979      	ldrh	r1, [r7, #10]
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <I2C_RequestMemoryWrite+0xa4>)
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fa5d 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	69b9      	ldr	r1, [r7, #24]
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f8f0 	bl	8002988 <I2C_WaitOnTXISFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e02c      	b.n	800280c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027b2:	88fb      	ldrh	r3, [r7, #6]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d105      	bne.n	80027c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027b8:	893b      	ldrh	r3, [r7, #8]
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	629a      	str	r2, [r3, #40]	; 0x28
 80027c2:	e015      	b.n	80027f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027c4:	893b      	ldrh	r3, [r7, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	69b9      	ldr	r1, [r7, #24]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f8d6 	bl	8002988 <I2C_WaitOnTXISFlagUntilTimeout>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e012      	b.n	800280c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	2200      	movs	r2, #0
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f884 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	80002000 	.word	0x80002000

08002818 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	4608      	mov	r0, r1
 8002822:	4611      	mov	r1, r2
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	817b      	strh	r3, [r7, #10]
 800282a:	460b      	mov	r3, r1
 800282c:	813b      	strh	r3, [r7, #8]
 800282e:	4613      	mov	r3, r2
 8002830:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002832:	88fb      	ldrh	r3, [r7, #6]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	8979      	ldrh	r1, [r7, #10]
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <I2C_RequestMemoryRead+0xa4>)
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	2300      	movs	r3, #0
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 fa0a 	bl	8002c58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	69b9      	ldr	r1, [r7, #24]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 f89d 	bl	8002988 <I2C_WaitOnTXISFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e02c      	b.n	80028b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002858:	88fb      	ldrh	r3, [r7, #6]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d105      	bne.n	800286a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800285e:	893b      	ldrh	r3, [r7, #8]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
 8002868:	e015      	b.n	8002896 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800286a:	893b      	ldrh	r3, [r7, #8]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29b      	uxth	r3, r3
 8002870:	b2da      	uxtb	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002878:	69fa      	ldr	r2, [r7, #28]
 800287a:	69b9      	ldr	r1, [r7, #24]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f883 	bl	8002988 <I2C_WaitOnTXISFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e012      	b.n	80028b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800288c:	893b      	ldrh	r3, [r7, #8]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	2200      	movs	r2, #0
 800289e:	2140      	movs	r1, #64	; 0x40
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f831 	bl	8002908 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	80002000 	.word	0x80002000

080028c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d103      	bne.n	80028de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2200      	movs	r2, #0
 80028dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d007      	beq.n	80028fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699a      	ldr	r2, [r3, #24]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	619a      	str	r2, [r3, #24]
  }
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002918:	e022      	b.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d01e      	beq.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7fe ff4d 	bl	80017c0 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d113      	bne.n	8002960 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f043 0220 	orr.w	r2, r3, #32
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2220      	movs	r2, #32
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e00f      	b.n	8002980 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	4013      	ands	r3, r2
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	429a      	cmp	r2, r3
 800296e:	bf0c      	ite	eq
 8002970:	2301      	moveq	r3, #1
 8002972:	2300      	movne	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	429a      	cmp	r2, r3
 800297c:	d0cd      	beq.n	800291a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002994:	e02c      	b.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f870 	bl	8002a80 <I2C_IsErrorOccurred>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e02a      	b.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d01e      	beq.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7fe ff05 	bl	80017c0 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d113      	bne.n	80029f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029cc:	f043 0220 	orr.w	r2, r3, #32
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e007      	b.n	8002a00 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d1cb      	bne.n	8002996 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a14:	e028      	b.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	68b9      	ldr	r1, [r7, #8]
 8002a1a:	68f8      	ldr	r0, [r7, #12]
 8002a1c:	f000 f830 	bl	8002a80 <I2C_IsErrorOccurred>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e026      	b.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fec9 	bl	80017c0 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d113      	bne.n	8002a68 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e007      	b.n	8002a78 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d1cf      	bne.n	8002a16 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	f003 0310 	and.w	r3, r3, #16
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d075      	beq.n	8002b98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ab4:	e056      	b.n	8002b64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abc:	d052      	beq.n	8002b64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002abe:	f7fe fe7f 	bl	80017c0 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	429a      	cmp	r2, r3
 8002acc:	d302      	bcc.n	8002ad4 <I2C_IsErrorOccurred+0x54>
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d147      	bne.n	8002b64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ade:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ae6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af6:	d12e      	bne.n	8002b56 <I2C_IsErrorOccurred+0xd6>
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002afe:	d02a      	beq.n	8002b56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d027      	beq.n	8002b56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b16:	f7fe fe53 	bl	80017c0 <HAL_GetTick>
 8002b1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	e01b      	b.n	8002b56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b1e:	f7fe fe4f 	bl	80017c0 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b19      	cmp	r3, #25
 8002b2a:	d914      	bls.n	8002b56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d1dc      	bne.n	8002b1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d003      	beq.n	8002b7a <I2C_IsErrorOccurred+0xfa>
 8002b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d09d      	beq.n	8002ab6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d103      	bne.n	8002b8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2220      	movs	r2, #32
 8002b88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f043 0308 	orr.w	r3, r3, #8
 8002bd2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f043 0302 	orr.w	r3, r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01c      	beq.n	8002c48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff fe56 	bl	80028c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	; (8002c54 <I2C_IsErrorOccurred+0x1d4>)
 8002c20:	400b      	ands	r3, r1
 8002c22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3728      	adds	r7, #40	; 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	fe00e800 	.word	0xfe00e800

08002c58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607b      	str	r3, [r7, #4]
 8002c62:	460b      	mov	r3, r1
 8002c64:	817b      	strh	r3, [r7, #10]
 8002c66:	4613      	mov	r3, r2
 8002c68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6a:	897b      	ldrh	r3, [r7, #10]
 8002c6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c70:	7a7b      	ldrb	r3, [r7, #9]
 8002c72:	041b      	lsls	r3, r3, #16
 8002c74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	0d5b      	lsrs	r3, r3, #21
 8002c92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c96:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <I2C_TransferConfig+0x60>)
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	ea02 0103 	and.w	r1, r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	03ff63ff 	.word	0x03ff63ff

08002cbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d138      	bne.n	8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e032      	b.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2224      	movs	r2, #36	; 0x24
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6819      	ldr	r1, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2220      	movs	r2, #32
 8002d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d139      	bne.n	8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e033      	b.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2224      	movs	r2, #36	; 0x24
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0201 	bic.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002da4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	021b      	lsls	r3, r3, #8
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e000      	b.n	8002dde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2302      	movs	r3, #2
  }
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dec:	b08f      	sub	sp, #60	; 0x3c
 8002dee:	af0a      	add	r7, sp, #40	; 0x28
 8002df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d101      	bne.n	8002dfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e116      	b.n	800302a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe fa82 	bl	8001320 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f002 fdb1 	bl	80059a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	687e      	ldr	r6, [r7, #4]
 8002e48:	466d      	mov	r5, sp
 8002e4a:	f106 0410 	add.w	r4, r6, #16
 8002e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e5e:	1d33      	adds	r3, r6, #4
 8002e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e62:	6838      	ldr	r0, [r7, #0]
 8002e64:	f002 fd71 	bl	800594a <USB_CoreInit>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e0d7      	b.n	800302a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fd9f 	bl	80059c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
 8002e8a:	e04a      	b.n	8002f22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	333d      	adds	r3, #61	; 0x3d
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	7bfa      	ldrb	r2, [r7, #15]
 8002eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002eb4:	7bfa      	ldrb	r2, [r7, #15]
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	b298      	uxth	r0, r3
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3344      	adds	r3, #68	; 0x44
 8002ec8:	4602      	mov	r2, r0
 8002eca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002ecc:	7bfa      	ldrb	r2, [r7, #15]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3340      	adds	r3, #64	; 0x40
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3348      	adds	r3, #72	; 0x48
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ef4:	7bfa      	ldrb	r2, [r7, #15]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	334c      	adds	r3, #76	; 0x4c
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f08:	7bfa      	ldrb	r2, [r7, #15]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4413      	add	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3354      	adds	r3, #84	; 0x54
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d3af      	bcc.n	8002e8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	e044      	b.n	8002fbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	4413      	add	r3, r2
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	440b      	add	r3, r1
 8002f40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f48:	7bfa      	ldrb	r2, [r7, #15]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f5a:	7bfa      	ldrb	r2, [r7, #15]
 8002f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f74:	7bfa      	ldrb	r2, [r7, #15]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fa0:	7bfa      	ldrb	r2, [r7, #15]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d3b5      	bcc.n	8002f32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	687e      	ldr	r6, [r7, #4]
 8002fce:	466d      	mov	r5, sp
 8002fd0:	f106 0410 	add.w	r4, r6, #16
 8002fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fe4:	1d33      	adds	r3, r6, #4
 8002fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	f002 fd37 	bl	8005a5c <USB_DevInit>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2202      	movs	r2, #2
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e014      	b.n	800302a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	2b01      	cmp	r3, #1
 8003016:	d102      	bne.n	800301e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f80a 	bl	8003032 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f002 fee3 	bl	8005dee <USB_DevDisconnect>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003032 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003032:	b480      	push	{r7}
 8003034:	b085      	sub	sp, #20
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	f043 0303 	orr.w	r3, r3, #3
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308a:	6013      	str	r3, [r2, #0]
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	40007000 	.word	0x40007000

0800309c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030a0:	4b04      	ldr	r3, [pc, #16]	; (80030b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	40007000 	.word	0x40007000

080030b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c6:	d130      	bne.n	800312a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030c8:	4b23      	ldr	r3, [pc, #140]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030d4:	d038      	beq.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030e6:	4b1d      	ldr	r3, [pc, #116]	; (800315c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2232      	movs	r2, #50	; 0x32
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
 80030f0:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	0c9b      	lsrs	r3, r3, #18
 80030f8:	3301      	adds	r3, #1
 80030fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030fc:	e002      	b.n	8003104 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b01      	subs	r3, #1
 8003102:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003104:	4b14      	ldr	r3, [pc, #80]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003110:	d102      	bne.n	8003118 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f2      	bne.n	80030fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003124:	d110      	bne.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e00f      	b.n	800314a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d007      	beq.n	8003148 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003140:	4a05      	ldr	r2, [pc, #20]	; (8003158 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003146:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40007000 	.word	0x40007000
 800315c:	20000000 	.word	0x20000000
 8003160:	431bde83 	.word	0x431bde83

08003164 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_PWREx_EnableVddUSB+0x1c>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_PWREx_EnableVddUSB+0x1c>)
 800316e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003172:	6053      	str	r3, [r2, #4]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af02      	add	r7, sp, #8
 800318a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7fe fb18 	bl	80017c0 <HAL_GetTick>
 8003190:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e063      	b.n	8003264 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f7fd ff89 	bl	80010c8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80031b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f858 	bl	8003270 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	021a      	lsls	r2, r3, #8
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	2120      	movs	r1, #32
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f850 	bl	800328c <QSPI_WaitFlagStateUntilTimeout>
 80031ec:	4603      	mov	r3, r0
 80031ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80031f0:	7afb      	ldrb	r3, [r7, #11]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d131      	bne.n	800325a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003200:	f023 0310 	bic.w	r3, r3, #16
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6852      	ldr	r2, [r2, #4]
 8003208:	0611      	lsls	r1, r2, #24
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68d2      	ldr	r2, [r2, #12]
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	430b      	orrs	r3, r1
 8003216:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_QSPI_Init+0xe8>)
 8003220:	4013      	ands	r3, r2
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6912      	ldr	r2, [r2, #16]
 8003226:	0411      	lsls	r1, r2, #16
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6952      	ldr	r2, [r2, #20]
 800322c:	4311      	orrs	r1, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6992      	ldr	r2, [r2, #24]
 8003232:	4311      	orrs	r1, r2
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6812      	ldr	r2, [r2, #0]
 8003238:	430b      	orrs	r3, r1
 800323a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003262:	7afb      	ldrb	r3, [r7, #11]
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}
 800326c:	ffe0f8fe 	.word	0xffe0f8fe

08003270 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4613      	mov	r3, r2
 800329a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800329c:	e01a      	b.n	80032d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a4:	d016      	beq.n	80032d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a6:	f7fe fa8b 	bl	80017c0 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d302      	bcc.n	80032bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10b      	bne.n	80032d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2204      	movs	r2, #4
 80032c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c8:	f043 0201 	orr.w	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e00e      	b.n	80032f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	bf14      	ite	ne
 80032e2:	2301      	movne	r3, #1
 80032e4:	2300      	moveq	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d1d6      	bne.n	800329e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
	...

080032fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e3ca      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800330e:	4b97      	ldr	r3, [pc, #604]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
 8003316:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003318:	4b94      	ldr	r3, [pc, #592]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0303 	and.w	r3, r3, #3
 8003320:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80e4 	beq.w	80034f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_RCC_OscConfig+0x4a>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b0c      	cmp	r3, #12
 800333a:	f040 808b 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b01      	cmp	r3, #1
 8003342:	f040 8087 	bne.w	8003454 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003346:	4b89      	ldr	r3, [pc, #548]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d005      	beq.n	800335e <HAL_RCC_OscConfig+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e3a2      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1a      	ldr	r2, [r3, #32]
 8003362:	4b82      	ldr	r3, [pc, #520]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <HAL_RCC_OscConfig+0x7c>
 800336e:	4b7f      	ldr	r3, [pc, #508]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003376:	e005      	b.n	8003384 <HAL_RCC_OscConfig+0x88>
 8003378:	4b7c      	ldr	r3, [pc, #496]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800337a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800337e:	091b      	lsrs	r3, r3, #4
 8003380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003384:	4293      	cmp	r3, r2
 8003386:	d223      	bcs.n	80033d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	4618      	mov	r0, r3
 800338e:	f000 fd87 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e383      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800339c:	4b73      	ldr	r3, [pc, #460]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a72      	ldr	r2, [pc, #456]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033a2:	f043 0308 	orr.w	r3, r3, #8
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b70      	ldr	r3, [pc, #448]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	496d      	ldr	r1, [pc, #436]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ba:	4b6c      	ldr	r3, [pc, #432]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	021b      	lsls	r3, r3, #8
 80033c8:	4968      	ldr	r1, [pc, #416]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
 80033ce:	e025      	b.n	800341c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033d0:	4b66      	ldr	r3, [pc, #408]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a65      	ldr	r2, [pc, #404]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033d6:	f043 0308 	orr.w	r3, r3, #8
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	4960      	ldr	r1, [pc, #384]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ee:	4b5f      	ldr	r3, [pc, #380]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	495b      	ldr	r1, [pc, #364]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4618      	mov	r0, r3
 800340e:	f000 fd47 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e343      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800341c:	f000 fc4a 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003420:	4602      	mov	r2, r0
 8003422:	4b52      	ldr	r3, [pc, #328]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	091b      	lsrs	r3, r3, #4
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	4950      	ldr	r1, [pc, #320]	; (8003570 <HAL_RCC_OscConfig+0x274>)
 800342e:	5ccb      	ldrb	r3, [r1, r3]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_RCC_OscConfig+0x278>)
 800343a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800343c:	4b4e      	ldr	r3, [pc, #312]	; (8003578 <HAL_RCC_OscConfig+0x27c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4618      	mov	r0, r3
 8003442:	f7fe f809 	bl	8001458 <HAL_InitTick>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d052      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	e327      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800345c:	4b43      	ldr	r3, [pc, #268]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a42      	ldr	r2, [pc, #264]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003468:	f7fe f9aa 	bl	80017c0 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003470:	f7fe f9a6 	bl	80017c0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e310      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003482:	4b3a      	ldr	r3, [pc, #232]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0f0      	beq.n	8003470 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800348e:	4b37      	ldr	r3, [pc, #220]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a36      	ldr	r2, [pc, #216]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b34      	ldr	r3, [pc, #208]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	4931      	ldr	r1, [pc, #196]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ac:	4b2f      	ldr	r3, [pc, #188]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	492c      	ldr	r1, [pc, #176]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e01a      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80034c2:	4b2a      	ldr	r3, [pc, #168]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034ce:	f7fe f977 	bl	80017c0 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034d6:	f7fe f973 	bl	80017c0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e2dd      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034e8:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1f0      	bne.n	80034d6 <HAL_RCC_OscConfig+0x1da>
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d074      	beq.n	80035ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	2b08      	cmp	r3, #8
 8003508:	d005      	beq.n	8003516 <HAL_RCC_OscConfig+0x21a>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	2b0c      	cmp	r3, #12
 800350e:	d10e      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b03      	cmp	r3, #3
 8003514:	d10b      	bne.n	800352e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003516:	4b15      	ldr	r3, [pc, #84]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d064      	beq.n	80035ec <HAL_RCC_OscConfig+0x2f0>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d160      	bne.n	80035ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e2ba      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x24a>
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0b      	ldr	r2, [pc, #44]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e026      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354e:	d115      	bne.n	800357c <HAL_RCC_OscConfig+0x280>
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a05      	ldr	r2, [pc, #20]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003556:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a02      	ldr	r2, [pc, #8]	; (800356c <HAL_RCC_OscConfig+0x270>)
 8003562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	e014      	b.n	8003594 <HAL_RCC_OscConfig+0x298>
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	0800a888 	.word	0x0800a888
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004
 800357c:	4ba0      	ldr	r3, [pc, #640]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a9f      	ldr	r2, [pc, #636]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	4b9d      	ldr	r3, [pc, #628]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a9c      	ldr	r2, [pc, #624]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800358e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d013      	beq.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fe f910 	bl	80017c0 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a4:	f7fe f90c 	bl	80017c0 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e276      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b6:	4b92      	ldr	r3, [pc, #584]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2a8>
 80035c2:	e014      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe f8fc 	bl	80017c0 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035cc:	f7fe f8f8 	bl	80017c0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e262      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035de:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x2d0>
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d060      	beq.n	80036bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d005      	beq.n	800360c <HAL_RCC_OscConfig+0x310>
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	2b0c      	cmp	r3, #12
 8003604:	d119      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d116      	bne.n	800363a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800360c:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <HAL_RCC_OscConfig+0x328>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e23f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003624:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	4973      	ldr	r1, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	e040      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d023      	beq.n	800368a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003642:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003648:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364e:	f7fe f8b7 	bl	80017c0 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe f8b3 	bl	80017c0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e21d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003668:	4b65      	ldr	r3, [pc, #404]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003674:	4b62      	ldr	r3, [pc, #392]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	061b      	lsls	r3, r3, #24
 8003682:	495f      	ldr	r1, [pc, #380]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003684:	4313      	orrs	r3, r2
 8003686:	604b      	str	r3, [r1, #4]
 8003688:	e018      	b.n	80036bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368a:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a5c      	ldr	r2, [pc, #368]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe f893 	bl	80017c0 <HAL_GetTick>
 800369a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe f88f 	bl	80017c0 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e1f9      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1f0      	bne.n	800369e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d03c      	beq.n	8003742 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01c      	beq.n	800370a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036d0:	4b4b      	ldr	r3, [pc, #300]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d6:	4a4a      	ldr	r2, [pc, #296]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80036d8:	f043 0301 	orr.w	r3, r3, #1
 80036dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe f86e 	bl	80017c0 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e8:	f7fe f86a 	bl	80017c0 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e1d4      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036fa:	4b41      	ldr	r3, [pc, #260]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80036fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0ef      	beq.n	80036e8 <HAL_RCC_OscConfig+0x3ec>
 8003708:	e01b      	b.n	8003742 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800370c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003710:	4a3b      	ldr	r2, [pc, #236]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371a:	f7fe f851 	bl	80017c0 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003722:	f7fe f84d 	bl	80017c0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e1b7      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003734:	4b32      	ldr	r3, [pc, #200]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1ef      	bne.n	8003722 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0304 	and.w	r3, r3, #4
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 80a6 	beq.w	800389c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003754:	4b2a      	ldr	r3, [pc, #168]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10d      	bne.n	800377c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a26      	ldr	r2, [pc, #152]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 8003766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
 800376c:	4b24      	ldr	r3, [pc, #144]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003778:	2301      	movs	r3, #1
 800377a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	4b21      	ldr	r3, [pc, #132]	; (8003804 <HAL_RCC_OscConfig+0x508>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d118      	bne.n	80037ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <HAL_RCC_OscConfig+0x508>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_RCC_OscConfig+0x508>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003794:	f7fe f814 	bl	80017c0 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe f810 	bl	80017c0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e17a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ae:	4b15      	ldr	r3, [pc, #84]	; (8003804 <HAL_RCC_OscConfig+0x508>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d108      	bne.n	80037d4 <HAL_RCC_OscConfig+0x4d8>
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	4a0d      	ldr	r2, [pc, #52]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d2:	e029      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d115      	bne.n	8003808 <HAL_RCC_OscConfig+0x50c>
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	4a07      	ldr	r2, [pc, #28]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a03      	ldr	r2, [pc, #12]	; (8003800 <HAL_RCC_OscConfig+0x504>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x52c>
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	40007000 	.word	0x40007000
 8003808:	4b9c      	ldr	r3, [pc, #624]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	4a9b      	ldr	r2, [pc, #620]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003810:	f023 0301 	bic.w	r3, r3, #1
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003818:	4b98      	ldr	r3, [pc, #608]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381e:	4a97      	ldr	r2, [pc, #604]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d016      	beq.n	800385e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd ffc6 	bl	80017c0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003836:	e00a      	b.n	800384e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003838:	f7fd ffc2 	bl	80017c0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	f241 3288 	movw	r2, #5000	; 0x1388
 8003846:	4293      	cmp	r3, r2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e12a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384e:	4b8b      	ldr	r3, [pc, #556]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ed      	beq.n	8003838 <HAL_RCC_OscConfig+0x53c>
 800385c:	e015      	b.n	800388a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fd ffaf 	bl	80017c0 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003864:	e00a      	b.n	800387c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003866:	f7fd ffab 	bl	80017c0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f241 3288 	movw	r2, #5000	; 0x1388
 8003874:	4293      	cmp	r3, r2
 8003876:	d901      	bls.n	800387c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e113      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800387c:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1ed      	bne.n	8003866 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800388a:	7ffb      	ldrb	r3, [r7, #31]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d105      	bne.n	800389c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003890:	4b7a      	ldr	r3, [pc, #488]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003894:	4a79      	ldr	r2, [pc, #484]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800389a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80fe 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	f040 80d0 	bne.w	8003a50 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80038b0:	4b72      	ldr	r3, [pc, #456]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0203 	and.w	r2, r3, #3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d130      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	3b01      	subs	r3, #1
 80038d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d127      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d11f      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038f0:	2a07      	cmp	r2, #7
 80038f2:	bf14      	ite	ne
 80038f4:	2201      	movne	r2, #1
 80038f6:	2200      	moveq	r2, #0
 80038f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d113      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	085b      	lsrs	r3, r3, #1
 800390a:	3b01      	subs	r3, #1
 800390c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d109      	bne.n	8003926 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003922:	429a      	cmp	r2, r3
 8003924:	d06e      	beq.n	8003a04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d069      	beq.n	8003a00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ad      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003948:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a4b      	ldr	r2, [pc, #300]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800394e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003954:	f7fd ff34 	bl	80017c0 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fd ff30 	bl	80017c0 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e09a      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <HAL_RCC_OscConfig+0x784>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800398a:	3a01      	subs	r2, #1
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	4311      	orrs	r1, r2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003994:	0212      	lsls	r2, r2, #8
 8003996:	4311      	orrs	r1, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800399c:	0852      	lsrs	r2, r2, #1
 800399e:	3a01      	subs	r2, #1
 80039a0:	0552      	lsls	r2, r2, #21
 80039a2:	4311      	orrs	r1, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80039a8:	0852      	lsrs	r2, r2, #1
 80039aa:	3a01      	subs	r2, #1
 80039ac:	0652      	lsls	r2, r2, #25
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80039b4:	0912      	lsrs	r2, r2, #4
 80039b6:	0452      	lsls	r2, r2, #17
 80039b8:	430a      	orrs	r2, r1
 80039ba:	4930      	ldr	r1, [pc, #192]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80039d8:	f7fd fef2 	bl	80017c0 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e0:	f7fd feee 	bl	80017c0 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e058      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fe:	e050      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e04f      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d148      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003a10:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a19      	ldr	r2, [pc, #100]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a28:	f7fd feca 	bl	80017c0 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a30:	f7fd fec6 	bl	80017c0 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e030      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a42:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x734>
 8003a4e:	e028      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d023      	beq.n	8003a9e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a56:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a08      	ldr	r2, [pc, #32]	; (8003a7c <HAL_RCC_OscConfig+0x780>)
 8003a5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd fead 	bl	80017c0 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a68:	e00c      	b.n	8003a84 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd fea9 	bl	80017c0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d905      	bls.n	8003a84 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e013      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ec      	bne.n	8003a6a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4905      	ldr	r1, [pc, #20]	; (8003aac <HAL_RCC_OscConfig+0x7b0>)
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RCC_OscConfig+0x7b4>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
 8003a9c:	e001      	b.n	8003aa2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	feeefffc 	.word	0xfeeefffc

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e7      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b75      	ldr	r3, [pc, #468]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d910      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4970      	ldr	r1, [pc, #448]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b6e      	ldr	r3, [pc, #440]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0cf      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d010      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	4b66      	ldr	r3, [pc, #408]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d908      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b14:	4b63      	ldr	r3, [pc, #396]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4960      	ldr	r1, [pc, #384]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d04c      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b03      	cmp	r3, #3
 8003b38:	d107      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3a:	4b5a      	ldr	r3, [pc, #360]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d121      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0a6      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b52:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d115      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e09a      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e086      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4943      	ldr	r1, [pc, #268]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9c:	f7fd fe10 	bl	80017c0 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7fd fe0c 	bl	80017c0 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e06e      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b3a      	ldr	r3, [pc, #232]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d010      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	4b31      	ldr	r3, [pc, #196]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d208      	bcs.n	8003bfa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	492b      	ldr	r1, [pc, #172]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfa:	4b29      	ldr	r3, [pc, #164]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d210      	bcs.n	8003c2a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c08:	4b25      	ldr	r3, [pc, #148]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f023 0207 	bic.w	r2, r3, #7
 8003c10:	4923      	ldr	r1, [pc, #140]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <HAL_RCC_ClockConfig+0x1ec>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e036      	b.n	8003c98 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d008      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	4918      	ldr	r1, [pc, #96]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0308 	and.w	r3, r3, #8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c54:	4b13      	ldr	r3, [pc, #76]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	4910      	ldr	r1, [pc, #64]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c68:	f000 f824 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	091b      	lsrs	r3, r3, #4
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	490b      	ldr	r1, [pc, #44]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
 8003c84:	4a09      	ldr	r2, [pc, #36]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c86:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c88:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd fbe3 	bl	8001458 <HAL_InitTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c96:	7afb      	ldrb	r3, [r7, #11]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	0800a888 	.word	0x0800a888
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	20000004 	.word	0x20000004

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cc2:	4b3e      	ldr	r3, [pc, #248]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	2b0c      	cmp	r3, #12
 8003ce0:	d121      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d11e      	bne.n	8003d26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ce8:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cf4:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e005      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003d04:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d10:	4a2b      	ldr	r2, [pc, #172]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10d      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d24:	e00a      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d2c:	4b25      	ldr	r3, [pc, #148]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e004      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d38:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d134      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d42:	4b1e      	ldr	r3, [pc, #120]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d003      	beq.n	8003d5a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d003      	beq.n	8003d60 <HAL_RCC_GetSysClockFreq+0xac>
 8003d58:	e005      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d5a:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d5c:	617b      	str	r3, [r7, #20]
      break;
 8003d5e:	e005      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d60:	4b19      	ldr	r3, [pc, #100]	; (8003dc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d62:	617b      	str	r3, [r7, #20]
      break;
 8003d64:	e002      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	617b      	str	r3, [r7, #20]
      break;
 8003d6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	3301      	adds	r3, #1
 8003d78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	fb03 f202 	mul.w	r2, r3, r2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <HAL_RCC_GetSysClockFreq+0x108>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	0e5b      	lsrs	r3, r3, #25
 8003d98:	f003 0303 	and.w	r3, r3, #3
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003daa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003dac:	69bb      	ldr	r3, [r7, #24]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	0800a8a0 	.word	0x0800a8a0
 8003dc4:	00f42400 	.word	0x00f42400
 8003dc8:	007a1200 	.word	0x007a1200

08003dcc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dd0:	4b03      	ldr	r3, [pc, #12]	; (8003de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	20000000 	.word	0x20000000

08003de4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003de8:	f7ff fff0 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003dec:	4602      	mov	r2, r0
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	0a1b      	lsrs	r3, r3, #8
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	4904      	ldr	r1, [pc, #16]	; (8003e0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dfa:	5ccb      	ldrb	r3, [r1, r3]
 8003dfc:	f003 031f 	and.w	r3, r3, #31
 8003e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	0800a898 	.word	0x0800a898

08003e10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e14:	f7ff ffda 	bl	8003dcc <HAL_RCC_GetHCLKFreq>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	0adb      	lsrs	r3, r3, #11
 8003e20:	f003 0307 	and.w	r3, r3, #7
 8003e24:	4904      	ldr	r1, [pc, #16]	; (8003e38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e26:	5ccb      	ldrb	r3, [r1, r3]
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40021000 	.word	0x40021000
 8003e38:	0800a898 	.word	0x0800a898

08003e3c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	220f      	movs	r2, #15
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e4c:	4b12      	ldr	r3, [pc, #72]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0203 	and.w	r2, r3, #3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e58:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e64:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_GetClockConfig+0x5c>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	08db      	lsrs	r3, r3, #3
 8003e76:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCC_GetClockConfig+0x60>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0207 	and.w	r2, r3, #7
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	601a      	str	r2, [r3, #0]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eac:	4b2a      	ldr	r3, [pc, #168]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eb8:	f7ff f8f0 	bl	800309c <HAL_PWREx_GetVoltageRange>
 8003ebc:	6178      	str	r0, [r7, #20]
 8003ebe:	e014      	b.n	8003eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ec0:	4b25      	ldr	r3, [pc, #148]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	4a24      	ldr	r2, [pc, #144]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6593      	str	r3, [r2, #88]	; 0x58
 8003ecc:	4b22      	ldr	r3, [pc, #136]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ed8:	f7ff f8e0 	bl	800309c <HAL_PWREx_GetVoltageRange>
 8003edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b1e      	ldr	r3, [pc, #120]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee2:	4a1d      	ldr	r2, [pc, #116]	; (8003f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef0:	d10b      	bne.n	8003f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b80      	cmp	r3, #128	; 0x80
 8003ef6:	d919      	bls.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2ba0      	cmp	r3, #160	; 0xa0
 8003efc:	d902      	bls.n	8003f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003efe:	2302      	movs	r3, #2
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e013      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f04:	2301      	movs	r3, #1
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	e010      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b80      	cmp	r3, #128	; 0x80
 8003f0e:	d902      	bls.n	8003f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f10:	2303      	movs	r3, #3
 8003f12:	613b      	str	r3, [r7, #16]
 8003f14:	e00a      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b80      	cmp	r3, #128	; 0x80
 8003f1a:	d102      	bne.n	8003f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e004      	b.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b70      	cmp	r3, #112	; 0x70
 8003f26:	d101      	bne.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f28:	2301      	movs	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 0207 	bic.w	r2, r3, #7
 8003f34:	4909      	ldr	r1, [pc, #36]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f3c:	4b07      	ldr	r3, [pc, #28]	; (8003f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d001      	beq.n	8003f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40022000 	.word	0x40022000

08003f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f68:	2300      	movs	r3, #0
 8003f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d041      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f84:	d02a      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003f86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f90:	d008      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f96:	d81e      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fa0:	d010      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003fa2:	e018      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa4:	4b86      	ldr	r3, [pc, #536]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	4a85      	ldr	r2, [pc, #532]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fb0:	e015      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 facb 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fc2:	e00c      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3320      	adds	r3, #32
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fbb6 	bl	800473c <RCCEx_PLLSAI2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003fda:	e000      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003fdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fde:	7cfb      	ldrb	r3, [r7, #19]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fe4:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff2:	4973      	ldr	r1, [pc, #460]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ffa:	e001      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d041      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004010:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004014:	d02a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004016:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800401a:	d824      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800401c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004020:	d008      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004022:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004026:	d81e      	bhi.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800402c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004030:	d010      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004032:	e018      	b.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004034:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	4a61      	ldr	r2, [pc, #388]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004040:	e015      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3304      	adds	r3, #4
 8004046:	2100      	movs	r1, #0
 8004048:	4618      	mov	r0, r3
 800404a:	f000 fa83 	bl	8004554 <RCCEx_PLLSAI1_Config>
 800404e:	4603      	mov	r3, r0
 8004050:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004052:	e00c      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	3320      	adds	r3, #32
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f000 fb6e 	bl	800473c <RCCEx_PLLSAI2_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	74fb      	strb	r3, [r7, #19]
      break;
 800406a:	e000      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800406c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004074:	4b52      	ldr	r3, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004082:	494f      	ldr	r1, [pc, #316]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800408a:	e001      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800408c:	7cfb      	ldrb	r3, [r7, #19]
 800408e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80a0 	beq.w	80041de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409e:	2300      	movs	r3, #0
 80040a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80040b2:	2300      	movs	r3, #0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00d      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040bc:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c2:	6593      	str	r3, [r2, #88]	; 0x58
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d0:	2301      	movs	r3, #1
 80040d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040d4:	4b3b      	ldr	r3, [pc, #236]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3a      	ldr	r2, [pc, #232]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040e0:	f7fd fb6e 	bl	80017c0 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040e6:	e009      	b.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e8:	f7fd fb6a 	bl	80017c0 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d902      	bls.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	74fb      	strb	r3, [r7, #19]
        break;
 80040fa:	e005      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0ef      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004108:	7cfb      	ldrb	r3, [r7, #19]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d15c      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800410e:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004118:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01f      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	429a      	cmp	r2, r3
 800412a:	d019      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800412c:	4b24      	ldr	r3, [pc, #144]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800412e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004136:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004138:	4b21      	ldr	r3, [pc, #132]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	4a20      	ldr	r2, [pc, #128]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414e:	4a1c      	ldr	r2, [pc, #112]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004158:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416a:	f7fd fb29 	bl	80017c0 <HAL_GetTick>
 800416e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004170:	e00b      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fd fb25 	bl	80017c0 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d902      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	74fb      	strb	r3, [r7, #19]
            break;
 8004188:	e006      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800418a:	4b0d      	ldr	r3, [pc, #52]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ec      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10c      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800419e:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041b6:	e009      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	74bb      	strb	r3, [r7, #18]
 80041bc:	e006      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041cc:	7c7b      	ldrb	r3, [r7, #17]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d105      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b9e      	ldr	r3, [pc, #632]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	4a9d      	ldr	r2, [pc, #628]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ea:	4b98      	ldr	r3, [pc, #608]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f0:	f023 0203 	bic.w	r2, r3, #3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f8:	4994      	ldr	r1, [pc, #592]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800420c:	4b8f      	ldr	r3, [pc, #572]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004212:	f023 020c 	bic.w	r2, r3, #12
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	498c      	ldr	r1, [pc, #560]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800422e:	4b87      	ldr	r3, [pc, #540]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004234:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	4983      	ldr	r1, [pc, #524]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004250:	4b7e      	ldr	r3, [pc, #504]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004256:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	497b      	ldr	r1, [pc, #492]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004272:	4b76      	ldr	r3, [pc, #472]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004280:	4972      	ldr	r1, [pc, #456]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004294:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a2:	496a      	ldr	r1, [pc, #424]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	4961      	ldr	r1, [pc, #388]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042d8:	4b5c      	ldr	r3, [pc, #368]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	4959      	ldr	r1, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042fa:	4b54      	ldr	r3, [pc, #336]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	4950      	ldr	r1, [pc, #320]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431c:	4b4b      	ldr	r3, [pc, #300]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004322:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432a:	4948      	ldr	r1, [pc, #288]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433e:	4b43      	ldr	r3, [pc, #268]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	493f      	ldr	r1, [pc, #252]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d028      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004360:	4b3a      	ldr	r3, [pc, #232]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436e:	4937      	ldr	r1, [pc, #220]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800437e:	d106      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4a31      	ldr	r2, [pc, #196]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	60d3      	str	r3, [r2, #12]
 800438c:	e011      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004396:	d10c      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3304      	adds	r3, #4
 800439c:	2101      	movs	r1, #1
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f8d8 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043a8:	7cfb      	ldrb	r3, [r7, #19]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d028      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043be:	4b23      	ldr	r3, [pc, #140]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	491f      	ldr	r1, [pc, #124]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043dc:	d106      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043de:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	4a1a      	ldr	r2, [pc, #104]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043e8:	60d3      	str	r3, [r2, #12]
 80043ea:	e011      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 f8a9 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004406:	7cfb      	ldrb	r3, [r7, #19]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d02b      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	4908      	ldr	r1, [pc, #32]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004436:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800443a:	d109      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800443c:	4b03      	ldr	r3, [pc, #12]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4a02      	ldr	r2, [pc, #8]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004446:	60d3      	str	r3, [r2, #12]
 8004448:	e014      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004454:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004458:	d10c      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2101      	movs	r1, #1
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f877 	bl	8004554 <RCCEx_PLLSAI1_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004470:	7cfb      	ldrb	r3, [r7, #19]
 8004472:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d02f      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800448e:	4928      	ldr	r1, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800449e:	d10d      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3304      	adds	r3, #4
 80044a4:	2102      	movs	r1, #2
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 f854 	bl	8004554 <RCCEx_PLLSAI1_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b0:	7cfb      	ldrb	r3, [r7, #19]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d014      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	74bb      	strb	r3, [r7, #18]
 80044ba:	e011      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	3320      	adds	r3, #32
 80044ca:	2102      	movs	r1, #2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f935 	bl	800473c <RCCEx_PLLSAI2_Config>
 80044d2:	4603      	mov	r3, r0
 80044d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044d6:	7cfb      	ldrb	r3, [r7, #19]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fa:	490d      	ldr	r1, [pc, #52]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00b      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800451e:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004526:	7cbb      	ldrb	r3, [r7, #18]
}
 8004528:	4618      	mov	r0, r3
 800452a:	3718      	adds	r7, #24
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000

08004534 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800453e:	f043 0304 	orr.w	r3, r3, #4
 8004542:	6013      	str	r3, [r2, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000

08004554 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004562:	4b75      	ldr	r3, [pc, #468]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d018      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0203 	and.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d10d      	bne.n	800459a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
       ||
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004586:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	091b      	lsrs	r3, r3, #4
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
       ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d047      	beq.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	73fb      	strb	r3, [r7, #15]
 800459e:	e044      	b.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d018      	beq.n	80045da <RCCEx_PLLSAI1_Config+0x86>
 80045a8:	2b03      	cmp	r3, #3
 80045aa:	d825      	bhi.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d002      	beq.n	80045b6 <RCCEx_PLLSAI1_Config+0x62>
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d009      	beq.n	80045c8 <RCCEx_PLLSAI1_Config+0x74>
 80045b4:	e020      	b.n	80045f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045b6:	4b60      	ldr	r3, [pc, #384]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d11d      	bne.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c6:	e01a      	b.n	80045fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c8:	4b5b      	ldr	r3, [pc, #364]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d116      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d8:	e013      	b.n	8004602 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045da:	4b57      	ldr	r3, [pc, #348]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10f      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045e6:	4b54      	ldr	r3, [pc, #336]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045f6:	e006      	b.n	8004606 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e004      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045fe:	bf00      	nop
 8004600:	e002      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004606:	bf00      	nop
    }

    if(status == HAL_OK)
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10d      	bne.n	800462a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800460e:	4b4a      	ldr	r3, [pc, #296]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6819      	ldr	r1, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	3b01      	subs	r3, #1
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	430b      	orrs	r3, r1
 8004624:	4944      	ldr	r1, [pc, #272]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004626:	4313      	orrs	r3, r2
 8004628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d17d      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004630:	4b41      	ldr	r3, [pc, #260]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a40      	ldr	r2, [pc, #256]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fd f8c0 	bl	80017c0 <HAL_GetTick>
 8004640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004642:	e009      	b.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004644:	f7fd f8bc 	bl	80017c0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d902      	bls.n	8004658 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	73fb      	strb	r3, [r7, #15]
        break;
 8004656:	e005      	b.n	8004664 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004658:	4b37      	ldr	r3, [pc, #220]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1ef      	bne.n	8004644 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d160      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d111      	bne.n	8004694 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004670:	4b31      	ldr	r3, [pc, #196]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6892      	ldr	r2, [r2, #8]
 8004680:	0211      	lsls	r1, r2, #8
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	68d2      	ldr	r2, [r2, #12]
 8004686:	0912      	lsrs	r2, r2, #4
 8004688:	0452      	lsls	r2, r2, #17
 800468a:	430a      	orrs	r2, r1
 800468c:	492a      	ldr	r1, [pc, #168]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800468e:	4313      	orrs	r3, r2
 8004690:	610b      	str	r3, [r1, #16]
 8004692:	e027      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d112      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80046a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6892      	ldr	r2, [r2, #8]
 80046aa:	0211      	lsls	r1, r2, #8
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6912      	ldr	r2, [r2, #16]
 80046b0:	0852      	lsrs	r2, r2, #1
 80046b2:	3a01      	subs	r2, #1
 80046b4:	0552      	lsls	r2, r2, #21
 80046b6:	430a      	orrs	r2, r1
 80046b8:	491f      	ldr	r1, [pc, #124]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	610b      	str	r3, [r1, #16]
 80046be:	e011      	b.n	80046e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046c0:	4b1d      	ldr	r3, [pc, #116]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6892      	ldr	r2, [r2, #8]
 80046d0:	0211      	lsls	r1, r2, #8
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6952      	ldr	r2, [r2, #20]
 80046d6:	0852      	lsrs	r2, r2, #1
 80046d8:	3a01      	subs	r2, #1
 80046da:	0652      	lsls	r2, r2, #25
 80046dc:	430a      	orrs	r2, r1
 80046de:	4916      	ldr	r1, [pc, #88]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a13      	ldr	r2, [pc, #76]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 80046ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f0:	f7fd f866 	bl	80017c0 <HAL_GetTick>
 80046f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f6:	e009      	b.n	800470c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f8:	f7fd f862 	bl	80017c0 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	73fb      	strb	r3, [r7, #15]
          break;
 800470a:	e005      	b.n	8004718 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ef      	beq.n	80046f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800471e:	4b06      	ldr	r3, [pc, #24]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4904      	ldr	r1, [pc, #16]	; (8004738 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004728:	4313      	orrs	r3, r2
 800472a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000

0800473c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800474a:	4b6a      	ldr	r3, [pc, #424]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f003 0303 	and.w	r3, r3, #3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d018      	beq.n	8004788 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004756:	4b67      	ldr	r3, [pc, #412]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0203 	and.w	r2, r3, #3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	429a      	cmp	r2, r3
 8004764:	d10d      	bne.n	8004782 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
       ||
 800476a:	2b00      	cmp	r3, #0
 800476c:	d009      	beq.n	8004782 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800476e:	4b61      	ldr	r3, [pc, #388]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	f003 0307 	and.w	r3, r3, #7
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
       ||
 800477e:	429a      	cmp	r2, r3
 8004780:	d047      	beq.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
 8004786:	e044      	b.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b03      	cmp	r3, #3
 800478e:	d018      	beq.n	80047c2 <RCCEx_PLLSAI2_Config+0x86>
 8004790:	2b03      	cmp	r3, #3
 8004792:	d825      	bhi.n	80047e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004794:	2b01      	cmp	r3, #1
 8004796:	d002      	beq.n	800479e <RCCEx_PLLSAI2_Config+0x62>
 8004798:	2b02      	cmp	r3, #2
 800479a:	d009      	beq.n	80047b0 <RCCEx_PLLSAI2_Config+0x74>
 800479c:	e020      	b.n	80047e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800479e:	4b55      	ldr	r3, [pc, #340]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d11d      	bne.n	80047e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ae:	e01a      	b.n	80047e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80047b0:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047c0:	e013      	b.n	80047ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80047c2:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10f      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80047ce:	4b49      	ldr	r3, [pc, #292]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80047de:	e006      	b.n	80047ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	73fb      	strb	r3, [r7, #15]
      break;
 80047e4:	e004      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047e6:	bf00      	nop
 80047e8:	e002      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ea:	bf00      	nop
 80047ec:	e000      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80047ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10d      	bne.n	8004812 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80047f6:	4b3f      	ldr	r3, [pc, #252]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6819      	ldr	r1, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	3b01      	subs	r3, #1
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	430b      	orrs	r3, r1
 800480c:	4939      	ldr	r1, [pc, #228]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800480e:	4313      	orrs	r3, r2
 8004810:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d167      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004818:	4b36      	ldr	r3, [pc, #216]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a35      	ldr	r2, [pc, #212]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004824:	f7fc ffcc 	bl	80017c0 <HAL_GetTick>
 8004828:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800482a:	e009      	b.n	8004840 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800482c:	f7fc ffc8 	bl	80017c0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d902      	bls.n	8004840 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	73fb      	strb	r3, [r7, #15]
        break;
 800483e:	e005      	b.n	800484c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004840:	4b2c      	ldr	r3, [pc, #176]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ef      	bne.n	800482c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14a      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d111      	bne.n	800487c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004858:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	0211      	lsls	r1, r2, #8
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	68d2      	ldr	r2, [r2, #12]
 800486e:	0912      	lsrs	r2, r2, #4
 8004870:	0452      	lsls	r2, r2, #17
 8004872:	430a      	orrs	r2, r1
 8004874:	491f      	ldr	r1, [pc, #124]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004876:	4313      	orrs	r3, r2
 8004878:	614b      	str	r3, [r1, #20]
 800487a:	e011      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800487c:	4b1d      	ldr	r3, [pc, #116]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004884:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6892      	ldr	r2, [r2, #8]
 800488c:	0211      	lsls	r1, r2, #8
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6912      	ldr	r2, [r2, #16]
 8004892:	0852      	lsrs	r2, r2, #1
 8004894:	3a01      	subs	r2, #1
 8004896:	0652      	lsls	r2, r2, #25
 8004898:	430a      	orrs	r2, r1
 800489a:	4916      	ldr	r1, [pc, #88]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800489c:	4313      	orrs	r3, r2
 800489e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80048a0:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ac:	f7fc ff88 	bl	80017c0 <HAL_GetTick>
 80048b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b2:	e009      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048b4:	f7fc ff84 	bl	80017c0 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d902      	bls.n	80048c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	73fb      	strb	r3, [r7, #15]
          break;
 80048c6:	e005      	b.n	80048d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048c8:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ef      	beq.n	80048b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048da:	4b06      	ldr	r3, [pc, #24]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	4904      	ldr	r1, [pc, #16]	; (80048f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000

080048f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e095      	b.n	8004a36 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800491a:	d009      	beq.n	8004930 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	61da      	str	r2, [r3, #28]
 8004922:	e005      	b.n	8004930 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d106      	bne.n	8004950 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f7fc fc00 	bl	8001150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004966:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004970:	d902      	bls.n	8004978 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004972:	2300      	movs	r3, #0
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e002      	b.n	800497e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800497c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004986:	d007      	beq.n	8004998 <HAL_SPI_Init+0xa0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004990:	d002      	beq.n	8004998 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	ea42 0103 	orr.w	r1, r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	0c1b      	lsrs	r3, r3, #16
 80049f4:	f003 0204 	and.w	r2, r3, #4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	f003 0310 	and.w	r3, r3, #16
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a06:	f003 0308 	and.w	r3, r3, #8
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a14:	ea42 0103 	orr.w	r1, r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e049      	b.n	8004ae4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d106      	bne.n	8004a6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f841 	bl	8004aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	f000 f9f7 	bl	8004e70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3708      	adds	r7, #8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d001      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e04f      	b.n	8004bb8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01d      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b42:	d018      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1f      	ldr	r2, [pc, #124]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d013      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1e      	ldr	r2, [pc, #120]	; (8004bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00e      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d009      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d004      	beq.n	8004b76 <HAL_TIM_Base_Start_IT+0x76>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a19      	ldr	r2, [pc, #100]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d115      	bne.n	8004ba2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689a      	ldr	r2, [r3, #8]
 8004b7c:	4b17      	ldr	r3, [pc, #92]	; (8004bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b06      	cmp	r3, #6
 8004b86:	d015      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8e:	d011      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0201 	orr.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	e008      	b.n	8004bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0201 	orr.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	e000      	b.n	8004bb6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00
 8004bc8:	40000400 	.word	0x40000400
 8004bcc:	40000800 	.word	0x40000800
 8004bd0:	40000c00 	.word	0x40000c00
 8004bd4:	40013400 	.word	0x40013400
 8004bd8:	40014000 	.word	0x40014000
 8004bdc:	00010007 	.word	0x00010007

08004be0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d122      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d11b      	bne.n	8004c3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0202 	mvn.w	r2, #2
 8004c0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 0303 	and.w	r3, r3, #3
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f905 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004c28:	e005      	b.n	8004c36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8f7 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f908 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d122      	bne.n	8004c90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	d11b      	bne.n	8004c90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f06f 0204 	mvn.w	r2, #4
 8004c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2202      	movs	r2, #2
 8004c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d003      	beq.n	8004c7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f8db 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004c7c:	e005      	b.n	8004c8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f8cd 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f8de 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d122      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d11b      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0208 	mvn.w	r2, #8
 8004cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8b1 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004cd0:	e005      	b.n	8004cde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f8a3 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8b4 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	f003 0310 	and.w	r3, r3, #16
 8004cee:	2b10      	cmp	r3, #16
 8004cf0:	d122      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b10      	cmp	r3, #16
 8004cfe:	d11b      	bne.n	8004d38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f06f 0210 	mvn.w	r2, #16
 8004d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f887 	bl	8004e32 <HAL_TIM_IC_CaptureCallback>
 8004d24:	e005      	b.n	8004d32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f879 	bl	8004e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f88a 	bl	8004e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d10e      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f06f 0201 	mvn.w	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc f88c 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d10e      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d7c:	2b80      	cmp	r3, #128	; 0x80
 8004d7e:	d107      	bne.n	8004d90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f914 	bl	8004fb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9e:	d10e      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b80      	cmp	r3, #128	; 0x80
 8004dac:	d107      	bne.n	8004dbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004db6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f907 	bl	8004fcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d10e      	bne.n	8004dea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd6:	2b40      	cmp	r3, #64	; 0x40
 8004dd8:	d107      	bne.n	8004dea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f838 	bl	8004e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0320 	and.w	r3, r3, #32
 8004df4:	2b20      	cmp	r3, #32
 8004df6:	d10e      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d107      	bne.n	8004e16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f06f 0220 	mvn.w	r2, #32
 8004e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f8c7 	bl	8004fa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e16:	bf00      	nop
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e62:	bf00      	nop
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
	...

08004e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a40      	ldr	r2, [pc, #256]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e8e:	d00f      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a3d      	ldr	r2, [pc, #244]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a3c      	ldr	r2, [pc, #240]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d007      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a3b      	ldr	r2, [pc, #236]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_Base_SetConfig+0x40>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a3a      	ldr	r2, [pc, #232]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d108      	bne.n	8004ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2f      	ldr	r2, [pc, #188]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed0:	d01b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a2c      	ldr	r2, [pc, #176]	; (8004f88 <TIM_Base_SetConfig+0x118>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d017      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a2b      	ldr	r2, [pc, #172]	; (8004f8c <TIM_Base_SetConfig+0x11c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <TIM_Base_SetConfig+0x120>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a29      	ldr	r2, [pc, #164]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a28      	ldr	r2, [pc, #160]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a27      	ldr	r2, [pc, #156]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_Base_SetConfig+0x9a>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a26      	ldr	r2, [pc, #152]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d108      	bne.n	8004f1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	689a      	ldr	r2, [r3, #8]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a10      	ldr	r2, [pc, #64]	; (8004f84 <TIM_Base_SetConfig+0x114>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a12      	ldr	r2, [pc, #72]	; (8004f94 <TIM_Base_SetConfig+0x124>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a11      	ldr	r2, [pc, #68]	; (8004f98 <TIM_Base_SetConfig+0x128>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a10      	ldr	r2, [pc, #64]	; (8004f9c <TIM_Base_SetConfig+0x12c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_Base_SetConfig+0xf8>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a0f      	ldr	r2, [pc, #60]	; (8004fa0 <TIM_Base_SetConfig+0x130>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d103      	bne.n	8004f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	615a      	str	r2, [r3, #20]
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	40000400 	.word	0x40000400
 8004f8c:	40000800 	.word	0x40000800
 8004f90:	40000c00 	.word	0x40000c00
 8004f94:	40013400 	.word	0x40013400
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e040      	b.n	8005074 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fc f8e8 	bl	80011d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0201 	bic.w	r2, r2, #1
 800501c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f82c 	bl	800507c <UART_SetConfig>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e022      	b.n	8005074 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d002      	beq.n	800503c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fad8 	bl	80055ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800504a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800505a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb5f 	bl	8005730 <UART_CheckIdleState>
 8005072:	4603      	mov	r3, r0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800507c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005080:	b08a      	sub	sp, #40	; 0x28
 8005082:	af00      	add	r7, sp, #0
 8005084:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	431a      	orrs	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	69db      	ldr	r3, [r3, #28]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	4ba4      	ldr	r3, [pc, #656]	; (800533c <UART_SetConfig+0x2c0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050b4:	430b      	orrs	r3, r1
 80050b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	68da      	ldr	r2, [r3, #12]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a99      	ldr	r2, [pc, #612]	; (8005340 <UART_SetConfig+0x2c4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d004      	beq.n	80050e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	4313      	orrs	r3, r2
 80050e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f8:	430a      	orrs	r2, r1
 80050fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a90      	ldr	r2, [pc, #576]	; (8005344 <UART_SetConfig+0x2c8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d126      	bne.n	8005154 <UART_SetConfig+0xd8>
 8005106:	4b90      	ldr	r3, [pc, #576]	; (8005348 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	2b03      	cmp	r3, #3
 8005112:	d81b      	bhi.n	800514c <UART_SetConfig+0xd0>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0xa0>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005135 	.word	0x08005135
 8005128:	08005145 	.word	0x08005145
 800512c:	2301      	movs	r3, #1
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005132:	e116      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005134:	2302      	movs	r3, #2
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800513a:	e112      	b.n	8005362 <UART_SetConfig+0x2e6>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005142:	e10e      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800514a:	e10a      	b.n	8005362 <UART_SetConfig+0x2e6>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005152:	e106      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a7c      	ldr	r2, [pc, #496]	; (800534c <UART_SetConfig+0x2d0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d138      	bne.n	80051d0 <UART_SetConfig+0x154>
 800515e:	4b7a      	ldr	r3, [pc, #488]	; (8005348 <UART_SetConfig+0x2cc>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005164:	f003 030c 	and.w	r3, r3, #12
 8005168:	2b0c      	cmp	r3, #12
 800516a:	d82d      	bhi.n	80051c8 <UART_SetConfig+0x14c>
 800516c:	a201      	add	r2, pc, #4	; (adr r2, 8005174 <UART_SetConfig+0xf8>)
 800516e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005172:	bf00      	nop
 8005174:	080051a9 	.word	0x080051a9
 8005178:	080051c9 	.word	0x080051c9
 800517c:	080051c9 	.word	0x080051c9
 8005180:	080051c9 	.word	0x080051c9
 8005184:	080051b9 	.word	0x080051b9
 8005188:	080051c9 	.word	0x080051c9
 800518c:	080051c9 	.word	0x080051c9
 8005190:	080051c9 	.word	0x080051c9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051c9 	.word	0x080051c9
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051c1 	.word	0x080051c1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ae:	e0d8      	b.n	8005362 <UART_SetConfig+0x2e6>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051b6:	e0d4      	b.n	8005362 <UART_SetConfig+0x2e6>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051be:	e0d0      	b.n	8005362 <UART_SetConfig+0x2e6>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051c6:	e0cc      	b.n	8005362 <UART_SetConfig+0x2e6>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80051ce:	e0c8      	b.n	8005362 <UART_SetConfig+0x2e6>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a5e      	ldr	r2, [pc, #376]	; (8005350 <UART_SetConfig+0x2d4>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d125      	bne.n	8005226 <UART_SetConfig+0x1aa>
 80051da:	4b5b      	ldr	r3, [pc, #364]	; (8005348 <UART_SetConfig+0x2cc>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051e4:	2b30      	cmp	r3, #48	; 0x30
 80051e6:	d016      	beq.n	8005216 <UART_SetConfig+0x19a>
 80051e8:	2b30      	cmp	r3, #48	; 0x30
 80051ea:	d818      	bhi.n	800521e <UART_SetConfig+0x1a2>
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d00a      	beq.n	8005206 <UART_SetConfig+0x18a>
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d814      	bhi.n	800521e <UART_SetConfig+0x1a2>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <UART_SetConfig+0x182>
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d008      	beq.n	800520e <UART_SetConfig+0x192>
 80051fc:	e00f      	b.n	800521e <UART_SetConfig+0x1a2>
 80051fe:	2300      	movs	r3, #0
 8005200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005204:	e0ad      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005206:	2302      	movs	r3, #2
 8005208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800520c:	e0a9      	b.n	8005362 <UART_SetConfig+0x2e6>
 800520e:	2304      	movs	r3, #4
 8005210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005214:	e0a5      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005216:	2308      	movs	r3, #8
 8005218:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800521c:	e0a1      	b.n	8005362 <UART_SetConfig+0x2e6>
 800521e:	2310      	movs	r3, #16
 8005220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005224:	e09d      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a4a      	ldr	r2, [pc, #296]	; (8005354 <UART_SetConfig+0x2d8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d125      	bne.n	800527c <UART_SetConfig+0x200>
 8005230:	4b45      	ldr	r3, [pc, #276]	; (8005348 <UART_SetConfig+0x2cc>)
 8005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800523a:	2bc0      	cmp	r3, #192	; 0xc0
 800523c:	d016      	beq.n	800526c <UART_SetConfig+0x1f0>
 800523e:	2bc0      	cmp	r3, #192	; 0xc0
 8005240:	d818      	bhi.n	8005274 <UART_SetConfig+0x1f8>
 8005242:	2b80      	cmp	r3, #128	; 0x80
 8005244:	d00a      	beq.n	800525c <UART_SetConfig+0x1e0>
 8005246:	2b80      	cmp	r3, #128	; 0x80
 8005248:	d814      	bhi.n	8005274 <UART_SetConfig+0x1f8>
 800524a:	2b00      	cmp	r3, #0
 800524c:	d002      	beq.n	8005254 <UART_SetConfig+0x1d8>
 800524e:	2b40      	cmp	r3, #64	; 0x40
 8005250:	d008      	beq.n	8005264 <UART_SetConfig+0x1e8>
 8005252:	e00f      	b.n	8005274 <UART_SetConfig+0x1f8>
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e082      	b.n	8005362 <UART_SetConfig+0x2e6>
 800525c:	2302      	movs	r3, #2
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e07e      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005264:	2304      	movs	r3, #4
 8005266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800526a:	e07a      	b.n	8005362 <UART_SetConfig+0x2e6>
 800526c:	2308      	movs	r3, #8
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005272:	e076      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005274:	2310      	movs	r3, #16
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800527a:	e072      	b.n	8005362 <UART_SetConfig+0x2e6>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a35      	ldr	r2, [pc, #212]	; (8005358 <UART_SetConfig+0x2dc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d12a      	bne.n	80052dc <UART_SetConfig+0x260>
 8005286:	4b30      	ldr	r3, [pc, #192]	; (8005348 <UART_SetConfig+0x2cc>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005290:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005294:	d01a      	beq.n	80052cc <UART_SetConfig+0x250>
 8005296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800529a:	d81b      	bhi.n	80052d4 <UART_SetConfig+0x258>
 800529c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a0:	d00c      	beq.n	80052bc <UART_SetConfig+0x240>
 80052a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a6:	d815      	bhi.n	80052d4 <UART_SetConfig+0x258>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <UART_SetConfig+0x238>
 80052ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052b0:	d008      	beq.n	80052c4 <UART_SetConfig+0x248>
 80052b2:	e00f      	b.n	80052d4 <UART_SetConfig+0x258>
 80052b4:	2300      	movs	r3, #0
 80052b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ba:	e052      	b.n	8005362 <UART_SetConfig+0x2e6>
 80052bc:	2302      	movs	r3, #2
 80052be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c2:	e04e      	b.n	8005362 <UART_SetConfig+0x2e6>
 80052c4:	2304      	movs	r3, #4
 80052c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ca:	e04a      	b.n	8005362 <UART_SetConfig+0x2e6>
 80052cc:	2308      	movs	r3, #8
 80052ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d2:	e046      	b.n	8005362 <UART_SetConfig+0x2e6>
 80052d4:	2310      	movs	r3, #16
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052da:	e042      	b.n	8005362 <UART_SetConfig+0x2e6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a17      	ldr	r2, [pc, #92]	; (8005340 <UART_SetConfig+0x2c4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d13a      	bne.n	800535c <UART_SetConfig+0x2e0>
 80052e6:	4b18      	ldr	r3, [pc, #96]	; (8005348 <UART_SetConfig+0x2cc>)
 80052e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80052f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052f4:	d01a      	beq.n	800532c <UART_SetConfig+0x2b0>
 80052f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052fa:	d81b      	bhi.n	8005334 <UART_SetConfig+0x2b8>
 80052fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005300:	d00c      	beq.n	800531c <UART_SetConfig+0x2a0>
 8005302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005306:	d815      	bhi.n	8005334 <UART_SetConfig+0x2b8>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <UART_SetConfig+0x298>
 800530c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005310:	d008      	beq.n	8005324 <UART_SetConfig+0x2a8>
 8005312:	e00f      	b.n	8005334 <UART_SetConfig+0x2b8>
 8005314:	2300      	movs	r3, #0
 8005316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531a:	e022      	b.n	8005362 <UART_SetConfig+0x2e6>
 800531c:	2302      	movs	r3, #2
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005322:	e01e      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005324:	2304      	movs	r3, #4
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532a:	e01a      	b.n	8005362 <UART_SetConfig+0x2e6>
 800532c:	2308      	movs	r3, #8
 800532e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005332:	e016      	b.n	8005362 <UART_SetConfig+0x2e6>
 8005334:	2310      	movs	r3, #16
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800533a:	e012      	b.n	8005362 <UART_SetConfig+0x2e6>
 800533c:	efff69f3 	.word	0xefff69f3
 8005340:	40008000 	.word	0x40008000
 8005344:	40013800 	.word	0x40013800
 8005348:	40021000 	.word	0x40021000
 800534c:	40004400 	.word	0x40004400
 8005350:	40004800 	.word	0x40004800
 8005354:	40004c00 	.word	0x40004c00
 8005358:	40005000 	.word	0x40005000
 800535c:	2310      	movs	r3, #16
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a9f      	ldr	r2, [pc, #636]	; (80055e4 <UART_SetConfig+0x568>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d17a      	bne.n	8005462 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800536c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005370:	2b08      	cmp	r3, #8
 8005372:	d824      	bhi.n	80053be <UART_SetConfig+0x342>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <UART_SetConfig+0x300>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053a1 	.word	0x080053a1
 8005380:	080053bf 	.word	0x080053bf
 8005384:	080053a9 	.word	0x080053a9
 8005388:	080053bf 	.word	0x080053bf
 800538c:	080053af 	.word	0x080053af
 8005390:	080053bf 	.word	0x080053bf
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053bf 	.word	0x080053bf
 800539c:	080053b7 	.word	0x080053b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053a0:	f7fe fd20 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 80053a4:	61f8      	str	r0, [r7, #28]
        break;
 80053a6:	e010      	b.n	80053ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053a8:	4b8f      	ldr	r3, [pc, #572]	; (80055e8 <UART_SetConfig+0x56c>)
 80053aa:	61fb      	str	r3, [r7, #28]
        break;
 80053ac:	e00d      	b.n	80053ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ae:	f7fe fc81 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 80053b2:	61f8      	str	r0, [r7, #28]
        break;
 80053b4:	e009      	b.n	80053ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053ba:	61fb      	str	r3, [r7, #28]
        break;
 80053bc:	e005      	b.n	80053ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053be:	2300      	movs	r3, #0
 80053c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80053c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80fb 	beq.w	80055c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d305      	bcc.n	80053ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d903      	bls.n	80053f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80053f4:	e0e8      	b.n	80055c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2200      	movs	r2, #0
 80053fa:	461c      	mov	r4, r3
 80053fc:	4615      	mov	r5, r2
 80053fe:	f04f 0200 	mov.w	r2, #0
 8005402:	f04f 0300 	mov.w	r3, #0
 8005406:	022b      	lsls	r3, r5, #8
 8005408:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800540c:	0222      	lsls	r2, r4, #8
 800540e:	68f9      	ldr	r1, [r7, #12]
 8005410:	6849      	ldr	r1, [r1, #4]
 8005412:	0849      	lsrs	r1, r1, #1
 8005414:	2000      	movs	r0, #0
 8005416:	4688      	mov	r8, r1
 8005418:	4681      	mov	r9, r0
 800541a:	eb12 0a08 	adds.w	sl, r2, r8
 800541e:	eb43 0b09 	adc.w	fp, r3, r9
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005430:	4650      	mov	r0, sl
 8005432:	4659      	mov	r1, fp
 8005434:	f7fa ff1c 	bl	8000270 <__aeabi_uldivmod>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4613      	mov	r3, r2
 800543e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005446:	d308      	bcc.n	800545a <UART_SetConfig+0x3de>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544e:	d204      	bcs.n	800545a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	60da      	str	r2, [r3, #12]
 8005458:	e0b6      	b.n	80055c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005460:	e0b2      	b.n	80055c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800546a:	d15e      	bne.n	800552a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800546c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005470:	2b08      	cmp	r3, #8
 8005472:	d828      	bhi.n	80054c6 <UART_SetConfig+0x44a>
 8005474:	a201      	add	r2, pc, #4	; (adr r2, 800547c <UART_SetConfig+0x400>)
 8005476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547a:	bf00      	nop
 800547c:	080054a1 	.word	0x080054a1
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054b1 	.word	0x080054b1
 8005488:	080054c7 	.word	0x080054c7
 800548c:	080054b7 	.word	0x080054b7
 8005490:	080054c7 	.word	0x080054c7
 8005494:	080054c7 	.word	0x080054c7
 8005498:	080054c7 	.word	0x080054c7
 800549c:	080054bf 	.word	0x080054bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a0:	f7fe fca0 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 80054a4:	61f8      	str	r0, [r7, #28]
        break;
 80054a6:	e014      	b.n	80054d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7fe fcb2 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 80054ac:	61f8      	str	r0, [r7, #28]
        break;
 80054ae:	e010      	b.n	80054d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b0:	4b4d      	ldr	r3, [pc, #308]	; (80055e8 <UART_SetConfig+0x56c>)
 80054b2:	61fb      	str	r3, [r7, #28]
        break;
 80054b4:	e00d      	b.n	80054d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054b6:	f7fe fbfd 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 80054ba:	61f8      	str	r0, [r7, #28]
        break;
 80054bc:	e009      	b.n	80054d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c2:	61fb      	str	r3, [r7, #28]
        break;
 80054c4:	e005      	b.n	80054d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d077      	beq.n	80055c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	005a      	lsls	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	441a      	add	r2, r3
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d916      	bls.n	8005522 <UART_SetConfig+0x4a6>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fa:	d212      	bcs.n	8005522 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054fc:	69bb      	ldr	r3, [r7, #24]
 80054fe:	b29b      	uxth	r3, r3
 8005500:	f023 030f 	bic.w	r3, r3, #15
 8005504:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	b29b      	uxth	r3, r3
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	b29a      	uxth	r2, r3
 8005512:	8afb      	ldrh	r3, [r7, #22]
 8005514:	4313      	orrs	r3, r2
 8005516:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	8afa      	ldrh	r2, [r7, #22]
 800551e:	60da      	str	r2, [r3, #12]
 8005520:	e052      	b.n	80055c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005528:	e04e      	b.n	80055c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800552a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800552e:	2b08      	cmp	r3, #8
 8005530:	d827      	bhi.n	8005582 <UART_SetConfig+0x506>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x4bc>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	0800555d 	.word	0x0800555d
 800553c:	08005565 	.word	0x08005565
 8005540:	0800556d 	.word	0x0800556d
 8005544:	08005583 	.word	0x08005583
 8005548:	08005573 	.word	0x08005573
 800554c:	08005583 	.word	0x08005583
 8005550:	08005583 	.word	0x08005583
 8005554:	08005583 	.word	0x08005583
 8005558:	0800557b 	.word	0x0800557b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800555c:	f7fe fc42 	bl	8003de4 <HAL_RCC_GetPCLK1Freq>
 8005560:	61f8      	str	r0, [r7, #28]
        break;
 8005562:	e014      	b.n	800558e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7fe fc54 	bl	8003e10 <HAL_RCC_GetPCLK2Freq>
 8005568:	61f8      	str	r0, [r7, #28]
        break;
 800556a:	e010      	b.n	800558e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800556c:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <UART_SetConfig+0x56c>)
 800556e:	61fb      	str	r3, [r7, #28]
        break;
 8005570:	e00d      	b.n	800558e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005572:	f7fe fb9f 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8005576:	61f8      	str	r0, [r7, #28]
        break;
 8005578:	e009      	b.n	800558e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800557a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557e:	61fb      	str	r3, [r7, #28]
        break;
 8005580:	e005      	b.n	800558e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800558c:	bf00      	nop
    }

    if (pclk != 0U)
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d019      	beq.n	80055c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	085a      	lsrs	r2, r3, #1
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d909      	bls.n	80055c2 <UART_SetConfig+0x546>
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d205      	bcs.n	80055c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60da      	str	r2, [r3, #12]
 80055c0:	e002      	b.n	80055c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80055d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3728      	adds	r7, #40	; 0x28
 80055dc:	46bd      	mov	sp, r7
 80055de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055e2:	bf00      	nop
 80055e4:	40008000 	.word	0x40008000
 80055e8:	00f42400 	.word	0x00f42400

080055ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00a      	beq.n	8005638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00a      	beq.n	800565a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00a      	beq.n	800567c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f003 0310 	and.w	r3, r3, #16
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00a      	beq.n	800569e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00a      	beq.n	80056c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01a      	beq.n	8005702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ea:	d10a      	bne.n	8005702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00a      	beq.n	8005724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	430a      	orrs	r2, r1
 8005722:	605a      	str	r2, [r3, #4]
  }
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af02      	add	r7, sp, #8
 8005736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005740:	f7fc f83e 	bl	80017c0 <HAL_GetTick>
 8005744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0308 	and.w	r3, r3, #8
 8005750:	2b08      	cmp	r3, #8
 8005752:	d10e      	bne.n	8005772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f82d 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e023      	b.n	80057ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d10e      	bne.n	800579e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005780:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f817 	bl	80057c2 <UART_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e00d      	b.n	80057ba <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2220      	movs	r2, #32
 80057a2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b09c      	sub	sp, #112	; 0x70
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	603b      	str	r3, [r7, #0]
 80057ce:	4613      	mov	r3, r2
 80057d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057d2:	e0a5      	b.n	8005920 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057da:	f000 80a1 	beq.w	8005920 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057de:	f7fb ffef 	bl	80017c0 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d302      	bcc.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80057ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d13e      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057fc:	e853 3f00 	ldrex	r3, [r3]
 8005800:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005804:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005808:	667b      	str	r3, [r7, #100]	; 0x64
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005814:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005818:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e6      	bne.n	80057f4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f023 0301 	bic.w	r3, r3, #1
 800583c:	663b      	str	r3, [r7, #96]	; 0x60
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3308      	adds	r3, #8
 8005844:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005846:	64ba      	str	r2, [r7, #72]	; 0x48
 8005848:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800584c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e5      	bne.n	8005826 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e067      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d04f      	beq.n	8005920 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d147      	bne.n	8005920 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005898:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e6      	bne.n	800589a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	613b      	str	r3, [r7, #16]
   return(result);
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3308      	adds	r3, #8
 80058ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80058ec:	623a      	str	r2, [r7, #32]
 80058ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	69f9      	ldr	r1, [r7, #28]
 80058f2:	6a3a      	ldr	r2, [r7, #32]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2220      	movs	r2, #32
 8005904:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e010      	b.n	8005942 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	69da      	ldr	r2, [r3, #28]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	429a      	cmp	r2, r3
 800593c:	f43f af4a 	beq.w	80057d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005940:	2300      	movs	r3, #0
}
 8005942:	4618      	mov	r0, r3
 8005944:	3770      	adds	r7, #112	; 0x70
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800594a:	b084      	sub	sp, #16
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	f107 001c 	add.w	r0, r7, #28
 8005958:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa6f 	bl	8005e4c <USB_CoreReset>
 800596e:	4603      	mov	r3, r0
 8005970:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005972:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	639a      	str	r2, [r3, #56]	; 0x38
 8005984:	e005      	b.n	8005992 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800599e:	b004      	add	sp, #16
 80059a0:	4770      	bx	lr

080059a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d115      	bne.n	8005a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f7fb fef0 	bl	80017d8 <HAL_Delay>
      ms++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa16 	bl	8005e30 <USB_GetMode>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d01e      	beq.n	8005a48 <USB_SetCurrentMode+0x84>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b31      	cmp	r3, #49	; 0x31
 8005a0e:	d9f0      	bls.n	80059f2 <USB_SetCurrentMode+0x2e>
 8005a10:	e01a      	b.n	8005a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d115      	bne.n	8005a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7fb fed7 	bl	80017d8 <HAL_Delay>
      ms++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9fd 	bl	8005e30 <USB_GetMode>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <USB_SetCurrentMode+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b31      	cmp	r3, #49	; 0x31
 8005a40:	d9f0      	bls.n	8005a24 <USB_SetCurrentMode+0x60>
 8005a42:	e001      	b.n	8005a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e005      	b.n	8005a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b32      	cmp	r3, #50	; 0x32
 8005a4c:	d101      	bne.n	8005a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e009      	b.n	8005a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3340      	adds	r3, #64	; 0x40
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b0e      	cmp	r3, #14
 8005a94:	d9f2      	bls.n	8005a7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11c      	bne.n	8005ad6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e005      	b.n	8005ae2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af4:	4619      	mov	r1, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	461a      	mov	r2, r3
 8005afe:	680b      	ldr	r3, [r1, #0]
 8005b00:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b02:	2103      	movs	r1, #3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f959 	bl	8005dbc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f8f1 	bl	8005cf4 <USB_FlushTxFifo>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f91d 	bl	8005d5c <USB_FlushRxFifo>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	461a      	mov	r2, r3
 8005b34:	2300      	movs	r3, #0
 8005b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3e:	461a      	mov	r2, r3
 8005b40:	2300      	movs	r3, #0
 8005b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	e043      	b.n	8005bde <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b6c:	d118      	bne.n	8005ba0 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10a      	bne.n	8005b8a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	e013      	b.n	8005bb2 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	015a      	lsls	r2, r3, #5
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b96:	461a      	mov	r2, r3
 8005b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b9c:	6013      	str	r3, [r2, #0]
 8005b9e:	e008      	b.n	8005bb2 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	461a      	mov	r2, r3
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3b7      	bcc.n	8005b56 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	e043      	b.n	8005c74 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c02:	d118      	bne.n	8005c36 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	461a      	mov	r2, r3
 8005c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	e013      	b.n	8005c48 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	015a      	lsls	r2, r3, #5
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4413      	add	r3, r2
 8005c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c32:	6013      	str	r3, [r2, #0]
 8005c34:	e008      	b.n	8005c48 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	2300      	movs	r3, #0
 8005c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	015a      	lsls	r2, r3, #5
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4413      	add	r3, r2
 8005c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c66:	461a      	mov	r2, r3
 8005c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3b7      	bcc.n	8005bec <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f043 0210 	orr.w	r2, r3, #16
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	4b10      	ldr	r3, [pc, #64]	; (8005cf0 <USB_DevInit+0x294>)
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d005      	beq.n	8005cc8 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f043 0208 	orr.w	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d107      	bne.n	8005cde <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cd6:	f043 0304 	orr.w	r3, r3, #4
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005cea:	b004      	add	sp, #16
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	803c3800 	.word	0x803c3800

08005cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a13      	ldr	r2, [pc, #76]	; (8005d58 <USB_FlushTxFifo+0x64>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e01b      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	daf2      	bge.n	8005d02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	019b      	lsls	r3, r3, #6
 8005d24:	f043 0220 	orr.w	r2, r3, #32
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <USB_FlushTxFifo+0x64>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e006      	b.n	8005d4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	2b20      	cmp	r3, #32
 8005d48:	d0f0      	beq.n	8005d2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	00030d40 	.word	0x00030d40

08005d5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a11      	ldr	r2, [pc, #68]	; (8005db8 <USB_FlushRxFifo+0x5c>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e018      	b.n	8005dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	daf2      	bge.n	8005d68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2210      	movs	r2, #16
 8005d8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3301      	adds	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4a08      	ldr	r2, [pc, #32]	; (8005db8 <USB_FlushRxFifo+0x5c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e006      	b.n	8005dac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0310 	and.w	r3, r3, #16
 8005da6:	2b10      	cmp	r3, #16
 8005da8:	d0f0      	beq.n	8005d8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	00030d40 	.word	0x00030d40

08005dbc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b085      	sub	sp, #20
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e08:	f023 0303 	bic.w	r3, r3, #3
 8005e0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e1c:	f043 0302 	orr.w	r3, r3, #2
 8005e20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	695b      	ldr	r3, [r3, #20]
 8005e3c:	f003 0301 	and.w	r3, r3, #1
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4a13      	ldr	r2, [pc, #76]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d901      	bls.n	8005e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e01b      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	daf2      	bge.n	8005e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	f043 0201 	orr.w	r2, r3, #1
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	3301      	adds	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <USB_CoreReset+0x64>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d901      	bls.n	8005e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	f003 0301 	and.w	r3, r3, #1
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d0f0      	beq.n	8005e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
 8005eae:	bf00      	nop
 8005eb0:	00030d40 	.word	0x00030d40

08005eb4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	; 0x28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8005ebc:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ec0:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005ec2:	f043 0302 	orr.w	r3, r3, #2
 8005ec6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ec8:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ecc:	f003 0302 	and.w	r3, r3, #2
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8005ed4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ed8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8005eda:	2312      	movs	r3, #18
 8005edc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005eea:	f107 0314 	add.w	r3, r7, #20
 8005eee:	4619      	mov	r1, r3
 8005ef0:	481b      	ldr	r0, [pc, #108]	; (8005f60 <I2Cx_MspInit+0xac>)
 8005ef2:	f7fb fe83 	bl	8001bfc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8005ef6:	f107 0314 	add.w	r3, r7, #20
 8005efa:	4619      	mov	r1, r3
 8005efc:	4818      	ldr	r0, [pc, #96]	; (8005f60 <I2Cx_MspInit+0xac>)
 8005efe:	f7fb fe7d 	bl	8001bfc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8005f02:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	4a0f      	ldr	r2, [pc, #60]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f24:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8005f26:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	4a0c      	ldr	r2, [pc, #48]	; (8005f5c <I2Cx_MspInit+0xa8>)
 8005f2c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005f30:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8005f32:	2200      	movs	r2, #0
 8005f34:	210f      	movs	r1, #15
 8005f36:	2021      	movs	r0, #33	; 0x21
 8005f38:	f7fb fd2a 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8005f3c:	2021      	movs	r0, #33	; 0x21
 8005f3e:	f7fb fd43 	bl	80019c8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8005f42:	2200      	movs	r2, #0
 8005f44:	210f      	movs	r1, #15
 8005f46:	2022      	movs	r0, #34	; 0x22
 8005f48:	f7fb fd22 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8005f4c:	2022      	movs	r0, #34	; 0x22
 8005f4e:	f7fb fd3b 	bl	80019c8 <HAL_NVIC_EnableIRQ>
}
 8005f52:	bf00      	nop
 8005f54:	3728      	adds	r7, #40	; 0x28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	48000400 	.word	0x48000400

08005f64 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <I2Cx_Init+0x54>)
 8005f70:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a11      	ldr	r2, [pc, #68]	; (8005fbc <I2Cx_Init+0x58>)
 8005f76:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2200      	movs	r2, #0
 8005f94:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff89 	bl	8005eb4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7fc f8f8 	bl	8002198 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8005fa8:	2100      	movs	r1, #0
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fc fe86 	bl	8002cbc <HAL_I2CEx_ConfigAnalogFilter>
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	40005800 	.word	0x40005800
 8005fbc:	00702681 	.word	0x00702681

08005fc0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08a      	sub	sp, #40	; 0x28
 8005fc4:	af04      	add	r7, sp, #16
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	72fb      	strb	r3, [r7, #11]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	813b      	strh	r3, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	b299      	uxth	r1, r3
 8005fe2:	88f8      	ldrh	r0, [r7, #6]
 8005fe4:	893a      	ldrh	r2, [r7, #8]
 8005fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f7fc faa0 	bl	800253c <HAL_I2C_Mem_Read>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006006:	7afb      	ldrb	r3, [r7, #11]
 8006008:	4619      	mov	r1, r3
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 f832 	bl	8006074 <I2Cx_Error>
  }
  return status;
 8006010:	7dfb      	ldrb	r3, [r7, #23]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b08a      	sub	sp, #40	; 0x28
 800601e:	af04      	add	r7, sp, #16
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	461a      	mov	r2, r3
 8006028:	4603      	mov	r3, r0
 800602a:	72fb      	strb	r3, [r7, #11]
 800602c:	460b      	mov	r3, r1
 800602e:	813b      	strh	r3, [r7, #8]
 8006030:	4613      	mov	r3, r2
 8006032:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006034:	2300      	movs	r3, #0
 8006036:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006038:	7afb      	ldrb	r3, [r7, #11]
 800603a:	b299      	uxth	r1, r3
 800603c:	88f8      	ldrh	r0, [r7, #6]
 800603e:	893a      	ldrh	r2, [r7, #8]
 8006040:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006044:	9302      	str	r3, [sp, #8]
 8006046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	4603      	mov	r3, r0
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7fc f95f 	bl	8002314 <HAL_I2C_Mem_Write>
 8006056:	4603      	mov	r3, r0
 8006058:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d004      	beq.n	800606a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006060:	7afb      	ldrb	r3, [r7, #11]
 8006062:	4619      	mov	r1, r3
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f805 	bl	8006074 <I2Cx_Error>
  }
  return status;
 800606a:	7dfb      	ldrb	r3, [r7, #23]
}
 800606c:	4618      	mov	r0, r3
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	460b      	mov	r3, r1
 800607e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fc f918 	bl	80022b6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff ff6c 	bl	8005f64 <I2Cx_Init>
}
 800608c:	bf00      	nop
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006098:	4802      	ldr	r0, [pc, #8]	; (80060a4 <SENSOR_IO_Init+0x10>)
 800609a:	f7ff ff63 	bl	8005f64 <I2Cx_Init>
}
 800609e:	bf00      	nop
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000894 	.word	0x20000894

080060a8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
 80060b2:	460b      	mov	r3, r1
 80060b4:	71bb      	strb	r3, [r7, #6]
 80060b6:	4613      	mov	r3, r2
 80060b8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80060ba:	79bb      	ldrb	r3, [r7, #6]
 80060bc:	b29a      	uxth	r2, r3
 80060be:	79f9      	ldrb	r1, [r7, #7]
 80060c0:	2301      	movs	r3, #1
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	1d7b      	adds	r3, r7, #5
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2301      	movs	r3, #1
 80060ca:	4803      	ldr	r0, [pc, #12]	; (80060d8 <SENSOR_IO_Write+0x30>)
 80060cc:	f7ff ffa5 	bl	800601a <I2Cx_WriteMultiple>
}
 80060d0:	bf00      	nop
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000894 	.word	0x20000894

080060dc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af02      	add	r7, sp, #8
 80060e2:	4603      	mov	r3, r0
 80060e4:	460a      	mov	r2, r1
 80060e6:	71fb      	strb	r3, [r7, #7]
 80060e8:	4613      	mov	r3, r2
 80060ea:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80060f0:	79bb      	ldrb	r3, [r7, #6]
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	79f9      	ldrb	r1, [r7, #7]
 80060f6:	2301      	movs	r3, #1
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	f107 030f 	add.w	r3, r7, #15
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2301      	movs	r3, #1
 8006102:	4804      	ldr	r0, [pc, #16]	; (8006114 <SENSOR_IO_Read+0x38>)
 8006104:	f7ff ff5c 	bl	8005fc0 <I2Cx_ReadMultiple>

  return read_value;
 8006108:	7bfb      	ldrb	r3, [r7, #15]
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000894 	.word	0x20000894

08006118 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af02      	add	r7, sp, #8
 800611e:	603a      	str	r2, [r7, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	4603      	mov	r3, r0
 8006124:	71fb      	strb	r3, [r7, #7]
 8006126:	460b      	mov	r3, r1
 8006128:	71bb      	strb	r3, [r7, #6]
 800612a:	4613      	mov	r3, r2
 800612c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800612e:	79bb      	ldrb	r3, [r7, #6]
 8006130:	b29a      	uxth	r2, r3
 8006132:	79f9      	ldrb	r1, [r7, #7]
 8006134:	88bb      	ldrh	r3, [r7, #4]
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2301      	movs	r3, #1
 800613e:	4804      	ldr	r0, [pc, #16]	; (8006150 <SENSOR_IO_ReadMultiple+0x38>)
 8006140:	f7ff ff3e 	bl	8005fc0 <I2Cx_ReadMultiple>
 8006144:	4603      	mov	r3, r0
 8006146:	b29b      	uxth	r3, r3
}
 8006148:	4618      	mov	r0, r3
 800614a:	3708      	adds	r7, #8
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}
 8006150:	20000894 	.word	0x20000894

08006154 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800615e:	2300      	movs	r3, #0
 8006160:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006162:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <BSP_ACCELERO_Init+0x74>)
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4798      	blx	r3
 8006168:	4603      	mov	r3, r0
 800616a:	2b6a      	cmp	r3, #106	; 0x6a
 800616c:	d002      	beq.n	8006174 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	73fb      	strb	r3, [r7, #15]
 8006172:	e024      	b.n	80061be <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006174:	4b15      	ldr	r3, [pc, #84]	; (80061cc <BSP_ACCELERO_Init+0x78>)
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <BSP_ACCELERO_Init+0x74>)
 8006178:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800617a:	2330      	movs	r3, #48	; 0x30
 800617c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8006182:	2300      	movs	r3, #0
 8006184:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006186:	2340      	movs	r3, #64	; 0x40
 8006188:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8006192:	797a      	ldrb	r2, [r7, #5]
 8006194:	7abb      	ldrb	r3, [r7, #10]
 8006196:	4313      	orrs	r3, r2
 8006198:	b2db      	uxtb	r3, r3
 800619a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800619c:	7a3b      	ldrb	r3, [r7, #8]
 800619e:	f043 0304 	orr.w	r3, r3, #4
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	b21a      	sxth	r2, r3
 80061a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b21b      	sxth	r3, r3
 80061b0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80061b2:	4b06      	ldr	r3, [pc, #24]	; (80061cc <BSP_ACCELERO_Init+0x78>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	89ba      	ldrh	r2, [r7, #12]
 80061ba:	4610      	mov	r0, r2
 80061bc:	4798      	blx	r3
  }  

  return ret;
 80061be:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	200008e8 	.word	0x200008e8

080061d0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80061d8:	4b08      	ldr	r3, [pc, #32]	; (80061fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d009      	beq.n	80061f4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	4798      	blx	r3
    }
  }
}
 80061f4:	bf00      	nop
 80061f6:	3708      	adds	r7, #8
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	200008e8 	.word	0x200008e8

08006200 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	4603      	mov	r3, r0
 8006208:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800620e:	2110      	movs	r1, #16
 8006210:	20d4      	movs	r0, #212	; 0xd4
 8006212:	f7ff ff63 	bl	80060dc <SENSOR_IO_Read>
 8006216:	4603      	mov	r3, r0
 8006218:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800621e:	7bbb      	ldrb	r3, [r7, #14]
 8006220:	f003 0303 	and.w	r3, r3, #3
 8006224:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8006226:	7bba      	ldrb	r2, [r7, #14]
 8006228:	7bfb      	ldrb	r3, [r7, #15]
 800622a:	4313      	orrs	r3, r2
 800622c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	461a      	mov	r2, r3
 8006232:	2110      	movs	r1, #16
 8006234:	20d4      	movs	r0, #212	; 0xd4
 8006236:	f7ff ff37 	bl	80060a8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800623a:	2112      	movs	r1, #18
 800623c:	20d4      	movs	r0, #212	; 0xd4
 800623e:	f7ff ff4d 	bl	80060dc <SENSOR_IO_Read>
 8006242:	4603      	mov	r3, r0
 8006244:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8006246:	88fb      	ldrh	r3, [r7, #6]
 8006248:	0a1b      	lsrs	r3, r3, #8
 800624a:	b29b      	uxth	r3, r3
 800624c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800624e:	7bbb      	ldrb	r3, [r7, #14]
 8006250:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8006254:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8006256:	7bba      	ldrb	r2, [r7, #14]
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	4313      	orrs	r3, r2
 800625c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800625e:	7bbb      	ldrb	r3, [r7, #14]
 8006260:	461a      	mov	r2, r3
 8006262:	2112      	movs	r1, #18
 8006264:	20d4      	movs	r0, #212	; 0xd4
 8006266:	f7ff ff1f 	bl	80060a8 <SENSOR_IO_Write>
}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8006278:	2300      	movs	r3, #0
 800627a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800627c:	2110      	movs	r1, #16
 800627e:	20d4      	movs	r0, #212	; 0xd4
 8006280:	f7ff ff2c 	bl	80060dc <SENSOR_IO_Read>
 8006284:	4603      	mov	r3, r0
 8006286:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8006288:	79fb      	ldrb	r3, [r7, #7]
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	461a      	mov	r2, r3
 8006294:	2110      	movs	r1, #16
 8006296:	20d4      	movs	r0, #212	; 0xd4
 8006298:	f7ff ff06 	bl	80060a8 <SENSOR_IO_Write>
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80062a4:	b580      	push	{r7, lr}
 80062a6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80062a8:	f7ff fef4 	bl	8006094 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80062ac:	210f      	movs	r1, #15
 80062ae:	20d4      	movs	r0, #212	; 0xd4
 80062b0:	f7ff ff14 	bl	80060dc <SENSOR_IO_Read>
 80062b4:	4603      	mov	r3, r0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	bd80      	pop	{r7, pc}

080062ba <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	4603      	mov	r3, r0
 80062c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80062c4:	2300      	movs	r3, #0
 80062c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80062c8:	2115      	movs	r1, #21
 80062ca:	20d4      	movs	r0, #212	; 0xd4
 80062cc:	f7ff ff06 	bl	80060dc <SENSOR_IO_Read>
 80062d0:	4603      	mov	r3, r0
 80062d2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	f043 0310 	orr.w	r3, r3, #16
 80062e8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	461a      	mov	r2, r3
 80062ee:	2115      	movs	r1, #21
 80062f0:	20d4      	movs	r0, #212	; 0xd4
 80062f2:	f7ff fed9 	bl	80060a8 <SENSOR_IO_Write>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
	...

08006300 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b088      	sub	sp, #32
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8006308:	2300      	movs	r3, #0
 800630a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8006310:	f04f 0300 	mov.w	r3, #0
 8006314:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8006316:	2110      	movs	r1, #16
 8006318:	20d4      	movs	r0, #212	; 0xd4
 800631a:	f7ff fedf 	bl	80060dc <SENSOR_IO_Read>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8006322:	f107 0208 	add.w	r2, r7, #8
 8006326:	2306      	movs	r3, #6
 8006328:	2128      	movs	r1, #40	; 0x28
 800632a:	20d4      	movs	r0, #212	; 0xd4
 800632c:	f7ff fef4 	bl	8006118 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e01c      	b.n	8006370 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8006336:	7ffb      	ldrb	r3, [r7, #31]
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	3301      	adds	r3, #1
 800633c:	3320      	adds	r3, #32
 800633e:	443b      	add	r3, r7
 8006340:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006344:	b29b      	uxth	r3, r3
 8006346:	021b      	lsls	r3, r3, #8
 8006348:	b29a      	uxth	r2, r3
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	3320      	adds	r3, #32
 8006350:	443b      	add	r3, r7
 8006352:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006356:	b29b      	uxth	r3, r3
 8006358:	4413      	add	r3, r2
 800635a:	b29a      	uxth	r2, r3
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	b212      	sxth	r2, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	3320      	adds	r3, #32
 8006364:	443b      	add	r3, r7
 8006366:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800636a:	7ffb      	ldrb	r3, [r7, #31]
 800636c:	3301      	adds	r3, #1
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	7ffb      	ldrb	r3, [r7, #31]
 8006372:	2b02      	cmp	r3, #2
 8006374:	d9df      	bls.n	8006336 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b0c      	cmp	r3, #12
 800637e:	d829      	bhi.n	80063d4 <LSM6DSL_AccReadXYZ+0xd4>
 8006380:	a201      	add	r2, pc, #4	; (adr r2, 8006388 <LSM6DSL_AccReadXYZ+0x88>)
 8006382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006386:	bf00      	nop
 8006388:	080063bd 	.word	0x080063bd
 800638c:	080063d5 	.word	0x080063d5
 8006390:	080063d5 	.word	0x080063d5
 8006394:	080063d5 	.word	0x080063d5
 8006398:	080063cf 	.word	0x080063cf
 800639c:	080063d5 	.word	0x080063d5
 80063a0:	080063d5 	.word	0x080063d5
 80063a4:	080063d5 	.word	0x080063d5
 80063a8:	080063c3 	.word	0x080063c3
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063d5 	.word	0x080063d5
 80063b4:	080063d5 	.word	0x080063d5
 80063b8:	080063c9 	.word	0x080063c9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80063bc:	4b18      	ldr	r3, [pc, #96]	; (8006420 <LSM6DSL_AccReadXYZ+0x120>)
 80063be:	61bb      	str	r3, [r7, #24]
    break;
 80063c0:	e008      	b.n	80063d4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80063c2:	4b18      	ldr	r3, [pc, #96]	; (8006424 <LSM6DSL_AccReadXYZ+0x124>)
 80063c4:	61bb      	str	r3, [r7, #24]
    break;
 80063c6:	e005      	b.n	80063d4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <LSM6DSL_AccReadXYZ+0x128>)
 80063ca:	61bb      	str	r3, [r7, #24]
    break;
 80063cc:	e002      	b.n	80063d4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80063ce:	4b17      	ldr	r3, [pc, #92]	; (800642c <LSM6DSL_AccReadXYZ+0x12c>)
 80063d0:	61bb      	str	r3, [r7, #24]
    break;    
 80063d2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e01a      	b.n	8006410 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80063da:	7ffb      	ldrb	r3, [r7, #31]
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	3320      	adds	r3, #32
 80063e0:	443b      	add	r3, r7
 80063e2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	7ffb      	ldrb	r3, [r7, #31]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006402:	ee17 2a90 	vmov	r2, s15
 8006406:	b212      	sxth	r2, r2
 8006408:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800640a:	7ffb      	ldrb	r3, [r7, #31]
 800640c:	3301      	adds	r3, #1
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	7ffb      	ldrb	r3, [r7, #31]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d9e1      	bls.n	80063da <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	3720      	adds	r7, #32
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	3d79db23 	.word	0x3d79db23
 8006424:	3df9db23 	.word	0x3df9db23
 8006428:	3e79db23 	.word	0x3e79db23
 800642c:	3ef9db23 	.word	0x3ef9db23

08006430 <__NVIC_SetPriority>:
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	6039      	str	r1, [r7, #0]
 800643a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006440:	2b00      	cmp	r3, #0
 8006442:	db0a      	blt.n	800645a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	b2da      	uxtb	r2, r3
 8006448:	490c      	ldr	r1, [pc, #48]	; (800647c <__NVIC_SetPriority+0x4c>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	0112      	lsls	r2, r2, #4
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	440b      	add	r3, r1
 8006454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006458:	e00a      	b.n	8006470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	b2da      	uxtb	r2, r3
 800645e:	4908      	ldr	r1, [pc, #32]	; (8006480 <__NVIC_SetPriority+0x50>)
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	3b04      	subs	r3, #4
 8006468:	0112      	lsls	r2, r2, #4
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	440b      	add	r3, r1
 800646e:	761a      	strb	r2, [r3, #24]
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	e000e100 	.word	0xe000e100
 8006480:	e000ed00 	.word	0xe000ed00

08006484 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006488:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <SysTick_Handler+0x1c>)
 800648a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800648c:	f001 fe7c 	bl	8008188 <xTaskGetSchedulerState>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006496:	f002 fe67 	bl	8009168 <xPortSysTickHandler>
  }
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	e000e010 	.word	0xe000e010

080064a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80064a8:	2100      	movs	r1, #0
 80064aa:	f06f 0004 	mvn.w	r0, #4
 80064ae:	f7ff ffbf 	bl	8006430 <__NVIC_SetPriority>
#endif
}
 80064b2:	bf00      	nop
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064be:	f3ef 8305 	mrs	r3, IPSR
 80064c2:	603b      	str	r3, [r7, #0]
  return(result);
 80064c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064ca:	f06f 0305 	mvn.w	r3, #5
 80064ce:	607b      	str	r3, [r7, #4]
 80064d0:	e00c      	b.n	80064ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064d2:	4b0a      	ldr	r3, [pc, #40]	; (80064fc <osKernelInitialize+0x44>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80064da:	4b08      	ldr	r3, [pc, #32]	; (80064fc <osKernelInitialize+0x44>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	607b      	str	r3, [r7, #4]
 80064e4:	e002      	b.n	80064ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80064e6:	f04f 33ff 	mov.w	r3, #4294967295
 80064ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064ec:	687b      	ldr	r3, [r7, #4]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	200008ec 	.word	0x200008ec

08006500 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006506:	f3ef 8305 	mrs	r3, IPSR
 800650a:	603b      	str	r3, [r7, #0]
  return(result);
 800650c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006512:	f06f 0305 	mvn.w	r3, #5
 8006516:	607b      	str	r3, [r7, #4]
 8006518:	e010      	b.n	800653c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <osKernelStart+0x48>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d109      	bne.n	8006536 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006522:	f7ff ffbf 	bl	80064a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006526:	4b08      	ldr	r3, [pc, #32]	; (8006548 <osKernelStart+0x48>)
 8006528:	2202      	movs	r2, #2
 800652a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800652c:	f001 f9be 	bl	80078ac <vTaskStartScheduler>
      stat = osOK;
 8006530:	2300      	movs	r3, #0
 8006532:	607b      	str	r3, [r7, #4]
 8006534:	e002      	b.n	800653c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006536:	f04f 33ff 	mov.w	r3, #4294967295
 800653a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800653c:	687b      	ldr	r3, [r7, #4]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	200008ec 	.word	0x200008ec

0800654c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006552:	f3ef 8305 	mrs	r3, IPSR
 8006556:	603b      	str	r3, [r7, #0]
  return(result);
 8006558:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800655e:	f001 fad1 	bl	8007b04 <xTaskGetTickCountFromISR>
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	e002      	b.n	800656c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8006566:	f001 fabd 	bl	8007ae4 <xTaskGetTickCount>
 800656a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800656c:	687b      	ldr	r3, [r7, #4]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006576:	b580      	push	{r7, lr}
 8006578:	b08e      	sub	sp, #56	; 0x38
 800657a:	af04      	add	r7, sp, #16
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006586:	f3ef 8305 	mrs	r3, IPSR
 800658a:	617b      	str	r3, [r7, #20]
  return(result);
 800658c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800658e:	2b00      	cmp	r3, #0
 8006590:	d17e      	bne.n	8006690 <osThreadNew+0x11a>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d07b      	beq.n	8006690 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006598:	2380      	movs	r3, #128	; 0x80
 800659a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800659c:	2318      	movs	r3, #24
 800659e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065a0:	2300      	movs	r3, #0
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d045      	beq.n	800663c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <osThreadNew+0x48>
        name = attr->name;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <osThreadNew+0x6e>
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	2b38      	cmp	r3, #56	; 0x38
 80065d6:	d805      	bhi.n	80065e4 <osThreadNew+0x6e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <osThreadNew+0x72>
        return (NULL);
 80065e4:	2300      	movs	r3, #0
 80065e6:	e054      	b.n	8006692 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d003      	beq.n	80065f8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	089b      	lsrs	r3, r3, #2
 80065f6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <osThreadNew+0xa8>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	2bbb      	cmp	r3, #187	; 0xbb
 8006606:	d90a      	bls.n	800661e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800660c:	2b00      	cmp	r3, #0
 800660e:	d006      	beq.n	800661e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <osThreadNew+0xa8>
        mem = 1;
 8006618:	2301      	movs	r3, #1
 800661a:	61bb      	str	r3, [r7, #24]
 800661c:	e010      	b.n	8006640 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10c      	bne.n	8006640 <osThreadNew+0xca>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d108      	bne.n	8006640 <osThreadNew+0xca>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <osThreadNew+0xca>
          mem = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
 800663a:	e001      	b.n	8006640 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d110      	bne.n	8006668 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800664e:	9202      	str	r2, [sp, #8]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	9300      	str	r3, [sp, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 ff6d 	bl	800753c <xTaskCreateStatic>
 8006662:	4603      	mov	r3, r0
 8006664:	613b      	str	r3, [r7, #16]
 8006666:	e013      	b.n	8006690 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d110      	bne.n	8006690 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	b29a      	uxth	r2, r3
 8006672:	f107 0310 	add.w	r3, r7, #16
 8006676:	9301      	str	r3, [sp, #4]
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	9300      	str	r3, [sp, #0]
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 ffb8 	bl	80075f6 <xTaskCreate>
 8006686:	4603      	mov	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d001      	beq.n	8006690 <osThreadNew+0x11a>
            hTask = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006690:	693b      	ldr	r3, [r7, #16]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3728      	adds	r7, #40	; 0x28
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b088      	sub	sp, #32
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <osThreadFlagsSet+0x1a>
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	da03      	bge.n	80066be <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80066b6:	f06f 0303 	mvn.w	r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	e035      	b.n	800672a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 80066be:	f04f 33ff 	mov.w	r3, #4294967295
 80066c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c4:	f3ef 8305 	mrs	r3, IPSR
 80066c8:	613b      	str	r3, [r7, #16]
  return(result);
 80066ca:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d01f      	beq.n	8006710 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80066d4:	f107 0308 	add.w	r3, r7, #8
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	2300      	movs	r3, #0
 80066dc:	2201      	movs	r2, #1
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6978      	ldr	r0, [r7, #20]
 80066e2:	f001 fefb 	bl	80084dc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80066e6:	f107 030c 	add.w	r3, r7, #12
 80066ea:	2200      	movs	r2, #0
 80066ec:	9200      	str	r2, [sp, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2100      	movs	r1, #0
 80066f2:	6978      	ldr	r0, [r7, #20]
 80066f4:	f001 fef2 	bl	80084dc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d015      	beq.n	800672a <osThreadFlagsSet+0x8e>
 80066fe:	4b0d      	ldr	r3, [pc, #52]	; (8006734 <osThreadFlagsSet+0x98>)
 8006700:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	f3bf 8f6f 	isb	sy
 800670e:	e00c      	b.n	800672a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006710:	2300      	movs	r3, #0
 8006712:	2201      	movs	r2, #1
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	f001 fe22 	bl	8008360 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800671c:	f107 030c 	add.w	r3, r7, #12
 8006720:	2200      	movs	r2, #0
 8006722:	2100      	movs	r1, #0
 8006724:	6978      	ldr	r0, [r7, #20]
 8006726:	f001 fe1b 	bl	8008360 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800672a:	68fb      	ldr	r3, [r7, #12]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	e000ed04 	.word	0xe000ed04

08006738 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b08c      	sub	sp, #48	; 0x30
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006744:	f3ef 8305 	mrs	r3, IPSR
 8006748:	617b      	str	r3, [r7, #20]
  return(result);
 800674a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8006750:	f06f 0305 	mvn.w	r3, #5
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	e06b      	b.n	8006830 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	da03      	bge.n	8006766 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800675e:	f06f 0303 	mvn.w	r3, #3
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	e064      	b.n	8006830 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	62bb      	str	r3, [r7, #40]	; 0x28
 8006774:	e001      	b.n	800677a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800677a:	2300      	movs	r3, #0
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8006782:	f001 f9af 	bl	8007ae4 <xTaskGetTickCount>
 8006786:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8006788:	f107 0210 	add.w	r2, r7, #16
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006790:	2000      	movs	r0, #0
 8006792:	f001 fd85 	bl	80082a0 <xTaskNotifyWait>
 8006796:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d137      	bne.n	800680e <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800679e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4013      	ands	r3, r2
 80067a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067aa:	4313      	orrs	r3, r2
 80067ac:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00c      	beq.n	80067d2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	4013      	ands	r3, r2
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d032      	beq.n	800682a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10f      	bne.n	80067ea <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80067ca:	f06f 0302 	mvn.w	r3, #2
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80067d0:	e02e      	b.n	8006830 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067d6:	4013      	ands	r3, r2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d128      	bne.n	800682e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80067e2:	f06f 0302 	mvn.w	r3, #2
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80067e8:	e022      	b.n	8006830 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80067ea:	f001 f97b 	bl	8007ae4 <xTaskGetTickCount>
 80067ee:	4602      	mov	r2, r0
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d902      	bls.n	8006804 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
 8006802:	e00e      	b.n	8006822 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
 800680c:	e009      	b.n	8006822 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8006814:	f06f 0302 	mvn.w	r3, #2
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681a:	e002      	b.n	8006822 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800681c:	f06f 0301 	mvn.w	r3, #1
 8006820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1af      	bne.n	8006788 <osThreadFlagsWait+0x50>
 8006828:	e002      	b.n	8006830 <osThreadFlagsWait+0xf8>
            break;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <osThreadFlagsWait+0xf8>
            break;
 800682e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006832:	4618      	mov	r0, r3
 8006834:	3730      	adds	r7, #48	; 0x30
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800683a:	b580      	push	{r7, lr}
 800683c:	b08a      	sub	sp, #40	; 0x28
 800683e:	af02      	add	r7, sp, #8
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684a:	f3ef 8305 	mrs	r3, IPSR
 800684e:	613b      	str	r3, [r7, #16]
  return(result);
 8006850:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006852:	2b00      	cmp	r3, #0
 8006854:	d15f      	bne.n	8006916 <osMessageQueueNew+0xdc>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d05c      	beq.n	8006916 <osMessageQueueNew+0xdc>
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d059      	beq.n	8006916 <osMessageQueueNew+0xdc>
    mem = -1;
 8006862:	f04f 33ff 	mov.w	r3, #4294967295
 8006866:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d029      	beq.n	80068c2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d012      	beq.n	800689c <osMessageQueueNew+0x62>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b4f      	cmp	r3, #79	; 0x4f
 800687c:	d90e      	bls.n	800689c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695a      	ldr	r2, [r3, #20]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	68b9      	ldr	r1, [r7, #8]
 800688e:	fb01 f303 	mul.w	r3, r1, r3
 8006892:	429a      	cmp	r2, r3
 8006894:	d302      	bcc.n	800689c <osMessageQueueNew+0x62>
        mem = 1;
 8006896:	2301      	movs	r3, #1
 8006898:	61bb      	str	r3, [r7, #24]
 800689a:	e014      	b.n	80068c6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d110      	bne.n	80068c6 <osMessageQueueNew+0x8c>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10c      	bne.n	80068c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d108      	bne.n	80068c6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d104      	bne.n	80068c6 <osMessageQueueNew+0x8c>
          mem = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	e001      	b.n	80068c6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d10b      	bne.n	80068e4 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2100      	movs	r1, #0
 80068d6:	9100      	str	r1, [sp, #0]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f970 	bl	8006bc0 <xQueueGenericCreateStatic>
 80068e0:	61f8      	str	r0, [r7, #28]
 80068e2:	e008      	b.n	80068f6 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d105      	bne.n	80068f6 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80068ea:	2200      	movs	r2, #0
 80068ec:	68b9      	ldr	r1, [r7, #8]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	f000 f9de 	bl	8006cb0 <xQueueGenericCreate>
 80068f4:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00c      	beq.n	8006916 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d003      	beq.n	800690a <osMessageQueueNew+0xd0>
        name = attr->name;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e001      	b.n	800690e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800690a:	2300      	movs	r3, #0
 800690c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800690e:	6979      	ldr	r1, [r7, #20]
 8006910:	69f8      	ldr	r0, [r7, #28]
 8006912:	f000 fdb5 	bl	8007480 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006916:	69fb      	ldr	r3, [r7, #28]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3720      	adds	r7, #32
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <vApplicationGetIdleTaskMemory+0x2c>)
 8006930:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <vApplicationGetIdleTaskMemory+0x30>)
 8006936:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2280      	movs	r2, #128	; 0x80
 800693c:	601a      	str	r2, [r3, #0]
}
 800693e:	bf00      	nop
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop
 800694c:	200008f0 	.word	0x200008f0
 8006950:	200009ac 	.word	0x200009ac

08006954 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4a07      	ldr	r2, [pc, #28]	; (8006980 <vApplicationGetTimerTaskMemory+0x2c>)
 8006964:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	4a06      	ldr	r2, [pc, #24]	; (8006984 <vApplicationGetTimerTaskMemory+0x30>)
 800696a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20000bac 	.word	0x20000bac
 8006984:	20000c68 	.word	0x20000c68

08006988 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f103 0208 	add.w	r2, r3, #8
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f04f 32ff 	mov.w	r2, #4294967295
 80069a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 0208 	add.w	r2, r3, #8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0208 	add.w	r2, r3, #8
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	1c5a      	adds	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
}
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a40:	d103      	bne.n	8006a4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	60fb      	str	r3, [r7, #12]
 8006a48:	e00c      	b.n	8006a64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	e002      	b.n	8006a58 <vListInsert+0x2e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d2f6      	bcs.n	8006a52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685a      	ldr	r2, [r3, #4]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
}
 8006a90:	bf00      	nop
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6892      	ldr	r2, [r2, #8]
 8006ab2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6852      	ldr	r2, [r2, #4]
 8006abc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d103      	bne.n	8006ad0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	1e5a      	subs	r2, r3, #1
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10a      	bne.n	8006b1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b16:	bf00      	nop
 8006b18:	e7fe      	b.n	8006b18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b1a:	f002 fa93 	bl	8009044 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b2a:	fb01 f303 	mul.w	r3, r1, r3
 8006b2e:	441a      	add	r2, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	68f9      	ldr	r1, [r7, #12]
 8006b4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b50:	fb01 f303 	mul.w	r3, r1, r3
 8006b54:	441a      	add	r2, r3
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	22ff      	movs	r2, #255	; 0xff
 8006b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	22ff      	movs	r2, #255	; 0xff
 8006b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d114      	bne.n	8006b9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01a      	beq.n	8006bae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3310      	adds	r3, #16
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f941 	bl	8007e04 <xTaskRemoveFromEventList>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d012      	beq.n	8006bae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b88:	4b0c      	ldr	r3, [pc, #48]	; (8006bbc <xQueueGenericReset+0xcc>)
 8006b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8e:	601a      	str	r2, [r3, #0]
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	e009      	b.n	8006bae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3310      	adds	r3, #16
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fef2 	bl	8006988 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	3324      	adds	r3, #36	; 0x24
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff feed 	bl	8006988 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bae:	f002 fa79 	bl	80090a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bb2:	2301      	movs	r3, #1
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b08e      	sub	sp, #56	; 0x38
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10a      	bne.n	8006bea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d10a      	bne.n	8006c06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <xQueueGenericCreateStatic+0x52>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <xQueueGenericCreateStatic+0x56>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e000      	b.n	8006c18 <xQueueGenericCreateStatic+0x58>
 8006c16:	2300      	movs	r3, #0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	623b      	str	r3, [r7, #32]
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <xQueueGenericCreateStatic+0x7e>
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <xQueueGenericCreateStatic+0x82>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e000      	b.n	8006c44 <xQueueGenericCreateStatic+0x84>
 8006c42:	2300      	movs	r3, #0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	61fb      	str	r3, [r7, #28]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c5e:	2350      	movs	r3, #80	; 0x50
 8006c60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	2b50      	cmp	r3, #80	; 0x50
 8006c66:	d00a      	beq.n	8006c7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6c:	f383 8811 	msr	BASEPRI, r3
 8006c70:	f3bf 8f6f 	isb	sy
 8006c74:	f3bf 8f4f 	dsb	sy
 8006c78:	61bb      	str	r3, [r7, #24]
}
 8006c7a:	bf00      	nop
 8006c7c:	e7fe      	b.n	8006c7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	9300      	str	r3, [sp, #0]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	68b9      	ldr	r1, [r7, #8]
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f000 f83f 	bl	8006d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3730      	adds	r7, #48	; 0x30
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b08a      	sub	sp, #40	; 0x28
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	4613      	mov	r3, r2
 8006cbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <xQueueGenericCreate+0x2a>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	613b      	str	r3, [r7, #16]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	fb02 f303 	mul.w	r3, r2, r3
 8006ce2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	3350      	adds	r3, #80	; 0x50
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f002 facd 	bl	8009288 <pvPortMalloc>
 8006cee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d011      	beq.n	8006d1a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	3350      	adds	r3, #80	; 0x50
 8006cfe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d08:	79fa      	ldrb	r2, [r7, #7]
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	697a      	ldr	r2, [r7, #20]
 8006d12:	68b9      	ldr	r1, [r7, #8]
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f000 f805 	bl	8006d24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d103      	bne.n	8006d40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e002      	b.n	8006d46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006d52:	2101      	movs	r1, #1
 8006d54:	69b8      	ldr	r0, [r7, #24]
 8006d56:	f7ff fecb 	bl	8006af0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
	...

08006d6c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08e      	sub	sp, #56	; 0x38
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
 8006d78:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xQueueGenericSend+0x32>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d103      	bne.n	8006dac <xQueueGenericSend+0x40>
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <xQueueGenericSend+0x44>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e000      	b.n	8006db2 <xQueueGenericSend+0x46>
 8006db0:	2300      	movs	r3, #0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <xQueueGenericSend+0x60>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d103      	bne.n	8006dda <xQueueGenericSend+0x6e>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <xQueueGenericSend+0x72>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <xQueueGenericSend+0x74>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xQueueGenericSend+0x8e>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	623b      	str	r3, [r7, #32]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dfa:	f001 f9c5 	bl	8008188 <xTaskGetSchedulerState>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <xQueueGenericSend+0x9e>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <xQueueGenericSend+0xa2>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <xQueueGenericSend+0xa4>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <xQueueGenericSend+0xbe>
	__asm volatile
 8006e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	61fb      	str	r3, [r7, #28]
}
 8006e26:	bf00      	nop
 8006e28:	e7fe      	b.n	8006e28 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e2a:	f002 f90b 	bl	8009044 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d302      	bcc.n	8006e40 <xQueueGenericSend+0xd4>
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d129      	bne.n	8006e94 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e46:	f000 fa0b 	bl	8007260 <prvCopyDataToQueue>
 8006e4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d010      	beq.n	8006e76 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 ffd3 	bl	8007e04 <xTaskRemoveFromEventList>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d013      	beq.n	8006e8c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006e64:	4b3f      	ldr	r3, [pc, #252]	; (8006f64 <xQueueGenericSend+0x1f8>)
 8006e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e6a:	601a      	str	r2, [r3, #0]
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	e00a      	b.n	8006e8c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d007      	beq.n	8006e8c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e7c:	4b39      	ldr	r3, [pc, #228]	; (8006f64 <xQueueGenericSend+0x1f8>)
 8006e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	f3bf 8f4f 	dsb	sy
 8006e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e8c:	f002 f90a 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e063      	b.n	8006f5c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e9a:	f002 f903 	bl	80090a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e05c      	b.n	8006f5c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ea8:	f107 0314 	add.w	r3, r7, #20
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f80d 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006eb6:	f002 f8f5 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006eba:	f000 fd67 	bl	800798c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006ebe:	f002 f8c1 	bl	8009044 <vPortEnterCritical>
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d103      	bne.n	8006ed8 <xQueueGenericSend+0x16c>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ede:	b25b      	sxtb	r3, r3
 8006ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee4:	d103      	bne.n	8006eee <xQueueGenericSend+0x182>
 8006ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006eee:	f002 f8d9 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ef2:	1d3a      	adds	r2, r7, #4
 8006ef4:	f107 0314 	add.w	r3, r7, #20
 8006ef8:	4611      	mov	r1, r2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 fffc 	bl	8007ef8 <xTaskCheckForTimeOut>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d124      	bne.n	8006f50 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f08:	f000 faa2 	bl	8007450 <prvIsQueueFull>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d018      	beq.n	8006f44 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	3310      	adds	r3, #16
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	4611      	mov	r1, r2
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 ff22 	bl	8007d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f22:	f000 fa2d 	bl	8007380 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006f26:	f000 fd3f 	bl	80079a8 <xTaskResumeAll>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f47f af7c 	bne.w	8006e2a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006f32:	4b0c      	ldr	r3, [pc, #48]	; (8006f64 <xQueueGenericSend+0x1f8>)
 8006f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	f3bf 8f6f 	isb	sy
 8006f42:	e772      	b.n	8006e2a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f46:	f000 fa1b 	bl	8007380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f4a:	f000 fd2d 	bl	80079a8 <xTaskResumeAll>
 8006f4e:	e76c      	b.n	8006e2a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f52:	f000 fa15 	bl	8007380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f56:	f000 fd27 	bl	80079a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3738      	adds	r7, #56	; 0x38
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b090      	sub	sp, #64	; 0x40
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <xQueueGenericSendFromISR+0x3c>
 8006f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <xQueueGenericSendFromISR+0x40>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <xQueueGenericSendFromISR+0x42>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10a      	bne.n	8006fc4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fc0:	bf00      	nop
 8006fc2:	e7fe      	b.n	8006fc2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSendFromISR+0x6a>
 8006fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d101      	bne.n	8006fd6 <xQueueGenericSendFromISR+0x6e>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <xQueueGenericSendFromISR+0x70>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d10a      	bne.n	8006ff2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe0:	f383 8811 	msr	BASEPRI, r3
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	f3bf 8f4f 	dsb	sy
 8006fec:	623b      	str	r3, [r7, #32]
}
 8006fee:	bf00      	nop
 8006ff0:	e7fe      	b.n	8006ff0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ff2:	f002 f909 	bl	8009208 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	61fa      	str	r2, [r7, #28]
 800700c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800700e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800701a:	429a      	cmp	r2, r3
 800701c:	d302      	bcc.n	8007024 <xQueueGenericSendFromISR+0xbc>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b02      	cmp	r3, #2
 8007022:	d12f      	bne.n	8007084 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800702a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	68b9      	ldr	r1, [r7, #8]
 8007038:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800703a:	f000 f911 	bl	8007260 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800703e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d112      	bne.n	800706e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	2b00      	cmp	r3, #0
 800704e:	d016      	beq.n	800707e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	3324      	adds	r3, #36	; 0x24
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fed5 	bl	8007e04 <xTaskRemoveFromEventList>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00e      	beq.n	800707e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00b      	beq.n	800707e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e007      	b.n	800707e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800706e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007072:	3301      	adds	r3, #1
 8007074:	b2db      	uxtb	r3, r3
 8007076:	b25a      	sxtb	r2, r3
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800707e:	2301      	movs	r3, #1
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007082:	e001      	b.n	8007088 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007084:	2300      	movs	r3, #0
 8007086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007092:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007096:	4618      	mov	r0, r3
 8007098:	3740      	adds	r7, #64	; 0x40
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08c      	sub	sp, #48	; 0x30
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d10a      	bne.n	80070d0 <xQueueReceive+0x30>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	623b      	str	r3, [r7, #32]
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d103      	bne.n	80070de <xQueueReceive+0x3e>
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <xQueueReceive+0x42>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <xQueueReceive+0x44>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <xQueueReceive+0x5e>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	61fb      	str	r3, [r7, #28]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070fe:	f001 f843 	bl	8008188 <xTaskGetSchedulerState>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d102      	bne.n	800710e <xQueueReceive+0x6e>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <xQueueReceive+0x72>
 800710e:	2301      	movs	r3, #1
 8007110:	e000      	b.n	8007114 <xQueueReceive+0x74>
 8007112:	2300      	movs	r3, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueReceive+0x8e>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	61bb      	str	r3, [r7, #24]
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800712e:	f001 ff89 	bl	8009044 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d01f      	beq.n	800717e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007142:	f000 f8f7 	bl	8007334 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800714e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007150:	691b      	ldr	r3, [r3, #16]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00f      	beq.n	8007176 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	3310      	adds	r3, #16
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fe52 	bl	8007e04 <xTaskRemoveFromEventList>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d007      	beq.n	8007176 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007166:	4b3d      	ldr	r3, [pc, #244]	; (800725c <xQueueReceive+0x1bc>)
 8007168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007176:	f001 ff95 	bl	80090a4 <vPortExitCritical>
				return pdPASS;
 800717a:	2301      	movs	r3, #1
 800717c:	e069      	b.n	8007252 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007184:	f001 ff8e 	bl	80090a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007188:	2300      	movs	r3, #0
 800718a:	e062      	b.n	8007252 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800718c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800718e:	2b00      	cmp	r3, #0
 8007190:	d106      	bne.n	80071a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007192:	f107 0310 	add.w	r3, r7, #16
 8007196:	4618      	mov	r0, r3
 8007198:	f000 fe98 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071a0:	f001 ff80 	bl	80090a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071a4:	f000 fbf2 	bl	800798c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071a8:	f001 ff4c 	bl	8009044 <vPortEnterCritical>
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b2:	b25b      	sxtb	r3, r3
 80071b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b8:	d103      	bne.n	80071c2 <xQueueReceive+0x122>
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071c8:	b25b      	sxtb	r3, r3
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ce:	d103      	bne.n	80071d8 <xQueueReceive+0x138>
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071d8:	f001 ff64 	bl	80090a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071dc:	1d3a      	adds	r2, r7, #4
 80071de:	f107 0310 	add.w	r3, r7, #16
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fe87 	bl	8007ef8 <xTaskCheckForTimeOut>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d123      	bne.n	8007238 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f2:	f000 f917 	bl	8007424 <prvIsQueueEmpty>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d017      	beq.n	800722c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	3324      	adds	r3, #36	; 0x24
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	4611      	mov	r1, r2
 8007204:	4618      	mov	r0, r3
 8007206:	f000 fdad 	bl	8007d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800720a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800720c:	f000 f8b8 	bl	8007380 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007210:	f000 fbca 	bl	80079a8 <xTaskResumeAll>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d189      	bne.n	800712e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800721a:	4b10      	ldr	r3, [pc, #64]	; (800725c <xQueueReceive+0x1bc>)
 800721c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007220:	601a      	str	r2, [r3, #0]
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	e780      	b.n	800712e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800722c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800722e:	f000 f8a7 	bl	8007380 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007232:	f000 fbb9 	bl	80079a8 <xTaskResumeAll>
 8007236:	e77a      	b.n	800712e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800723a:	f000 f8a1 	bl	8007380 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800723e:	f000 fbb3 	bl	80079a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007244:	f000 f8ee 	bl	8007424 <prvIsQueueEmpty>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	f43f af6f 	beq.w	800712e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007250:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007252:	4618      	mov	r0, r3
 8007254:	3730      	adds	r7, #48	; 0x30
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	e000ed04 	.word	0xe000ed04

08007260 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b086      	sub	sp, #24
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800726c:	2300      	movs	r3, #0
 800726e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007274:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10d      	bne.n	800729a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d14d      	bne.n	8007322 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	4618      	mov	r0, r3
 800728c:	f000 ff9a 	bl	80081c4 <xTaskPriorityDisinherit>
 8007290:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	609a      	str	r2, [r3, #8]
 8007298:	e043      	b.n	8007322 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d119      	bne.n	80072d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6858      	ldr	r0, [r3, #4]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a8:	461a      	mov	r2, r3
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	f002 faf9 	bl	80098a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685a      	ldr	r2, [r3, #4]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b8:	441a      	add	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d32b      	bcc.n	8007322 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	605a      	str	r2, [r3, #4]
 80072d2:	e026      	b.n	8007322 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68d8      	ldr	r0, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	461a      	mov	r2, r3
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	f002 fadf 	bl	80098a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	68da      	ldr	r2, [r3, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	425b      	negs	r3, r3
 80072ee:	441a      	add	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d207      	bcs.n	8007310 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	689a      	ldr	r2, [r3, #8]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	425b      	negs	r3, r3
 800730a:	441a      	add	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b02      	cmp	r3, #2
 8007314:	d105      	bne.n	8007322 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3b01      	subs	r3, #1
 8007320:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800732a:	697b      	ldr	r3, [r7, #20]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3718      	adds	r7, #24
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	441a      	add	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68da      	ldr	r2, [r3, #12]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	d303      	bcc.n	8007368 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68d9      	ldr	r1, [r3, #12]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007370:	461a      	mov	r2, r3
 8007372:	6838      	ldr	r0, [r7, #0]
 8007374:	f002 fa95 	bl	80098a2 <memcpy>
	}
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007388:	f001 fe5c 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007392:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007394:	e011      	b.n	80073ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3324      	adds	r3, #36	; 0x24
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fd2e 	bl	8007e04 <xTaskRemoveFromEventList>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073ae:	f000 fe05 	bl	8007fbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073b2:	7bfb      	ldrb	r3, [r7, #15]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	dce9      	bgt.n	8007396 <prvUnlockQueue+0x16>
 80073c2:	e000      	b.n	80073c6 <prvUnlockQueue+0x46>
					break;
 80073c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	22ff      	movs	r2, #255	; 0xff
 80073ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80073ce:	f001 fe69 	bl	80090a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80073d2:	f001 fe37 	bl	8009044 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073de:	e011      	b.n	8007404 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3310      	adds	r3, #16
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fd09 	bl	8007e04 <xTaskRemoveFromEventList>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073f8:	f000 fde0 	bl	8007fbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	3b01      	subs	r3, #1
 8007400:	b2db      	uxtb	r3, r3
 8007402:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007404:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007408:	2b00      	cmp	r3, #0
 800740a:	dce9      	bgt.n	80073e0 <prvUnlockQueue+0x60>
 800740c:	e000      	b.n	8007410 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800740e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	22ff      	movs	r2, #255	; 0xff
 8007414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007418:	f001 fe44 	bl	80090a4 <vPortExitCritical>
}
 800741c:	bf00      	nop
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800742c:	f001 fe0a 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	2b00      	cmp	r3, #0
 8007436:	d102      	bne.n	800743e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	e001      	b.n	8007442 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007442:	f001 fe2f 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007446:	68fb      	ldr	r3, [r7, #12]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007458:	f001 fdf4 	bl	8009044 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	429a      	cmp	r2, r3
 8007466:	d102      	bne.n	800746e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007468:	2301      	movs	r3, #1
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	e001      	b.n	8007472 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007472:	f001 fe17 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007476:	68fb      	ldr	r3, [r7, #12]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	e014      	b.n	80074ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007490:	4a0f      	ldr	r2, [pc, #60]	; (80074d0 <vQueueAddToRegistry+0x50>)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10b      	bne.n	80074b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800749c:	490c      	ldr	r1, [pc, #48]	; (80074d0 <vQueueAddToRegistry+0x50>)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074a6:	4a0a      	ldr	r2, [pc, #40]	; (80074d0 <vQueueAddToRegistry+0x50>)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	4413      	add	r3, r2
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074b2:	e006      	b.n	80074c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60fb      	str	r3, [r7, #12]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2b07      	cmp	r3, #7
 80074be:	d9e7      	bls.n	8007490 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80074c0:	bf00      	nop
 80074c2:	bf00      	nop
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20001068 	.word	0x20001068

080074d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074e4:	f001 fdae 	bl	8009044 <vPortEnterCritical>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ee:	b25b      	sxtb	r3, r3
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d103      	bne.n	80074fe <vQueueWaitForMessageRestricted+0x2a>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007504:	b25b      	sxtb	r3, r3
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750a:	d103      	bne.n	8007514 <vQueueWaitForMessageRestricted+0x40>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007514:	f001 fdc6 	bl	80090a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fc3f 	bl	8007dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	f7ff ff26 	bl	8007380 <prvUnlockQueue>
	}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af04      	add	r7, sp, #16
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xTaskCreateStatic+0x46>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007582:	23bc      	movs	r3, #188	; 0xbc
 8007584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2bbc      	cmp	r3, #188	; 0xbc
 800758a:	d00a      	beq.n	80075a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61bb      	str	r3, [r7, #24]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01e      	beq.n	80075e8 <xTaskCreateStatic+0xac>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01b      	beq.n	80075e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075c2:	2300      	movs	r3, #0
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f850 	bl	8007680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075e2:	f000 f8f3 	bl	80077cc <prvAddNewTaskToReadyList>
 80075e6:	e001      	b.n	80075ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075ec:	697b      	ldr	r3, [r7, #20]
	}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b08c      	sub	sp, #48	; 0x30
 80075fa:	af04      	add	r7, sp, #16
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fe3c 	bl	8009288 <pvPortMalloc>
 8007610:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007618:	20bc      	movs	r0, #188	; 0xbc
 800761a:	f001 fe35 	bl	8009288 <pvPortMalloc>
 800761e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
 800762c:	e005      	b.n	800763a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f001 fef6 	bl	8009420 <vPortFree>
 8007634:	e001      	b.n	800763a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	2300      	movs	r3, #0
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f80e 	bl	8007680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007664:	69f8      	ldr	r0, [r7, #28]
 8007666:	f000 f8b1 	bl	80077cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800766a:	2301      	movs	r3, #1
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e002      	b.n	8007676 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007670:	f04f 33ff 	mov.w	r3, #4294967295
 8007674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007676:	69bb      	ldr	r3, [r7, #24]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	461a      	mov	r2, r3
 8007698:	21a5      	movs	r1, #165	; 0xa5
 800769a:	f002 f910 	bl	80098be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076a8:	3b01      	subs	r3, #1
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f023 0307 	bic.w	r3, r3, #7
 80076b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01f      	beq.n	800771e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e012      	b.n	800770a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	7819      	ldrb	r1, [r3, #0]
 80076ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	3334      	adds	r3, #52	; 0x34
 80076f4:	460a      	mov	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d9e9      	bls.n	80076e4 <prvInitialiseNewTask+0x64>
 8007710:	e000      	b.n	8007714 <prvInitialiseNewTask+0x94>
			{
				break;
 8007712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800771c:	e003      	b.n	8007726 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2b37      	cmp	r3, #55	; 0x37
 800772a:	d901      	bls.n	8007730 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800772c:	2337      	movs	r3, #55	; 0x37
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800773a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	2200      	movs	r2, #0
 8007740:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f93e 	bl	80069c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	3318      	adds	r3, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f939 	bl	80069c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2200      	movs	r2, #0
 8007770:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007776:	2200      	movs	r2, #0
 8007778:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	3354      	adds	r3, #84	; 0x54
 8007780:	2260      	movs	r2, #96	; 0x60
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f002 f89a 	bl	80098be <memset>
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	4a0c      	ldr	r2, [pc, #48]	; (80077c0 <prvInitialiseNewTask+0x140>)
 800778e:	659a      	str	r2, [r3, #88]	; 0x58
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	4a0c      	ldr	r2, [pc, #48]	; (80077c4 <prvInitialiseNewTask+0x144>)
 8007794:	65da      	str	r2, [r3, #92]	; 0x5c
 8007796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007798:	4a0b      	ldr	r2, [pc, #44]	; (80077c8 <prvInitialiseNewTask+0x148>)
 800779a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	68f9      	ldr	r1, [r7, #12]
 80077a0:	69b8      	ldr	r0, [r7, #24]
 80077a2:	f001 fb21 	bl	8008de8 <pxPortInitialiseStack>
 80077a6:	4602      	mov	r2, r0
 80077a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b8:	bf00      	nop
 80077ba:	3720      	adds	r7, #32
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	0800a8f0 	.word	0x0800a8f0
 80077c4:	0800a910 	.word	0x0800a910
 80077c8:	0800a8d0 	.word	0x0800a8d0

080077cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077d4:	f001 fc36 	bl	8009044 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077d8:	4b2d      	ldr	r3, [pc, #180]	; (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	4a2c      	ldr	r2, [pc, #176]	; (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077e2:	4b2c      	ldr	r3, [pc, #176]	; (8007894 <prvAddNewTaskToReadyList+0xc8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d109      	bne.n	80077fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ea:	4a2a      	ldr	r2, [pc, #168]	; (8007894 <prvAddNewTaskToReadyList+0xc8>)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077f0:	4b27      	ldr	r3, [pc, #156]	; (8007890 <prvAddNewTaskToReadyList+0xc4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d110      	bne.n	800781a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077f8:	f000 fc04 	bl	8008004 <prvInitialiseTaskLists>
 80077fc:	e00d      	b.n	800781a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077fe:	4b26      	ldr	r3, [pc, #152]	; (8007898 <prvAddNewTaskToReadyList+0xcc>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d109      	bne.n	800781a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007806:	4b23      	ldr	r3, [pc, #140]	; (8007894 <prvAddNewTaskToReadyList+0xc8>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007810:	429a      	cmp	r2, r3
 8007812:	d802      	bhi.n	800781a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007814:	4a1f      	ldr	r2, [pc, #124]	; (8007894 <prvAddNewTaskToReadyList+0xc8>)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800781a:	4b20      	ldr	r3, [pc, #128]	; (800789c <prvAddNewTaskToReadyList+0xd0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	4a1e      	ldr	r2, [pc, #120]	; (800789c <prvAddNewTaskToReadyList+0xd0>)
 8007822:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007824:	4b1d      	ldr	r3, [pc, #116]	; (800789c <prvAddNewTaskToReadyList+0xd0>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <prvAddNewTaskToReadyList+0xd4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	429a      	cmp	r2, r3
 8007836:	d903      	bls.n	8007840 <prvAddNewTaskToReadyList+0x74>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783c:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <prvAddNewTaskToReadyList+0xd4>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4613      	mov	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	009b      	lsls	r3, r3, #2
 800784c:	4a15      	ldr	r2, [pc, #84]	; (80078a4 <prvAddNewTaskToReadyList+0xd8>)
 800784e:	441a      	add	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3304      	adds	r3, #4
 8007854:	4619      	mov	r1, r3
 8007856:	4610      	mov	r0, r2
 8007858:	f7ff f8c3 	bl	80069e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800785c:	f001 fc22 	bl	80090a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <prvAddNewTaskToReadyList+0xcc>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d00e      	beq.n	8007886 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007868:	4b0a      	ldr	r3, [pc, #40]	; (8007894 <prvAddNewTaskToReadyList+0xc8>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007872:	429a      	cmp	r2, r3
 8007874:	d207      	bcs.n	8007886 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvAddNewTaskToReadyList+0xdc>)
 8007878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	2000157c 	.word	0x2000157c
 8007894:	200010a8 	.word	0x200010a8
 8007898:	20001588 	.word	0x20001588
 800789c:	20001598 	.word	0x20001598
 80078a0:	20001584 	.word	0x20001584
 80078a4:	200010ac 	.word	0x200010ac
 80078a8:	e000ed04 	.word	0xe000ed04

080078ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	; 0x28
 80078b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078ba:	463a      	mov	r2, r7
 80078bc:	1d39      	adds	r1, r7, #4
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff f82c 	bl	8006920 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	9202      	str	r2, [sp, #8]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	2300      	movs	r3, #0
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	460a      	mov	r2, r1
 80078da:	4924      	ldr	r1, [pc, #144]	; (800796c <vTaskStartScheduler+0xc0>)
 80078dc:	4824      	ldr	r0, [pc, #144]	; (8007970 <vTaskStartScheduler+0xc4>)
 80078de:	f7ff fe2d 	bl	800753c <xTaskCreateStatic>
 80078e2:	4603      	mov	r3, r0
 80078e4:	4a23      	ldr	r2, [pc, #140]	; (8007974 <vTaskStartScheduler+0xc8>)
 80078e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80078e8:	4b22      	ldr	r3, [pc, #136]	; (8007974 <vTaskStartScheduler+0xc8>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d002      	beq.n	80078f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078f0:	2301      	movs	r3, #1
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	e001      	b.n	80078fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d102      	bne.n	8007906 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007900:	f000 ff24 	bl	800874c <xTimerCreateTimerTask>
 8007904:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d11b      	bne.n	8007944 <vTaskStartScheduler+0x98>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	613b      	str	r3, [r7, #16]
}
 800791e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007920:	4b15      	ldr	r3, [pc, #84]	; (8007978 <vTaskStartScheduler+0xcc>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3354      	adds	r3, #84	; 0x54
 8007926:	4a15      	ldr	r2, [pc, #84]	; (800797c <vTaskStartScheduler+0xd0>)
 8007928:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800792a:	4b15      	ldr	r3, [pc, #84]	; (8007980 <vTaskStartScheduler+0xd4>)
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007932:	4b14      	ldr	r3, [pc, #80]	; (8007984 <vTaskStartScheduler+0xd8>)
 8007934:	2201      	movs	r2, #1
 8007936:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007938:	4b13      	ldr	r3, [pc, #76]	; (8007988 <vTaskStartScheduler+0xdc>)
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800793e:	f001 fadf 	bl	8008f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007942:	e00e      	b.n	8007962 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d10a      	bne.n	8007962 <vTaskStartScheduler+0xb6>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fb      	str	r3, [r7, #12]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <vTaskStartScheduler+0xb4>
}
 8007962:	bf00      	nop
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	0800a834 	.word	0x0800a834
 8007970:	08007fd5 	.word	0x08007fd5
 8007974:	200015a0 	.word	0x200015a0
 8007978:	200010a8 	.word	0x200010a8
 800797c:	20000044 	.word	0x20000044
 8007980:	2000159c 	.word	0x2000159c
 8007984:	20001588 	.word	0x20001588
 8007988:	20001580 	.word	0x20001580

0800798c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <vTaskSuspendAll+0x18>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	4a03      	ldr	r2, [pc, #12]	; (80079a4 <vTaskSuspendAll+0x18>)
 8007998:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	200015a4 	.word	0x200015a4

080079a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079b6:	4b42      	ldr	r3, [pc, #264]	; (8007ac0 <xTaskResumeAll+0x118>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	603b      	str	r3, [r7, #0]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079d4:	f001 fb36 	bl	8009044 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079d8:	4b39      	ldr	r3, [pc, #228]	; (8007ac0 <xTaskResumeAll+0x118>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3b01      	subs	r3, #1
 80079de:	4a38      	ldr	r2, [pc, #224]	; (8007ac0 <xTaskResumeAll+0x118>)
 80079e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e2:	4b37      	ldr	r3, [pc, #220]	; (8007ac0 <xTaskResumeAll+0x118>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d162      	bne.n	8007ab0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ea:	4b36      	ldr	r3, [pc, #216]	; (8007ac4 <xTaskResumeAll+0x11c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05e      	beq.n	8007ab0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f2:	e02f      	b.n	8007a54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f4:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <xTaskResumeAll+0x120>)
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3318      	adds	r3, #24
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff f84b 	bl	8006a9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff f846 	bl	8006a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a14:	4b2d      	ldr	r3, [pc, #180]	; (8007acc <xTaskResumeAll+0x124>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d903      	bls.n	8007a24 <xTaskResumeAll+0x7c>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a20:	4a2a      	ldr	r2, [pc, #168]	; (8007acc <xTaskResumeAll+0x124>)
 8007a22:	6013      	str	r3, [r2, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4a27      	ldr	r2, [pc, #156]	; (8007ad0 <xTaskResumeAll+0x128>)
 8007a32:	441a      	add	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	3304      	adds	r3, #4
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f7fe ffd1 	bl	80069e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a44:	4b23      	ldr	r3, [pc, #140]	; (8007ad4 <xTaskResumeAll+0x12c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d302      	bcc.n	8007a54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a4e:	4b22      	ldr	r3, [pc, #136]	; (8007ad8 <xTaskResumeAll+0x130>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a54:	4b1c      	ldr	r3, [pc, #112]	; (8007ac8 <xTaskResumeAll+0x120>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1cb      	bne.n	80079f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a62:	f000 fb71 	bl	8008148 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a66:	4b1d      	ldr	r3, [pc, #116]	; (8007adc <xTaskResumeAll+0x134>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d010      	beq.n	8007a94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a72:	f000 f859 	bl	8007b28 <xTaskIncrementTick>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a7c:	4b16      	ldr	r3, [pc, #88]	; (8007ad8 <xTaskResumeAll+0x130>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f1      	bne.n	8007a72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a8e:	4b13      	ldr	r3, [pc, #76]	; (8007adc <xTaskResumeAll+0x134>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a94:	4b10      	ldr	r3, [pc, #64]	; (8007ad8 <xTaskResumeAll+0x130>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d009      	beq.n	8007ab0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aa0:	4b0f      	ldr	r3, [pc, #60]	; (8007ae0 <xTaskResumeAll+0x138>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ab0:	f001 faf8 	bl	80090a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200015a4 	.word	0x200015a4
 8007ac4:	2000157c 	.word	0x2000157c
 8007ac8:	2000153c 	.word	0x2000153c
 8007acc:	20001584 	.word	0x20001584
 8007ad0:	200010ac 	.word	0x200010ac
 8007ad4:	200010a8 	.word	0x200010a8
 8007ad8:	20001590 	.word	0x20001590
 8007adc:	2000158c 	.word	0x2000158c
 8007ae0:	e000ed04 	.word	0xe000ed04

08007ae4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <xTaskGetTickCount+0x1c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007af0:	687b      	ldr	r3, [r7, #4]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20001580 	.word	0x20001580

08007b04 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b0a:	f001 fb7d 	bl	8009208 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b12:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <xTaskGetTickCountFromISR+0x20>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b18:	683b      	ldr	r3, [r7, #0]
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20001580 	.word	0x20001580

08007b28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b32:	4b4f      	ldr	r3, [pc, #316]	; (8007c70 <xTaskIncrementTick+0x148>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f040 808f 	bne.w	8007c5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b3c:	4b4d      	ldr	r3, [pc, #308]	; (8007c74 <xTaskIncrementTick+0x14c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b44:	4a4b      	ldr	r2, [pc, #300]	; (8007c74 <xTaskIncrementTick+0x14c>)
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d120      	bne.n	8007b92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b50:	4b49      	ldr	r3, [pc, #292]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTaskIncrementTick+0x46>
 8007b70:	4b41      	ldr	r3, [pc, #260]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	4b41      	ldr	r3, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x154>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a3f      	ldr	r2, [pc, #252]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <xTaskIncrementTick+0x154>)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <xTaskIncrementTick+0x158>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a3d      	ldr	r2, [pc, #244]	; (8007c80 <xTaskIncrementTick+0x158>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	f000 fadb 	bl	8008148 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b92:	4b3c      	ldr	r3, [pc, #240]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d349      	bcc.n	8007c30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b9c:	4b36      	ldr	r3, [pc, #216]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d104      	bne.n	8007bb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba6:	4b37      	ldr	r3, [pc, #220]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bac:	601a      	str	r2, [r3, #0]
					break;
 8007bae:	e03f      	b.n	8007c30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb0:	4b31      	ldr	r3, [pc, #196]	; (8007c78 <xTaskIncrementTick+0x150>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d203      	bcs.n	8007bd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bc8:	4a2e      	ldr	r2, [pc, #184]	; (8007c84 <xTaskIncrementTick+0x15c>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bce:	e02f      	b.n	8007c30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7fe ff61 	bl	8006a9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d004      	beq.n	8007bec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	3318      	adds	r3, #24
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fe ff58 	bl	8006a9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf0:	4b25      	ldr	r3, [pc, #148]	; (8007c88 <xTaskIncrementTick+0x160>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d903      	bls.n	8007c00 <xTaskIncrementTick+0xd8>
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfc:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <xTaskIncrementTick+0x160>)
 8007bfe:	6013      	str	r3, [r2, #0]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4a1f      	ldr	r2, [pc, #124]	; (8007c8c <xTaskIncrementTick+0x164>)
 8007c0e:	441a      	add	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4619      	mov	r1, r3
 8007c16:	4610      	mov	r0, r2
 8007c18:	f7fe fee3 	bl	80069e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c20:	4b1b      	ldr	r3, [pc, #108]	; (8007c90 <xTaskIncrementTick+0x168>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d3b8      	bcc.n	8007b9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c2e:	e7b5      	b.n	8007b9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <xTaskIncrementTick+0x168>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c36:	4915      	ldr	r1, [pc, #84]	; (8007c8c <xTaskIncrementTick+0x164>)
 8007c38:	4613      	mov	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	4413      	add	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	440b      	add	r3, r1
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d901      	bls.n	8007c4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c4c:	4b11      	ldr	r3, [pc, #68]	; (8007c94 <xTaskIncrementTick+0x16c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d007      	beq.n	8007c64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e004      	b.n	8007c64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <xTaskIncrementTick+0x170>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	4a0d      	ldr	r2, [pc, #52]	; (8007c98 <xTaskIncrementTick+0x170>)
 8007c62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c64:	697b      	ldr	r3, [r7, #20]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	200015a4 	.word	0x200015a4
 8007c74:	20001580 	.word	0x20001580
 8007c78:	20001534 	.word	0x20001534
 8007c7c:	20001538 	.word	0x20001538
 8007c80:	20001594 	.word	0x20001594
 8007c84:	2000159c 	.word	0x2000159c
 8007c88:	20001584 	.word	0x20001584
 8007c8c:	200010ac 	.word	0x200010ac
 8007c90:	200010a8 	.word	0x200010a8
 8007c94:	20001590 	.word	0x20001590
 8007c98:	2000158c 	.word	0x2000158c

08007c9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca2:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <vTaskSwitchContext+0xb0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007caa:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb0:	e046      	b.n	8007d40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007cb2:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <vTaskSwitchContext+0xb4>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb8:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	e010      	b.n	8007ce2 <vTaskSwitchContext+0x46>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d10a      	bne.n	8007cdc <vTaskSwitchContext+0x40>
	__asm volatile
 8007cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cca:	f383 8811 	msr	BASEPRI, r3
 8007cce:	f3bf 8f6f 	isb	sy
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	607b      	str	r3, [r7, #4]
}
 8007cd8:	bf00      	nop
 8007cda:	e7fe      	b.n	8007cda <vTaskSwitchContext+0x3e>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	491d      	ldr	r1, [pc, #116]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0e4      	beq.n	8007cc0 <vTaskSwitchContext+0x24>
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4a15      	ldr	r2, [pc, #84]	; (8007d58 <vTaskSwitchContext+0xbc>)
 8007d02:	4413      	add	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	685a      	ldr	r2, [r3, #4]
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	605a      	str	r2, [r3, #4]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	685a      	ldr	r2, [r3, #4]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	3308      	adds	r3, #8
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d104      	bne.n	8007d26 <vTaskSwitchContext+0x8a>
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	685a      	ldr	r2, [r3, #4]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	605a      	str	r2, [r3, #4]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	4a0b      	ldr	r2, [pc, #44]	; (8007d5c <vTaskSwitchContext+0xc0>)
 8007d2e:	6013      	str	r3, [r2, #0]
 8007d30:	4a08      	ldr	r2, [pc, #32]	; (8007d54 <vTaskSwitchContext+0xb8>)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <vTaskSwitchContext+0xc0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3354      	adds	r3, #84	; 0x54
 8007d3c:	4a08      	ldr	r2, [pc, #32]	; (8007d60 <vTaskSwitchContext+0xc4>)
 8007d3e:	6013      	str	r3, [r2, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200015a4 	.word	0x200015a4
 8007d50:	20001590 	.word	0x20001590
 8007d54:	20001584 	.word	0x20001584
 8007d58:	200010ac 	.word	0x200010ac
 8007d5c:	200010a8 	.word	0x200010a8
 8007d60:	20000044 	.word	0x20000044

08007d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <vTaskPlaceOnEventList+0x44>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3318      	adds	r3, #24
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fe fe49 	bl	8006a2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d98:	2101      	movs	r1, #1
 8007d9a:	6838      	ldr	r0, [r7, #0]
 8007d9c:	f000 fc82 	bl	80086a4 <prvAddCurrentTaskToDelayedList>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	200010a8 	.word	0x200010a8

08007dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	617b      	str	r3, [r7, #20]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3318      	adds	r3, #24
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7fe fe00 	bl	80069e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295
 8007dec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68b8      	ldr	r0, [r7, #8]
 8007df2:	f000 fc57 	bl	80086a4 <prvAddCurrentTaskToDelayedList>
	}
 8007df6:	bf00      	nop
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	200010a8 	.word	0x200010a8

08007e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60fb      	str	r3, [r7, #12]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fe31 	bl	8006a9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e3a:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <xTaskRemoveFromEventList+0xb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11d      	bne.n	8007e7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fe28 	bl	8006a9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d903      	bls.n	8007e60 <xTaskRemoveFromEventList+0x5c>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <xTaskRemoveFromEventList+0xb8>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe fdb3 	bl	80069e2 <vListInsertEnd>
 8007e7c:	e005      	b.n	8007e8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3318      	adds	r3, #24
 8007e82:	4619      	mov	r1, r3
 8007e84:	480e      	ldr	r0, [pc, #56]	; (8007ec0 <xTaskRemoveFromEventList+0xbc>)
 8007e86:	f7fe fdac 	bl	80069e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <xTaskRemoveFromEventList+0xc0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d905      	bls.n	8007ea4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <xTaskRemoveFromEventList+0xc4>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e001      	b.n	8007ea8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ea8:	697b      	ldr	r3, [r7, #20]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	200015a4 	.word	0x200015a4
 8007eb8:	20001584 	.word	0x20001584
 8007ebc:	200010ac 	.word	0x200010ac
 8007ec0:	2000153c 	.word	0x2000153c
 8007ec4:	200010a8 	.word	0x200010a8
 8007ec8:	20001590 	.word	0x20001590

08007ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <vTaskInternalSetTimeOutState+0x24>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <vTaskInternalSetTimeOutState+0x28>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	605a      	str	r2, [r3, #4]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20001594 	.word	0x20001594
 8007ef4:	20001580 	.word	0x20001580

08007ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	613b      	str	r3, [r7, #16]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60fb      	str	r3, [r7, #12]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f3a:	f001 f883 	bl	8009044 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f3e:	4b1d      	ldr	r3, [pc, #116]	; (8007fb4 <xTaskCheckForTimeOut+0xbc>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f56:	d102      	bne.n	8007f5e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e023      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b15      	ldr	r3, [pc, #84]	; (8007fb8 <xTaskCheckForTimeOut+0xc0>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d007      	beq.n	8007f7a <xTaskCheckForTimeOut+0x82>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d302      	bcc.n	8007f7a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f74:	2301      	movs	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e015      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	697a      	ldr	r2, [r7, #20]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d20b      	bcs.n	8007f9c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	1ad2      	subs	r2, r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff ff9b 	bl	8007ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f96:	2300      	movs	r3, #0
 8007f98:	61fb      	str	r3, [r7, #28]
 8007f9a:	e004      	b.n	8007fa6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fa6:	f001 f87d 	bl	80090a4 <vPortExitCritical>

	return xReturn;
 8007faa:	69fb      	ldr	r3, [r7, #28]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20001580 	.word	0x20001580
 8007fb8:	20001594 	.word	0x20001594

08007fbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fc0:	4b03      	ldr	r3, [pc, #12]	; (8007fd0 <vTaskMissedYield+0x14>)
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	601a      	str	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	20001590 	.word	0x20001590

08007fd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fdc:	f000 f852 	bl	8008084 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <prvIdleTask+0x28>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d9f9      	bls.n	8007fdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <prvIdleTask+0x2c>)
 8007fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fee:	601a      	str	r2, [r3, #0]
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ff8:	e7f0      	b.n	8007fdc <prvIdleTask+0x8>
 8007ffa:	bf00      	nop
 8007ffc:	200010ac 	.word	0x200010ac
 8008000:	e000ed04 	.word	0xe000ed04

08008004 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800800a:	2300      	movs	r3, #0
 800800c:	607b      	str	r3, [r7, #4]
 800800e:	e00c      	b.n	800802a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	4613      	mov	r3, r2
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	4413      	add	r3, r2
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	4a12      	ldr	r2, [pc, #72]	; (8008064 <prvInitialiseTaskLists+0x60>)
 800801c:	4413      	add	r3, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7fe fcb2 	bl	8006988 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3301      	adds	r3, #1
 8008028:	607b      	str	r3, [r7, #4]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b37      	cmp	r3, #55	; 0x37
 800802e:	d9ef      	bls.n	8008010 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008030:	480d      	ldr	r0, [pc, #52]	; (8008068 <prvInitialiseTaskLists+0x64>)
 8008032:	f7fe fca9 	bl	8006988 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008036:	480d      	ldr	r0, [pc, #52]	; (800806c <prvInitialiseTaskLists+0x68>)
 8008038:	f7fe fca6 	bl	8006988 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800803c:	480c      	ldr	r0, [pc, #48]	; (8008070 <prvInitialiseTaskLists+0x6c>)
 800803e:	f7fe fca3 	bl	8006988 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008042:	480c      	ldr	r0, [pc, #48]	; (8008074 <prvInitialiseTaskLists+0x70>)
 8008044:	f7fe fca0 	bl	8006988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008048:	480b      	ldr	r0, [pc, #44]	; (8008078 <prvInitialiseTaskLists+0x74>)
 800804a:	f7fe fc9d 	bl	8006988 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800804e:	4b0b      	ldr	r3, [pc, #44]	; (800807c <prvInitialiseTaskLists+0x78>)
 8008050:	4a05      	ldr	r2, [pc, #20]	; (8008068 <prvInitialiseTaskLists+0x64>)
 8008052:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008054:	4b0a      	ldr	r3, [pc, #40]	; (8008080 <prvInitialiseTaskLists+0x7c>)
 8008056:	4a05      	ldr	r2, [pc, #20]	; (800806c <prvInitialiseTaskLists+0x68>)
 8008058:	601a      	str	r2, [r3, #0]
}
 800805a:	bf00      	nop
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200010ac 	.word	0x200010ac
 8008068:	2000150c 	.word	0x2000150c
 800806c:	20001520 	.word	0x20001520
 8008070:	2000153c 	.word	0x2000153c
 8008074:	20001550 	.word	0x20001550
 8008078:	20001568 	.word	0x20001568
 800807c:	20001534 	.word	0x20001534
 8008080:	20001538 	.word	0x20001538

08008084 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800808a:	e019      	b.n	80080c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800808c:	f000 ffda 	bl	8009044 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008090:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <prvCheckTasksWaitingTermination+0x50>)
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	3304      	adds	r3, #4
 800809c:	4618      	mov	r0, r3
 800809e:	f7fe fcfd 	bl	8006a9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080a2:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <prvCheckTasksWaitingTermination+0x54>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <prvCheckTasksWaitingTermination+0x54>)
 80080aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080ac:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	4a0a      	ldr	r2, [pc, #40]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080b6:	f000 fff5 	bl	80090a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f810 	bl	80080e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <prvCheckTasksWaitingTermination+0x58>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1e1      	bne.n	800808c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080c8:	bf00      	nop
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20001550 	.word	0x20001550
 80080d8:	2000157c 	.word	0x2000157c
 80080dc:	20001564 	.word	0x20001564

080080e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3354      	adds	r3, #84	; 0x54
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fd1f 	bl	8009b30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d108      	bne.n	800810e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	4618      	mov	r0, r3
 8008102:	f001 f98d 	bl	8009420 <vPortFree>
				vPortFree( pxTCB );
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f98a 	bl	8009420 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800810c:	e018      	b.n	8008140 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008114:	2b01      	cmp	r3, #1
 8008116:	d103      	bne.n	8008120 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 f981 	bl	8009420 <vPortFree>
	}
 800811e:	e00f      	b.n	8008140 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008126:	2b02      	cmp	r3, #2
 8008128:	d00a      	beq.n	8008140 <prvDeleteTCB+0x60>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	60fb      	str	r3, [r7, #12]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <prvDeleteTCB+0x5e>
	}
 8008140:	bf00      	nop
 8008142:	3710      	adds	r7, #16
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008158:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008160:	e008      	b.n	8008174 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <prvResetNextTaskUnblockTime+0x38>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4a04      	ldr	r2, [pc, #16]	; (8008184 <prvResetNextTaskUnblockTime+0x3c>)
 8008172:	6013      	str	r3, [r2, #0]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	20001534 	.word	0x20001534
 8008184:	2000159c 	.word	0x2000159c

08008188 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <xTaskGetSchedulerState+0x34>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d102      	bne.n	800819c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008196:	2301      	movs	r3, #1
 8008198:	607b      	str	r3, [r7, #4]
 800819a:	e008      	b.n	80081ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800819c:	4b08      	ldr	r3, [pc, #32]	; (80081c0 <xTaskGetSchedulerState+0x38>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d102      	bne.n	80081aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081a4:	2302      	movs	r3, #2
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	e001      	b.n	80081ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ae:	687b      	ldr	r3, [r7, #4]
	}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	20001588 	.word	0x20001588
 80081c0:	200015a4 	.word	0x200015a4

080081c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081d0:	2300      	movs	r3, #0
 80081d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d056      	beq.n	8008288 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081da:	4b2e      	ldr	r3, [pc, #184]	; (8008294 <xTaskPriorityDisinherit+0xd0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d00a      	beq.n	80081fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	60fb      	str	r3, [r7, #12]
}
 80081f6:	bf00      	nop
 80081f8:	e7fe      	b.n	80081f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d10a      	bne.n	8008218 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008206:	f383 8811 	msr	BASEPRI, r3
 800820a:	f3bf 8f6f 	isb	sy
 800820e:	f3bf 8f4f 	dsb	sy
 8008212:	60bb      	str	r3, [r7, #8]
}
 8008214:	bf00      	nop
 8008216:	e7fe      	b.n	8008216 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	1e5a      	subs	r2, r3, #1
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800822a:	429a      	cmp	r2, r3
 800822c:	d02c      	beq.n	8008288 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008232:	2b00      	cmp	r3, #0
 8008234:	d128      	bne.n	8008288 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7fe fc2e 	bl	8006a9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b0f      	ldr	r3, [pc, #60]	; (8008298 <xTaskPriorityDisinherit+0xd4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d903      	bls.n	8008268 <xTaskPriorityDisinherit+0xa4>
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008264:	4a0c      	ldr	r2, [pc, #48]	; (8008298 <xTaskPriorityDisinherit+0xd4>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a09      	ldr	r2, [pc, #36]	; (800829c <xTaskPriorityDisinherit+0xd8>)
 8008276:	441a      	add	r2, r3
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fbaf 	bl	80069e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008288:	697b      	ldr	r3, [r7, #20]
	}
 800828a:	4618      	mov	r0, r3
 800828c:	3718      	adds	r7, #24
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200010a8 	.word	0x200010a8
 8008298:	20001584 	.word	0x20001584
 800829c:	200010ac 	.word	0x200010ac

080082a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80082ae:	f000 fec9 	bl	8009044 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80082b2:	4b29      	ldr	r3, [pc, #164]	; (8008358 <xTaskNotifyWait+0xb8>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d01c      	beq.n	80082fa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80082c0:	4b25      	ldr	r3, [pc, #148]	; (8008358 <xTaskNotifyWait+0xb8>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	43d2      	mvns	r2, r2
 80082cc:	400a      	ands	r2, r1
 80082ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80082d2:	4b21      	ldr	r3, [pc, #132]	; (8008358 <xTaskNotifyWait+0xb8>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082e2:	2101      	movs	r1, #1
 80082e4:	6838      	ldr	r0, [r7, #0]
 80082e6:	f000 f9dd 	bl	80086a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80082ea:	4b1c      	ldr	r3, [pc, #112]	; (800835c <xTaskNotifyWait+0xbc>)
 80082ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80082fa:	f000 fed3 	bl	80090a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80082fe:	f000 fea1 	bl	8009044 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008308:	4b13      	ldr	r3, [pc, #76]	; (8008358 <xTaskNotifyWait+0xb8>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008314:	4b10      	ldr	r3, [pc, #64]	; (8008358 <xTaskNotifyWait+0xb8>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800831c:	b2db      	uxtb	r3, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d002      	beq.n	8008328 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	e00a      	b.n	800833e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008328:	4b0b      	ldr	r3, [pc, #44]	; (8008358 <xTaskNotifyWait+0xb8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	43d2      	mvns	r2, r2
 8008334:	400a      	ands	r2, r1
 8008336:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 800833a:	2301      	movs	r3, #1
 800833c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800833e:	4b06      	ldr	r3, [pc, #24]	; (8008358 <xTaskNotifyWait+0xb8>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8008348:	f000 feac 	bl	80090a4 <vPortExitCritical>

		return xReturn;
 800834c:	697b      	ldr	r3, [r7, #20]
	}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	200010a8 	.word	0x200010a8
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08a      	sub	sp, #40	; 0x28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	603b      	str	r3, [r7, #0]
 800836c:	4613      	mov	r3, r2
 800836e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008370:	2301      	movs	r3, #1
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10a      	bne.n	8008390 <xTaskGenericNotify+0x30>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	61bb      	str	r3, [r7, #24]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008394:	f000 fe56 	bl	8009044 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d004      	beq.n	80083a8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80083ae:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	2202      	movs	r2, #2
 80083b4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d82d      	bhi.n	800841a <xTaskGenericNotify+0xba>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <xTaskGenericNotify+0x64>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	0800843d 	.word	0x0800843d
 80083c8:	080083d9 	.word	0x080083d9
 80083cc:	080083eb 	.word	0x080083eb
 80083d0:	080083fb 	.word	0x080083fb
 80083d4:	08008405 	.word	0x08008405
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80083e8:	e02b      	b.n	8008442 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 80083f8:	e023      	b.n	8008442 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008402:	e01e      	b.n	8008442 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008404:	7ffb      	ldrb	r3, [r7, #31]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d004      	beq.n	8008414 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800840a:	6a3b      	ldr	r3, [r7, #32]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008412:	e016      	b.n	8008442 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008414:	2300      	movs	r3, #0
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008418:	e013      	b.n	8008442 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800841a:	6a3b      	ldr	r3, [r7, #32]
 800841c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d00c      	beq.n	8008440 <xTaskGenericNotify+0xe0>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	617b      	str	r3, [r7, #20]
}
 8008438:	bf00      	nop
 800843a:	e7fe      	b.n	800843a <xTaskGenericNotify+0xda>
					break;
 800843c:	bf00      	nop
 800843e:	e000      	b.n	8008442 <xTaskGenericNotify+0xe2>

					break;
 8008440:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008442:	7ffb      	ldrb	r3, [r7, #31]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d13a      	bne.n	80084be <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	3304      	adds	r3, #4
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fb25 	bl	8006a9c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	4b1d      	ldr	r3, [pc, #116]	; (80084cc <xTaskGenericNotify+0x16c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d903      	bls.n	8008466 <xTaskGenericNotify+0x106>
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	4a1a      	ldr	r2, [pc, #104]	; (80084cc <xTaskGenericNotify+0x16c>)
 8008464:	6013      	str	r3, [r2, #0]
 8008466:	6a3b      	ldr	r3, [r7, #32]
 8008468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800846a:	4613      	mov	r3, r2
 800846c:	009b      	lsls	r3, r3, #2
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <xTaskGenericNotify+0x170>)
 8008474:	441a      	add	r2, r3
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	3304      	adds	r3, #4
 800847a:	4619      	mov	r1, r3
 800847c:	4610      	mov	r0, r2
 800847e:	f7fe fab0 	bl	80069e2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <xTaskGenericNotify+0x140>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	613b      	str	r3, [r7, #16]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80084a0:	6a3b      	ldr	r3, [r7, #32]
 80084a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a4:	4b0b      	ldr	r3, [pc, #44]	; (80084d4 <xTaskGenericNotify+0x174>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d907      	bls.n	80084be <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80084ae:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <xTaskGenericNotify+0x178>)
 80084b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084b4:	601a      	str	r2, [r3, #0]
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80084be:	f000 fdf1 	bl	80090a4 <vPortExitCritical>

		return xReturn;
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3728      	adds	r7, #40	; 0x28
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20001584 	.word	0x20001584
 80084d0:	200010ac 	.word	0x200010ac
 80084d4:	200010a8 	.word	0x200010a8
 80084d8:	e000ed04 	.word	0xe000ed04

080084dc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08e      	sub	sp, #56	; 0x38
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	603b      	str	r3, [r7, #0]
 80084e8:	4613      	mov	r3, r2
 80084ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80084ec:	2301      	movs	r3, #1
 80084ee:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d10a      	bne.n	800850c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80084f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fa:	f383 8811 	msr	BASEPRI, r3
 80084fe:	f3bf 8f6f 	isb	sy
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008508:	bf00      	nop
 800850a:	e7fe      	b.n	800850a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800850c:	f000 fe7c 	bl	8009208 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008514:	f3ef 8211 	mrs	r2, BASEPRI
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	623a      	str	r2, [r7, #32]
 800852a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800852c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800852e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	2202      	movs	r2, #2
 800854e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	2b04      	cmp	r3, #4
 8008556:	d82f      	bhi.n	80085b8 <xTaskGenericNotifyFromISR+0xdc>
 8008558:	a201      	add	r2, pc, #4	; (adr r2, 8008560 <xTaskGenericNotifyFromISR+0x84>)
 800855a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855e:	bf00      	nop
 8008560:	080085db 	.word	0x080085db
 8008564:	08008575 	.word	0x08008575
 8008568:	08008587 	.word	0x08008587
 800856c:	08008597 	.word	0x08008597
 8008570:	080085a1 	.word	0x080085a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	431a      	orrs	r2, r3
 800857e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008580:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008584:	e02c      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008588:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8008594:	e024      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800859e:	e01f      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80085a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d004      	beq.n	80085b2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80085b0:	e016      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 80085b6:	e013      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c2:	d00c      	beq.n	80085de <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	f383 8811 	msr	BASEPRI, r3
 80085cc:	f3bf 8f6f 	isb	sy
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	61bb      	str	r3, [r7, #24]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <xTaskGenericNotifyFromISR+0x104>
					break;
 80085de:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80085e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d146      	bne.n	8008676 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00a      	beq.n	8008606 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	617b      	str	r3, [r7, #20]
}
 8008602:	bf00      	nop
 8008604:	e7fe      	b.n	8008604 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008606:	4b21      	ldr	r3, [pc, #132]	; (800868c <xTaskGenericNotifyFromISR+0x1b0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d11d      	bne.n	800864a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800860e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008610:	3304      	adds	r3, #4
 8008612:	4618      	mov	r0, r3
 8008614:	f7fe fa42 	bl	8006a9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4b1c      	ldr	r3, [pc, #112]	; (8008690 <xTaskGenericNotifyFromISR+0x1b4>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	429a      	cmp	r2, r3
 8008622:	d903      	bls.n	800862c <xTaskGenericNotifyFromISR+0x150>
 8008624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008628:	4a19      	ldr	r2, [pc, #100]	; (8008690 <xTaskGenericNotifyFromISR+0x1b4>)
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008630:	4613      	mov	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4413      	add	r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	4a16      	ldr	r2, [pc, #88]	; (8008694 <xTaskGenericNotifyFromISR+0x1b8>)
 800863a:	441a      	add	r2, r3
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	3304      	adds	r3, #4
 8008640:	4619      	mov	r1, r3
 8008642:	4610      	mov	r0, r2
 8008644:	f7fe f9cd 	bl	80069e2 <vListInsertEnd>
 8008648:	e005      	b.n	8008656 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800864a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864c:	3318      	adds	r3, #24
 800864e:	4619      	mov	r1, r3
 8008650:	4811      	ldr	r0, [pc, #68]	; (8008698 <xTaskGenericNotifyFromISR+0x1bc>)
 8008652:	f7fe f9c6 	bl	80069e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800865a:	4b10      	ldr	r3, [pc, #64]	; (800869c <xTaskGenericNotifyFromISR+0x1c0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008660:	429a      	cmp	r2, r3
 8008662:	d908      	bls.n	8008676 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800866a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800866c:	2201      	movs	r2, #1
 800866e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008670:	4b0b      	ldr	r3, [pc, #44]	; (80086a0 <xTaskGenericNotifyFromISR+0x1c4>)
 8008672:	2201      	movs	r2, #1
 8008674:	601a      	str	r2, [r3, #0]
 8008676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008678:	613b      	str	r3, [r7, #16]
	__asm volatile
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	f383 8811 	msr	BASEPRI, r3
}
 8008680:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8008682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8008684:	4618      	mov	r0, r3
 8008686:	3738      	adds	r7, #56	; 0x38
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	200015a4 	.word	0x200015a4
 8008690:	20001584 	.word	0x20001584
 8008694:	200010ac 	.word	0x200010ac
 8008698:	2000153c 	.word	0x2000153c
 800869c:	200010a8 	.word	0x200010a8
 80086a0:	20001590 	.word	0x20001590

080086a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80086ae:	4b21      	ldr	r3, [pc, #132]	; (8008734 <prvAddCurrentTaskToDelayedList+0x90>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80086b4:	4b20      	ldr	r3, [pc, #128]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3304      	adds	r3, #4
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe f9ee 	bl	8006a9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c6:	d10a      	bne.n	80086de <prvAddCurrentTaskToDelayedList+0x3a>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d007      	beq.n	80086de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ce:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4619      	mov	r1, r3
 80086d6:	4819      	ldr	r0, [pc, #100]	; (800873c <prvAddCurrentTaskToDelayedList+0x98>)
 80086d8:	f7fe f983 	bl	80069e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086dc:	e026      	b.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086de:	68fa      	ldr	r2, [r7, #12]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d209      	bcs.n	800870a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	4b0f      	ldr	r3, [pc, #60]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	3304      	adds	r3, #4
 8008700:	4619      	mov	r1, r3
 8008702:	4610      	mov	r0, r2
 8008704:	f7fe f991 	bl	8006a2a <vListInsert>
}
 8008708:	e010      	b.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <prvAddCurrentTaskToDelayedList+0xa0>)
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <prvAddCurrentTaskToDelayedList+0x94>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3304      	adds	r3, #4
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f7fe f987 	bl	8006a2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800871c:	4b0a      	ldr	r3, [pc, #40]	; (8008748 <prvAddCurrentTaskToDelayedList+0xa4>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	429a      	cmp	r2, r3
 8008724:	d202      	bcs.n	800872c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008726:	4a08      	ldr	r2, [pc, #32]	; (8008748 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	6013      	str	r3, [r2, #0]
}
 800872c:	bf00      	nop
 800872e:	3710      	adds	r7, #16
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}
 8008734:	20001580 	.word	0x20001580
 8008738:	200010a8 	.word	0x200010a8
 800873c:	20001568 	.word	0x20001568
 8008740:	20001538 	.word	0x20001538
 8008744:	20001534 	.word	0x20001534
 8008748:	2000159c 	.word	0x2000159c

0800874c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b08a      	sub	sp, #40	; 0x28
 8008750:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008756:	f000 fb07 	bl	8008d68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800875a:	4b1c      	ldr	r3, [pc, #112]	; (80087cc <xTimerCreateTimerTask+0x80>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d021      	beq.n	80087a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800876a:	1d3a      	adds	r2, r7, #4
 800876c:	f107 0108 	add.w	r1, r7, #8
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe f8ed 	bl	8006954 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800877a:	6879      	ldr	r1, [r7, #4]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	9202      	str	r2, [sp, #8]
 8008782:	9301      	str	r3, [sp, #4]
 8008784:	2302      	movs	r3, #2
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	460a      	mov	r2, r1
 800878c:	4910      	ldr	r1, [pc, #64]	; (80087d0 <xTimerCreateTimerTask+0x84>)
 800878e:	4811      	ldr	r0, [pc, #68]	; (80087d4 <xTimerCreateTimerTask+0x88>)
 8008790:	f7fe fed4 	bl	800753c <xTaskCreateStatic>
 8008794:	4603      	mov	r3, r0
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <xTimerCreateTimerTask+0x8c>)
 8008798:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800879a:	4b0f      	ldr	r3, [pc, #60]	; (80087d8 <xTimerCreateTimerTask+0x8c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d001      	beq.n	80087a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80087a2:	2301      	movs	r3, #1
 80087a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	613b      	str	r3, [r7, #16]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80087c2:	697b      	ldr	r3, [r7, #20]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3718      	adds	r7, #24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	200015d8 	.word	0x200015d8
 80087d0:	0800a83c 	.word	0x0800a83c
 80087d4:	08008911 	.word	0x08008911
 80087d8:	200015dc 	.word	0x200015dc

080087dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08a      	sub	sp, #40	; 0x28
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10a      	bne.n	800880a <xTimerGenericCommand+0x2e>
	__asm volatile
 80087f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f8:	f383 8811 	msr	BASEPRI, r3
 80087fc:	f3bf 8f6f 	isb	sy
 8008800:	f3bf 8f4f 	dsb	sy
 8008804:	623b      	str	r3, [r7, #32]
}
 8008806:	bf00      	nop
 8008808:	e7fe      	b.n	8008808 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800880a:	4b1a      	ldr	r3, [pc, #104]	; (8008874 <xTimerGenericCommand+0x98>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02a      	beq.n	8008868 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b05      	cmp	r3, #5
 8008822:	dc18      	bgt.n	8008856 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008824:	f7ff fcb0 	bl	8008188 <xTaskGetSchedulerState>
 8008828:	4603      	mov	r3, r0
 800882a:	2b02      	cmp	r3, #2
 800882c:	d109      	bne.n	8008842 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <xTimerGenericCommand+0x98>)
 8008830:	6818      	ldr	r0, [r3, #0]
 8008832:	f107 0110 	add.w	r1, r7, #16
 8008836:	2300      	movs	r3, #0
 8008838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800883a:	f7fe fa97 	bl	8006d6c <xQueueGenericSend>
 800883e:	6278      	str	r0, [r7, #36]	; 0x24
 8008840:	e012      	b.n	8008868 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008842:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <xTimerGenericCommand+0x98>)
 8008844:	6818      	ldr	r0, [r3, #0]
 8008846:	f107 0110 	add.w	r1, r7, #16
 800884a:	2300      	movs	r3, #0
 800884c:	2200      	movs	r2, #0
 800884e:	f7fe fa8d 	bl	8006d6c <xQueueGenericSend>
 8008852:	6278      	str	r0, [r7, #36]	; 0x24
 8008854:	e008      	b.n	8008868 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008856:	4b07      	ldr	r3, [pc, #28]	; (8008874 <xTimerGenericCommand+0x98>)
 8008858:	6818      	ldr	r0, [r3, #0]
 800885a:	f107 0110 	add.w	r1, r7, #16
 800885e:	2300      	movs	r3, #0
 8008860:	683a      	ldr	r2, [r7, #0]
 8008862:	f7fe fb81 	bl	8006f68 <xQueueGenericSendFromISR>
 8008866:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800886a:	4618      	mov	r0, r3
 800886c:	3728      	adds	r7, #40	; 0x28
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	200015d8 	.word	0x200015d8

08008878 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af02      	add	r7, sp, #8
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008882:	4b22      	ldr	r3, [pc, #136]	; (800890c <prvProcessExpiredTimer+0x94>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	3304      	adds	r3, #4
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe f903 	bl	8006a9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d022      	beq.n	80088ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	699a      	ldr	r2, [r3, #24]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	18d1      	adds	r1, r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	6978      	ldr	r0, [r7, #20]
 80088b2:	f000 f8d1 	bl	8008a58 <prvInsertTimerInActiveList>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01f      	beq.n	80088fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088bc:	2300      	movs	r3, #0
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	2300      	movs	r3, #0
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	2100      	movs	r1, #0
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	f7ff ff88 	bl	80087dc <xTimerGenericCommand>
 80088cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d113      	bne.n	80088fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	60fb      	str	r3, [r7, #12]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	6978      	ldr	r0, [r7, #20]
 8008902:	4798      	blx	r3
}
 8008904:	bf00      	nop
 8008906:	3718      	adds	r7, #24
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	200015d0 	.word	0x200015d0

08008910 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	4618      	mov	r0, r3
 800891e:	f000 f857 	bl	80089d0 <prvGetNextExpireTime>
 8008922:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	4619      	mov	r1, r3
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f000 f803 	bl	8008934 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800892e:	f000 f8d5 	bl	8008adc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008932:	e7f1      	b.n	8008918 <prvTimerTask+0x8>

08008934 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800893e:	f7ff f825 	bl	800798c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008942:	f107 0308 	add.w	r3, r7, #8
 8008946:	4618      	mov	r0, r3
 8008948:	f000 f866 	bl	8008a18 <prvSampleTimeNow>
 800894c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d130      	bne.n	80089b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10a      	bne.n	8008970 <prvProcessTimerOrBlockTask+0x3c>
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	429a      	cmp	r2, r3
 8008960:	d806      	bhi.n	8008970 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008962:	f7ff f821 	bl	80079a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff85 	bl	8008878 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800896e:	e024      	b.n	80089ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d008      	beq.n	8008988 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <prvProcessTimerOrBlockTask+0x90>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <prvProcessTimerOrBlockTask+0x50>
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <prvProcessTimerOrBlockTask+0x52>
 8008984:	2300      	movs	r3, #0
 8008986:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008988:	4b0f      	ldr	r3, [pc, #60]	; (80089c8 <prvProcessTimerOrBlockTask+0x94>)
 800898a:	6818      	ldr	r0, [r3, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	f7fe fd9d 	bl	80074d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800899a:	f7ff f805 	bl	80079a8 <xTaskResumeAll>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <prvProcessTimerOrBlockTask+0x98>)
 80089a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	f3bf 8f6f 	isb	sy
}
 80089b4:	e001      	b.n	80089ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089b6:	f7fe fff7 	bl	80079a8 <xTaskResumeAll>
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	200015d4 	.word	0x200015d4
 80089c8:	200015d8 	.word	0x200015d8
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <prvGetNextExpireTime+0x44>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <prvGetNextExpireTime+0x16>
 80089e2:	2201      	movs	r2, #1
 80089e4:	e000      	b.n	80089e8 <prvGetNextExpireTime+0x18>
 80089e6:	2200      	movs	r2, #0
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d105      	bne.n	8008a00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <prvGetNextExpireTime+0x44>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	e001      	b.n	8008a04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008a04:	68fb      	ldr	r3, [r7, #12]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	200015d0 	.word	0x200015d0

08008a18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a20:	f7ff f860 	bl	8007ae4 <xTaskGetTickCount>
 8008a24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a26:	4b0b      	ldr	r3, [pc, #44]	; (8008a54 <prvSampleTimeNow+0x3c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d205      	bcs.n	8008a3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a30:	f000 f936 	bl	8008ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e002      	b.n	8008a42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a42:	4a04      	ldr	r2, [pc, #16]	; (8008a54 <prvSampleTimeNow+0x3c>)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a48:	68fb      	ldr	r3, [r7, #12]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200015e0 	.word	0x200015e0

08008a58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
 8008a64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a66:	2300      	movs	r3, #0
 8008a68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d812      	bhi.n	8008aa4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	1ad2      	subs	r2, r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
 8008a90:	e01b      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <prvInsertTimerInActiveList+0x7c>)
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	3304      	adds	r3, #4
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f7fd ffc4 	bl	8006a2a <vListInsert>
 8008aa2:	e012      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d206      	bcs.n	8008aba <prvInsertTimerInActiveList+0x62>
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d302      	bcc.n	8008aba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	617b      	str	r3, [r7, #20]
 8008ab8:	e007      	b.n	8008aca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008aba:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <prvInsertTimerInActiveList+0x80>)
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	4610      	mov	r0, r2
 8008ac6:	f7fd ffb0 	bl	8006a2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008aca:	697b      	ldr	r3, [r7, #20]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3718      	adds	r7, #24
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	200015d4 	.word	0x200015d4
 8008ad8:	200015d0 	.word	0x200015d0

08008adc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08e      	sub	sp, #56	; 0x38
 8008ae0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ae2:	e0ca      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	da18      	bge.n	8008b1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aea:	1d3b      	adds	r3, r7, #4
 8008aec:	3304      	adds	r3, #4
 8008aee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afa:	f383 8811 	msr	BASEPRI, r3
 8008afe:	f3bf 8f6f 	isb	sy
 8008b02:	f3bf 8f4f 	dsb	sy
 8008b06:	61fb      	str	r3, [r7, #28]
}
 8008b08:	bf00      	nop
 8008b0a:	e7fe      	b.n	8008b0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b12:	6850      	ldr	r0, [r2, #4]
 8008b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b16:	6892      	ldr	r2, [r2, #8]
 8008b18:	4611      	mov	r1, r2
 8008b1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f2c0 80aa 	blt.w	8008c78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b32:	3304      	adds	r3, #4
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fd ffb1 	bl	8006a9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff ff6b 	bl	8008a18 <prvSampleTimeNow>
 8008b42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b09      	cmp	r3, #9
 8008b48:	f200 8097 	bhi.w	8008c7a <prvProcessReceivedCommands+0x19e>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <prvProcessReceivedCommands+0x78>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b7d 	.word	0x08008b7d
 8008b58:	08008b7d 	.word	0x08008b7d
 8008b5c:	08008b7d 	.word	0x08008b7d
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008c05 	.word	0x08008c05
 8008b68:	08008c4f 	.word	0x08008c4f
 8008b6c:	08008b7d 	.word	0x08008b7d
 8008b70:	08008b7d 	.word	0x08008b7d
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008c05 	.word	0x08008c05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b82:	f043 0301 	orr.w	r3, r3, #1
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b92:	699b      	ldr	r3, [r3, #24]
 8008b94:	18d1      	adds	r1, r2, r3
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b9c:	f7ff ff5c 	bl	8008a58 <prvInsertTimerInActiveList>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d069      	beq.n	8008c7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb4:	f003 0304 	and.w	r3, r3, #4
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d05e      	beq.n	8008c7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bbc:	68ba      	ldr	r2, [r7, #8]
 8008bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2100      	movs	r1, #0
 8008bcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bce:	f7ff fe05 	bl	80087dc <xTimerGenericCommand>
 8008bd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bd4:	6a3b      	ldr	r3, [r7, #32]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d14f      	bne.n	8008c7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	61bb      	str	r3, [r7, #24]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bf6:	f023 0301 	bic.w	r3, r3, #1
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008c02:	e03a      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0a:	f043 0301 	orr.w	r3, r3, #1
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10a      	bne.n	8008c3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	617b      	str	r3, [r7, #20]
}
 8008c36:	bf00      	nop
 8008c38:	e7fe      	b.n	8008c38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	699a      	ldr	r2, [r3, #24]
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c40:	18d1      	adds	r1, r2, r3
 8008c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c48:	f7ff ff06 	bl	8008a58 <prvInsertTimerInActiveList>
					break;
 8008c4c:	e015      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d103      	bne.n	8008c64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c5e:	f000 fbdf 	bl	8009420 <vPortFree>
 8008c62:	e00a      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c6a:	f023 0301 	bic.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c76:	e000      	b.n	8008c7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c7a:	4b08      	ldr	r3, [pc, #32]	; (8008c9c <prvProcessReceivedCommands+0x1c0>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1d39      	adds	r1, r7, #4
 8008c80:	2200      	movs	r2, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fa0c 	bl	80070a0 <xQueueReceive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af2a 	bne.w	8008ae4 <prvProcessReceivedCommands+0x8>
	}
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3730      	adds	r7, #48	; 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200015d8 	.word	0x200015d8

08008ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca6:	e048      	b.n	8008d3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ca8:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b2b      	ldr	r3, [pc, #172]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd feeb 	bl	8006a9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02e      	beq.n	8008d3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90e      	bls.n	8008d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fd fe90 	bl	8006a2a <vListInsert>
 8008d0a:	e016      	b.n	8008d3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fd60 	bl	80087dc <xTimerGenericCommand>
 8008d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10a      	bne.n	8008d3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	603b      	str	r3, [r7, #0]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1b1      	bne.n	8008ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <prvSwitchTimerLists+0xc0>)
 8008d50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d52:	4a04      	ldr	r2, [pc, #16]	; (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	6013      	str	r3, [r2, #0]
}
 8008d58:	bf00      	nop
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	200015d0 	.word	0x200015d0
 8008d64:	200015d4 	.word	0x200015d4

08008d68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d6e:	f000 f969 	bl	8009044 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d120      	bne.n	8008dbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d7a:	4814      	ldr	r0, [pc, #80]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d7c:	f7fd fe04 	bl	8006988 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d80:	4813      	ldr	r0, [pc, #76]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d82:	f7fd fe01 	bl	8006988 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d86:	4b13      	ldr	r3, [pc, #76]	; (8008dd4 <prvCheckForValidListAndQueue+0x6c>)
 8008d88:	4a10      	ldr	r2, [pc, #64]	; (8008dcc <prvCheckForValidListAndQueue+0x64>)
 8008d8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d8c:	4b12      	ldr	r3, [pc, #72]	; (8008dd8 <prvCheckForValidListAndQueue+0x70>)
 8008d8e:	4a10      	ldr	r2, [pc, #64]	; (8008dd0 <prvCheckForValidListAndQueue+0x68>)
 8008d90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d92:	2300      	movs	r3, #0
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <prvCheckForValidListAndQueue+0x74>)
 8008d98:	4a11      	ldr	r2, [pc, #68]	; (8008de0 <prvCheckForValidListAndQueue+0x78>)
 8008d9a:	2110      	movs	r1, #16
 8008d9c:	200a      	movs	r0, #10
 8008d9e:	f7fd ff0f 	bl	8006bc0 <xQueueGenericCreateStatic>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4a08      	ldr	r2, [pc, #32]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008da6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008da8:	4b07      	ldr	r3, [pc, #28]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d005      	beq.n	8008dbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <prvCheckForValidListAndQueue+0x60>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	490b      	ldr	r1, [pc, #44]	; (8008de4 <prvCheckForValidListAndQueue+0x7c>)
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fb62 	bl	8007480 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dbc:	f000 f972 	bl	80090a4 <vPortExitCritical>
}
 8008dc0:	bf00      	nop
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	200015d8 	.word	0x200015d8
 8008dcc:	200015a8 	.word	0x200015a8
 8008dd0:	200015bc 	.word	0x200015bc
 8008dd4:	200015d0 	.word	0x200015d0
 8008dd8:	200015d4 	.word	0x200015d4
 8008ddc:	20001684 	.word	0x20001684
 8008de0:	200015e4 	.word	0x200015e4
 8008de4:	0800a844 	.word	0x0800a844

08008de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008de8:	b480      	push	{r7}
 8008dea:	b085      	sub	sp, #20
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3b04      	subs	r3, #4
 8008df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f023 0201 	bic.w	r2, r3, #1
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	3b04      	subs	r3, #4
 8008e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e18:	4a0c      	ldr	r2, [pc, #48]	; (8008e4c <pxPortInitialiseStack+0x64>)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	3b14      	subs	r3, #20
 8008e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	3b04      	subs	r3, #4
 8008e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f06f 0202 	mvn.w	r2, #2
 8008e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	3b20      	subs	r3, #32
 8008e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr
 8008e4c:	08008e51 	.word	0x08008e51

08008e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e5a:	4b12      	ldr	r3, [pc, #72]	; (8008ea4 <prvTaskExitError+0x54>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e62:	d00a      	beq.n	8008e7a <prvTaskExitError+0x2a>
	__asm volatile
 8008e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	60fb      	str	r3, [r7, #12]
}
 8008e76:	bf00      	nop
 8008e78:	e7fe      	b.n	8008e78 <prvTaskExitError+0x28>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	60bb      	str	r3, [r7, #8]
}
 8008e8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e8e:	bf00      	nop
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0fc      	beq.n	8008e90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20000040 	.word	0x20000040
	...

08008eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <pxCurrentTCBConst2>)
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	6808      	ldr	r0, [r1, #0]
 8008eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eba:	f380 8809 	msr	PSP, r0
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f04f 0000 	mov.w	r0, #0
 8008ec6:	f380 8811 	msr	BASEPRI, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f3af 8000 	nop.w

08008ed0 <pxCurrentTCBConst2>:
 8008ed0:	200010a8 	.word	0x200010a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop

08008ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ed8:	4808      	ldr	r0, [pc, #32]	; (8008efc <prvPortStartFirstTask+0x24>)
 8008eda:	6800      	ldr	r0, [r0, #0]
 8008edc:	6800      	ldr	r0, [r0, #0]
 8008ede:	f380 8808 	msr	MSP, r0
 8008ee2:	f04f 0000 	mov.w	r0, #0
 8008ee6:	f380 8814 	msr	CONTROL, r0
 8008eea:	b662      	cpsie	i
 8008eec:	b661      	cpsie	f
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	df00      	svc	0
 8008ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008efa:	bf00      	nop
 8008efc:	e000ed08 	.word	0xe000ed08

08008f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f06:	4b46      	ldr	r3, [pc, #280]	; (8009020 <xPortStartScheduler+0x120>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a46      	ldr	r2, [pc, #280]	; (8009024 <xPortStartScheduler+0x124>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10a      	bne.n	8008f26 <xPortStartScheduler+0x26>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	f383 8811 	msr	BASEPRI, r3
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	f3bf 8f4f 	dsb	sy
 8008f20:	613b      	str	r3, [r7, #16]
}
 8008f22:	bf00      	nop
 8008f24:	e7fe      	b.n	8008f24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f26:	4b3e      	ldr	r3, [pc, #248]	; (8009020 <xPortStartScheduler+0x120>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a3f      	ldr	r2, [pc, #252]	; (8009028 <xPortStartScheduler+0x128>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10a      	bne.n	8008f46 <xPortStartScheduler+0x46>
	__asm volatile
 8008f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	60fb      	str	r3, [r7, #12]
}
 8008f42:	bf00      	nop
 8008f44:	e7fe      	b.n	8008f44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f46:	4b39      	ldr	r3, [pc, #228]	; (800902c <xPortStartScheduler+0x12c>)
 8008f48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	b2db      	uxtb	r3, r3
 8008f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	22ff      	movs	r2, #255	; 0xff
 8008f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4b31      	ldr	r3, [pc, #196]	; (8009030 <xPortStartScheduler+0x130>)
 8008f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xPortStartScheduler+0x134>)
 8008f70:	2207      	movs	r2, #7
 8008f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f74:	e009      	b.n	8008f8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f76:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <xPortStartScheduler+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	4a2d      	ldr	r2, [pc, #180]	; (8009034 <xPortStartScheduler+0x134>)
 8008f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f92:	2b80      	cmp	r3, #128	; 0x80
 8008f94:	d0ef      	beq.n	8008f76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f96:	4b27      	ldr	r3, [pc, #156]	; (8009034 <xPortStartScheduler+0x134>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f1c3 0307 	rsb	r3, r3, #7
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d00a      	beq.n	8008fb8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	f383 8811 	msr	BASEPRI, r3
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	f3bf 8f4f 	dsb	sy
 8008fb2:	60bb      	str	r3, [r7, #8]
}
 8008fb4:	bf00      	nop
 8008fb6:	e7fe      	b.n	8008fb6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <xPortStartScheduler+0x134>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	4a1d      	ldr	r2, [pc, #116]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008fc2:	4b1c      	ldr	r3, [pc, #112]	; (8009034 <xPortStartScheduler+0x134>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008fca:	4a1a      	ldr	r2, [pc, #104]	; (8009034 <xPortStartScheduler+0x134>)
 8008fcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <xPortStartScheduler+0x138>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a17      	ldr	r2, [pc, #92]	; (8009038 <xPortStartScheduler+0x138>)
 8008fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008fe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a14      	ldr	r2, [pc, #80]	; (8009038 <xPortStartScheduler+0x138>)
 8008fe8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008fec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008fee:	f000 f8dd 	bl	80091ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ff2:	4b12      	ldr	r3, [pc, #72]	; (800903c <xPortStartScheduler+0x13c>)
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ff8:	f000 f8fc 	bl	80091f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ffc:	4b10      	ldr	r3, [pc, #64]	; (8009040 <xPortStartScheduler+0x140>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0f      	ldr	r2, [pc, #60]	; (8009040 <xPortStartScheduler+0x140>)
 8009002:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009006:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009008:	f7ff ff66 	bl	8008ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800900c:	f7fe fe46 	bl	8007c9c <vTaskSwitchContext>
	prvTaskExitError();
 8009010:	f7ff ff1e 	bl	8008e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	e000ed00 	.word	0xe000ed00
 8009024:	410fc271 	.word	0x410fc271
 8009028:	410fc270 	.word	0x410fc270
 800902c:	e000e400 	.word	0xe000e400
 8009030:	200016d4 	.word	0x200016d4
 8009034:	200016d8 	.word	0x200016d8
 8009038:	e000ed20 	.word	0xe000ed20
 800903c:	20000040 	.word	0x20000040
 8009040:	e000ef34 	.word	0xe000ef34

08009044 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	607b      	str	r3, [r7, #4]
}
 800905c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800905e:	4b0f      	ldr	r3, [pc, #60]	; (800909c <vPortEnterCritical+0x58>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3301      	adds	r3, #1
 8009064:	4a0d      	ldr	r2, [pc, #52]	; (800909c <vPortEnterCritical+0x58>)
 8009066:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009068:	4b0c      	ldr	r3, [pc, #48]	; (800909c <vPortEnterCritical+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d10f      	bne.n	8009090 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009070:	4b0b      	ldr	r3, [pc, #44]	; (80090a0 <vPortEnterCritical+0x5c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00a      	beq.n	8009090 <vPortEnterCritical+0x4c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	603b      	str	r3, [r7, #0]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <vPortEnterCritical+0x4a>
	}
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr
 800909c:	20000040 	.word	0x20000040
 80090a0:	e000ed04 	.word	0xe000ed04

080090a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090aa:	4b12      	ldr	r3, [pc, #72]	; (80090f4 <vPortExitCritical+0x50>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10a      	bne.n	80090c8 <vPortExitCritical+0x24>
	__asm volatile
 80090b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b6:	f383 8811 	msr	BASEPRI, r3
 80090ba:	f3bf 8f6f 	isb	sy
 80090be:	f3bf 8f4f 	dsb	sy
 80090c2:	607b      	str	r3, [r7, #4]
}
 80090c4:	bf00      	nop
 80090c6:	e7fe      	b.n	80090c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80090c8:	4b0a      	ldr	r3, [pc, #40]	; (80090f4 <vPortExitCritical+0x50>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	3b01      	subs	r3, #1
 80090ce:	4a09      	ldr	r2, [pc, #36]	; (80090f4 <vPortExitCritical+0x50>)
 80090d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090d2:	4b08      	ldr	r3, [pc, #32]	; (80090f4 <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d105      	bne.n	80090e6 <vPortExitCritical+0x42>
 80090da:	2300      	movs	r3, #0
 80090dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	f383 8811 	msr	BASEPRI, r3
}
 80090e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000040 	.word	0x20000040
	...

08009100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009100:	f3ef 8009 	mrs	r0, PSP
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4b15      	ldr	r3, [pc, #84]	; (8009160 <pxCurrentTCBConst>)
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f01e 0f10 	tst.w	lr, #16
 8009110:	bf08      	it	eq
 8009112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911a:	6010      	str	r0, [r2, #0]
 800911c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009124:	f380 8811 	msr	BASEPRI, r0
 8009128:	f3bf 8f4f 	dsb	sy
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f7fe fdb4 	bl	8007c9c <vTaskSwitchContext>
 8009134:	f04f 0000 	mov.w	r0, #0
 8009138:	f380 8811 	msr	BASEPRI, r0
 800913c:	bc09      	pop	{r0, r3}
 800913e:	6819      	ldr	r1, [r3, #0]
 8009140:	6808      	ldr	r0, [r1, #0]
 8009142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f01e 0f10 	tst.w	lr, #16
 800914a:	bf08      	it	eq
 800914c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009150:	f380 8809 	msr	PSP, r0
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	f3af 8000 	nop.w

08009160 <pxCurrentTCBConst>:
 8009160:	200010a8 	.word	0x200010a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop

08009168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
	__asm volatile
 800916e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009172:	f383 8811 	msr	BASEPRI, r3
 8009176:	f3bf 8f6f 	isb	sy
 800917a:	f3bf 8f4f 	dsb	sy
 800917e:	607b      	str	r3, [r7, #4]
}
 8009180:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009182:	f7fe fcd1 	bl	8007b28 <xTaskIncrementTick>
 8009186:	4603      	mov	r3, r0
 8009188:	2b00      	cmp	r3, #0
 800918a:	d003      	beq.n	8009194 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800918c:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <xPortSysTickHandler+0x40>)
 800918e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	2300      	movs	r3, #0
 8009196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	f383 8811 	msr	BASEPRI, r3
}
 800919e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091a0:	bf00      	nop
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	e000ed04 	.word	0xe000ed04

080091ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091b0:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <vPortSetupTimerInterrupt+0x38>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <vPortSetupTimerInterrupt+0x3c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a0a      	ldr	r2, [pc, #40]	; (80091ec <vPortSetupTimerInterrupt+0x40>)
 80091c2:	fba2 2303 	umull	r2, r3, r2, r3
 80091c6:	099b      	lsrs	r3, r3, #6
 80091c8:	4a09      	ldr	r2, [pc, #36]	; (80091f0 <vPortSetupTimerInterrupt+0x44>)
 80091ca:	3b01      	subs	r3, #1
 80091cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ce:	4b04      	ldr	r3, [pc, #16]	; (80091e0 <vPortSetupTimerInterrupt+0x34>)
 80091d0:	2207      	movs	r2, #7
 80091d2:	601a      	str	r2, [r3, #0]
}
 80091d4:	bf00      	nop
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr
 80091de:	bf00      	nop
 80091e0:	e000e010 	.word	0xe000e010
 80091e4:	e000e018 	.word	0xe000e018
 80091e8:	20000000 	.word	0x20000000
 80091ec:	10624dd3 	.word	0x10624dd3
 80091f0:	e000e014 	.word	0xe000e014

080091f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009204 <vPortEnableVFP+0x10>
 80091f8:	6801      	ldr	r1, [r0, #0]
 80091fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091fe:	6001      	str	r1, [r0, #0]
 8009200:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009202:	bf00      	nop
 8009204:	e000ed88 	.word	0xe000ed88

08009208 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800920e:	f3ef 8305 	mrs	r3, IPSR
 8009212:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b0f      	cmp	r3, #15
 8009218:	d914      	bls.n	8009244 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800921a:	4a17      	ldr	r2, [pc, #92]	; (8009278 <vPortValidateInterruptPriority+0x70>)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	4413      	add	r3, r2
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vPortValidateInterruptPriority+0x74>)
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	7afa      	ldrb	r2, [r7, #11]
 800922a:	429a      	cmp	r2, r3
 800922c:	d20a      	bcs.n	8009244 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009232:	f383 8811 	msr	BASEPRI, r3
 8009236:	f3bf 8f6f 	isb	sy
 800923a:	f3bf 8f4f 	dsb	sy
 800923e:	607b      	str	r3, [r7, #4]
}
 8009240:	bf00      	nop
 8009242:	e7fe      	b.n	8009242 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009244:	4b0e      	ldr	r3, [pc, #56]	; (8009280 <vPortValidateInterruptPriority+0x78>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800924c:	4b0d      	ldr	r3, [pc, #52]	; (8009284 <vPortValidateInterruptPriority+0x7c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	429a      	cmp	r2, r3
 8009252:	d90a      	bls.n	800926a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	603b      	str	r3, [r7, #0]
}
 8009266:	bf00      	nop
 8009268:	e7fe      	b.n	8009268 <vPortValidateInterruptPriority+0x60>
	}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	e000e3f0 	.word	0xe000e3f0
 800927c:	200016d4 	.word	0x200016d4
 8009280:	e000ed0c 	.word	0xe000ed0c
 8009284:	200016d8 	.word	0x200016d8

08009288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b08a      	sub	sp, #40	; 0x28
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009290:	2300      	movs	r3, #0
 8009292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009294:	f7fe fb7a 	bl	800798c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009298:	4b5b      	ldr	r3, [pc, #364]	; (8009408 <pvPortMalloc+0x180>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092a0:	f000 f920 	bl	80094e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092a4:	4b59      	ldr	r3, [pc, #356]	; (800940c <pvPortMalloc+0x184>)
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4013      	ands	r3, r2
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8093 	bne.w	80093d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d01d      	beq.n	80092f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80092b8:	2208      	movs	r2, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4413      	add	r3, r2
 80092be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f003 0307 	and.w	r3, r3, #7
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f023 0307 	bic.w	r3, r3, #7
 80092d0:	3308      	adds	r3, #8
 80092d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00a      	beq.n	80092f4 <pvPortMalloc+0x6c>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	617b      	str	r3, [r7, #20]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d06e      	beq.n	80093d8 <pvPortMalloc+0x150>
 80092fa:	4b45      	ldr	r3, [pc, #276]	; (8009410 <pvPortMalloc+0x188>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	429a      	cmp	r2, r3
 8009302:	d869      	bhi.n	80093d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009304:	4b43      	ldr	r3, [pc, #268]	; (8009414 <pvPortMalloc+0x18c>)
 8009306:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009308:	4b42      	ldr	r3, [pc, #264]	; (8009414 <pvPortMalloc+0x18c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800930e:	e004      	b.n	800931a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800931a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d903      	bls.n	800932c <pvPortMalloc+0xa4>
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1f1      	bne.n	8009310 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800932c:	4b36      	ldr	r3, [pc, #216]	; (8009408 <pvPortMalloc+0x180>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009332:	429a      	cmp	r2, r3
 8009334:	d050      	beq.n	80093d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009336:	6a3b      	ldr	r3, [r7, #32]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2208      	movs	r2, #8
 800933c:	4413      	add	r3, r2
 800933e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	6a3b      	ldr	r3, [r7, #32]
 8009346:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	1ad2      	subs	r2, r2, r3
 8009350:	2308      	movs	r3, #8
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	429a      	cmp	r2, r3
 8009356:	d91f      	bls.n	8009398 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4413      	add	r3, r2
 800935e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	f003 0307 	and.w	r3, r3, #7
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <pvPortMalloc+0xf8>
	__asm volatile
 800936a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936e:	f383 8811 	msr	BASEPRI, r3
 8009372:	f3bf 8f6f 	isb	sy
 8009376:	f3bf 8f4f 	dsb	sy
 800937a:	613b      	str	r3, [r7, #16]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	1ad2      	subs	r2, r2, r3
 8009388:	69bb      	ldr	r3, [r7, #24]
 800938a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800938c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009392:	69b8      	ldr	r0, [r7, #24]
 8009394:	f000 f908 	bl	80095a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <pvPortMalloc+0x188>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	1ad3      	subs	r3, r2, r3
 80093a2:	4a1b      	ldr	r2, [pc, #108]	; (8009410 <pvPortMalloc+0x188>)
 80093a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093a6:	4b1a      	ldr	r3, [pc, #104]	; (8009410 <pvPortMalloc+0x188>)
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	4b1b      	ldr	r3, [pc, #108]	; (8009418 <pvPortMalloc+0x190>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d203      	bcs.n	80093ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093b2:	4b17      	ldr	r3, [pc, #92]	; (8009410 <pvPortMalloc+0x188>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a18      	ldr	r2, [pc, #96]	; (8009418 <pvPortMalloc+0x190>)
 80093b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	4b13      	ldr	r3, [pc, #76]	; (800940c <pvPortMalloc+0x184>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <pvPortMalloc+0x194>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3301      	adds	r3, #1
 80093d4:	4a11      	ldr	r2, [pc, #68]	; (800941c <pvPortMalloc+0x194>)
 80093d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093d8:	f7fe fae6 	bl	80079a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	f003 0307 	and.w	r3, r3, #7
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <pvPortMalloc+0x174>
	__asm volatile
 80093e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ea:	f383 8811 	msr	BASEPRI, r3
 80093ee:	f3bf 8f6f 	isb	sy
 80093f2:	f3bf 8f4f 	dsb	sy
 80093f6:	60fb      	str	r3, [r7, #12]
}
 80093f8:	bf00      	nop
 80093fa:	e7fe      	b.n	80093fa <pvPortMalloc+0x172>
	return pvReturn;
 80093fc:	69fb      	ldr	r3, [r7, #28]
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3728      	adds	r7, #40	; 0x28
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	2000229c 	.word	0x2000229c
 800940c:	200022b0 	.word	0x200022b0
 8009410:	200022a0 	.word	0x200022a0
 8009414:	20002294 	.word	0x20002294
 8009418:	200022a4 	.word	0x200022a4
 800941c:	200022a8 	.word	0x200022a8

08009420 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d04d      	beq.n	80094ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009432:	2308      	movs	r3, #8
 8009434:	425b      	negs	r3, r3
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <vPortFree+0xb8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d10a      	bne.n	8009464 <vPortFree+0x44>
	__asm volatile
 800944e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009452:	f383 8811 	msr	BASEPRI, r3
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	f3bf 8f4f 	dsb	sy
 800945e:	60fb      	str	r3, [r7, #12]
}
 8009460:	bf00      	nop
 8009462:	e7fe      	b.n	8009462 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <vPortFree+0x62>
	__asm volatile
 800946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	60bb      	str	r3, [r7, #8]
}
 800947e:	bf00      	nop
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	685a      	ldr	r2, [r3, #4]
 8009486:	4b14      	ldr	r3, [pc, #80]	; (80094d8 <vPortFree+0xb8>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4013      	ands	r3, r2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d01e      	beq.n	80094ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d11a      	bne.n	80094ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b0e      	ldr	r3, [pc, #56]	; (80094d8 <vPortFree+0xb8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094a8:	f7fe fa70 	bl	800798c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	685a      	ldr	r2, [r3, #4]
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <vPortFree+0xbc>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4413      	add	r3, r2
 80094b6:	4a09      	ldr	r2, [pc, #36]	; (80094dc <vPortFree+0xbc>)
 80094b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094ba:	6938      	ldr	r0, [r7, #16]
 80094bc:	f000 f874 	bl	80095a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80094c0:	4b07      	ldr	r3, [pc, #28]	; (80094e0 <vPortFree+0xc0>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	3301      	adds	r3, #1
 80094c6:	4a06      	ldr	r2, [pc, #24]	; (80094e0 <vPortFree+0xc0>)
 80094c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80094ca:	f7fe fa6d 	bl	80079a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094ce:	bf00      	nop
 80094d0:	3718      	adds	r7, #24
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200022b0 	.word	0x200022b0
 80094dc:	200022a0 	.word	0x200022a0
 80094e0:	200022ac 	.word	0x200022ac

080094e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80094ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094f0:	4b27      	ldr	r3, [pc, #156]	; (8009590 <prvHeapInit+0xac>)
 80094f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00c      	beq.n	8009518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3307      	adds	r3, #7
 8009502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	4a1f      	ldr	r2, [pc, #124]	; (8009590 <prvHeapInit+0xac>)
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800951c:	4a1d      	ldr	r2, [pc, #116]	; (8009594 <prvHeapInit+0xb0>)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009522:	4b1c      	ldr	r3, [pc, #112]	; (8009594 <prvHeapInit+0xb0>)
 8009524:	2200      	movs	r2, #0
 8009526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	4413      	add	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009530:	2208      	movs	r2, #8
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1a9b      	subs	r3, r3, r2
 8009536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0307 	bic.w	r3, r3, #7
 800953e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	4a15      	ldr	r2, [pc, #84]	; (8009598 <prvHeapInit+0xb4>)
 8009544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009546:	4b14      	ldr	r3, [pc, #80]	; (8009598 <prvHeapInit+0xb4>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2200      	movs	r2, #0
 800954c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800954e:	4b12      	ldr	r3, [pc, #72]	; (8009598 <prvHeapInit+0xb4>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2200      	movs	r2, #0
 8009554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	1ad2      	subs	r2, r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009564:	4b0c      	ldr	r3, [pc, #48]	; (8009598 <prvHeapInit+0xb4>)
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <prvHeapInit+0xb8>)
 8009572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	4a09      	ldr	r2, [pc, #36]	; (80095a0 <prvHeapInit+0xbc>)
 800957a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <prvHeapInit+0xc0>)
 800957e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009582:	601a      	str	r2, [r3, #0]
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	200016dc 	.word	0x200016dc
 8009594:	20002294 	.word	0x20002294
 8009598:	2000229c 	.word	0x2000229c
 800959c:	200022a4 	.word	0x200022a4
 80095a0:	200022a0 	.word	0x200022a0
 80095a4:	200022b0 	.word	0x200022b0

080095a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <prvInsertBlockIntoFreeList+0xac>)
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	e002      	b.n	80095bc <prvInsertBlockIntoFreeList+0x14>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d8f7      	bhi.n	80095b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	68ba      	ldr	r2, [r7, #8]
 80095d0:	4413      	add	r3, r2
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d108      	bne.n	80095ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685a      	ldr	r2, [r3, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	441a      	add	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	441a      	add	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d118      	bne.n	8009630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	4b15      	ldr	r3, [pc, #84]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	429a      	cmp	r2, r3
 8009608:	d00d      	beq.n	8009626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	441a      	add	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e008      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009626:	4b0c      	ldr	r3, [pc, #48]	; (8009658 <prvInsertBlockIntoFreeList+0xb0>)
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e003      	b.n	8009638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	429a      	cmp	r2, r3
 800963e:	d002      	beq.n	8009646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20002294 	.word	0x20002294
 8009658:	2000229c 	.word	0x2000229c

0800965c <__errno>:
 800965c:	4b01      	ldr	r3, [pc, #4]	; (8009664 <__errno+0x8>)
 800965e:	6818      	ldr	r0, [r3, #0]
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000044 	.word	0x20000044

08009668 <std>:
 8009668:	2300      	movs	r3, #0
 800966a:	b510      	push	{r4, lr}
 800966c:	4604      	mov	r4, r0
 800966e:	e9c0 3300 	strd	r3, r3, [r0]
 8009672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009676:	6083      	str	r3, [r0, #8]
 8009678:	8181      	strh	r1, [r0, #12]
 800967a:	6643      	str	r3, [r0, #100]	; 0x64
 800967c:	81c2      	strh	r2, [r0, #14]
 800967e:	6183      	str	r3, [r0, #24]
 8009680:	4619      	mov	r1, r3
 8009682:	2208      	movs	r2, #8
 8009684:	305c      	adds	r0, #92	; 0x5c
 8009686:	f000 f91a 	bl	80098be <memset>
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <std+0x38>)
 800968c:	6263      	str	r3, [r4, #36]	; 0x24
 800968e:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <std+0x3c>)
 8009690:	62a3      	str	r3, [r4, #40]	; 0x28
 8009692:	4b05      	ldr	r3, [pc, #20]	; (80096a8 <std+0x40>)
 8009694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009696:	4b05      	ldr	r3, [pc, #20]	; (80096ac <std+0x44>)
 8009698:	6224      	str	r4, [r4, #32]
 800969a:	6323      	str	r3, [r4, #48]	; 0x30
 800969c:	bd10      	pop	{r4, pc}
 800969e:	bf00      	nop
 80096a0:	08009c09 	.word	0x08009c09
 80096a4:	08009c2b 	.word	0x08009c2b
 80096a8:	08009c63 	.word	0x08009c63
 80096ac:	08009c87 	.word	0x08009c87

080096b0 <_cleanup_r>:
 80096b0:	4901      	ldr	r1, [pc, #4]	; (80096b8 <_cleanup_r+0x8>)
 80096b2:	f000 b8af 	b.w	8009814 <_fwalk_reent>
 80096b6:	bf00      	nop
 80096b8:	08009f61 	.word	0x08009f61

080096bc <__sfmoreglue>:
 80096bc:	b570      	push	{r4, r5, r6, lr}
 80096be:	2268      	movs	r2, #104	; 0x68
 80096c0:	1e4d      	subs	r5, r1, #1
 80096c2:	4355      	muls	r5, r2
 80096c4:	460e      	mov	r6, r1
 80096c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096ca:	f000 f921 	bl	8009910 <_malloc_r>
 80096ce:	4604      	mov	r4, r0
 80096d0:	b140      	cbz	r0, 80096e4 <__sfmoreglue+0x28>
 80096d2:	2100      	movs	r1, #0
 80096d4:	e9c0 1600 	strd	r1, r6, [r0]
 80096d8:	300c      	adds	r0, #12
 80096da:	60a0      	str	r0, [r4, #8]
 80096dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096e0:	f000 f8ed 	bl	80098be <memset>
 80096e4:	4620      	mov	r0, r4
 80096e6:	bd70      	pop	{r4, r5, r6, pc}

080096e8 <__sfp_lock_acquire>:
 80096e8:	4801      	ldr	r0, [pc, #4]	; (80096f0 <__sfp_lock_acquire+0x8>)
 80096ea:	f000 b8d8 	b.w	800989e <__retarget_lock_acquire_recursive>
 80096ee:	bf00      	nop
 80096f0:	200022b5 	.word	0x200022b5

080096f4 <__sfp_lock_release>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__sfp_lock_release+0x8>)
 80096f6:	f000 b8d3 	b.w	80098a0 <__retarget_lock_release_recursive>
 80096fa:	bf00      	nop
 80096fc:	200022b5 	.word	0x200022b5

08009700 <__sinit_lock_acquire>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__sinit_lock_acquire+0x8>)
 8009702:	f000 b8cc 	b.w	800989e <__retarget_lock_acquire_recursive>
 8009706:	bf00      	nop
 8009708:	200022b6 	.word	0x200022b6

0800970c <__sinit_lock_release>:
 800970c:	4801      	ldr	r0, [pc, #4]	; (8009714 <__sinit_lock_release+0x8>)
 800970e:	f000 b8c7 	b.w	80098a0 <__retarget_lock_release_recursive>
 8009712:	bf00      	nop
 8009714:	200022b6 	.word	0x200022b6

08009718 <__sinit>:
 8009718:	b510      	push	{r4, lr}
 800971a:	4604      	mov	r4, r0
 800971c:	f7ff fff0 	bl	8009700 <__sinit_lock_acquire>
 8009720:	69a3      	ldr	r3, [r4, #24]
 8009722:	b11b      	cbz	r3, 800972c <__sinit+0x14>
 8009724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009728:	f7ff bff0 	b.w	800970c <__sinit_lock_release>
 800972c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009730:	6523      	str	r3, [r4, #80]	; 0x50
 8009732:	4b13      	ldr	r3, [pc, #76]	; (8009780 <__sinit+0x68>)
 8009734:	4a13      	ldr	r2, [pc, #76]	; (8009784 <__sinit+0x6c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	62a2      	str	r2, [r4, #40]	; 0x28
 800973a:	42a3      	cmp	r3, r4
 800973c:	bf04      	itt	eq
 800973e:	2301      	moveq	r3, #1
 8009740:	61a3      	streq	r3, [r4, #24]
 8009742:	4620      	mov	r0, r4
 8009744:	f000 f820 	bl	8009788 <__sfp>
 8009748:	6060      	str	r0, [r4, #4]
 800974a:	4620      	mov	r0, r4
 800974c:	f000 f81c 	bl	8009788 <__sfp>
 8009750:	60a0      	str	r0, [r4, #8]
 8009752:	4620      	mov	r0, r4
 8009754:	f000 f818 	bl	8009788 <__sfp>
 8009758:	2200      	movs	r2, #0
 800975a:	60e0      	str	r0, [r4, #12]
 800975c:	2104      	movs	r1, #4
 800975e:	6860      	ldr	r0, [r4, #4]
 8009760:	f7ff ff82 	bl	8009668 <std>
 8009764:	68a0      	ldr	r0, [r4, #8]
 8009766:	2201      	movs	r2, #1
 8009768:	2109      	movs	r1, #9
 800976a:	f7ff ff7d 	bl	8009668 <std>
 800976e:	68e0      	ldr	r0, [r4, #12]
 8009770:	2202      	movs	r2, #2
 8009772:	2112      	movs	r1, #18
 8009774:	f7ff ff78 	bl	8009668 <std>
 8009778:	2301      	movs	r3, #1
 800977a:	61a3      	str	r3, [r4, #24]
 800977c:	e7d2      	b.n	8009724 <__sinit+0xc>
 800977e:	bf00      	nop
 8009780:	0800a930 	.word	0x0800a930
 8009784:	080096b1 	.word	0x080096b1

08009788 <__sfp>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	4607      	mov	r7, r0
 800978c:	f7ff ffac 	bl	80096e8 <__sfp_lock_acquire>
 8009790:	4b1e      	ldr	r3, [pc, #120]	; (800980c <__sfp+0x84>)
 8009792:	681e      	ldr	r6, [r3, #0]
 8009794:	69b3      	ldr	r3, [r6, #24]
 8009796:	b913      	cbnz	r3, 800979e <__sfp+0x16>
 8009798:	4630      	mov	r0, r6
 800979a:	f7ff ffbd 	bl	8009718 <__sinit>
 800979e:	3648      	adds	r6, #72	; 0x48
 80097a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	d503      	bpl.n	80097b0 <__sfp+0x28>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	b30b      	cbz	r3, 80097f0 <__sfp+0x68>
 80097ac:	6836      	ldr	r6, [r6, #0]
 80097ae:	e7f7      	b.n	80097a0 <__sfp+0x18>
 80097b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80097b4:	b9d5      	cbnz	r5, 80097ec <__sfp+0x64>
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <__sfp+0x88>)
 80097b8:	60e3      	str	r3, [r4, #12]
 80097ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097be:	6665      	str	r5, [r4, #100]	; 0x64
 80097c0:	f000 f86c 	bl	800989c <__retarget_lock_init_recursive>
 80097c4:	f7ff ff96 	bl	80096f4 <__sfp_lock_release>
 80097c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097d0:	6025      	str	r5, [r4, #0]
 80097d2:	61a5      	str	r5, [r4, #24]
 80097d4:	2208      	movs	r2, #8
 80097d6:	4629      	mov	r1, r5
 80097d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097dc:	f000 f86f 	bl	80098be <memset>
 80097e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097e8:	4620      	mov	r0, r4
 80097ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ec:	3468      	adds	r4, #104	; 0x68
 80097ee:	e7d9      	b.n	80097a4 <__sfp+0x1c>
 80097f0:	2104      	movs	r1, #4
 80097f2:	4638      	mov	r0, r7
 80097f4:	f7ff ff62 	bl	80096bc <__sfmoreglue>
 80097f8:	4604      	mov	r4, r0
 80097fa:	6030      	str	r0, [r6, #0]
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d1d5      	bne.n	80097ac <__sfp+0x24>
 8009800:	f7ff ff78 	bl	80096f4 <__sfp_lock_release>
 8009804:	230c      	movs	r3, #12
 8009806:	603b      	str	r3, [r7, #0]
 8009808:	e7ee      	b.n	80097e8 <__sfp+0x60>
 800980a:	bf00      	nop
 800980c:	0800a930 	.word	0x0800a930
 8009810:	ffff0001 	.word	0xffff0001

08009814 <_fwalk_reent>:
 8009814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009818:	4606      	mov	r6, r0
 800981a:	4688      	mov	r8, r1
 800981c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009820:	2700      	movs	r7, #0
 8009822:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009826:	f1b9 0901 	subs.w	r9, r9, #1
 800982a:	d505      	bpl.n	8009838 <_fwalk_reent+0x24>
 800982c:	6824      	ldr	r4, [r4, #0]
 800982e:	2c00      	cmp	r4, #0
 8009830:	d1f7      	bne.n	8009822 <_fwalk_reent+0xe>
 8009832:	4638      	mov	r0, r7
 8009834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009838:	89ab      	ldrh	r3, [r5, #12]
 800983a:	2b01      	cmp	r3, #1
 800983c:	d907      	bls.n	800984e <_fwalk_reent+0x3a>
 800983e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009842:	3301      	adds	r3, #1
 8009844:	d003      	beq.n	800984e <_fwalk_reent+0x3a>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	47c0      	blx	r8
 800984c:	4307      	orrs	r7, r0
 800984e:	3568      	adds	r5, #104	; 0x68
 8009850:	e7e9      	b.n	8009826 <_fwalk_reent+0x12>
	...

08009854 <__libc_init_array>:
 8009854:	b570      	push	{r4, r5, r6, lr}
 8009856:	4d0d      	ldr	r5, [pc, #52]	; (800988c <__libc_init_array+0x38>)
 8009858:	4c0d      	ldr	r4, [pc, #52]	; (8009890 <__libc_init_array+0x3c>)
 800985a:	1b64      	subs	r4, r4, r5
 800985c:	10a4      	asrs	r4, r4, #2
 800985e:	2600      	movs	r6, #0
 8009860:	42a6      	cmp	r6, r4
 8009862:	d109      	bne.n	8009878 <__libc_init_array+0x24>
 8009864:	4d0b      	ldr	r5, [pc, #44]	; (8009894 <__libc_init_array+0x40>)
 8009866:	4c0c      	ldr	r4, [pc, #48]	; (8009898 <__libc_init_array+0x44>)
 8009868:	f000 ffa8 	bl	800a7bc <_init>
 800986c:	1b64      	subs	r4, r4, r5
 800986e:	10a4      	asrs	r4, r4, #2
 8009870:	2600      	movs	r6, #0
 8009872:	42a6      	cmp	r6, r4
 8009874:	d105      	bne.n	8009882 <__libc_init_array+0x2e>
 8009876:	bd70      	pop	{r4, r5, r6, pc}
 8009878:	f855 3b04 	ldr.w	r3, [r5], #4
 800987c:	4798      	blx	r3
 800987e:	3601      	adds	r6, #1
 8009880:	e7ee      	b.n	8009860 <__libc_init_array+0xc>
 8009882:	f855 3b04 	ldr.w	r3, [r5], #4
 8009886:	4798      	blx	r3
 8009888:	3601      	adds	r6, #1
 800988a:	e7f2      	b.n	8009872 <__libc_init_array+0x1e>
 800988c:	0800a970 	.word	0x0800a970
 8009890:	0800a970 	.word	0x0800a970
 8009894:	0800a970 	.word	0x0800a970
 8009898:	0800a974 	.word	0x0800a974

0800989c <__retarget_lock_init_recursive>:
 800989c:	4770      	bx	lr

0800989e <__retarget_lock_acquire_recursive>:
 800989e:	4770      	bx	lr

080098a0 <__retarget_lock_release_recursive>:
 80098a0:	4770      	bx	lr

080098a2 <memcpy>:
 80098a2:	440a      	add	r2, r1
 80098a4:	4291      	cmp	r1, r2
 80098a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80098aa:	d100      	bne.n	80098ae <memcpy+0xc>
 80098ac:	4770      	bx	lr
 80098ae:	b510      	push	{r4, lr}
 80098b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b8:	4291      	cmp	r1, r2
 80098ba:	d1f9      	bne.n	80098b0 <memcpy+0xe>
 80098bc:	bd10      	pop	{r4, pc}

080098be <memset>:
 80098be:	4402      	add	r2, r0
 80098c0:	4603      	mov	r3, r0
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d100      	bne.n	80098c8 <memset+0xa>
 80098c6:	4770      	bx	lr
 80098c8:	f803 1b01 	strb.w	r1, [r3], #1
 80098cc:	e7f9      	b.n	80098c2 <memset+0x4>
	...

080098d0 <sbrk_aligned>:
 80098d0:	b570      	push	{r4, r5, r6, lr}
 80098d2:	4e0e      	ldr	r6, [pc, #56]	; (800990c <sbrk_aligned+0x3c>)
 80098d4:	460c      	mov	r4, r1
 80098d6:	6831      	ldr	r1, [r6, #0]
 80098d8:	4605      	mov	r5, r0
 80098da:	b911      	cbnz	r1, 80098e2 <sbrk_aligned+0x12>
 80098dc:	f000 f984 	bl	8009be8 <_sbrk_r>
 80098e0:	6030      	str	r0, [r6, #0]
 80098e2:	4621      	mov	r1, r4
 80098e4:	4628      	mov	r0, r5
 80098e6:	f000 f97f 	bl	8009be8 <_sbrk_r>
 80098ea:	1c43      	adds	r3, r0, #1
 80098ec:	d00a      	beq.n	8009904 <sbrk_aligned+0x34>
 80098ee:	1cc4      	adds	r4, r0, #3
 80098f0:	f024 0403 	bic.w	r4, r4, #3
 80098f4:	42a0      	cmp	r0, r4
 80098f6:	d007      	beq.n	8009908 <sbrk_aligned+0x38>
 80098f8:	1a21      	subs	r1, r4, r0
 80098fa:	4628      	mov	r0, r5
 80098fc:	f000 f974 	bl	8009be8 <_sbrk_r>
 8009900:	3001      	adds	r0, #1
 8009902:	d101      	bne.n	8009908 <sbrk_aligned+0x38>
 8009904:	f04f 34ff 	mov.w	r4, #4294967295
 8009908:	4620      	mov	r0, r4
 800990a:	bd70      	pop	{r4, r5, r6, pc}
 800990c:	200022bc 	.word	0x200022bc

08009910 <_malloc_r>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	1ccd      	adds	r5, r1, #3
 8009916:	f025 0503 	bic.w	r5, r5, #3
 800991a:	3508      	adds	r5, #8
 800991c:	2d0c      	cmp	r5, #12
 800991e:	bf38      	it	cc
 8009920:	250c      	movcc	r5, #12
 8009922:	2d00      	cmp	r5, #0
 8009924:	4607      	mov	r7, r0
 8009926:	db01      	blt.n	800992c <_malloc_r+0x1c>
 8009928:	42a9      	cmp	r1, r5
 800992a:	d905      	bls.n	8009938 <_malloc_r+0x28>
 800992c:	230c      	movs	r3, #12
 800992e:	603b      	str	r3, [r7, #0]
 8009930:	2600      	movs	r6, #0
 8009932:	4630      	mov	r0, r6
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	4e2e      	ldr	r6, [pc, #184]	; (80099f4 <_malloc_r+0xe4>)
 800993a:	f000 fbc5 	bl	800a0c8 <__malloc_lock>
 800993e:	6833      	ldr	r3, [r6, #0]
 8009940:	461c      	mov	r4, r3
 8009942:	bb34      	cbnz	r4, 8009992 <_malloc_r+0x82>
 8009944:	4629      	mov	r1, r5
 8009946:	4638      	mov	r0, r7
 8009948:	f7ff ffc2 	bl	80098d0 <sbrk_aligned>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	4604      	mov	r4, r0
 8009950:	d14d      	bne.n	80099ee <_malloc_r+0xde>
 8009952:	6834      	ldr	r4, [r6, #0]
 8009954:	4626      	mov	r6, r4
 8009956:	2e00      	cmp	r6, #0
 8009958:	d140      	bne.n	80099dc <_malloc_r+0xcc>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	4631      	mov	r1, r6
 800995e:	4638      	mov	r0, r7
 8009960:	eb04 0803 	add.w	r8, r4, r3
 8009964:	f000 f940 	bl	8009be8 <_sbrk_r>
 8009968:	4580      	cmp	r8, r0
 800996a:	d13a      	bne.n	80099e2 <_malloc_r+0xd2>
 800996c:	6821      	ldr	r1, [r4, #0]
 800996e:	3503      	adds	r5, #3
 8009970:	1a6d      	subs	r5, r5, r1
 8009972:	f025 0503 	bic.w	r5, r5, #3
 8009976:	3508      	adds	r5, #8
 8009978:	2d0c      	cmp	r5, #12
 800997a:	bf38      	it	cc
 800997c:	250c      	movcc	r5, #12
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa5 	bl	80098d0 <sbrk_aligned>
 8009986:	3001      	adds	r0, #1
 8009988:	d02b      	beq.n	80099e2 <_malloc_r+0xd2>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	442b      	add	r3, r5
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	e00e      	b.n	80099b0 <_malloc_r+0xa0>
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	1b52      	subs	r2, r2, r5
 8009996:	d41e      	bmi.n	80099d6 <_malloc_r+0xc6>
 8009998:	2a0b      	cmp	r2, #11
 800999a:	d916      	bls.n	80099ca <_malloc_r+0xba>
 800999c:	1961      	adds	r1, r4, r5
 800999e:	42a3      	cmp	r3, r4
 80099a0:	6025      	str	r5, [r4, #0]
 80099a2:	bf18      	it	ne
 80099a4:	6059      	strne	r1, [r3, #4]
 80099a6:	6863      	ldr	r3, [r4, #4]
 80099a8:	bf08      	it	eq
 80099aa:	6031      	streq	r1, [r6, #0]
 80099ac:	5162      	str	r2, [r4, r5]
 80099ae:	604b      	str	r3, [r1, #4]
 80099b0:	4638      	mov	r0, r7
 80099b2:	f104 060b 	add.w	r6, r4, #11
 80099b6:	f000 fb8d 	bl	800a0d4 <__malloc_unlock>
 80099ba:	f026 0607 	bic.w	r6, r6, #7
 80099be:	1d23      	adds	r3, r4, #4
 80099c0:	1af2      	subs	r2, r6, r3
 80099c2:	d0b6      	beq.n	8009932 <_malloc_r+0x22>
 80099c4:	1b9b      	subs	r3, r3, r6
 80099c6:	50a3      	str	r3, [r4, r2]
 80099c8:	e7b3      	b.n	8009932 <_malloc_r+0x22>
 80099ca:	6862      	ldr	r2, [r4, #4]
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	bf0c      	ite	eq
 80099d0:	6032      	streq	r2, [r6, #0]
 80099d2:	605a      	strne	r2, [r3, #4]
 80099d4:	e7ec      	b.n	80099b0 <_malloc_r+0xa0>
 80099d6:	4623      	mov	r3, r4
 80099d8:	6864      	ldr	r4, [r4, #4]
 80099da:	e7b2      	b.n	8009942 <_malloc_r+0x32>
 80099dc:	4634      	mov	r4, r6
 80099de:	6876      	ldr	r6, [r6, #4]
 80099e0:	e7b9      	b.n	8009956 <_malloc_r+0x46>
 80099e2:	230c      	movs	r3, #12
 80099e4:	603b      	str	r3, [r7, #0]
 80099e6:	4638      	mov	r0, r7
 80099e8:	f000 fb74 	bl	800a0d4 <__malloc_unlock>
 80099ec:	e7a1      	b.n	8009932 <_malloc_r+0x22>
 80099ee:	6025      	str	r5, [r4, #0]
 80099f0:	e7de      	b.n	80099b0 <_malloc_r+0xa0>
 80099f2:	bf00      	nop
 80099f4:	200022b8 	.word	0x200022b8

080099f8 <iprintf>:
 80099f8:	b40f      	push	{r0, r1, r2, r3}
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <iprintf+0x2c>)
 80099fc:	b513      	push	{r0, r1, r4, lr}
 80099fe:	681c      	ldr	r4, [r3, #0]
 8009a00:	b124      	cbz	r4, 8009a0c <iprintf+0x14>
 8009a02:	69a3      	ldr	r3, [r4, #24]
 8009a04:	b913      	cbnz	r3, 8009a0c <iprintf+0x14>
 8009a06:	4620      	mov	r0, r4
 8009a08:	f7ff fe86 	bl	8009718 <__sinit>
 8009a0c:	ab05      	add	r3, sp, #20
 8009a0e:	9a04      	ldr	r2, [sp, #16]
 8009a10:	68a1      	ldr	r1, [r4, #8]
 8009a12:	9301      	str	r3, [sp, #4]
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 fbd9 	bl	800a1cc <_vfiprintf_r>
 8009a1a:	b002      	add	sp, #8
 8009a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a20:	b004      	add	sp, #16
 8009a22:	4770      	bx	lr
 8009a24:	20000044 	.word	0x20000044

08009a28 <_puts_r>:
 8009a28:	b570      	push	{r4, r5, r6, lr}
 8009a2a:	460e      	mov	r6, r1
 8009a2c:	4605      	mov	r5, r0
 8009a2e:	b118      	cbz	r0, 8009a38 <_puts_r+0x10>
 8009a30:	6983      	ldr	r3, [r0, #24]
 8009a32:	b90b      	cbnz	r3, 8009a38 <_puts_r+0x10>
 8009a34:	f7ff fe70 	bl	8009718 <__sinit>
 8009a38:	69ab      	ldr	r3, [r5, #24]
 8009a3a:	68ac      	ldr	r4, [r5, #8]
 8009a3c:	b913      	cbnz	r3, 8009a44 <_puts_r+0x1c>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f7ff fe6a 	bl	8009718 <__sinit>
 8009a44:	4b2c      	ldr	r3, [pc, #176]	; (8009af8 <_puts_r+0xd0>)
 8009a46:	429c      	cmp	r4, r3
 8009a48:	d120      	bne.n	8009a8c <_puts_r+0x64>
 8009a4a:	686c      	ldr	r4, [r5, #4]
 8009a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a4e:	07db      	lsls	r3, r3, #31
 8009a50:	d405      	bmi.n	8009a5e <_puts_r+0x36>
 8009a52:	89a3      	ldrh	r3, [r4, #12]
 8009a54:	0598      	lsls	r0, r3, #22
 8009a56:	d402      	bmi.n	8009a5e <_puts_r+0x36>
 8009a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a5a:	f7ff ff20 	bl	800989e <__retarget_lock_acquire_recursive>
 8009a5e:	89a3      	ldrh	r3, [r4, #12]
 8009a60:	0719      	lsls	r1, r3, #28
 8009a62:	d51d      	bpl.n	8009aa0 <_puts_r+0x78>
 8009a64:	6923      	ldr	r3, [r4, #16]
 8009a66:	b1db      	cbz	r3, 8009aa0 <_puts_r+0x78>
 8009a68:	3e01      	subs	r6, #1
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009a70:	3b01      	subs	r3, #1
 8009a72:	60a3      	str	r3, [r4, #8]
 8009a74:	bb39      	cbnz	r1, 8009ac6 <_puts_r+0x9e>
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	da38      	bge.n	8009aec <_puts_r+0xc4>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	210a      	movs	r1, #10
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 f906 	bl	8009c90 <__swbuf_r>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d011      	beq.n	8009aac <_puts_r+0x84>
 8009a88:	250a      	movs	r5, #10
 8009a8a:	e011      	b.n	8009ab0 <_puts_r+0x88>
 8009a8c:	4b1b      	ldr	r3, [pc, #108]	; (8009afc <_puts_r+0xd4>)
 8009a8e:	429c      	cmp	r4, r3
 8009a90:	d101      	bne.n	8009a96 <_puts_r+0x6e>
 8009a92:	68ac      	ldr	r4, [r5, #8]
 8009a94:	e7da      	b.n	8009a4c <_puts_r+0x24>
 8009a96:	4b1a      	ldr	r3, [pc, #104]	; (8009b00 <_puts_r+0xd8>)
 8009a98:	429c      	cmp	r4, r3
 8009a9a:	bf08      	it	eq
 8009a9c:	68ec      	ldreq	r4, [r5, #12]
 8009a9e:	e7d5      	b.n	8009a4c <_puts_r+0x24>
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	f000 f958 	bl	8009d58 <__swsetup_r>
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d0dd      	beq.n	8009a68 <_puts_r+0x40>
 8009aac:	f04f 35ff 	mov.w	r5, #4294967295
 8009ab0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ab2:	07da      	lsls	r2, r3, #31
 8009ab4:	d405      	bmi.n	8009ac2 <_puts_r+0x9a>
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	059b      	lsls	r3, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_puts_r+0x9a>
 8009abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009abe:	f7ff feef 	bl	80098a0 <__retarget_lock_release_recursive>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	bd70      	pop	{r4, r5, r6, pc}
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da04      	bge.n	8009ad4 <_puts_r+0xac>
 8009aca:	69a2      	ldr	r2, [r4, #24]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	dc06      	bgt.n	8009ade <_puts_r+0xb6>
 8009ad0:	290a      	cmp	r1, #10
 8009ad2:	d004      	beq.n	8009ade <_puts_r+0xb6>
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	1c5a      	adds	r2, r3, #1
 8009ad8:	6022      	str	r2, [r4, #0]
 8009ada:	7019      	strb	r1, [r3, #0]
 8009adc:	e7c5      	b.n	8009a6a <_puts_r+0x42>
 8009ade:	4622      	mov	r2, r4
 8009ae0:	4628      	mov	r0, r5
 8009ae2:	f000 f8d5 	bl	8009c90 <__swbuf_r>
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	d1bf      	bne.n	8009a6a <_puts_r+0x42>
 8009aea:	e7df      	b.n	8009aac <_puts_r+0x84>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	250a      	movs	r5, #10
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	6022      	str	r2, [r4, #0]
 8009af4:	701d      	strb	r5, [r3, #0]
 8009af6:	e7db      	b.n	8009ab0 <_puts_r+0x88>
 8009af8:	0800a8f0 	.word	0x0800a8f0
 8009afc:	0800a910 	.word	0x0800a910
 8009b00:	0800a8d0 	.word	0x0800a8d0

08009b04 <puts>:
 8009b04:	4b02      	ldr	r3, [pc, #8]	; (8009b10 <puts+0xc>)
 8009b06:	4601      	mov	r1, r0
 8009b08:	6818      	ldr	r0, [r3, #0]
 8009b0a:	f7ff bf8d 	b.w	8009a28 <_puts_r>
 8009b0e:	bf00      	nop
 8009b10:	20000044 	.word	0x20000044

08009b14 <cleanup_glue>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	460c      	mov	r4, r1
 8009b18:	6809      	ldr	r1, [r1, #0]
 8009b1a:	4605      	mov	r5, r0
 8009b1c:	b109      	cbz	r1, 8009b22 <cleanup_glue+0xe>
 8009b1e:	f7ff fff9 	bl	8009b14 <cleanup_glue>
 8009b22:	4621      	mov	r1, r4
 8009b24:	4628      	mov	r0, r5
 8009b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b2a:	f000 bad9 	b.w	800a0e0 <_free_r>
	...

08009b30 <_reclaim_reent>:
 8009b30:	4b2c      	ldr	r3, [pc, #176]	; (8009be4 <_reclaim_reent+0xb4>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4283      	cmp	r3, r0
 8009b36:	b570      	push	{r4, r5, r6, lr}
 8009b38:	4604      	mov	r4, r0
 8009b3a:	d051      	beq.n	8009be0 <_reclaim_reent+0xb0>
 8009b3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009b3e:	b143      	cbz	r3, 8009b52 <_reclaim_reent+0x22>
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d14a      	bne.n	8009bdc <_reclaim_reent+0xac>
 8009b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b48:	6819      	ldr	r1, [r3, #0]
 8009b4a:	b111      	cbz	r1, 8009b52 <_reclaim_reent+0x22>
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fac7 	bl	800a0e0 <_free_r>
 8009b52:	6961      	ldr	r1, [r4, #20]
 8009b54:	b111      	cbz	r1, 8009b5c <_reclaim_reent+0x2c>
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 fac2 	bl	800a0e0 <_free_r>
 8009b5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b5e:	b111      	cbz	r1, 8009b66 <_reclaim_reent+0x36>
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fabd 	bl	800a0e0 <_free_r>
 8009b66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009b68:	b111      	cbz	r1, 8009b70 <_reclaim_reent+0x40>
 8009b6a:	4620      	mov	r0, r4
 8009b6c:	f000 fab8 	bl	800a0e0 <_free_r>
 8009b70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009b72:	b111      	cbz	r1, 8009b7a <_reclaim_reent+0x4a>
 8009b74:	4620      	mov	r0, r4
 8009b76:	f000 fab3 	bl	800a0e0 <_free_r>
 8009b7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009b7c:	b111      	cbz	r1, 8009b84 <_reclaim_reent+0x54>
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f000 faae 	bl	800a0e0 <_free_r>
 8009b84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009b86:	b111      	cbz	r1, 8009b8e <_reclaim_reent+0x5e>
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f000 faa9 	bl	800a0e0 <_free_r>
 8009b8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009b90:	b111      	cbz	r1, 8009b98 <_reclaim_reent+0x68>
 8009b92:	4620      	mov	r0, r4
 8009b94:	f000 faa4 	bl	800a0e0 <_free_r>
 8009b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b9a:	b111      	cbz	r1, 8009ba2 <_reclaim_reent+0x72>
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fa9f 	bl	800a0e0 <_free_r>
 8009ba2:	69a3      	ldr	r3, [r4, #24]
 8009ba4:	b1e3      	cbz	r3, 8009be0 <_reclaim_reent+0xb0>
 8009ba6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4798      	blx	r3
 8009bac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009bae:	b1b9      	cbz	r1, 8009be0 <_reclaim_reent+0xb0>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009bb6:	f7ff bfad 	b.w	8009b14 <cleanup_glue>
 8009bba:	5949      	ldr	r1, [r1, r5]
 8009bbc:	b941      	cbnz	r1, 8009bd0 <_reclaim_reent+0xa0>
 8009bbe:	3504      	adds	r5, #4
 8009bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bc2:	2d80      	cmp	r5, #128	; 0x80
 8009bc4:	68d9      	ldr	r1, [r3, #12]
 8009bc6:	d1f8      	bne.n	8009bba <_reclaim_reent+0x8a>
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 fa89 	bl	800a0e0 <_free_r>
 8009bce:	e7ba      	b.n	8009b46 <_reclaim_reent+0x16>
 8009bd0:	680e      	ldr	r6, [r1, #0]
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 fa84 	bl	800a0e0 <_free_r>
 8009bd8:	4631      	mov	r1, r6
 8009bda:	e7ef      	b.n	8009bbc <_reclaim_reent+0x8c>
 8009bdc:	2500      	movs	r5, #0
 8009bde:	e7ef      	b.n	8009bc0 <_reclaim_reent+0x90>
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	bf00      	nop
 8009be4:	20000044 	.word	0x20000044

08009be8 <_sbrk_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_sbrk_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f7 fd46 	bl	8001684 <_sbrk>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_sbrk_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_sbrk_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	200022c0 	.word	0x200022c0

08009c08 <__sread>:
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c10:	f000 fda0 	bl	800a754 <_read_r>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	bfab      	itete	ge
 8009c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8009c1c:	181b      	addge	r3, r3, r0
 8009c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009c22:	bfac      	ite	ge
 8009c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8009c26:	81a3      	strhlt	r3, [r4, #12]
 8009c28:	bd10      	pop	{r4, pc}

08009c2a <__swrite>:
 8009c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2e:	461f      	mov	r7, r3
 8009c30:	898b      	ldrh	r3, [r1, #12]
 8009c32:	05db      	lsls	r3, r3, #23
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	4616      	mov	r6, r2
 8009c3a:	d505      	bpl.n	8009c48 <__swrite+0x1e>
 8009c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c40:	2302      	movs	r3, #2
 8009c42:	2200      	movs	r2, #0
 8009c44:	f000 f9c8 	bl	8009fd8 <_lseek_r>
 8009c48:	89a3      	ldrh	r3, [r4, #12]
 8009c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c52:	81a3      	strh	r3, [r4, #12]
 8009c54:	4632      	mov	r2, r6
 8009c56:	463b      	mov	r3, r7
 8009c58:	4628      	mov	r0, r5
 8009c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c5e:	f000 b869 	b.w	8009d34 <_write_r>

08009c62 <__sseek>:
 8009c62:	b510      	push	{r4, lr}
 8009c64:	460c      	mov	r4, r1
 8009c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c6a:	f000 f9b5 	bl	8009fd8 <_lseek_r>
 8009c6e:	1c43      	adds	r3, r0, #1
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	bf15      	itete	ne
 8009c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8009c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009c7e:	81a3      	strheq	r3, [r4, #12]
 8009c80:	bf18      	it	ne
 8009c82:	81a3      	strhne	r3, [r4, #12]
 8009c84:	bd10      	pop	{r4, pc}

08009c86 <__sclose>:
 8009c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8a:	f000 b8d3 	b.w	8009e34 <_close_r>
	...

08009c90 <__swbuf_r>:
 8009c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c92:	460e      	mov	r6, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	4605      	mov	r5, r0
 8009c98:	b118      	cbz	r0, 8009ca2 <__swbuf_r+0x12>
 8009c9a:	6983      	ldr	r3, [r0, #24]
 8009c9c:	b90b      	cbnz	r3, 8009ca2 <__swbuf_r+0x12>
 8009c9e:	f7ff fd3b 	bl	8009718 <__sinit>
 8009ca2:	4b21      	ldr	r3, [pc, #132]	; (8009d28 <__swbuf_r+0x98>)
 8009ca4:	429c      	cmp	r4, r3
 8009ca6:	d12b      	bne.n	8009d00 <__swbuf_r+0x70>
 8009ca8:	686c      	ldr	r4, [r5, #4]
 8009caa:	69a3      	ldr	r3, [r4, #24]
 8009cac:	60a3      	str	r3, [r4, #8]
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	071a      	lsls	r2, r3, #28
 8009cb2:	d52f      	bpl.n	8009d14 <__swbuf_r+0x84>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	b36b      	cbz	r3, 8009d14 <__swbuf_r+0x84>
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	6820      	ldr	r0, [r4, #0]
 8009cbc:	1ac0      	subs	r0, r0, r3
 8009cbe:	6963      	ldr	r3, [r4, #20]
 8009cc0:	b2f6      	uxtb	r6, r6
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	4637      	mov	r7, r6
 8009cc6:	dc04      	bgt.n	8009cd2 <__swbuf_r+0x42>
 8009cc8:	4621      	mov	r1, r4
 8009cca:	4628      	mov	r0, r5
 8009ccc:	f000 f948 	bl	8009f60 <_fflush_r>
 8009cd0:	bb30      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	3b01      	subs	r3, #1
 8009cd6:	60a3      	str	r3, [r4, #8]
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	6022      	str	r2, [r4, #0]
 8009cde:	701e      	strb	r6, [r3, #0]
 8009ce0:	6963      	ldr	r3, [r4, #20]
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	4283      	cmp	r3, r0
 8009ce6:	d004      	beq.n	8009cf2 <__swbuf_r+0x62>
 8009ce8:	89a3      	ldrh	r3, [r4, #12]
 8009cea:	07db      	lsls	r3, r3, #31
 8009cec:	d506      	bpl.n	8009cfc <__swbuf_r+0x6c>
 8009cee:	2e0a      	cmp	r6, #10
 8009cf0:	d104      	bne.n	8009cfc <__swbuf_r+0x6c>
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	f000 f933 	bl	8009f60 <_fflush_r>
 8009cfa:	b988      	cbnz	r0, 8009d20 <__swbuf_r+0x90>
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <__swbuf_r+0x9c>)
 8009d02:	429c      	cmp	r4, r3
 8009d04:	d101      	bne.n	8009d0a <__swbuf_r+0x7a>
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	e7cf      	b.n	8009caa <__swbuf_r+0x1a>
 8009d0a:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <__swbuf_r+0xa0>)
 8009d0c:	429c      	cmp	r4, r3
 8009d0e:	bf08      	it	eq
 8009d10:	68ec      	ldreq	r4, [r5, #12]
 8009d12:	e7ca      	b.n	8009caa <__swbuf_r+0x1a>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 f81e 	bl	8009d58 <__swsetup_r>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d0cb      	beq.n	8009cb8 <__swbuf_r+0x28>
 8009d20:	f04f 37ff 	mov.w	r7, #4294967295
 8009d24:	e7ea      	b.n	8009cfc <__swbuf_r+0x6c>
 8009d26:	bf00      	nop
 8009d28:	0800a8f0 	.word	0x0800a8f0
 8009d2c:	0800a910 	.word	0x0800a910
 8009d30:	0800a8d0 	.word	0x0800a8d0

08009d34 <_write_r>:
 8009d34:	b538      	push	{r3, r4, r5, lr}
 8009d36:	4d07      	ldr	r5, [pc, #28]	; (8009d54 <_write_r+0x20>)
 8009d38:	4604      	mov	r4, r0
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	602a      	str	r2, [r5, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	f7f7 f802 	bl	8000d4c <_write>
 8009d48:	1c43      	adds	r3, r0, #1
 8009d4a:	d102      	bne.n	8009d52 <_write_r+0x1e>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	b103      	cbz	r3, 8009d52 <_write_r+0x1e>
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	bd38      	pop	{r3, r4, r5, pc}
 8009d54:	200022c0 	.word	0x200022c0

08009d58 <__swsetup_r>:
 8009d58:	4b32      	ldr	r3, [pc, #200]	; (8009e24 <__swsetup_r+0xcc>)
 8009d5a:	b570      	push	{r4, r5, r6, lr}
 8009d5c:	681d      	ldr	r5, [r3, #0]
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	b125      	cbz	r5, 8009d6e <__swsetup_r+0x16>
 8009d64:	69ab      	ldr	r3, [r5, #24]
 8009d66:	b913      	cbnz	r3, 8009d6e <__swsetup_r+0x16>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	f7ff fcd5 	bl	8009718 <__sinit>
 8009d6e:	4b2e      	ldr	r3, [pc, #184]	; (8009e28 <__swsetup_r+0xd0>)
 8009d70:	429c      	cmp	r4, r3
 8009d72:	d10f      	bne.n	8009d94 <__swsetup_r+0x3c>
 8009d74:	686c      	ldr	r4, [r5, #4]
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d7c:	0719      	lsls	r1, r3, #28
 8009d7e:	d42c      	bmi.n	8009dda <__swsetup_r+0x82>
 8009d80:	06dd      	lsls	r5, r3, #27
 8009d82:	d411      	bmi.n	8009da8 <__swsetup_r+0x50>
 8009d84:	2309      	movs	r3, #9
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	e03e      	b.n	8009e12 <__swsetup_r+0xba>
 8009d94:	4b25      	ldr	r3, [pc, #148]	; (8009e2c <__swsetup_r+0xd4>)
 8009d96:	429c      	cmp	r4, r3
 8009d98:	d101      	bne.n	8009d9e <__swsetup_r+0x46>
 8009d9a:	68ac      	ldr	r4, [r5, #8]
 8009d9c:	e7eb      	b.n	8009d76 <__swsetup_r+0x1e>
 8009d9e:	4b24      	ldr	r3, [pc, #144]	; (8009e30 <__swsetup_r+0xd8>)
 8009da0:	429c      	cmp	r4, r3
 8009da2:	bf08      	it	eq
 8009da4:	68ec      	ldreq	r4, [r5, #12]
 8009da6:	e7e6      	b.n	8009d76 <__swsetup_r+0x1e>
 8009da8:	0758      	lsls	r0, r3, #29
 8009daa:	d512      	bpl.n	8009dd2 <__swsetup_r+0x7a>
 8009dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009dae:	b141      	cbz	r1, 8009dc2 <__swsetup_r+0x6a>
 8009db0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009db4:	4299      	cmp	r1, r3
 8009db6:	d002      	beq.n	8009dbe <__swsetup_r+0x66>
 8009db8:	4630      	mov	r0, r6
 8009dba:	f000 f991 	bl	800a0e0 <_free_r>
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6363      	str	r3, [r4, #52]	; 0x34
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009dc8:	81a3      	strh	r3, [r4, #12]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f043 0308 	orr.w	r3, r3, #8
 8009dd8:	81a3      	strh	r3, [r4, #12]
 8009dda:	6923      	ldr	r3, [r4, #16]
 8009ddc:	b94b      	cbnz	r3, 8009df2 <__swsetup_r+0x9a>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009de8:	d003      	beq.n	8009df2 <__swsetup_r+0x9a>
 8009dea:	4621      	mov	r1, r4
 8009dec:	4630      	mov	r0, r6
 8009dee:	f000 f92b 	bl	800a048 <__smakebuf_r>
 8009df2:	89a0      	ldrh	r0, [r4, #12]
 8009df4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009df8:	f010 0301 	ands.w	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <__swsetup_r+0xbc>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60a3      	str	r3, [r4, #8]
 8009e02:	6963      	ldr	r3, [r4, #20]
 8009e04:	425b      	negs	r3, r3
 8009e06:	61a3      	str	r3, [r4, #24]
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	b943      	cbnz	r3, 8009e1e <__swsetup_r+0xc6>
 8009e0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009e10:	d1ba      	bne.n	8009d88 <__swsetup_r+0x30>
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0781      	lsls	r1, r0, #30
 8009e16:	bf58      	it	pl
 8009e18:	6963      	ldrpl	r3, [r4, #20]
 8009e1a:	60a3      	str	r3, [r4, #8]
 8009e1c:	e7f4      	b.n	8009e08 <__swsetup_r+0xb0>
 8009e1e:	2000      	movs	r0, #0
 8009e20:	e7f7      	b.n	8009e12 <__swsetup_r+0xba>
 8009e22:	bf00      	nop
 8009e24:	20000044 	.word	0x20000044
 8009e28:	0800a8f0 	.word	0x0800a8f0
 8009e2c:	0800a910 	.word	0x0800a910
 8009e30:	0800a8d0 	.word	0x0800a8d0

08009e34 <_close_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d06      	ldr	r5, [pc, #24]	; (8009e50 <_close_r+0x1c>)
 8009e38:	2300      	movs	r3, #0
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	4608      	mov	r0, r1
 8009e3e:	602b      	str	r3, [r5, #0]
 8009e40:	f7f7 fbeb 	bl	800161a <_close>
 8009e44:	1c43      	adds	r3, r0, #1
 8009e46:	d102      	bne.n	8009e4e <_close_r+0x1a>
 8009e48:	682b      	ldr	r3, [r5, #0]
 8009e4a:	b103      	cbz	r3, 8009e4e <_close_r+0x1a>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	200022c0 	.word	0x200022c0

08009e54 <__sflush_r>:
 8009e54:	898a      	ldrh	r2, [r1, #12]
 8009e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e5a:	4605      	mov	r5, r0
 8009e5c:	0710      	lsls	r0, r2, #28
 8009e5e:	460c      	mov	r4, r1
 8009e60:	d458      	bmi.n	8009f14 <__sflush_r+0xc0>
 8009e62:	684b      	ldr	r3, [r1, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dc05      	bgt.n	8009e74 <__sflush_r+0x20>
 8009e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	dc02      	bgt.n	8009e74 <__sflush_r+0x20>
 8009e6e:	2000      	movs	r0, #0
 8009e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	d0f9      	beq.n	8009e6e <__sflush_r+0x1a>
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e80:	682f      	ldr	r7, [r5, #0]
 8009e82:	602b      	str	r3, [r5, #0]
 8009e84:	d032      	beq.n	8009eec <__sflush_r+0x98>
 8009e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e88:	89a3      	ldrh	r3, [r4, #12]
 8009e8a:	075a      	lsls	r2, r3, #29
 8009e8c:	d505      	bpl.n	8009e9a <__sflush_r+0x46>
 8009e8e:	6863      	ldr	r3, [r4, #4]
 8009e90:	1ac0      	subs	r0, r0, r3
 8009e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e94:	b10b      	cbz	r3, 8009e9a <__sflush_r+0x46>
 8009e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e98:	1ac0      	subs	r0, r0, r3
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009ea0:	6a21      	ldr	r1, [r4, #32]
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b0      	blx	r6
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	d106      	bne.n	8009eba <__sflush_r+0x66>
 8009eac:	6829      	ldr	r1, [r5, #0]
 8009eae:	291d      	cmp	r1, #29
 8009eb0:	d82c      	bhi.n	8009f0c <__sflush_r+0xb8>
 8009eb2:	4a2a      	ldr	r2, [pc, #168]	; (8009f5c <__sflush_r+0x108>)
 8009eb4:	40ca      	lsrs	r2, r1
 8009eb6:	07d6      	lsls	r6, r2, #31
 8009eb8:	d528      	bpl.n	8009f0c <__sflush_r+0xb8>
 8009eba:	2200      	movs	r2, #0
 8009ebc:	6062      	str	r2, [r4, #4]
 8009ebe:	04d9      	lsls	r1, r3, #19
 8009ec0:	6922      	ldr	r2, [r4, #16]
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	d504      	bpl.n	8009ed0 <__sflush_r+0x7c>
 8009ec6:	1c42      	adds	r2, r0, #1
 8009ec8:	d101      	bne.n	8009ece <__sflush_r+0x7a>
 8009eca:	682b      	ldr	r3, [r5, #0]
 8009ecc:	b903      	cbnz	r3, 8009ed0 <__sflush_r+0x7c>
 8009ece:	6560      	str	r0, [r4, #84]	; 0x54
 8009ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009ed2:	602f      	str	r7, [r5, #0]
 8009ed4:	2900      	cmp	r1, #0
 8009ed6:	d0ca      	beq.n	8009e6e <__sflush_r+0x1a>
 8009ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009edc:	4299      	cmp	r1, r3
 8009ede:	d002      	beq.n	8009ee6 <__sflush_r+0x92>
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f000 f8fd 	bl	800a0e0 <_free_r>
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8009eea:	e7c1      	b.n	8009e70 <__sflush_r+0x1c>
 8009eec:	6a21      	ldr	r1, [r4, #32]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b0      	blx	r6
 8009ef4:	1c41      	adds	r1, r0, #1
 8009ef6:	d1c7      	bne.n	8009e88 <__sflush_r+0x34>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d0c4      	beq.n	8009e88 <__sflush_r+0x34>
 8009efe:	2b1d      	cmp	r3, #29
 8009f00:	d001      	beq.n	8009f06 <__sflush_r+0xb2>
 8009f02:	2b16      	cmp	r3, #22
 8009f04:	d101      	bne.n	8009f0a <__sflush_r+0xb6>
 8009f06:	602f      	str	r7, [r5, #0]
 8009f08:	e7b1      	b.n	8009e6e <__sflush_r+0x1a>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f10:	81a3      	strh	r3, [r4, #12]
 8009f12:	e7ad      	b.n	8009e70 <__sflush_r+0x1c>
 8009f14:	690f      	ldr	r7, [r1, #16]
 8009f16:	2f00      	cmp	r7, #0
 8009f18:	d0a9      	beq.n	8009e6e <__sflush_r+0x1a>
 8009f1a:	0793      	lsls	r3, r2, #30
 8009f1c:	680e      	ldr	r6, [r1, #0]
 8009f1e:	bf08      	it	eq
 8009f20:	694b      	ldreq	r3, [r1, #20]
 8009f22:	600f      	str	r7, [r1, #0]
 8009f24:	bf18      	it	ne
 8009f26:	2300      	movne	r3, #0
 8009f28:	eba6 0807 	sub.w	r8, r6, r7
 8009f2c:	608b      	str	r3, [r1, #8]
 8009f2e:	f1b8 0f00 	cmp.w	r8, #0
 8009f32:	dd9c      	ble.n	8009e6e <__sflush_r+0x1a>
 8009f34:	6a21      	ldr	r1, [r4, #32]
 8009f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009f38:	4643      	mov	r3, r8
 8009f3a:	463a      	mov	r2, r7
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b0      	blx	r6
 8009f40:	2800      	cmp	r0, #0
 8009f42:	dc06      	bgt.n	8009f52 <__sflush_r+0xfe>
 8009f44:	89a3      	ldrh	r3, [r4, #12]
 8009f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4a:	81a3      	strh	r3, [r4, #12]
 8009f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f50:	e78e      	b.n	8009e70 <__sflush_r+0x1c>
 8009f52:	4407      	add	r7, r0
 8009f54:	eba8 0800 	sub.w	r8, r8, r0
 8009f58:	e7e9      	b.n	8009f2e <__sflush_r+0xda>
 8009f5a:	bf00      	nop
 8009f5c:	20400001 	.word	0x20400001

08009f60 <_fflush_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	690b      	ldr	r3, [r1, #16]
 8009f64:	4605      	mov	r5, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b913      	cbnz	r3, 8009f70 <_fflush_r+0x10>
 8009f6a:	2500      	movs	r5, #0
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	b118      	cbz	r0, 8009f7a <_fflush_r+0x1a>
 8009f72:	6983      	ldr	r3, [r0, #24]
 8009f74:	b90b      	cbnz	r3, 8009f7a <_fflush_r+0x1a>
 8009f76:	f7ff fbcf 	bl	8009718 <__sinit>
 8009f7a:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <_fflush_r+0x6c>)
 8009f7c:	429c      	cmp	r4, r3
 8009f7e:	d11b      	bne.n	8009fb8 <_fflush_r+0x58>
 8009f80:	686c      	ldr	r4, [r5, #4]
 8009f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0ef      	beq.n	8009f6a <_fflush_r+0xa>
 8009f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f8c:	07d0      	lsls	r0, r2, #31
 8009f8e:	d404      	bmi.n	8009f9a <_fflush_r+0x3a>
 8009f90:	0599      	lsls	r1, r3, #22
 8009f92:	d402      	bmi.n	8009f9a <_fflush_r+0x3a>
 8009f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f96:	f7ff fc82 	bl	800989e <__retarget_lock_acquire_recursive>
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f7ff ff59 	bl	8009e54 <__sflush_r>
 8009fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fa4:	07da      	lsls	r2, r3, #31
 8009fa6:	4605      	mov	r5, r0
 8009fa8:	d4e0      	bmi.n	8009f6c <_fflush_r+0xc>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	059b      	lsls	r3, r3, #22
 8009fae:	d4dd      	bmi.n	8009f6c <_fflush_r+0xc>
 8009fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fb2:	f7ff fc75 	bl	80098a0 <__retarget_lock_release_recursive>
 8009fb6:	e7d9      	b.n	8009f6c <_fflush_r+0xc>
 8009fb8:	4b05      	ldr	r3, [pc, #20]	; (8009fd0 <_fflush_r+0x70>)
 8009fba:	429c      	cmp	r4, r3
 8009fbc:	d101      	bne.n	8009fc2 <_fflush_r+0x62>
 8009fbe:	68ac      	ldr	r4, [r5, #8]
 8009fc0:	e7df      	b.n	8009f82 <_fflush_r+0x22>
 8009fc2:	4b04      	ldr	r3, [pc, #16]	; (8009fd4 <_fflush_r+0x74>)
 8009fc4:	429c      	cmp	r4, r3
 8009fc6:	bf08      	it	eq
 8009fc8:	68ec      	ldreq	r4, [r5, #12]
 8009fca:	e7da      	b.n	8009f82 <_fflush_r+0x22>
 8009fcc:	0800a8f0 	.word	0x0800a8f0
 8009fd0:	0800a910 	.word	0x0800a910
 8009fd4:	0800a8d0 	.word	0x0800a8d0

08009fd8 <_lseek_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d07      	ldr	r5, [pc, #28]	; (8009ff8 <_lseek_r+0x20>)
 8009fdc:	4604      	mov	r4, r0
 8009fde:	4608      	mov	r0, r1
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	602a      	str	r2, [r5, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f7f7 fb3e 	bl	8001668 <_lseek>
 8009fec:	1c43      	adds	r3, r0, #1
 8009fee:	d102      	bne.n	8009ff6 <_lseek_r+0x1e>
 8009ff0:	682b      	ldr	r3, [r5, #0]
 8009ff2:	b103      	cbz	r3, 8009ff6 <_lseek_r+0x1e>
 8009ff4:	6023      	str	r3, [r4, #0]
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	200022c0 	.word	0x200022c0

08009ffc <__swhatbuf_r>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	460e      	mov	r6, r1
 800a000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a004:	2900      	cmp	r1, #0
 800a006:	b096      	sub	sp, #88	; 0x58
 800a008:	4614      	mov	r4, r2
 800a00a:	461d      	mov	r5, r3
 800a00c:	da08      	bge.n	800a020 <__swhatbuf_r+0x24>
 800a00e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	602a      	str	r2, [r5, #0]
 800a016:	061a      	lsls	r2, r3, #24
 800a018:	d410      	bmi.n	800a03c <__swhatbuf_r+0x40>
 800a01a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a01e:	e00e      	b.n	800a03e <__swhatbuf_r+0x42>
 800a020:	466a      	mov	r2, sp
 800a022:	f000 fba9 	bl	800a778 <_fstat_r>
 800a026:	2800      	cmp	r0, #0
 800a028:	dbf1      	blt.n	800a00e <__swhatbuf_r+0x12>
 800a02a:	9a01      	ldr	r2, [sp, #4]
 800a02c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a030:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a034:	425a      	negs	r2, r3
 800a036:	415a      	adcs	r2, r3
 800a038:	602a      	str	r2, [r5, #0]
 800a03a:	e7ee      	b.n	800a01a <__swhatbuf_r+0x1e>
 800a03c:	2340      	movs	r3, #64	; 0x40
 800a03e:	2000      	movs	r0, #0
 800a040:	6023      	str	r3, [r4, #0]
 800a042:	b016      	add	sp, #88	; 0x58
 800a044:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a048 <__smakebuf_r>:
 800a048:	898b      	ldrh	r3, [r1, #12]
 800a04a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a04c:	079d      	lsls	r5, r3, #30
 800a04e:	4606      	mov	r6, r0
 800a050:	460c      	mov	r4, r1
 800a052:	d507      	bpl.n	800a064 <__smakebuf_r+0x1c>
 800a054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a058:	6023      	str	r3, [r4, #0]
 800a05a:	6123      	str	r3, [r4, #16]
 800a05c:	2301      	movs	r3, #1
 800a05e:	6163      	str	r3, [r4, #20]
 800a060:	b002      	add	sp, #8
 800a062:	bd70      	pop	{r4, r5, r6, pc}
 800a064:	ab01      	add	r3, sp, #4
 800a066:	466a      	mov	r2, sp
 800a068:	f7ff ffc8 	bl	8009ffc <__swhatbuf_r>
 800a06c:	9900      	ldr	r1, [sp, #0]
 800a06e:	4605      	mov	r5, r0
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff fc4d 	bl	8009910 <_malloc_r>
 800a076:	b948      	cbnz	r0, 800a08c <__smakebuf_r+0x44>
 800a078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07c:	059a      	lsls	r2, r3, #22
 800a07e:	d4ef      	bmi.n	800a060 <__smakebuf_r+0x18>
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	f043 0302 	orr.w	r3, r3, #2
 800a088:	81a3      	strh	r3, [r4, #12]
 800a08a:	e7e3      	b.n	800a054 <__smakebuf_r+0xc>
 800a08c:	4b0d      	ldr	r3, [pc, #52]	; (800a0c4 <__smakebuf_r+0x7c>)
 800a08e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a090:	89a3      	ldrh	r3, [r4, #12]
 800a092:	6020      	str	r0, [r4, #0]
 800a094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a098:	81a3      	strh	r3, [r4, #12]
 800a09a:	9b00      	ldr	r3, [sp, #0]
 800a09c:	6163      	str	r3, [r4, #20]
 800a09e:	9b01      	ldr	r3, [sp, #4]
 800a0a0:	6120      	str	r0, [r4, #16]
 800a0a2:	b15b      	cbz	r3, 800a0bc <__smakebuf_r+0x74>
 800a0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f000 fb77 	bl	800a79c <_isatty_r>
 800a0ae:	b128      	cbz	r0, 800a0bc <__smakebuf_r+0x74>
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	f023 0303 	bic.w	r3, r3, #3
 800a0b6:	f043 0301 	orr.w	r3, r3, #1
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	89a0      	ldrh	r0, [r4, #12]
 800a0be:	4305      	orrs	r5, r0
 800a0c0:	81a5      	strh	r5, [r4, #12]
 800a0c2:	e7cd      	b.n	800a060 <__smakebuf_r+0x18>
 800a0c4:	080096b1 	.word	0x080096b1

0800a0c8 <__malloc_lock>:
 800a0c8:	4801      	ldr	r0, [pc, #4]	; (800a0d0 <__malloc_lock+0x8>)
 800a0ca:	f7ff bbe8 	b.w	800989e <__retarget_lock_acquire_recursive>
 800a0ce:	bf00      	nop
 800a0d0:	200022b4 	.word	0x200022b4

0800a0d4 <__malloc_unlock>:
 800a0d4:	4801      	ldr	r0, [pc, #4]	; (800a0dc <__malloc_unlock+0x8>)
 800a0d6:	f7ff bbe3 	b.w	80098a0 <__retarget_lock_release_recursive>
 800a0da:	bf00      	nop
 800a0dc:	200022b4 	.word	0x200022b4

0800a0e0 <_free_r>:
 800a0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e2:	2900      	cmp	r1, #0
 800a0e4:	d044      	beq.n	800a170 <_free_r+0x90>
 800a0e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ea:	9001      	str	r0, [sp, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f2:	bfb8      	it	lt
 800a0f4:	18e4      	addlt	r4, r4, r3
 800a0f6:	f7ff ffe7 	bl	800a0c8 <__malloc_lock>
 800a0fa:	4a1e      	ldr	r2, [pc, #120]	; (800a174 <_free_r+0x94>)
 800a0fc:	9801      	ldr	r0, [sp, #4]
 800a0fe:	6813      	ldr	r3, [r2, #0]
 800a100:	b933      	cbnz	r3, 800a110 <_free_r+0x30>
 800a102:	6063      	str	r3, [r4, #4]
 800a104:	6014      	str	r4, [r2, #0]
 800a106:	b003      	add	sp, #12
 800a108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a10c:	f7ff bfe2 	b.w	800a0d4 <__malloc_unlock>
 800a110:	42a3      	cmp	r3, r4
 800a112:	d908      	bls.n	800a126 <_free_r+0x46>
 800a114:	6825      	ldr	r5, [r4, #0]
 800a116:	1961      	adds	r1, r4, r5
 800a118:	428b      	cmp	r3, r1
 800a11a:	bf01      	itttt	eq
 800a11c:	6819      	ldreq	r1, [r3, #0]
 800a11e:	685b      	ldreq	r3, [r3, #4]
 800a120:	1949      	addeq	r1, r1, r5
 800a122:	6021      	streq	r1, [r4, #0]
 800a124:	e7ed      	b.n	800a102 <_free_r+0x22>
 800a126:	461a      	mov	r2, r3
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	b10b      	cbz	r3, 800a130 <_free_r+0x50>
 800a12c:	42a3      	cmp	r3, r4
 800a12e:	d9fa      	bls.n	800a126 <_free_r+0x46>
 800a130:	6811      	ldr	r1, [r2, #0]
 800a132:	1855      	adds	r5, r2, r1
 800a134:	42a5      	cmp	r5, r4
 800a136:	d10b      	bne.n	800a150 <_free_r+0x70>
 800a138:	6824      	ldr	r4, [r4, #0]
 800a13a:	4421      	add	r1, r4
 800a13c:	1854      	adds	r4, r2, r1
 800a13e:	42a3      	cmp	r3, r4
 800a140:	6011      	str	r1, [r2, #0]
 800a142:	d1e0      	bne.n	800a106 <_free_r+0x26>
 800a144:	681c      	ldr	r4, [r3, #0]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	6053      	str	r3, [r2, #4]
 800a14a:	4421      	add	r1, r4
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	e7da      	b.n	800a106 <_free_r+0x26>
 800a150:	d902      	bls.n	800a158 <_free_r+0x78>
 800a152:	230c      	movs	r3, #12
 800a154:	6003      	str	r3, [r0, #0]
 800a156:	e7d6      	b.n	800a106 <_free_r+0x26>
 800a158:	6825      	ldr	r5, [r4, #0]
 800a15a:	1961      	adds	r1, r4, r5
 800a15c:	428b      	cmp	r3, r1
 800a15e:	bf04      	itt	eq
 800a160:	6819      	ldreq	r1, [r3, #0]
 800a162:	685b      	ldreq	r3, [r3, #4]
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	bf04      	itt	eq
 800a168:	1949      	addeq	r1, r1, r5
 800a16a:	6021      	streq	r1, [r4, #0]
 800a16c:	6054      	str	r4, [r2, #4]
 800a16e:	e7ca      	b.n	800a106 <_free_r+0x26>
 800a170:	b003      	add	sp, #12
 800a172:	bd30      	pop	{r4, r5, pc}
 800a174:	200022b8 	.word	0x200022b8

0800a178 <__sfputc_r>:
 800a178:	6893      	ldr	r3, [r2, #8]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	b410      	push	{r4}
 800a180:	6093      	str	r3, [r2, #8]
 800a182:	da08      	bge.n	800a196 <__sfputc_r+0x1e>
 800a184:	6994      	ldr	r4, [r2, #24]
 800a186:	42a3      	cmp	r3, r4
 800a188:	db01      	blt.n	800a18e <__sfputc_r+0x16>
 800a18a:	290a      	cmp	r1, #10
 800a18c:	d103      	bne.n	800a196 <__sfputc_r+0x1e>
 800a18e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a192:	f7ff bd7d 	b.w	8009c90 <__swbuf_r>
 800a196:	6813      	ldr	r3, [r2, #0]
 800a198:	1c58      	adds	r0, r3, #1
 800a19a:	6010      	str	r0, [r2, #0]
 800a19c:	7019      	strb	r1, [r3, #0]
 800a19e:	4608      	mov	r0, r1
 800a1a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <__sfputs_r>:
 800a1a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1a8:	4606      	mov	r6, r0
 800a1aa:	460f      	mov	r7, r1
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	18d5      	adds	r5, r2, r3
 800a1b0:	42ac      	cmp	r4, r5
 800a1b2:	d101      	bne.n	800a1b8 <__sfputs_r+0x12>
 800a1b4:	2000      	movs	r0, #0
 800a1b6:	e007      	b.n	800a1c8 <__sfputs_r+0x22>
 800a1b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1bc:	463a      	mov	r2, r7
 800a1be:	4630      	mov	r0, r6
 800a1c0:	f7ff ffda 	bl	800a178 <__sfputc_r>
 800a1c4:	1c43      	adds	r3, r0, #1
 800a1c6:	d1f3      	bne.n	800a1b0 <__sfputs_r+0xa>
 800a1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1cc <_vfiprintf_r>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	b09d      	sub	sp, #116	; 0x74
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	4698      	mov	r8, r3
 800a1d8:	4606      	mov	r6, r0
 800a1da:	b118      	cbz	r0, 800a1e4 <_vfiprintf_r+0x18>
 800a1dc:	6983      	ldr	r3, [r0, #24]
 800a1de:	b90b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x18>
 800a1e0:	f7ff fa9a 	bl	8009718 <__sinit>
 800a1e4:	4b89      	ldr	r3, [pc, #548]	; (800a40c <_vfiprintf_r+0x240>)
 800a1e6:	429d      	cmp	r5, r3
 800a1e8:	d11b      	bne.n	800a222 <_vfiprintf_r+0x56>
 800a1ea:	6875      	ldr	r5, [r6, #4]
 800a1ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ee:	07d9      	lsls	r1, r3, #31
 800a1f0:	d405      	bmi.n	800a1fe <_vfiprintf_r+0x32>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	059a      	lsls	r2, r3, #22
 800a1f6:	d402      	bmi.n	800a1fe <_vfiprintf_r+0x32>
 800a1f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1fa:	f7ff fb50 	bl	800989e <__retarget_lock_acquire_recursive>
 800a1fe:	89ab      	ldrh	r3, [r5, #12]
 800a200:	071b      	lsls	r3, r3, #28
 800a202:	d501      	bpl.n	800a208 <_vfiprintf_r+0x3c>
 800a204:	692b      	ldr	r3, [r5, #16]
 800a206:	b9eb      	cbnz	r3, 800a244 <_vfiprintf_r+0x78>
 800a208:	4629      	mov	r1, r5
 800a20a:	4630      	mov	r0, r6
 800a20c:	f7ff fda4 	bl	8009d58 <__swsetup_r>
 800a210:	b1c0      	cbz	r0, 800a244 <_vfiprintf_r+0x78>
 800a212:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a214:	07dc      	lsls	r4, r3, #31
 800a216:	d50e      	bpl.n	800a236 <_vfiprintf_r+0x6a>
 800a218:	f04f 30ff 	mov.w	r0, #4294967295
 800a21c:	b01d      	add	sp, #116	; 0x74
 800a21e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a222:	4b7b      	ldr	r3, [pc, #492]	; (800a410 <_vfiprintf_r+0x244>)
 800a224:	429d      	cmp	r5, r3
 800a226:	d101      	bne.n	800a22c <_vfiprintf_r+0x60>
 800a228:	68b5      	ldr	r5, [r6, #8]
 800a22a:	e7df      	b.n	800a1ec <_vfiprintf_r+0x20>
 800a22c:	4b79      	ldr	r3, [pc, #484]	; (800a414 <_vfiprintf_r+0x248>)
 800a22e:	429d      	cmp	r5, r3
 800a230:	bf08      	it	eq
 800a232:	68f5      	ldreq	r5, [r6, #12]
 800a234:	e7da      	b.n	800a1ec <_vfiprintf_r+0x20>
 800a236:	89ab      	ldrh	r3, [r5, #12]
 800a238:	0598      	lsls	r0, r3, #22
 800a23a:	d4ed      	bmi.n	800a218 <_vfiprintf_r+0x4c>
 800a23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a23e:	f7ff fb2f 	bl	80098a0 <__retarget_lock_release_recursive>
 800a242:	e7e9      	b.n	800a218 <_vfiprintf_r+0x4c>
 800a244:	2300      	movs	r3, #0
 800a246:	9309      	str	r3, [sp, #36]	; 0x24
 800a248:	2320      	movs	r3, #32
 800a24a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a24e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a252:	2330      	movs	r3, #48	; 0x30
 800a254:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a418 <_vfiprintf_r+0x24c>
 800a258:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a25c:	f04f 0901 	mov.w	r9, #1
 800a260:	4623      	mov	r3, r4
 800a262:	469a      	mov	sl, r3
 800a264:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a268:	b10a      	cbz	r2, 800a26e <_vfiprintf_r+0xa2>
 800a26a:	2a25      	cmp	r2, #37	; 0x25
 800a26c:	d1f9      	bne.n	800a262 <_vfiprintf_r+0x96>
 800a26e:	ebba 0b04 	subs.w	fp, sl, r4
 800a272:	d00b      	beq.n	800a28c <_vfiprintf_r+0xc0>
 800a274:	465b      	mov	r3, fp
 800a276:	4622      	mov	r2, r4
 800a278:	4629      	mov	r1, r5
 800a27a:	4630      	mov	r0, r6
 800a27c:	f7ff ff93 	bl	800a1a6 <__sfputs_r>
 800a280:	3001      	adds	r0, #1
 800a282:	f000 80aa 	beq.w	800a3da <_vfiprintf_r+0x20e>
 800a286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a288:	445a      	add	r2, fp
 800a28a:	9209      	str	r2, [sp, #36]	; 0x24
 800a28c:	f89a 3000 	ldrb.w	r3, [sl]
 800a290:	2b00      	cmp	r3, #0
 800a292:	f000 80a2 	beq.w	800a3da <_vfiprintf_r+0x20e>
 800a296:	2300      	movs	r3, #0
 800a298:	f04f 32ff 	mov.w	r2, #4294967295
 800a29c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a0:	f10a 0a01 	add.w	sl, sl, #1
 800a2a4:	9304      	str	r3, [sp, #16]
 800a2a6:	9307      	str	r3, [sp, #28]
 800a2a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ae:	4654      	mov	r4, sl
 800a2b0:	2205      	movs	r2, #5
 800a2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b6:	4858      	ldr	r0, [pc, #352]	; (800a418 <_vfiprintf_r+0x24c>)
 800a2b8:	f7f5 ff8a 	bl	80001d0 <memchr>
 800a2bc:	9a04      	ldr	r2, [sp, #16]
 800a2be:	b9d8      	cbnz	r0, 800a2f8 <_vfiprintf_r+0x12c>
 800a2c0:	06d1      	lsls	r1, r2, #27
 800a2c2:	bf44      	itt	mi
 800a2c4:	2320      	movmi	r3, #32
 800a2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2ca:	0713      	lsls	r3, r2, #28
 800a2cc:	bf44      	itt	mi
 800a2ce:	232b      	movmi	r3, #43	; 0x2b
 800a2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a2d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a2da:	d015      	beq.n	800a308 <_vfiprintf_r+0x13c>
 800a2dc:	9a07      	ldr	r2, [sp, #28]
 800a2de:	4654      	mov	r4, sl
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	f04f 0c0a 	mov.w	ip, #10
 800a2e6:	4621      	mov	r1, r4
 800a2e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ec:	3b30      	subs	r3, #48	; 0x30
 800a2ee:	2b09      	cmp	r3, #9
 800a2f0:	d94e      	bls.n	800a390 <_vfiprintf_r+0x1c4>
 800a2f2:	b1b0      	cbz	r0, 800a322 <_vfiprintf_r+0x156>
 800a2f4:	9207      	str	r2, [sp, #28]
 800a2f6:	e014      	b.n	800a322 <_vfiprintf_r+0x156>
 800a2f8:	eba0 0308 	sub.w	r3, r0, r8
 800a2fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a300:	4313      	orrs	r3, r2
 800a302:	9304      	str	r3, [sp, #16]
 800a304:	46a2      	mov	sl, r4
 800a306:	e7d2      	b.n	800a2ae <_vfiprintf_r+0xe2>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	1d19      	adds	r1, r3, #4
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	9103      	str	r1, [sp, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	bfbb      	ittet	lt
 800a314:	425b      	neglt	r3, r3
 800a316:	f042 0202 	orrlt.w	r2, r2, #2
 800a31a:	9307      	strge	r3, [sp, #28]
 800a31c:	9307      	strlt	r3, [sp, #28]
 800a31e:	bfb8      	it	lt
 800a320:	9204      	strlt	r2, [sp, #16]
 800a322:	7823      	ldrb	r3, [r4, #0]
 800a324:	2b2e      	cmp	r3, #46	; 0x2e
 800a326:	d10c      	bne.n	800a342 <_vfiprintf_r+0x176>
 800a328:	7863      	ldrb	r3, [r4, #1]
 800a32a:	2b2a      	cmp	r3, #42	; 0x2a
 800a32c:	d135      	bne.n	800a39a <_vfiprintf_r+0x1ce>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	1d1a      	adds	r2, r3, #4
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	9203      	str	r2, [sp, #12]
 800a336:	2b00      	cmp	r3, #0
 800a338:	bfb8      	it	lt
 800a33a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a33e:	3402      	adds	r4, #2
 800a340:	9305      	str	r3, [sp, #20]
 800a342:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a428 <_vfiprintf_r+0x25c>
 800a346:	7821      	ldrb	r1, [r4, #0]
 800a348:	2203      	movs	r2, #3
 800a34a:	4650      	mov	r0, sl
 800a34c:	f7f5 ff40 	bl	80001d0 <memchr>
 800a350:	b140      	cbz	r0, 800a364 <_vfiprintf_r+0x198>
 800a352:	2340      	movs	r3, #64	; 0x40
 800a354:	eba0 000a 	sub.w	r0, r0, sl
 800a358:	fa03 f000 	lsl.w	r0, r3, r0
 800a35c:	9b04      	ldr	r3, [sp, #16]
 800a35e:	4303      	orrs	r3, r0
 800a360:	3401      	adds	r4, #1
 800a362:	9304      	str	r3, [sp, #16]
 800a364:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a368:	482c      	ldr	r0, [pc, #176]	; (800a41c <_vfiprintf_r+0x250>)
 800a36a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a36e:	2206      	movs	r2, #6
 800a370:	f7f5 ff2e 	bl	80001d0 <memchr>
 800a374:	2800      	cmp	r0, #0
 800a376:	d03f      	beq.n	800a3f8 <_vfiprintf_r+0x22c>
 800a378:	4b29      	ldr	r3, [pc, #164]	; (800a420 <_vfiprintf_r+0x254>)
 800a37a:	bb1b      	cbnz	r3, 800a3c4 <_vfiprintf_r+0x1f8>
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	3307      	adds	r3, #7
 800a380:	f023 0307 	bic.w	r3, r3, #7
 800a384:	3308      	adds	r3, #8
 800a386:	9303      	str	r3, [sp, #12]
 800a388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a38a:	443b      	add	r3, r7
 800a38c:	9309      	str	r3, [sp, #36]	; 0x24
 800a38e:	e767      	b.n	800a260 <_vfiprintf_r+0x94>
 800a390:	fb0c 3202 	mla	r2, ip, r2, r3
 800a394:	460c      	mov	r4, r1
 800a396:	2001      	movs	r0, #1
 800a398:	e7a5      	b.n	800a2e6 <_vfiprintf_r+0x11a>
 800a39a:	2300      	movs	r3, #0
 800a39c:	3401      	adds	r4, #1
 800a39e:	9305      	str	r3, [sp, #20]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	f04f 0c0a 	mov.w	ip, #10
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3ac:	3a30      	subs	r2, #48	; 0x30
 800a3ae:	2a09      	cmp	r2, #9
 800a3b0:	d903      	bls.n	800a3ba <_vfiprintf_r+0x1ee>
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d0c5      	beq.n	800a342 <_vfiprintf_r+0x176>
 800a3b6:	9105      	str	r1, [sp, #20]
 800a3b8:	e7c3      	b.n	800a342 <_vfiprintf_r+0x176>
 800a3ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3be:	4604      	mov	r4, r0
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e7f0      	b.n	800a3a6 <_vfiprintf_r+0x1da>
 800a3c4:	ab03      	add	r3, sp, #12
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	4b16      	ldr	r3, [pc, #88]	; (800a424 <_vfiprintf_r+0x258>)
 800a3cc:	a904      	add	r1, sp, #16
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f3af 8000 	nop.w
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	1c78      	adds	r0, r7, #1
 800a3d8:	d1d6      	bne.n	800a388 <_vfiprintf_r+0x1bc>
 800a3da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3dc:	07d9      	lsls	r1, r3, #31
 800a3de:	d405      	bmi.n	800a3ec <_vfiprintf_r+0x220>
 800a3e0:	89ab      	ldrh	r3, [r5, #12]
 800a3e2:	059a      	lsls	r2, r3, #22
 800a3e4:	d402      	bmi.n	800a3ec <_vfiprintf_r+0x220>
 800a3e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e8:	f7ff fa5a 	bl	80098a0 <__retarget_lock_release_recursive>
 800a3ec:	89ab      	ldrh	r3, [r5, #12]
 800a3ee:	065b      	lsls	r3, r3, #25
 800a3f0:	f53f af12 	bmi.w	800a218 <_vfiprintf_r+0x4c>
 800a3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3f6:	e711      	b.n	800a21c <_vfiprintf_r+0x50>
 800a3f8:	ab03      	add	r3, sp, #12
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	462a      	mov	r2, r5
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <_vfiprintf_r+0x258>)
 800a400:	a904      	add	r1, sp, #16
 800a402:	4630      	mov	r0, r6
 800a404:	f000 f880 	bl	800a508 <_printf_i>
 800a408:	e7e4      	b.n	800a3d4 <_vfiprintf_r+0x208>
 800a40a:	bf00      	nop
 800a40c:	0800a8f0 	.word	0x0800a8f0
 800a410:	0800a910 	.word	0x0800a910
 800a414:	0800a8d0 	.word	0x0800a8d0
 800a418:	0800a934 	.word	0x0800a934
 800a41c:	0800a93e 	.word	0x0800a93e
 800a420:	00000000 	.word	0x00000000
 800a424:	0800a1a7 	.word	0x0800a1a7
 800a428:	0800a93a 	.word	0x0800a93a

0800a42c <_printf_common>:
 800a42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	4616      	mov	r6, r2
 800a432:	4699      	mov	r9, r3
 800a434:	688a      	ldr	r2, [r1, #8]
 800a436:	690b      	ldr	r3, [r1, #16]
 800a438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a43c:	4293      	cmp	r3, r2
 800a43e:	bfb8      	it	lt
 800a440:	4613      	movlt	r3, r2
 800a442:	6033      	str	r3, [r6, #0]
 800a444:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a448:	4607      	mov	r7, r0
 800a44a:	460c      	mov	r4, r1
 800a44c:	b10a      	cbz	r2, 800a452 <_printf_common+0x26>
 800a44e:	3301      	adds	r3, #1
 800a450:	6033      	str	r3, [r6, #0]
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	0699      	lsls	r1, r3, #26
 800a456:	bf42      	ittt	mi
 800a458:	6833      	ldrmi	r3, [r6, #0]
 800a45a:	3302      	addmi	r3, #2
 800a45c:	6033      	strmi	r3, [r6, #0]
 800a45e:	6825      	ldr	r5, [r4, #0]
 800a460:	f015 0506 	ands.w	r5, r5, #6
 800a464:	d106      	bne.n	800a474 <_printf_common+0x48>
 800a466:	f104 0a19 	add.w	sl, r4, #25
 800a46a:	68e3      	ldr	r3, [r4, #12]
 800a46c:	6832      	ldr	r2, [r6, #0]
 800a46e:	1a9b      	subs	r3, r3, r2
 800a470:	42ab      	cmp	r3, r5
 800a472:	dc26      	bgt.n	800a4c2 <_printf_common+0x96>
 800a474:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a478:	1e13      	subs	r3, r2, #0
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	bf18      	it	ne
 800a47e:	2301      	movne	r3, #1
 800a480:	0692      	lsls	r2, r2, #26
 800a482:	d42b      	bmi.n	800a4dc <_printf_common+0xb0>
 800a484:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a488:	4649      	mov	r1, r9
 800a48a:	4638      	mov	r0, r7
 800a48c:	47c0      	blx	r8
 800a48e:	3001      	adds	r0, #1
 800a490:	d01e      	beq.n	800a4d0 <_printf_common+0xa4>
 800a492:	6823      	ldr	r3, [r4, #0]
 800a494:	68e5      	ldr	r5, [r4, #12]
 800a496:	6832      	ldr	r2, [r6, #0]
 800a498:	f003 0306 	and.w	r3, r3, #6
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	bf08      	it	eq
 800a4a0:	1aad      	subeq	r5, r5, r2
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	6922      	ldr	r2, [r4, #16]
 800a4a6:	bf0c      	ite	eq
 800a4a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4ac:	2500      	movne	r5, #0
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	bfc4      	itt	gt
 800a4b2:	1a9b      	subgt	r3, r3, r2
 800a4b4:	18ed      	addgt	r5, r5, r3
 800a4b6:	2600      	movs	r6, #0
 800a4b8:	341a      	adds	r4, #26
 800a4ba:	42b5      	cmp	r5, r6
 800a4bc:	d11a      	bne.n	800a4f4 <_printf_common+0xc8>
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e008      	b.n	800a4d4 <_printf_common+0xa8>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	47c0      	blx	r8
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d103      	bne.n	800a4d8 <_printf_common+0xac>
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4d8:	3501      	adds	r5, #1
 800a4da:	e7c6      	b.n	800a46a <_printf_common+0x3e>
 800a4dc:	18e1      	adds	r1, r4, r3
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	2030      	movs	r0, #48	; 0x30
 800a4e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4e6:	4422      	add	r2, r4
 800a4e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4f0:	3302      	adds	r3, #2
 800a4f2:	e7c7      	b.n	800a484 <_printf_common+0x58>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	4622      	mov	r2, r4
 800a4f8:	4649      	mov	r1, r9
 800a4fa:	4638      	mov	r0, r7
 800a4fc:	47c0      	blx	r8
 800a4fe:	3001      	adds	r0, #1
 800a500:	d0e6      	beq.n	800a4d0 <_printf_common+0xa4>
 800a502:	3601      	adds	r6, #1
 800a504:	e7d9      	b.n	800a4ba <_printf_common+0x8e>
	...

0800a508 <_printf_i>:
 800a508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a50c:	7e0f      	ldrb	r7, [r1, #24]
 800a50e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a510:	2f78      	cmp	r7, #120	; 0x78
 800a512:	4691      	mov	r9, r2
 800a514:	4680      	mov	r8, r0
 800a516:	460c      	mov	r4, r1
 800a518:	469a      	mov	sl, r3
 800a51a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a51e:	d807      	bhi.n	800a530 <_printf_i+0x28>
 800a520:	2f62      	cmp	r7, #98	; 0x62
 800a522:	d80a      	bhi.n	800a53a <_printf_i+0x32>
 800a524:	2f00      	cmp	r7, #0
 800a526:	f000 80d8 	beq.w	800a6da <_printf_i+0x1d2>
 800a52a:	2f58      	cmp	r7, #88	; 0x58
 800a52c:	f000 80a3 	beq.w	800a676 <_printf_i+0x16e>
 800a530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a534:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a538:	e03a      	b.n	800a5b0 <_printf_i+0xa8>
 800a53a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a53e:	2b15      	cmp	r3, #21
 800a540:	d8f6      	bhi.n	800a530 <_printf_i+0x28>
 800a542:	a101      	add	r1, pc, #4	; (adr r1, 800a548 <_printf_i+0x40>)
 800a544:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a548:	0800a5a1 	.word	0x0800a5a1
 800a54c:	0800a5b5 	.word	0x0800a5b5
 800a550:	0800a531 	.word	0x0800a531
 800a554:	0800a531 	.word	0x0800a531
 800a558:	0800a531 	.word	0x0800a531
 800a55c:	0800a531 	.word	0x0800a531
 800a560:	0800a5b5 	.word	0x0800a5b5
 800a564:	0800a531 	.word	0x0800a531
 800a568:	0800a531 	.word	0x0800a531
 800a56c:	0800a531 	.word	0x0800a531
 800a570:	0800a531 	.word	0x0800a531
 800a574:	0800a6c1 	.word	0x0800a6c1
 800a578:	0800a5e5 	.word	0x0800a5e5
 800a57c:	0800a6a3 	.word	0x0800a6a3
 800a580:	0800a531 	.word	0x0800a531
 800a584:	0800a531 	.word	0x0800a531
 800a588:	0800a6e3 	.word	0x0800a6e3
 800a58c:	0800a531 	.word	0x0800a531
 800a590:	0800a5e5 	.word	0x0800a5e5
 800a594:	0800a531 	.word	0x0800a531
 800a598:	0800a531 	.word	0x0800a531
 800a59c:	0800a6ab 	.word	0x0800a6ab
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	1d1a      	adds	r2, r3, #4
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	602a      	str	r2, [r5, #0]
 800a5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	e0a3      	b.n	800a6fc <_printf_i+0x1f4>
 800a5b4:	6820      	ldr	r0, [r4, #0]
 800a5b6:	6829      	ldr	r1, [r5, #0]
 800a5b8:	0606      	lsls	r6, r0, #24
 800a5ba:	f101 0304 	add.w	r3, r1, #4
 800a5be:	d50a      	bpl.n	800a5d6 <_printf_i+0xce>
 800a5c0:	680e      	ldr	r6, [r1, #0]
 800a5c2:	602b      	str	r3, [r5, #0]
 800a5c4:	2e00      	cmp	r6, #0
 800a5c6:	da03      	bge.n	800a5d0 <_printf_i+0xc8>
 800a5c8:	232d      	movs	r3, #45	; 0x2d
 800a5ca:	4276      	negs	r6, r6
 800a5cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d0:	485e      	ldr	r0, [pc, #376]	; (800a74c <_printf_i+0x244>)
 800a5d2:	230a      	movs	r3, #10
 800a5d4:	e019      	b.n	800a60a <_printf_i+0x102>
 800a5d6:	680e      	ldr	r6, [r1, #0]
 800a5d8:	602b      	str	r3, [r5, #0]
 800a5da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5de:	bf18      	it	ne
 800a5e0:	b236      	sxthne	r6, r6
 800a5e2:	e7ef      	b.n	800a5c4 <_printf_i+0xbc>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	6820      	ldr	r0, [r4, #0]
 800a5e8:	1d19      	adds	r1, r3, #4
 800a5ea:	6029      	str	r1, [r5, #0]
 800a5ec:	0601      	lsls	r1, r0, #24
 800a5ee:	d501      	bpl.n	800a5f4 <_printf_i+0xec>
 800a5f0:	681e      	ldr	r6, [r3, #0]
 800a5f2:	e002      	b.n	800a5fa <_printf_i+0xf2>
 800a5f4:	0646      	lsls	r6, r0, #25
 800a5f6:	d5fb      	bpl.n	800a5f0 <_printf_i+0xe8>
 800a5f8:	881e      	ldrh	r6, [r3, #0]
 800a5fa:	4854      	ldr	r0, [pc, #336]	; (800a74c <_printf_i+0x244>)
 800a5fc:	2f6f      	cmp	r7, #111	; 0x6f
 800a5fe:	bf0c      	ite	eq
 800a600:	2308      	moveq	r3, #8
 800a602:	230a      	movne	r3, #10
 800a604:	2100      	movs	r1, #0
 800a606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a60a:	6865      	ldr	r5, [r4, #4]
 800a60c:	60a5      	str	r5, [r4, #8]
 800a60e:	2d00      	cmp	r5, #0
 800a610:	bfa2      	ittt	ge
 800a612:	6821      	ldrge	r1, [r4, #0]
 800a614:	f021 0104 	bicge.w	r1, r1, #4
 800a618:	6021      	strge	r1, [r4, #0]
 800a61a:	b90e      	cbnz	r6, 800a620 <_printf_i+0x118>
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	d04d      	beq.n	800a6bc <_printf_i+0x1b4>
 800a620:	4615      	mov	r5, r2
 800a622:	fbb6 f1f3 	udiv	r1, r6, r3
 800a626:	fb03 6711 	mls	r7, r3, r1, r6
 800a62a:	5dc7      	ldrb	r7, [r0, r7]
 800a62c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a630:	4637      	mov	r7, r6
 800a632:	42bb      	cmp	r3, r7
 800a634:	460e      	mov	r6, r1
 800a636:	d9f4      	bls.n	800a622 <_printf_i+0x11a>
 800a638:	2b08      	cmp	r3, #8
 800a63a:	d10b      	bne.n	800a654 <_printf_i+0x14c>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	07de      	lsls	r6, r3, #31
 800a640:	d508      	bpl.n	800a654 <_printf_i+0x14c>
 800a642:	6923      	ldr	r3, [r4, #16]
 800a644:	6861      	ldr	r1, [r4, #4]
 800a646:	4299      	cmp	r1, r3
 800a648:	bfde      	ittt	le
 800a64a:	2330      	movle	r3, #48	; 0x30
 800a64c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a650:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a654:	1b52      	subs	r2, r2, r5
 800a656:	6122      	str	r2, [r4, #16]
 800a658:	f8cd a000 	str.w	sl, [sp]
 800a65c:	464b      	mov	r3, r9
 800a65e:	aa03      	add	r2, sp, #12
 800a660:	4621      	mov	r1, r4
 800a662:	4640      	mov	r0, r8
 800a664:	f7ff fee2 	bl	800a42c <_printf_common>
 800a668:	3001      	adds	r0, #1
 800a66a:	d14c      	bne.n	800a706 <_printf_i+0x1fe>
 800a66c:	f04f 30ff 	mov.w	r0, #4294967295
 800a670:	b004      	add	sp, #16
 800a672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a676:	4835      	ldr	r0, [pc, #212]	; (800a74c <_printf_i+0x244>)
 800a678:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a67c:	6829      	ldr	r1, [r5, #0]
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	f851 6b04 	ldr.w	r6, [r1], #4
 800a684:	6029      	str	r1, [r5, #0]
 800a686:	061d      	lsls	r5, r3, #24
 800a688:	d514      	bpl.n	800a6b4 <_printf_i+0x1ac>
 800a68a:	07df      	lsls	r7, r3, #31
 800a68c:	bf44      	itt	mi
 800a68e:	f043 0320 	orrmi.w	r3, r3, #32
 800a692:	6023      	strmi	r3, [r4, #0]
 800a694:	b91e      	cbnz	r6, 800a69e <_printf_i+0x196>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	f023 0320 	bic.w	r3, r3, #32
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	2310      	movs	r3, #16
 800a6a0:	e7b0      	b.n	800a604 <_printf_i+0xfc>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	f043 0320 	orr.w	r3, r3, #32
 800a6a8:	6023      	str	r3, [r4, #0]
 800a6aa:	2378      	movs	r3, #120	; 0x78
 800a6ac:	4828      	ldr	r0, [pc, #160]	; (800a750 <_printf_i+0x248>)
 800a6ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6b2:	e7e3      	b.n	800a67c <_printf_i+0x174>
 800a6b4:	0659      	lsls	r1, r3, #25
 800a6b6:	bf48      	it	mi
 800a6b8:	b2b6      	uxthmi	r6, r6
 800a6ba:	e7e6      	b.n	800a68a <_printf_i+0x182>
 800a6bc:	4615      	mov	r5, r2
 800a6be:	e7bb      	b.n	800a638 <_printf_i+0x130>
 800a6c0:	682b      	ldr	r3, [r5, #0]
 800a6c2:	6826      	ldr	r6, [r4, #0]
 800a6c4:	6961      	ldr	r1, [r4, #20]
 800a6c6:	1d18      	adds	r0, r3, #4
 800a6c8:	6028      	str	r0, [r5, #0]
 800a6ca:	0635      	lsls	r5, r6, #24
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	d501      	bpl.n	800a6d4 <_printf_i+0x1cc>
 800a6d0:	6019      	str	r1, [r3, #0]
 800a6d2:	e002      	b.n	800a6da <_printf_i+0x1d2>
 800a6d4:	0670      	lsls	r0, r6, #25
 800a6d6:	d5fb      	bpl.n	800a6d0 <_printf_i+0x1c8>
 800a6d8:	8019      	strh	r1, [r3, #0]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	4615      	mov	r5, r2
 800a6e0:	e7ba      	b.n	800a658 <_printf_i+0x150>
 800a6e2:	682b      	ldr	r3, [r5, #0]
 800a6e4:	1d1a      	adds	r2, r3, #4
 800a6e6:	602a      	str	r2, [r5, #0]
 800a6e8:	681d      	ldr	r5, [r3, #0]
 800a6ea:	6862      	ldr	r2, [r4, #4]
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f7f5 fd6e 	bl	80001d0 <memchr>
 800a6f4:	b108      	cbz	r0, 800a6fa <_printf_i+0x1f2>
 800a6f6:	1b40      	subs	r0, r0, r5
 800a6f8:	6060      	str	r0, [r4, #4]
 800a6fa:	6863      	ldr	r3, [r4, #4]
 800a6fc:	6123      	str	r3, [r4, #16]
 800a6fe:	2300      	movs	r3, #0
 800a700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a704:	e7a8      	b.n	800a658 <_printf_i+0x150>
 800a706:	6923      	ldr	r3, [r4, #16]
 800a708:	462a      	mov	r2, r5
 800a70a:	4649      	mov	r1, r9
 800a70c:	4640      	mov	r0, r8
 800a70e:	47d0      	blx	sl
 800a710:	3001      	adds	r0, #1
 800a712:	d0ab      	beq.n	800a66c <_printf_i+0x164>
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	079b      	lsls	r3, r3, #30
 800a718:	d413      	bmi.n	800a742 <_printf_i+0x23a>
 800a71a:	68e0      	ldr	r0, [r4, #12]
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	4298      	cmp	r0, r3
 800a720:	bfb8      	it	lt
 800a722:	4618      	movlt	r0, r3
 800a724:	e7a4      	b.n	800a670 <_printf_i+0x168>
 800a726:	2301      	movs	r3, #1
 800a728:	4632      	mov	r2, r6
 800a72a:	4649      	mov	r1, r9
 800a72c:	4640      	mov	r0, r8
 800a72e:	47d0      	blx	sl
 800a730:	3001      	adds	r0, #1
 800a732:	d09b      	beq.n	800a66c <_printf_i+0x164>
 800a734:	3501      	adds	r5, #1
 800a736:	68e3      	ldr	r3, [r4, #12]
 800a738:	9903      	ldr	r1, [sp, #12]
 800a73a:	1a5b      	subs	r3, r3, r1
 800a73c:	42ab      	cmp	r3, r5
 800a73e:	dcf2      	bgt.n	800a726 <_printf_i+0x21e>
 800a740:	e7eb      	b.n	800a71a <_printf_i+0x212>
 800a742:	2500      	movs	r5, #0
 800a744:	f104 0619 	add.w	r6, r4, #25
 800a748:	e7f5      	b.n	800a736 <_printf_i+0x22e>
 800a74a:	bf00      	nop
 800a74c:	0800a945 	.word	0x0800a945
 800a750:	0800a956 	.word	0x0800a956

0800a754 <_read_r>:
 800a754:	b538      	push	{r3, r4, r5, lr}
 800a756:	4d07      	ldr	r5, [pc, #28]	; (800a774 <_read_r+0x20>)
 800a758:	4604      	mov	r4, r0
 800a75a:	4608      	mov	r0, r1
 800a75c:	4611      	mov	r1, r2
 800a75e:	2200      	movs	r2, #0
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	461a      	mov	r2, r3
 800a764:	f7f6 ff3c 	bl	80015e0 <_read>
 800a768:	1c43      	adds	r3, r0, #1
 800a76a:	d102      	bne.n	800a772 <_read_r+0x1e>
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	b103      	cbz	r3, 800a772 <_read_r+0x1e>
 800a770:	6023      	str	r3, [r4, #0]
 800a772:	bd38      	pop	{r3, r4, r5, pc}
 800a774:	200022c0 	.word	0x200022c0

0800a778 <_fstat_r>:
 800a778:	b538      	push	{r3, r4, r5, lr}
 800a77a:	4d07      	ldr	r5, [pc, #28]	; (800a798 <_fstat_r+0x20>)
 800a77c:	2300      	movs	r3, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	4608      	mov	r0, r1
 800a782:	4611      	mov	r1, r2
 800a784:	602b      	str	r3, [r5, #0]
 800a786:	f7f6 ff54 	bl	8001632 <_fstat>
 800a78a:	1c43      	adds	r3, r0, #1
 800a78c:	d102      	bne.n	800a794 <_fstat_r+0x1c>
 800a78e:	682b      	ldr	r3, [r5, #0]
 800a790:	b103      	cbz	r3, 800a794 <_fstat_r+0x1c>
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	bd38      	pop	{r3, r4, r5, pc}
 800a796:	bf00      	nop
 800a798:	200022c0 	.word	0x200022c0

0800a79c <_isatty_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_isatty_r+0x1c>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	602b      	str	r3, [r5, #0]
 800a7a8:	f7f6 ff53 	bl	8001652 <_isatty>
 800a7ac:	1c43      	adds	r3, r0, #1
 800a7ae:	d102      	bne.n	800a7b6 <_isatty_r+0x1a>
 800a7b0:	682b      	ldr	r3, [r5, #0]
 800a7b2:	b103      	cbz	r3, 800a7b6 <_isatty_r+0x1a>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	bd38      	pop	{r3, r4, r5, pc}
 800a7b8:	200022c0 	.word	0x200022c0

0800a7bc <_init>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr

0800a7c8 <_fini>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	bf00      	nop
 800a7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ce:	bc08      	pop	{r3}
 800a7d0:	469e      	mov	lr, r3
 800a7d2:	4770      	bx	lr

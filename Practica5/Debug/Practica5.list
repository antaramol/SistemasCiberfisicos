
Practica5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd8c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800cf1c  0800cf1c  0001cf1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d470  0800d470  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800d470  0800d470  0001d470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d478  0800d478  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d478  0800d478  0001d478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d47c  0800d47c  0001d47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800d480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b4  20000084  0800d504  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002738  0800d504  00022738  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030592  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005910  00000000  00000000  00050646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027d0  00000000  00000000  00055f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002598  00000000  00000000  00058728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000078ff  00000000  00000000  0005acc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd74  00000000  00000000  000625bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112df0  00000000  00000000  0008f333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a2123  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b544  00000000  00000000  001a2174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf04 	.word	0x0800cf04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800cf04 	.word	0x0800cf04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b974 	b.w	8000948 <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468e      	mov	lr, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	d14d      	bne.n	8000722 <__udivmoddi4+0xaa>
 8000686:	428a      	cmp	r2, r1
 8000688:	4694      	mov	ip, r2
 800068a:	d969      	bls.n	8000760 <__udivmoddi4+0xe8>
 800068c:	fab2 f282 	clz	r2, r2
 8000690:	b152      	cbz	r2, 80006a8 <__udivmoddi4+0x30>
 8000692:	fa01 f302 	lsl.w	r3, r1, r2
 8000696:	f1c2 0120 	rsb	r1, r2, #32
 800069a:	fa20 f101 	lsr.w	r1, r0, r1
 800069e:	fa0c fc02 	lsl.w	ip, ip, r2
 80006a2:	ea41 0e03 	orr.w	lr, r1, r3
 80006a6:	4094      	lsls	r4, r2
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	0c21      	lsrs	r1, r4, #16
 80006ae:	fbbe f6f8 	udiv	r6, lr, r8
 80006b2:	fa1f f78c 	uxth.w	r7, ip
 80006b6:	fb08 e316 	mls	r3, r8, r6, lr
 80006ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006be:	fb06 f107 	mul.w	r1, r6, r7
 80006c2:	4299      	cmp	r1, r3
 80006c4:	d90a      	bls.n	80006dc <__udivmoddi4+0x64>
 80006c6:	eb1c 0303 	adds.w	r3, ip, r3
 80006ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ce:	f080 811f 	bcs.w	8000910 <__udivmoddi4+0x298>
 80006d2:	4299      	cmp	r1, r3
 80006d4:	f240 811c 	bls.w	8000910 <__udivmoddi4+0x298>
 80006d8:	3e02      	subs	r6, #2
 80006da:	4463      	add	r3, ip
 80006dc:	1a5b      	subs	r3, r3, r1
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e4:	fb08 3310 	mls	r3, r8, r0, r3
 80006e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006ec:	fb00 f707 	mul.w	r7, r0, r7
 80006f0:	42a7      	cmp	r7, r4
 80006f2:	d90a      	bls.n	800070a <__udivmoddi4+0x92>
 80006f4:	eb1c 0404 	adds.w	r4, ip, r4
 80006f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80006fc:	f080 810a 	bcs.w	8000914 <__udivmoddi4+0x29c>
 8000700:	42a7      	cmp	r7, r4
 8000702:	f240 8107 	bls.w	8000914 <__udivmoddi4+0x29c>
 8000706:	4464      	add	r4, ip
 8000708:	3802      	subs	r0, #2
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	1be4      	subs	r4, r4, r7
 8000710:	2600      	movs	r6, #0
 8000712:	b11d      	cbz	r5, 800071c <__udivmoddi4+0xa4>
 8000714:	40d4      	lsrs	r4, r2
 8000716:	2300      	movs	r3, #0
 8000718:	e9c5 4300 	strd	r4, r3, [r5]
 800071c:	4631      	mov	r1, r6
 800071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000722:	428b      	cmp	r3, r1
 8000724:	d909      	bls.n	800073a <__udivmoddi4+0xc2>
 8000726:	2d00      	cmp	r5, #0
 8000728:	f000 80ef 	beq.w	800090a <__udivmoddi4+0x292>
 800072c:	2600      	movs	r6, #0
 800072e:	e9c5 0100 	strd	r0, r1, [r5]
 8000732:	4630      	mov	r0, r6
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	fab3 f683 	clz	r6, r3
 800073e:	2e00      	cmp	r6, #0
 8000740:	d14a      	bne.n	80007d8 <__udivmoddi4+0x160>
 8000742:	428b      	cmp	r3, r1
 8000744:	d302      	bcc.n	800074c <__udivmoddi4+0xd4>
 8000746:	4282      	cmp	r2, r0
 8000748:	f200 80f9 	bhi.w	800093e <__udivmoddi4+0x2c6>
 800074c:	1a84      	subs	r4, r0, r2
 800074e:	eb61 0303 	sbc.w	r3, r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	469e      	mov	lr, r3
 8000756:	2d00      	cmp	r5, #0
 8000758:	d0e0      	beq.n	800071c <__udivmoddi4+0xa4>
 800075a:	e9c5 4e00 	strd	r4, lr, [r5]
 800075e:	e7dd      	b.n	800071c <__udivmoddi4+0xa4>
 8000760:	b902      	cbnz	r2, 8000764 <__udivmoddi4+0xec>
 8000762:	deff      	udf	#255	; 0xff
 8000764:	fab2 f282 	clz	r2, r2
 8000768:	2a00      	cmp	r2, #0
 800076a:	f040 8092 	bne.w	8000892 <__udivmoddi4+0x21a>
 800076e:	eba1 010c 	sub.w	r1, r1, ip
 8000772:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000776:	fa1f fe8c 	uxth.w	lr, ip
 800077a:	2601      	movs	r6, #1
 800077c:	0c20      	lsrs	r0, r4, #16
 800077e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000782:	fb07 1113 	mls	r1, r7, r3, r1
 8000786:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800078a:	fb0e f003 	mul.w	r0, lr, r3
 800078e:	4288      	cmp	r0, r1
 8000790:	d908      	bls.n	80007a4 <__udivmoddi4+0x12c>
 8000792:	eb1c 0101 	adds.w	r1, ip, r1
 8000796:	f103 38ff 	add.w	r8, r3, #4294967295
 800079a:	d202      	bcs.n	80007a2 <__udivmoddi4+0x12a>
 800079c:	4288      	cmp	r0, r1
 800079e:	f200 80cb 	bhi.w	8000938 <__udivmoddi4+0x2c0>
 80007a2:	4643      	mov	r3, r8
 80007a4:	1a09      	subs	r1, r1, r0
 80007a6:	b2a4      	uxth	r4, r4
 80007a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80007ac:	fb07 1110 	mls	r1, r7, r0, r1
 80007b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007b4:	fb0e fe00 	mul.w	lr, lr, r0
 80007b8:	45a6      	cmp	lr, r4
 80007ba:	d908      	bls.n	80007ce <__udivmoddi4+0x156>
 80007bc:	eb1c 0404 	adds.w	r4, ip, r4
 80007c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80007c4:	d202      	bcs.n	80007cc <__udivmoddi4+0x154>
 80007c6:	45a6      	cmp	lr, r4
 80007c8:	f200 80bb 	bhi.w	8000942 <__udivmoddi4+0x2ca>
 80007cc:	4608      	mov	r0, r1
 80007ce:	eba4 040e 	sub.w	r4, r4, lr
 80007d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007d6:	e79c      	b.n	8000712 <__udivmoddi4+0x9a>
 80007d8:	f1c6 0720 	rsb	r7, r6, #32
 80007dc:	40b3      	lsls	r3, r6
 80007de:	fa22 fc07 	lsr.w	ip, r2, r7
 80007e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80007e6:	fa20 f407 	lsr.w	r4, r0, r7
 80007ea:	fa01 f306 	lsl.w	r3, r1, r6
 80007ee:	431c      	orrs	r4, r3
 80007f0:	40f9      	lsrs	r1, r7
 80007f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007f6:	fa00 f306 	lsl.w	r3, r0, r6
 80007fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80007fe:	0c20      	lsrs	r0, r4, #16
 8000800:	fa1f fe8c 	uxth.w	lr, ip
 8000804:	fb09 1118 	mls	r1, r9, r8, r1
 8000808:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800080c:	fb08 f00e 	mul.w	r0, r8, lr
 8000810:	4288      	cmp	r0, r1
 8000812:	fa02 f206 	lsl.w	r2, r2, r6
 8000816:	d90b      	bls.n	8000830 <__udivmoddi4+0x1b8>
 8000818:	eb1c 0101 	adds.w	r1, ip, r1
 800081c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000820:	f080 8088 	bcs.w	8000934 <__udivmoddi4+0x2bc>
 8000824:	4288      	cmp	r0, r1
 8000826:	f240 8085 	bls.w	8000934 <__udivmoddi4+0x2bc>
 800082a:	f1a8 0802 	sub.w	r8, r8, #2
 800082e:	4461      	add	r1, ip
 8000830:	1a09      	subs	r1, r1, r0
 8000832:	b2a4      	uxth	r4, r4
 8000834:	fbb1 f0f9 	udiv	r0, r1, r9
 8000838:	fb09 1110 	mls	r1, r9, r0, r1
 800083c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000840:	fb00 fe0e 	mul.w	lr, r0, lr
 8000844:	458e      	cmp	lr, r1
 8000846:	d908      	bls.n	800085a <__udivmoddi4+0x1e2>
 8000848:	eb1c 0101 	adds.w	r1, ip, r1
 800084c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000850:	d26c      	bcs.n	800092c <__udivmoddi4+0x2b4>
 8000852:	458e      	cmp	lr, r1
 8000854:	d96a      	bls.n	800092c <__udivmoddi4+0x2b4>
 8000856:	3802      	subs	r0, #2
 8000858:	4461      	add	r1, ip
 800085a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800085e:	fba0 9402 	umull	r9, r4, r0, r2
 8000862:	eba1 010e 	sub.w	r1, r1, lr
 8000866:	42a1      	cmp	r1, r4
 8000868:	46c8      	mov	r8, r9
 800086a:	46a6      	mov	lr, r4
 800086c:	d356      	bcc.n	800091c <__udivmoddi4+0x2a4>
 800086e:	d053      	beq.n	8000918 <__udivmoddi4+0x2a0>
 8000870:	b15d      	cbz	r5, 800088a <__udivmoddi4+0x212>
 8000872:	ebb3 0208 	subs.w	r2, r3, r8
 8000876:	eb61 010e 	sbc.w	r1, r1, lr
 800087a:	fa01 f707 	lsl.w	r7, r1, r7
 800087e:	fa22 f306 	lsr.w	r3, r2, r6
 8000882:	40f1      	lsrs	r1, r6
 8000884:	431f      	orrs	r7, r3
 8000886:	e9c5 7100 	strd	r7, r1, [r5]
 800088a:	2600      	movs	r6, #0
 800088c:	4631      	mov	r1, r6
 800088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000892:	f1c2 0320 	rsb	r3, r2, #32
 8000896:	40d8      	lsrs	r0, r3
 8000898:	fa0c fc02 	lsl.w	ip, ip, r2
 800089c:	fa21 f303 	lsr.w	r3, r1, r3
 80008a0:	4091      	lsls	r1, r2
 80008a2:	4301      	orrs	r1, r0
 80008a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008a8:	fa1f fe8c 	uxth.w	lr, ip
 80008ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80008b0:	fb07 3610 	mls	r6, r7, r0, r3
 80008b4:	0c0b      	lsrs	r3, r1, #16
 80008b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008ba:	fb00 f60e 	mul.w	r6, r0, lr
 80008be:	429e      	cmp	r6, r3
 80008c0:	fa04 f402 	lsl.w	r4, r4, r2
 80008c4:	d908      	bls.n	80008d8 <__udivmoddi4+0x260>
 80008c6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80008ce:	d22f      	bcs.n	8000930 <__udivmoddi4+0x2b8>
 80008d0:	429e      	cmp	r6, r3
 80008d2:	d92d      	bls.n	8000930 <__udivmoddi4+0x2b8>
 80008d4:	3802      	subs	r0, #2
 80008d6:	4463      	add	r3, ip
 80008d8:	1b9b      	subs	r3, r3, r6
 80008da:	b289      	uxth	r1, r1
 80008dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80008e0:	fb07 3316 	mls	r3, r7, r6, r3
 80008e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e8:	fb06 f30e 	mul.w	r3, r6, lr
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d908      	bls.n	8000902 <__udivmoddi4+0x28a>
 80008f0:	eb1c 0101 	adds.w	r1, ip, r1
 80008f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80008f8:	d216      	bcs.n	8000928 <__udivmoddi4+0x2b0>
 80008fa:	428b      	cmp	r3, r1
 80008fc:	d914      	bls.n	8000928 <__udivmoddi4+0x2b0>
 80008fe:	3e02      	subs	r6, #2
 8000900:	4461      	add	r1, ip
 8000902:	1ac9      	subs	r1, r1, r3
 8000904:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000908:	e738      	b.n	800077c <__udivmoddi4+0x104>
 800090a:	462e      	mov	r6, r5
 800090c:	4628      	mov	r0, r5
 800090e:	e705      	b.n	800071c <__udivmoddi4+0xa4>
 8000910:	4606      	mov	r6, r0
 8000912:	e6e3      	b.n	80006dc <__udivmoddi4+0x64>
 8000914:	4618      	mov	r0, r3
 8000916:	e6f8      	b.n	800070a <__udivmoddi4+0x92>
 8000918:	454b      	cmp	r3, r9
 800091a:	d2a9      	bcs.n	8000870 <__udivmoddi4+0x1f8>
 800091c:	ebb9 0802 	subs.w	r8, r9, r2
 8000920:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000924:	3801      	subs	r0, #1
 8000926:	e7a3      	b.n	8000870 <__udivmoddi4+0x1f8>
 8000928:	4646      	mov	r6, r8
 800092a:	e7ea      	b.n	8000902 <__udivmoddi4+0x28a>
 800092c:	4620      	mov	r0, r4
 800092e:	e794      	b.n	800085a <__udivmoddi4+0x1e2>
 8000930:	4640      	mov	r0, r8
 8000932:	e7d1      	b.n	80008d8 <__udivmoddi4+0x260>
 8000934:	46d0      	mov	r8, sl
 8000936:	e77b      	b.n	8000830 <__udivmoddi4+0x1b8>
 8000938:	3b02      	subs	r3, #2
 800093a:	4461      	add	r1, ip
 800093c:	e732      	b.n	80007a4 <__udivmoddi4+0x12c>
 800093e:	4630      	mov	r0, r6
 8000940:	e709      	b.n	8000756 <__udivmoddi4+0xde>
 8000942:	4464      	add	r4, ip
 8000944:	3802      	subs	r0, #2
 8000946:	e742      	b.n	80007ce <__udivmoddi4+0x156>

08000948 <__aeabi_idiv0>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000954:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000958:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	2b00      	cmp	r3, #0
 8000962:	d013      	beq.n	800098c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000964:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000968:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800096c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000970:	2b00      	cmp	r3, #0
 8000972:	d00b      	beq.n	800098c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000974:	e000      	b.n	8000978 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000976:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000978:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f9      	beq.n	8000976 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000982:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800098c:	687b      	ldr	r3, [r7, #4]
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <configureTimerForRunTimeStats>:
void printTask_func(void *argument);
void tarea_UART_func(void *argument);

/* USER CODE BEGIN PFP */
volatile unsigned long ulHighFrequencyTimerTicks;
void configureTimerForRunTimeStats(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	ulHighFrequencyTimerTicks = 0;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <configureTimerForRunTimeStats+0x14>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim7);
 80009a6:	4803      	ldr	r0, [pc, #12]	; (80009b4 <configureTimerForRunTimeStats+0x18>)
 80009a8:	f005 f9f4 	bl	8005d94 <HAL_TIM_Base_Start_IT>
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000888 	.word	0x20000888
 80009b4:	200001f8 	.word	0x200001f8

080009b8 <getRunTimeCounterValue>:
unsigned long getRunTimeCounterValue(void) {
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <getRunTimeCounterValue+0x14>)
 80009be:	681b      	ldr	r3, [r3, #0]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000888 	.word	0x20000888

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f001 fc75 	bl	80022c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d8:	f000 f872 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009dc:	f000 face 	bl	8000f7c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80009e0:	f000 f8d2 	bl	8000b88 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80009e4:	f000 f908 	bl	8000bf8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80009e8:	f000 f944 	bl	8000c74 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80009ec:	f000 f9c4 	bl	8000d78 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80009f0:	f000 fa36 	bl	8000e60 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80009f4:	f000 fa64 	bl	8000ec0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009f8:	f000 fa92 	bl	8000f20 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 80009fc:	f000 f9fa 	bl	8000df4 <MX_TIM7_Init>
  MX_RTC_Init();
 8000a00:	f000 f95e 	bl	8000cc0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a04:	f007 fd5e 	bl	80084c4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of print_queue */
  print_queueHandle = osMessageQueueNew (8, sizeof(uintptr_t), &print_queue_attributes);
 8000a08:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <main+0xa8>)
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f007 ff1f 	bl	8008850 <osMessageQueueNew>
 8000a12:	4603      	mov	r3, r0
 8000a14:	4a19      	ldr	r2, [pc, #100]	; (8000a7c <main+0xac>)
 8000a16:	6013      	str	r3, [r2, #0]

  /* creation of receive_queue */
  receive_queueHandle = osMessageQueueNew (3, sizeof(uint8_t), &receive_queue_attributes);
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <main+0xb0>)
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f007 ff17 	bl	8008850 <osMessageQueueNew>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <main+0xb4>)
 8000a26:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RTC_set */
  RTC_setHandle = osThreadNew(RTC_set_func, NULL, &RTC_set_attributes);
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <main+0xb8>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4817      	ldr	r0, [pc, #92]	; (8000a8c <main+0xbc>)
 8000a2e:	f007 fd93 	bl	8008558 <osThreadNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <main+0xc0>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of tempTask */
  tempTaskHandle = osThreadNew(tempTask_func, NULL, &tempTask_attributes);
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <main+0xc4>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4816      	ldr	r0, [pc, #88]	; (8000a98 <main+0xc8>)
 8000a3e:	f007 fd8b 	bl	8008558 <osThreadNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a15      	ldr	r2, [pc, #84]	; (8000a9c <main+0xcc>)
 8000a46:	6013      	str	r3, [r2, #0]

  /* creation of printTask */
  printTaskHandle = osThreadNew(printTask_func, NULL, &printTask_attributes);
 8000a48:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <main+0xd0>)
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4815      	ldr	r0, [pc, #84]	; (8000aa4 <main+0xd4>)
 8000a4e:	f007 fd83 	bl	8008558 <osThreadNew>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <main+0xd8>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* creation of tarea_UART */
  tarea_UARTHandle = osThreadNew(tarea_UART_func, NULL, &tarea_UART_attributes);
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <main+0xdc>)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4814      	ldr	r0, [pc, #80]	; (8000ab0 <main+0xe0>)
 8000a5e:	f007 fd7b 	bl	8008558 <osThreadNew>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <main+0xe4>)
 8000a66:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1,&rec_data,1);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	4913      	ldr	r1, [pc, #76]	; (8000ab8 <main+0xe8>)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <main+0xec>)
 8000a6e:	f005 fd6b 	bl	8006548 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a72:	f007 fd4b 	bl	800850c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <main+0xa6>
 8000a78:	0800d360 	.word	0x0800d360
 8000a7c:	20000868 	.word	0x20000868
 8000a80:	0800d378 	.word	0x0800d378
 8000a84:	2000086c 	.word	0x2000086c
 8000a88:	0800d2d0 	.word	0x0800d2d0
 8000a8c:	08001359 	.word	0x08001359
 8000a90:	20000858 	.word	0x20000858
 8000a94:	0800d2f4 	.word	0x0800d2f4
 8000a98:	08001671 	.word	0x08001671
 8000a9c:	2000085c 	.word	0x2000085c
 8000aa0:	0800d318 	.word	0x0800d318
 8000aa4:	08001825 	.word	0x08001825
 8000aa8:	20000860 	.word	0x20000860
 8000aac:	0800d33c 	.word	0x0800d33c
 8000ab0:	08001895 	.word	0x08001895
 8000ab4:	20000864 	.word	0x20000864
 8000ab8:	2000088c 	.word	0x2000088c
 8000abc:	20000244 	.word	0x20000244

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	2244      	movs	r2, #68	; 0x44
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00b f885 	bl	800bbde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ae2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ae6:	f003 f921 	bl	8003d2c <HAL_PWREx_ControlVoltageScaling>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000af0:	f000 ff0a 	bl	8001908 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000af4:	f003 f8fc 	bl	8003cf0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xc4>)
 8000afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000afe:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xc4>)
 8000b00:	f023 0318 	bic.w	r3, r3, #24
 8000b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8000b08:	231c      	movs	r3, #28
 8000b0a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b14:	2301      	movs	r3, #1
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000b1c:	2360      	movs	r3, #96	; 0x60
 8000b1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b20:	2302      	movs	r3, #2
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b2c:	2328      	movs	r3, #40	; 0x28
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b30:	2307      	movs	r3, #7
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fa15 	bl	8003f70 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b4c:	f000 fedc 	bl	8001908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2303      	movs	r3, #3
 8000b56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b64:	463b      	mov	r3, r7
 8000b66:	2104      	movs	r1, #4
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fddd 	bl	8004728 <HAL_RCC_ClockConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000b74:	f000 fec8 	bl	8001908 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b78:	f004 fb16 	bl	80051a8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b7c:	bf00      	nop
 8000b7e:	3758      	adds	r7, #88	; 0x58
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40021000 	.word	0x40021000

08000b88 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b8e:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <MX_DFSDM1_Init+0x6c>)
 8000b90:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000ba0:	2202      	movs	r2, #2
 8000ba2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bb6:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000bd0:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000bdc:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_DFSDM1_Init+0x68>)
 8000bde:	f001 fcaf 	bl	8002540 <HAL_DFSDM_ChannelInit>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000be8:	f000 fe8e 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000a0 	.word	0x200000a0
 8000bf4:	40016020 	.word	0x40016020

08000bf8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000bfe:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <MX_I2C2_Init+0x78>)
 8000c00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000c02:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c04:	f640 6214 	movw	r2, #3604	; 0xe14
 8000c08:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c34:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c36:	f002 f8e8 	bl	8002e0a <HAL_I2C_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c40:	f000 fe62 	bl	8001908 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	4809      	ldr	r0, [pc, #36]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c48:	f002 fe72 	bl	8003930 <HAL_I2CEx_ConfigAnalogFilter>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c52:	f000 fe59 	bl	8001908 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_I2C2_Init+0x74>)
 8000c5a:	f002 feb4 	bl	80039c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c64:	f000 fe50 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000d8 	.word	0x200000d8
 8000c70:	40005800 	.word	0x40005800

08000c74 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <MX_QUADSPI_Init+0x48>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c80:	2202      	movs	r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c86:	2204      	movs	r2, #4
 8000c88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c8a:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c90:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c92:	2217      	movs	r2, #23
 8000c94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_QUADSPI_Init+0x44>)
 8000ca4:	f003 f8a8 	bl	8003df8 <HAL_QSPI_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000cae:	f000 fe2b 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000012c 	.word	0x2000012c
 8000cbc:	a0001000 	.word	0xa0001000

08000cc0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000cd8:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <MX_RTC_Init+0xb4>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000cde:	4b24      	ldr	r3, [pc, #144]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000ce6:	227f      	movs	r2, #127	; 0x7f
 8000ce8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000cec:	22ff      	movs	r2, #255	; 0xff
 8000cee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d08:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000d0a:	f004 fc2f 	bl	800556c <HAL_RTC_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 fdf8 	bl	8001908 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8000d18:	230d      	movs	r3, #13
 8000d1a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4619      	mov	r1, r3
 8000d32:	480f      	ldr	r0, [pc, #60]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000d34:	f004 fc95 	bl	8005662 <HAL_RTC_SetTime>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000d3e:	f000 fde3 	bl	8001908 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000d42:	2301      	movs	r3, #1
 8000d44:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000d46:	2301      	movs	r3, #1
 8000d48:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_RTC_Init+0xb0>)
 8000d5a:	f004 fd7b 	bl	8005854 <HAL_RTC_SetDate>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000d64:	f000 fdd0 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000d68:	bf00      	nop
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000170 	.word	0x20000170
 8000d74:	40002800 	.word	0x40002800

08000d78 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <MX_SPI3_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <MX_SPI3_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <MX_SPI3_Init+0x74>)
 8000d84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d88:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <MX_SPI3_Init+0x74>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d90:	4b16      	ldr	r3, [pc, #88]	; (8000dec <MX_SPI3_Init+0x74>)
 8000d92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d96:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d98:	4b14      	ldr	r3, [pc, #80]	; (8000dec <MX_SPI3_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <MX_SPI3_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_SPI3_Init+0x74>)
 8000da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000daa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_SPI3_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dd2:	2208      	movs	r2, #8
 8000dd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_SPI3_Init+0x74>)
 8000dd8:	f004 fee2 	bl	8005ba0 <HAL_SPI_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 fd91 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000194 	.word	0x20000194
 8000df0:	40003c00 	.word	0x40003c00

08000df4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_TIM7_Init+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 799;
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e18:	f240 321f 	movw	r2, #799	; 0x31f
 8000e1c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e26:	f004 ff5e 	bl	8005ce6 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000e30:	f000 fd6a 	bl	8001908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_TIM7_Init+0x64>)
 8000e42:	f005 f9f9 	bl	8006238 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000e4c:	f000 fd5c 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	3710      	adds	r7, #16
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	200001f8 	.word	0x200001f8
 8000e5c:	40001400 	.word	0x40001400

08000e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_USART1_UART_Init+0x5c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000ea4:	f005 fa6e 	bl	8006384 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 fd2b 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000244 	.word	0x20000244
 8000ebc:	40013800 	.word	0x40013800

08000ec0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_USART3_UART_Init+0x5c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eca:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f02:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_USART3_UART_Init+0x58>)
 8000f04:	f005 fa3e 	bl	8006384 <HAL_UART_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f000 fcfb 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	200002c8 	.word	0x200002c8
 8000f1c:	40004800 	.word	0x40004800

08000f20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2e:	2206      	movs	r2, #6
 8000f30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3a:	2202      	movs	r2, #2
 8000f3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f64:	f002 fd7b 	bl	8003a5e <HAL_PCD_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f000 fccb 	bl	8001908 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	2000034c 	.word	0x2000034c

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f92:	4bbc      	ldr	r3, [pc, #752]	; (8001284 <MX_GPIO_Init+0x308>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4abb      	ldr	r2, [pc, #748]	; (8001284 <MX_GPIO_Init+0x308>)
 8000f98:	f043 0310 	orr.w	r3, r3, #16
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4bb9      	ldr	r3, [pc, #740]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	613b      	str	r3, [r7, #16]
 8000fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	4bb6      	ldr	r3, [pc, #728]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4ab5      	ldr	r2, [pc, #724]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4bb3      	ldr	r3, [pc, #716]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	4bb0      	ldr	r3, [pc, #704]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	4aaf      	ldr	r2, [pc, #700]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fce:	4bad      	ldr	r3, [pc, #692]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fda:	4baa      	ldr	r3, [pc, #680]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	4aa9      	ldr	r2, [pc, #676]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe6:	4ba7      	ldr	r3, [pc, #668]	; (8001284 <MX_GPIO_Init+0x308>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff2:	4ba4      	ldr	r3, [pc, #656]	; (8001284 <MX_GPIO_Init+0x308>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4aa3      	ldr	r2, [pc, #652]	; (8001284 <MX_GPIO_Init+0x308>)
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4ba1      	ldr	r3, [pc, #644]	; (8001284 <MX_GPIO_Init+0x308>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001010:	489d      	ldr	r0, [pc, #628]	; (8001288 <MX_GPIO_Init+0x30c>)
 8001012:	f001 febf 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f248 1124 	movw	r1, #33060	; 0x8124
 800101c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001020:	f001 feb8 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001024:	2200      	movs	r2, #0
 8001026:	f24f 0114 	movw	r1, #61460	; 0xf014
 800102a:	4898      	ldr	r0, [pc, #608]	; (800128c <MX_GPIO_Init+0x310>)
 800102c:	f001 feb2 	bl	8002d94 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	f241 0181 	movw	r1, #4225	; 0x1081
 8001036:	4896      	ldr	r0, [pc, #600]	; (8001290 <MX_GPIO_Init+0x314>)
 8001038:	f001 feac 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800103c:	2201      	movs	r2, #1
 800103e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001042:	4893      	ldr	r0, [pc, #588]	; (8001290 <MX_GPIO_Init+0x314>)
 8001044:	f001 fea6 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800104e:	4891      	ldr	r0, [pc, #580]	; (8001294 <MX_GPIO_Init+0x318>)
 8001050:	f001 fea0 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2101      	movs	r1, #1
 8001058:	488b      	ldr	r0, [pc, #556]	; (8001288 <MX_GPIO_Init+0x30c>)
 800105a:	f001 fe9b 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800105e:	f240 1315 	movw	r3, #277	; 0x115
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4884      	ldr	r0, [pc, #528]	; (8001288 <MX_GPIO_Init+0x30c>)
 8001078:	f001 fbee 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800107c:	236a      	movs	r3, #106	; 0x6a
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001080:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	487d      	ldr	r0, [pc, #500]	; (8001288 <MX_GPIO_Init+0x30c>)
 8001092:	f001 fbe1 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800109c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4879      	ldr	r0, [pc, #484]	; (8001294 <MX_GPIO_Init+0x318>)
 80010ae:	f001 fbd3 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80010b2:	233f      	movs	r3, #63	; 0x3f
 80010b4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b6:	230b      	movs	r3, #11
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4873      	ldr	r0, [pc, #460]	; (8001294 <MX_GPIO_Init+0x318>)
 80010c6:	f001 fbc7 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80010ca:	2303      	movs	r3, #3
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010da:	2308      	movs	r3, #8
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f001 fbb6 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin LED1_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|LED1_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80010ec:	f248 1324 	movw	r3, #33060	; 0x8124
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001108:	f001 fba6 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800110c:	2308      	movs	r3, #8
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800111c:	2301      	movs	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112a:	f001 fb95 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800112e:	2310      	movs	r3, #16
 8001130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001132:	230b      	movs	r3, #11
 8001134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001144:	f001 fb88 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001148:	23c0      	movs	r3, #192	; 0xc0
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001158:	2305      	movs	r3, #5
 800115a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f001 fb77 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800116e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4843      	ldr	r0, [pc, #268]	; (800128c <MX_GPIO_Init+0x310>)
 8001180:	f001 fb6a 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001184:	2302      	movs	r3, #2
 8001186:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001188:	230b      	movs	r3, #11
 800118a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	4619      	mov	r1, r3
 8001196:	483d      	ldr	r0, [pc, #244]	; (800128c <MX_GPIO_Init+0x310>)
 8001198:	f001 fb5e 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800119c:	f24f 0314 	movw	r3, #61460	; 0xf014
 80011a0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a2:	2301      	movs	r3, #1
 80011a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	4619      	mov	r1, r3
 80011b4:	4835      	ldr	r0, [pc, #212]	; (800128c <MX_GPIO_Init+0x310>)
 80011b6:	f001 fb4f 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80011ba:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80011be:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	4619      	mov	r1, r3
 80011d0:	482f      	ldr	r0, [pc, #188]	; (8001290 <MX_GPIO_Init+0x314>)
 80011d2:	f001 fb41 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80011d6:	f243 0381 	movw	r3, #12417	; 0x3081
 80011da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	4619      	mov	r1, r3
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <MX_GPIO_Init+0x314>)
 80011f0:	f001 fb32 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80011f4:	f44f 7310 	mov.w	r3, #576	; 0x240
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	2301      	movs	r3, #1
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4821      	ldr	r0, [pc, #132]	; (8001294 <MX_GPIO_Init+0x318>)
 800120e:	f001 fb23 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001212:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001218:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	481a      	ldr	r0, [pc, #104]	; (8001294 <MX_GPIO_Init+0x318>)
 800122a:	f001 fb15 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800122e:	2302      	movs	r3, #2
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4811      	ldr	r0, [pc, #68]	; (8001290 <MX_GPIO_Init+0x314>)
 800124a:	f001 fb05 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800124e:	2378      	movs	r3, #120	; 0x78
 8001250:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4809      	ldr	r0, [pc, #36]	; (8001290 <MX_GPIO_Init+0x314>)
 800126a:	f001 faf5 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800126e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001274:	2312      	movs	r3, #18
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127c:	2303      	movs	r3, #3
 800127e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001280:	2304      	movs	r3, #4
 8001282:	e009      	b.n	8001298 <MX_GPIO_Init+0x31c>
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000
 800128c:	48000400 	.word	0x48000400
 8001290:	48000c00 	.word	0x48000c00
 8001294:	48000800 	.word	0x48000800
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <MX_GPIO_Init+0x354>)
 80012a2:	f001 fad9 	bl	8002858 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2105      	movs	r1, #5
 80012aa:	2017      	movs	r0, #23
 80012ac:	f001 f91e 	bl	80024ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012b0:	2017      	movs	r0, #23
 80012b2:	f001 f937 	bl	8002524 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2105      	movs	r1, #5
 80012ba:	2028      	movs	r0, #40	; 0x28
 80012bc:	f001 f916 	bl	80024ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012c0:	2028      	movs	r0, #40	; 0x28
 80012c2:	f001 f92f 	bl	8002524 <HAL_NVIC_EnableIRQ>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	48000400 	.word	0x48000400

080012d4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e009      	b.n	80012fa <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	60ba      	str	r2, [r7, #8]
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fb2c 	bl	800094c <ITM_SendChar>
	for(DataIdx=0; DataIdx<len; DataIdx++)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	429a      	cmp	r2, r3
 8001300:	dbf1      	blt.n	80012e6 <_write+0x12>
	}
	return len;
 8001302:	687b      	ldr	r3, [r7, #4]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	static osStatus_t estado;
	if (huart == &huart1)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <HAL_UART_RxCpltCallback+0x3c>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d110      	bne.n	800133e <HAL_UART_RxCpltCallback+0x32>
	{
		HAL_UART_Receive_IT(&huart1,&rec_data,1);
 800131c:	2201      	movs	r2, #1
 800131e:	490b      	ldr	r1, [pc, #44]	; (800134c <HAL_UART_RxCpltCallback+0x40>)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <HAL_UART_RxCpltCallback+0x3c>)
 8001322:	f005 f911 	bl	8006548 <HAL_UART_Receive_IT>
		printf("Recibido: %d\r\n",rec_data);
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_UART_RxCpltCallback+0x40>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	4619      	mov	r1, r3
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <HAL_UART_RxCpltCallback+0x44>)
 800132e:	f00a fcf3 	bl	800bd18 <iprintf>
		osThreadFlagsSet(tarea_UARTHandle,0x0002U);
 8001332:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_UART_RxCpltCallback+0x48>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2102      	movs	r1, #2
 8001338:	4618      	mov	r0, r3
 800133a:	f007 f99f 	bl	800867c <osThreadFlagsSet>
			printf("Estado: ok\r\n");
		else
			printf("Algo no va bien\r\n");
			*/
	}
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000244 	.word	0x20000244
 800134c:	2000088c 	.word	0x2000088c
 8001350:	0800cfcc 	.word	0x0800cfcc
 8001354:	20000864 	.word	0x20000864

08001358 <RTC_set_func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_RTC_set_func */
void RTC_set_func(void *argument)
{
 8001358:	b5b0      	push	{r4, r5, r7, lr}
 800135a:	b09e      	sub	sp, #120	; 0x78
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t recibido[3];
	//uint32_t flag_rec;
	osStatus_t estado;
	uint32_t return_wait = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	66bb      	str	r3, [r7, #104]	; 0x68

	uint16_t num_usuario;
	uint8_t to_change[6];
	const char* msg_hora_ok = "\r\nHora cambiada correctamente\r\n";
 8001364:	4bae      	ldr	r3, [pc, #696]	; (8001620 <RTC_set_func+0x2c8>)
 8001366:	657b      	str	r3, [r7, #84]	; 0x54
	const char* msg_fecha_ok = "Fecha cambiada correctamente\r\n";
 8001368:	4bae      	ldr	r3, [pc, #696]	; (8001624 <RTC_set_func+0x2cc>)
 800136a:	653b      	str	r3, [r7, #80]	; 0x50
	const char* msg_error = "\r\nERROR: Valor no válido\r\n";
 800136c:	4bae      	ldr	r3, [pc, #696]	; (8001628 <RTC_set_func+0x2d0>)
 800136e:	64fb      	str	r3, [r7, #76]	; 0x4c
	const char* msg_rtc1 = "\r\n\r\n========================\r\n"
 8001370:	4bae      	ldr	r3, [pc, #696]	; (800162c <RTC_set_func+0x2d4>)
 8001372:	64bb      	str	r3, [r7, #72]	; 0x48
	"| Configurar rtc |\r\n"
	"========================\r\n\r\n";
	const char* msg[6] = {
 8001374:	4bae      	ldr	r3, [pc, #696]	; (8001630 <RTC_set_func+0x2d8>)
 8001376:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800137a:	461d      	mov	r5, r3
 800137c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001380:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001384:	e884 0003 	stmia.w	r4, {r0, r1}
	"Hora (0-23): ", "\r\nMinuto (0-59): ","\r\nSegundo (0-59): ","\r\nDía (1-31): ","\r\nMes (1-12): ",
	"\r\nAño (0-99): "};
	uint8_t limit[6][2] = {{0,23},{0,59},{0,59},{1,31},{1,12},{0,99}};
 8001388:	4aaa      	ldr	r2, [pc, #680]	; (8001634 <RTC_set_func+0x2dc>)
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001390:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	//uint8_t *toChange[6] = {&GetTime.Hours, &GetTime.Minutes, &GetTime.Seconds, &GetDate.Date,&GetDate.Month, &GetDate.Year};

	printf("Empieza el bucle\r\n");
 8001394:	48a8      	ldr	r0, [pc, #672]	; (8001638 <RTC_set_func+0x2e0>)
 8001396:	f00a fd45 	bl	800be24 <puts>
	estado = osMessageQueuePut(print_queueHandle, &msg_rtc1, 0, pdMS_TO_TICKS(500));
 800139a:	4ba8      	ldr	r3, [pc, #672]	; (800163c <RTC_set_func+0x2e4>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80013a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013a6:	2200      	movs	r2, #0
 80013a8:	f007 fac6 	bl	8008938 <osMessageQueuePut>
 80013ac:	6678      	str	r0, [r7, #100]	; 0x64
	int i,j = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (i=0;i<6;){
 80013b2:	2300      	movs	r3, #0
 80013b4:	673b      	str	r3, [r7, #112]	; 0x70
 80013b6:	e0d8      	b.n	800156a <RTC_set_func+0x212>
		estado = osMessageQueuePut(print_queueHandle, &msg[i], 0, pdMS_TO_TICKS(500));
 80013b8:	4ba0      	ldr	r3, [pc, #640]	; (800163c <RTC_set_func+0x2e4>)
 80013ba:	6818      	ldr	r0, [r3, #0]
 80013bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	18d1      	adds	r1, r2, r3
 80013c6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013ca:	2200      	movs	r2, #0
 80013cc:	f007 fab4 	bl	8008938 <osMessageQueuePut>
 80013d0:	6678      	str	r0, [r7, #100]	; 0x64
		printf("Esperando a que ser reciba el dato\r\n");
 80013d2:	489b      	ldr	r0, [pc, #620]	; (8001640 <RTC_set_func+0x2e8>)
 80013d4:	f00a fd26 	bl	800be24 <puts>

		for (j=0;j<3;j++){
 80013d8:	2300      	movs	r3, #0
 80013da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80013dc:	e022      	b.n	8001424 <RTC_set_func+0xcc>
			estado = osMessageQueueGet(receive_queueHandle, &recibido[j], NULL, osWaitForever);
 80013de:	4b99      	ldr	r3, [pc, #612]	; (8001644 <RTC_set_func+0x2ec>)
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013e8:	18d1      	adds	r1, r2, r3
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	2200      	movs	r2, #0
 80013f0:	f007 fb02 	bl	80089f8 <osMessageQueueGet>
 80013f4:	6678      	str	r0, [r7, #100]	; 0x64
			printf("De la cola: %c\r\n",recibido[j]);
 80013f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80013fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	4891      	ldr	r0, [pc, #580]	; (8001648 <RTC_set_func+0x2f0>)
 8001404:	f00a fc88 	bl	800bd18 <iprintf>
			if(recibido[j]==13){
 8001408:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800140c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b0d      	cmp	r3, #13
 8001414:	d103      	bne.n	800141e <RTC_set_func+0xc6>
				printf("Ha pulsado intro\r\n");
 8001416:	488d      	ldr	r0, [pc, #564]	; (800164c <RTC_set_func+0x2f4>)
 8001418:	f00a fd04 	bl	800be24 <puts>
				break;
 800141c:	e005      	b.n	800142a <RTC_set_func+0xd2>
		for (j=0;j<3;j++){
 800141e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001420:	3301      	adds	r3, #1
 8001422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001426:	2b02      	cmp	r3, #2
 8001428:	ddd9      	ble.n	80013de <RTC_set_func+0x86>
			}
		}
		printf("%d\r\n",j);
 800142a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800142c:	4888      	ldr	r0, [pc, #544]	; (8001650 <RTC_set_func+0x2f8>)
 800142e:	f00a fc73 	bl	800bd18 <iprintf>
		switch(j){
 8001432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001434:	2b03      	cmp	r3, #3
 8001436:	d84a      	bhi.n	80014ce <RTC_set_func+0x176>
 8001438:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <RTC_set_func+0xe8>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001451 	.word	0x08001451
 8001444:	08001459 	.word	0x08001459
 8001448:	08001467 	.word	0x08001467
 800144c:	0800148b 	.word	0x0800148b
		case 0:
			num_usuario=0;
 8001450:	2300      	movs	r3, #0
 8001452:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 8001456:	e03a      	b.n	80014ce <RTC_set_func+0x176>
		case 1:
			num_usuario = recibido[0]-48;
 8001458:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800145c:	b29b      	uxth	r3, r3
 800145e:	3b30      	subs	r3, #48	; 0x30
 8001460:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001464:	e033      	b.n	80014ce <RTC_set_func+0x176>
		case 2:
			num_usuario = 10*(recibido[0]-48)+recibido[1]-48;
 8001466:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800146a:	3b30      	subs	r3, #48	; 0x30
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	b29a      	uxth	r2, r3
 8001478:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800147c:	b29b      	uxth	r3, r3
 800147e:	4413      	add	r3, r2
 8001480:	b29b      	uxth	r3, r3
 8001482:	3b30      	subs	r3, #48	; 0x30
 8001484:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			//i++;
			break;
 8001488:	e021      	b.n	80014ce <RTC_set_func+0x176>
		case 3:
			num_usuario = 100*(recibido[0]-48)+10*(recibido[1]-48)+recibido[2]-48;
 800148a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800148e:	3b30      	subs	r3, #48	; 0x30
 8001490:	b29b      	uxth	r3, r3
 8001492:	461a      	mov	r2, r3
 8001494:	0092      	lsls	r2, r2, #2
 8001496:	4413      	add	r3, r2
 8001498:	461a      	mov	r2, r3
 800149a:	0091      	lsls	r1, r2, #2
 800149c:	461a      	mov	r2, r3
 800149e:	460b      	mov	r3, r1
 80014a0:	4413      	add	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80014aa:	3b30      	subs	r3, #48	; 0x30
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	4619      	mov	r1, r3
 80014b0:	0089      	lsls	r1, r1, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	4413      	add	r3, r2
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	3b30      	subs	r3, #48	; 0x30
 80014c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			break;
 80014cc:	bf00      	nop
		}
		printf("Numero: %d\r\n",num_usuario);
 80014ce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80014d2:	4619      	mov	r1, r3
 80014d4:	485f      	ldr	r0, [pc, #380]	; (8001654 <RTC_set_func+0x2fc>)
 80014d6:	f00a fc1f 	bl	800bd18 <iprintf>
		printf("Rango: %d-%d\r\n",limit[i][0],limit[i][1]);
 80014da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3378      	adds	r3, #120	; 0x78
 80014e0:	443b      	add	r3, r7
 80014e2:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80014e6:	4619      	mov	r1, r3
 80014e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	3378      	adds	r3, #120	; 0x78
 80014ee:	443b      	add	r3, r7
 80014f0:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 80014f4:	461a      	mov	r2, r3
 80014f6:	4858      	ldr	r0, [pc, #352]	; (8001658 <RTC_set_func+0x300>)
 80014f8:	f00a fc0e 	bl	800bd18 <iprintf>
		if (num_usuario<limit[i][0] || num_usuario>limit[i][1]){
 80014fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	3378      	adds	r3, #120	; 0x78
 8001502:	443b      	add	r3, r7
 8001504:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8001508:	b29b      	uxth	r3, r3
 800150a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800150e:	429a      	cmp	r2, r3
 8001510:	d30a      	bcc.n	8001528 <RTC_set_func+0x1d0>
 8001512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	3378      	adds	r3, #120	; 0x78
 8001518:	443b      	add	r3, r7
 800151a:	f813 3c53 	ldrb.w	r3, [r3, #-83]
 800151e:	b29b      	uxth	r3, r3
 8001520:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001524:	429a      	cmp	r2, r3
 8001526:	d914      	bls.n	8001552 <RTC_set_func+0x1fa>
			estado = osMessageQueuePut(print_queueHandle, &msg_error, 0, pdMS_TO_TICKS(500));
 8001528:	4b44      	ldr	r3, [pc, #272]	; (800163c <RTC_set_func+0x2e4>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001530:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001534:	2200      	movs	r2, #0
 8001536:	f007 f9ff 	bl	8008938 <osMessageQueuePut>
 800153a:	6678      	str	r0, [r7, #100]	; 0x64
			if (estado == osOK)
 800153c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800153e:	2b00      	cmp	r3, #0
 8001540:	d103      	bne.n	800154a <RTC_set_func+0x1f2>
				printf("Enviado valor erroneo\r\n");
 8001542:	4846      	ldr	r0, [pc, #280]	; (800165c <RTC_set_func+0x304>)
 8001544:	f00a fc6e 	bl	800be24 <puts>
 8001548:	e00f      	b.n	800156a <RTC_set_func+0x212>
			else
				printf("Algo no va bien\r\n");
 800154a:	4845      	ldr	r0, [pc, #276]	; (8001660 <RTC_set_func+0x308>)
 800154c:	f00a fc6a 	bl	800be24 <puts>
			if (estado == osOK)
 8001550:	e00b      	b.n	800156a <RTC_set_func+0x212>
		}else{
			to_change[i]=num_usuario;
 8001552:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001556:	b2d9      	uxtb	r1, r3
 8001558:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800155c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800155e:	4413      	add	r3, r2
 8001560:	460a      	mov	r2, r1
 8001562:	701a      	strb	r2, [r3, #0]
			i++;
 8001564:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001566:	3301      	adds	r3, #1
 8001568:	673b      	str	r3, [r7, #112]	; 0x70
	for (i=0;i<6;){
 800156a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800156c:	2b05      	cmp	r3, #5
 800156e:	f77f af23 	ble.w	80013b8 <RTC_set_func+0x60>
		}

	}

	RTC_TimeTypeDef sTime = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]

	sTime.Hours = to_change[0];
 8001586:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800158a:	743b      	strb	r3, [r7, #16]
	sTime.Minutes = to_change[1];
 800158c:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001590:	747b      	strb	r3, [r7, #17]
	sTime.Seconds = to_change[2];
 8001592:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8001596:	74bb      	strb	r3, [r7, #18]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	2200      	movs	r2, #0
 800159e:	4619      	mov	r1, r3
 80015a0:	4830      	ldr	r0, [pc, #192]	; (8001664 <RTC_set_func+0x30c>)
 80015a2:	f004 f85e 	bl	8005662 <HAL_RTC_SetTime>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <RTC_set_func+0x258>
	  {
	    Error_Handler();
 80015ac:	f000 f9ac 	bl	8001908 <Error_Handler>
	  }

	osMessageQueuePut(print_queueHandle, &msg_hora_ok, 0, pdMS_TO_TICKS(500));
 80015b0:	4b22      	ldr	r3, [pc, #136]	; (800163c <RTC_set_func+0x2e4>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80015b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015bc:	2200      	movs	r2, #0
 80015be:	f007 f9bb 	bl	8008938 <osMessageQueuePut>

	sDate.Date = to_change[3];
 80015c2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80015c6:	73bb      	strb	r3, [r7, #14]
	sDate.Month = to_change[4];
 80015c8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80015cc:	737b      	strb	r3, [r7, #13]
	sDate.Year = to_change[5];
 80015ce:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80015d2:	73fb      	strb	r3, [r7, #15]
	printf("Anio: %d\r\n",to_change[5]);
 80015d4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80015d8:	4619      	mov	r1, r3
 80015da:	4823      	ldr	r0, [pc, #140]	; (8001668 <RTC_set_func+0x310>)
 80015dc:	f00a fb9c 	bl	800bd18 <iprintf>
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	2200      	movs	r2, #0
 80015e6:	4619      	mov	r1, r3
 80015e8:	481e      	ldr	r0, [pc, #120]	; (8001664 <RTC_set_func+0x30c>)
 80015ea:	f004 f933 	bl	8005854 <HAL_RTC_SetDate>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <RTC_set_func+0x2a0>
	{
		Error_Handler();
 80015f4:	f000 f988 	bl	8001908 <Error_Handler>
	}

	osMessageQueuePut(print_queueHandle, &msg_fecha_ok, 0, pdMS_TO_TICKS(500));
 80015f8:	4b10      	ldr	r3, [pc, #64]	; (800163c <RTC_set_func+0x2e4>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001600:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001604:	2200      	movs	r2, #0
 8001606:	f007 f997 	bl	8008938 <osMessageQueuePut>

	osThreadFlagsSet(tempTaskHandle,0x0001U);
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <RTC_set_func+0x314>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	2101      	movs	r1, #1
 8001610:	4618      	mov	r0, r3
 8001612:	f007 f833 	bl	800867c <osThreadFlagsSet>

  /* Infinite loop */
  for(;;)
  {

	  osDelay(pdMS_TO_TICKS(1000));
 8001616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800161a:	f007 f8fe 	bl	800881a <osDelay>
 800161e:	e7fa      	b.n	8001616 <RTC_set_func+0x2be>
 8001620:	0800cfdc 	.word	0x0800cfdc
 8001624:	0800cffc 	.word	0x0800cffc
 8001628:	0800d01c 	.word	0x0800d01c
 800162c:	0800d038 	.word	0x0800d038
 8001630:	0800d148 	.word	0x0800d148
 8001634:	0800d160 	.word	0x0800d160
 8001638:	0800d088 	.word	0x0800d088
 800163c:	20000868 	.word	0x20000868
 8001640:	0800d09c 	.word	0x0800d09c
 8001644:	2000086c 	.word	0x2000086c
 8001648:	0800d0c0 	.word	0x0800d0c0
 800164c:	0800d0d4 	.word	0x0800d0d4
 8001650:	0800d0e8 	.word	0x0800d0e8
 8001654:	0800d0f0 	.word	0x0800d0f0
 8001658:	0800d100 	.word	0x0800d100
 800165c:	0800d110 	.word	0x0800d110
 8001660:	0800d128 	.word	0x0800d128
 8001664:	20000170 	.word	0x20000170
 8001668:	0800d13c 	.word	0x0800d13c
 800166c:	2000085c 	.word	0x2000085c

08001670 <tempTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tempTask_func */
void tempTask_func(void *argument)
{
 8001670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001672:	b0ad      	sub	sp, #180	; 0xb4
 8001674:	af08      	add	r7, sp, #32
 8001676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tempTask_func */
  osStatus_t estado;
  //char mensaje[]  = "Hola mundo\r\n";
  char mensaje[100];
  char *p_mensaje = mensaje;
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	60bb      	str	r3, [r7, #8]

  BSP_TSENSOR_Init();
 800167e:	f006 fdff 	bl	8008280 <BSP_TSENSOR_Init>
  static float temp_value = 0;

  uint8_t horas,minutos,segundos,dia,mes,anio = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  uint32_t return_wait = 0U;
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88


  printf("Temp task esperando\r\n");
 800168e:	4857      	ldr	r0, [pc, #348]	; (80017ec <tempTask_func+0x17c>)
 8001690:	f00a fbc8 	bl	800be24 <puts>
  return_wait = osThreadFlagsWait(0x0001U, osFlagsWaitAny, osWaitForever);
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	2100      	movs	r1, #0
 800169a:	2001      	movs	r0, #1
 800169c:	f007 f83c 	bl	8008718 <osThreadFlagsWait>
 80016a0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  printf("Temp task se inicia\r\n");
 80016a4:	4852      	ldr	r0, [pc, #328]	; (80017f0 <tempTask_func+0x180>)
 80016a6:	f00a fbbd 	bl	800be24 <puts>


  /* Infinite loop */
  for(;;)
  {
	temp_value = BSP_TSENSOR_ReadTemp();
 80016aa:	f006 fe05 	bl	80082b8 <BSP_TSENSOR_ReadTemp>
 80016ae:	eef0 7a40 	vmov.f32	s15, s0
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <tempTask_func+0x184>)
 80016b4:	edc3 7a00 	vstr	s15, [r3]
	int tmpInt1 = temp_value;
 80016b8:	4b4e      	ldr	r3, [pc, #312]	; (80017f4 <tempTask_func+0x184>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c2:	ee17 3a90 	vmov	r3, s15
 80016c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	float tmpFrac = temp_value - tmpInt1;
 80016ca:	4b4a      	ldr	r3, [pc, #296]	; (80017f4 <tempTask_func+0x184>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	int tmpInt2 = trunc(tmpFrac * 100);
 80016e4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80016e8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80017f8 <tempTask_func+0x188>
 80016ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f0:	ee17 0a90 	vmov	r0, s15
 80016f4:	f7fe ff28 	bl	8000548 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f00b fbce 	bl	800cea0 <trunc>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	f7fe ff74 	bl	80005f8 <__aeabi_d2iz>
 8001710:	4603      	mov	r3, r0
 8001712:	67fb      	str	r3, [r7, #124]	; 0x7c
    //printf("Medida de Temperatura: %d.%02d grados\r\n",tmpInt1,tmpInt2);

	printf("Lectura temp realizada\r\n");
 8001714:	4839      	ldr	r0, [pc, #228]	; (80017fc <tempTask_func+0x18c>)
 8001716:	f00a fb85 	bl	800be24 <puts>
	HAL_RTC_GetTime(&hrtc, &GetTime, RTC_FORMAT_BIN);
 800171a:	2200      	movs	r2, #0
 800171c:	4938      	ldr	r1, [pc, #224]	; (8001800 <tempTask_func+0x190>)
 800171e:	4839      	ldr	r0, [pc, #228]	; (8001804 <tempTask_func+0x194>)
 8001720:	f004 f83c 	bl	800579c <HAL_RTC_GetTime>
	horas = GetTime.Hours;
 8001724:	4b36      	ldr	r3, [pc, #216]	; (8001800 <tempTask_func+0x190>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	minutos = GetTime.Minutes;
 800172c:	4b34      	ldr	r3, [pc, #208]	; (8001800 <tempTask_func+0x190>)
 800172e:	785b      	ldrb	r3, [r3, #1]
 8001730:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	segundos = GetTime.Seconds;
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <tempTask_func+0x190>)
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79

	HAL_RTC_GetDate(&hrtc, &GetDate, RTC_FORMAT_BIN);
 800173c:	2200      	movs	r2, #0
 800173e:	4932      	ldr	r1, [pc, #200]	; (8001808 <tempTask_func+0x198>)
 8001740:	4830      	ldr	r0, [pc, #192]	; (8001804 <tempTask_func+0x194>)
 8001742:	f004 f90e 	bl	8005962 <HAL_RTC_GetDate>
	anio = GetDate.Year;
 8001746:	4b30      	ldr	r3, [pc, #192]	; (8001808 <tempTask_func+0x198>)
 8001748:	78db      	ldrb	r3, [r3, #3]
 800174a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	dia = GetDate.Date;
 800174e:	4b2e      	ldr	r3, [pc, #184]	; (8001808 <tempTask_func+0x198>)
 8001750:	789b      	ldrb	r3, [r3, #2]
 8001752:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	mes = GetDate.Month;
 8001756:	4b2c      	ldr	r3, [pc, #176]	; (8001808 <tempTask_func+0x198>)
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77


	printf("Anio: %d\r\n",anio);
 800175e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001762:	4619      	mov	r1, r3
 8001764:	4829      	ldr	r0, [pc, #164]	; (800180c <tempTask_func+0x19c>)
 8001766:	f00a fad7 	bl	800bd18 <iprintf>
	printf("Lectura fecha realizada\r\n");
 800176a:	4829      	ldr	r0, [pc, #164]	; (8001810 <tempTask_func+0x1a0>)
 800176c:	f00a fb5a 	bl	800be24 <puts>
	//printf("fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio,horas,minutos,segundos,tmpInt1,tmpInt2);
	snprintf(mensaje,100,"fecha: %d/%d/%d hora: %d:%d:%d temp: %d.%02d grados\r\n",dia,mes,anio+2000,horas,minutos,segundos,tmpInt1,tmpInt2);
 8001770:	f897 c078 	ldrb.w	ip, [r7, #120]	; 0x78
 8001774:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001778:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800177c:	f502 62fa 	add.w	r2, r2, #2000	; 0x7d0
 8001780:	f897 107b 	ldrb.w	r1, [r7, #123]	; 0x7b
 8001784:	f897 007a 	ldrb.w	r0, [r7, #122]	; 0x7a
 8001788:	f897 4079 	ldrb.w	r4, [r7, #121]	; 0x79
 800178c:	f107 060c 	add.w	r6, r7, #12
 8001790:	6ffd      	ldr	r5, [r7, #124]	; 0x7c
 8001792:	9506      	str	r5, [sp, #24]
 8001794:	f8d7 5084 	ldr.w	r5, [r7, #132]	; 0x84
 8001798:	9505      	str	r5, [sp, #20]
 800179a:	9404      	str	r4, [sp, #16]
 800179c:	9003      	str	r0, [sp, #12]
 800179e:	9102      	str	r1, [sp, #8]
 80017a0:	9201      	str	r2, [sp, #4]
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	4663      	mov	r3, ip
 80017a6:	4a1b      	ldr	r2, [pc, #108]	; (8001814 <tempTask_func+0x1a4>)
 80017a8:	2164      	movs	r1, #100	; 0x64
 80017aa:	4630      	mov	r0, r6
 80017ac:	f00a fbbc 	bl	800bf28 <sniprintf>



	//printf("MENSAJE: %s\r\n",mensaje);
    estado = osMessageQueuePut(print_queueHandle, &p_mensaje, 0, pdMS_TO_TICKS(500));
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <tempTask_func+0x1a8>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	f107 0108 	add.w	r1, r7, #8
 80017b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017bc:	2200      	movs	r2, #0
 80017be:	f007 f8bb 	bl	8008938 <osMessageQueuePut>
 80017c2:	6738      	str	r0, [r7, #112]	; 0x70
    if(estado == osOK){
 80017c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <tempTask_func+0x162>
    	printf("Enviada a la cola\r\n");
 80017ca:	4814      	ldr	r0, [pc, #80]	; (800181c <tempTask_func+0x1ac>)
 80017cc:	f00a fb2a 	bl	800be24 <puts>
 80017d0:	e006      	b.n	80017e0 <tempTask_func+0x170>
    }
    else if(estado == osErrorTimeout){
 80017d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d4:	f113 0f02 	cmn.w	r3, #2
 80017d8:	d102      	bne.n	80017e0 <tempTask_func+0x170>
    	printf("Timeout agotado 1\r\n");
 80017da:	4811      	ldr	r0, [pc, #68]	; (8001820 <tempTask_func+0x1b0>)
 80017dc:	f00a fb22 	bl	800be24 <puts>
    }




	osDelay(pdMS_TO_TICKS(3000));
 80017e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017e4:	f007 f819 	bl	800881a <osDelay>
  {
 80017e8:	e75f      	b.n	80016aa <tempTask_func+0x3a>
 80017ea:	bf00      	nop
 80017ec:	0800d16c 	.word	0x0800d16c
 80017f0:	0800d184 	.word	0x0800d184
 80017f4:	20000890 	.word	0x20000890
 80017f8:	42c80000 	.word	0x42c80000
 80017fc:	0800d19c 	.word	0x0800d19c
 8001800:	20000874 	.word	0x20000874
 8001804:	20000170 	.word	0x20000170
 8001808:	20000870 	.word	0x20000870
 800180c:	0800d13c 	.word	0x0800d13c
 8001810:	0800d1b4 	.word	0x0800d1b4
 8001814:	0800d1d0 	.word	0x0800d1d0
 8001818:	20000868 	.word	0x20000868
 800181c:	0800d208 	.word	0x0800d208
 8001820:	0800d21c 	.word	0x0800d21c

08001824 <printTask_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_printTask_func */
void printTask_func(void *argument)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	uintptr_t mensaje;
	osStatus_t estado;
  /* Infinite loop */
  for(;;)
  {
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <printTask_func+0x5c>)
 800182e:	6818      	ldr	r0, [r3, #0]
 8001830:	f107 0108 	add.w	r1, r7, #8
 8001834:	f04f 33ff 	mov.w	r3, #4294967295
 8001838:	2200      	movs	r2, #0
 800183a:	f007 f8dd 	bl	80089f8 <osMessageQueueGet>
 800183e:	60f8      	str	r0, [r7, #12]
	  printf("Se ha recibido algo en print task\r\n");
 8001840:	4810      	ldr	r0, [pc, #64]	; (8001884 <printTask_func+0x60>)
 8001842:	f00a faef 	bl	800be24 <puts>
	  //printf("Mensaje print task: %s\r\n",mensaje);
	  //printf("Longitud: %d",strlen((char*)mensaje));
	  if (estado == osOK)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10d      	bne.n	8001868 <printTask_func+0x44>
	  {
		  //printf("%s",(char*)mensaje);
		  HAL_UART_Transmit(&huart1, (uint8_t*)mensaje, strlen(mensaje),10);
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	461c      	mov	r4, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fcbc 	bl	80001d0 <strlen>
 8001858:	4603      	mov	r3, r0
 800185a:	b29a      	uxth	r2, r3
 800185c:	230a      	movs	r3, #10
 800185e:	4621      	mov	r1, r4
 8001860:	4809      	ldr	r0, [pc, #36]	; (8001888 <printTask_func+0x64>)
 8001862:	f004 fddd 	bl	8006420 <HAL_UART_Transmit>
 8001866:	e7e1      	b.n	800182c <printTask_func+0x8>
	  }
	  else if (estado == osErrorTimeout)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f113 0f02 	cmn.w	r3, #2
 800186e:	d103      	bne.n	8001878 <printTask_func+0x54>
	  {
		  printf("Timeout printTask\r\n");
 8001870:	4806      	ldr	r0, [pc, #24]	; (800188c <printTask_func+0x68>)
 8001872:	f00a fad7 	bl	800be24 <puts>
 8001876:	e7d9      	b.n	800182c <printTask_func+0x8>
	  }
	  else
	  {
		  printf("Error en la tarea print\r\n");
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <printTask_func+0x6c>)
 800187a:	f00a fad3 	bl	800be24 <puts>
	  estado = osMessageQueueGet(print_queueHandle, &mensaje, NULL, osWaitForever);
 800187e:	e7d5      	b.n	800182c <printTask_func+0x8>
 8001880:	20000868 	.word	0x20000868
 8001884:	0800d230 	.word	0x0800d230
 8001888:	20000244 	.word	0x20000244
 800188c:	0800d254 	.word	0x0800d254
 8001890:	0800d268 	.word	0x0800d268

08001894 <tarea_UART_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_tarea_UART_func */
void tarea_UART_func(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tarea_UART_func */
	osStatus_t estado;
	uint32_t return_wait = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80018a0:	f04f 32ff 	mov.w	r2, #4294967295
 80018a4:	2100      	movs	r1, #0
 80018a6:	2002      	movs	r0, #2
 80018a8:	f006 ff36 	bl	8008718 <osThreadFlagsWait>
 80018ac:	60f8      	str	r0, [r7, #12]
	  estado = osMessageQueuePut(receive_queueHandle, &rec_data,0,pdMS_TO_TICKS(200));
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <tarea_UART_func+0x40>)
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	23c8      	movs	r3, #200	; 0xc8
 80018b4:	2200      	movs	r2, #0
 80018b6:	4908      	ldr	r1, [pc, #32]	; (80018d8 <tarea_UART_func+0x44>)
 80018b8:	f007 f83e 	bl	8008938 <osMessageQueuePut>
 80018bc:	60b8      	str	r0, [r7, #8]
	  if (estado == osOK)
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d103      	bne.n	80018cc <tarea_UART_func+0x38>
		  printf("Estado: ok\r\n");
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <tarea_UART_func+0x48>)
 80018c6:	f00a faad 	bl	800be24 <puts>
 80018ca:	e7e9      	b.n	80018a0 <tarea_UART_func+0xc>
	  else
		  printf("Algo no va bien\r\n");
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <tarea_UART_func+0x4c>)
 80018ce:	f00a faa9 	bl	800be24 <puts>
	  return_wait = osThreadFlagsWait(0x0002U, osFlagsWaitAny, osWaitForever);
 80018d2:	e7e5      	b.n	80018a0 <tarea_UART_func+0xc>
 80018d4:	2000086c 	.word	0x2000086c
 80018d8:	2000088c 	.word	0x2000088c
 80018dc:	0800d284 	.word	0x0800d284
 80018e0:	0800d128 	.word	0x0800d128

080018e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018f6:	f000 fcfd 	bl	80022f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40001000 	.word	0x40001000

08001908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800190c:	b672      	cpsid	i
}
 800190e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001910:	e7fe      	b.n	8001910 <Error_Handler+0x8>
	...

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_MspInit+0x4c>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6613      	str	r3, [r2, #96]	; 0x60
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_MspInit+0x4c>)
 8001928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <HAL_MspInit+0x4c>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a0a      	ldr	r2, [pc, #40]	; (8001960 <HAL_MspInit+0x4c>)
 8001938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	210f      	movs	r1, #15
 800194e:	f06f 0001 	mvn.w	r0, #1
 8001952:	f000 fdcb 	bl	80024ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ac      	sub	sp, #176	; 0xb0
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2288      	movs	r2, #136	; 0x88
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f00a f92a 	bl	800bbde <memset>
  if(DFSDM1_Init == 0)
 800198a:	4b25      	ldr	r3, [pc, #148]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d142      	bne.n	8001a18 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001992:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f916 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80019ae:	f7ff ffab 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019bc:	6613      	str	r3, [r2, #96]	; 0x60
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a15      	ldr	r2, [pc, #84]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b13      	ldr	r3, [pc, #76]	; (8001a24 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80019e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80019e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80019fc:	2306      	movs	r3, #6
 80019fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4807      	ldr	r0, [pc, #28]	; (8001a28 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001a0a:	f000 ff25 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	3301      	adds	r3, #1
 8001a14:	4a02      	ldr	r2, [pc, #8]	; (8001a20 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001a16:	6013      	str	r3, [r2, #0]
  }

}
 8001a18:	bf00      	nop
 8001a1a:	37b0      	adds	r7, #176	; 0xb0
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000894 	.word	0x20000894
 8001a24:	40021000 	.word	0x40021000
 8001a28:	48001000 	.word	0x48001000

08001a2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0ac      	sub	sp, #176	; 0xb0
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2288      	movs	r2, #136	; 0x88
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00a f8c6 	bl	800bbde <memset>
  if(hi2c->Instance==I2C2)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_I2C_MspInit+0xb0>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d13b      	bne.n	8001ad4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f003 f8b3 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a74:	f7ff ff48 	bl	8001908 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001a7e:	f043 0302 	orr.w	r3, r3, #2
 8001a82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a84:	4b16      	ldr	r3, [pc, #88]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a90:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a98:	2312      	movs	r3, #18
 8001a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aaa:	2304      	movs	r3, #4
 8001aac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	; (8001ae4 <HAL_I2C_MspInit+0xb8>)
 8001ab8:	f000 fece 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	4a07      	ldr	r2, [pc, #28]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_I2C_MspInit+0xb4>)
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ad4:	bf00      	nop
 8001ad6:	37b0      	adds	r7, #176	; 0xb0
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40005800 	.word	0x40005800
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	48000400 	.word	0x48000400

08001ae8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a0b      	ldr	r2, [pc, #44]	; (8001b24 <HAL_I2C_MspDeInit+0x3c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d10f      	bne.n	8001b1a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_I2C_MspDeInit+0x40>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_I2C_MspDeInit+0x40>)
 8001b00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b04:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b0a:	4808      	ldr	r0, [pc, #32]	; (8001b2c <HAL_I2C_MspDeInit+0x44>)
 8001b0c:	f001 f84e 	bl	8002bac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001b10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_I2C_MspDeInit+0x44>)
 8001b16:	f001 f849 	bl	8002bac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40005800 	.word	0x40005800
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	48000400 	.word	0x48000400

08001b30 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a17      	ldr	r2, [pc, #92]	; (8001bac <HAL_QSPI_MspInit+0x7c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d128      	bne.n	8001ba4 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b56:	4a16      	ldr	r2, [pc, #88]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6513      	str	r3, [r2, #80]	; 0x50
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <HAL_QSPI_MspInit+0x80>)
 8001b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001b82:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001b86:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b88:	2302      	movs	r3, #2
 8001b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b90:	2303      	movs	r3, #3
 8001b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001b94:	230a      	movs	r3, #10
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <HAL_QSPI_MspInit+0x84>)
 8001ba0:	f000 fe5a 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ba4:	bf00      	nop
 8001ba6:	3728      	adds	r7, #40	; 0x28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	a0001000 	.word	0xa0001000
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48001000 	.word	0x48001000

08001bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a4      	sub	sp, #144	; 0x90
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	2288      	movs	r2, #136	; 0x88
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f00a f808 	bl	800bbde <memset>
  if(hrtc->Instance==RTC)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <HAL_RTC_MspInit+0x5c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d118      	bne.n	8001c0a <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001bde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fff2 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001bf6:	f7ff fe87 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_RTC_MspInit+0x60>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	4a05      	ldr	r2, [pc, #20]	; (8001c18 <HAL_RTC_MspInit+0x60>)
 8001c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c0a:	bf00      	nop
 8001c0c:	3790      	adds	r7, #144	; 0x90
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40002800 	.word	0x40002800
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	; 0x28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_SPI_MspInit+0x7c>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d128      	bne.n	8001c90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5a:	4a10      	ldr	r2, [pc, #64]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <HAL_SPI_MspInit+0x80>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001c6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c80:	2306      	movs	r3, #6
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <HAL_SPI_MspInit+0x84>)
 8001c8c:	f000 fde4 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3728      	adds	r7, #40	; 0x28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40003c00 	.word	0x40003c00
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	48000800 	.word	0x48000800

08001ca4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a0d      	ldr	r2, [pc, #52]	; (8001ce8 <HAL_TIM_Base_MspInit+0x44>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d113      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	; (8001cec <HAL_TIM_Base_MspInit+0x48>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	4a0c      	ldr	r2, [pc, #48]	; (8001cec <HAL_TIM_Base_MspInit+0x48>)
 8001cbc:	f043 0320 	orr.w	r3, r3, #32
 8001cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <HAL_TIM_Base_MspInit+0x48>)
 8001cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc6:	f003 0320 	and.w	r3, r3, #32
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2105      	movs	r1, #5
 8001cd2:	2037      	movs	r0, #55	; 0x37
 8001cd4:	f000 fc0a 	bl	80024ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001cd8:	2037      	movs	r0, #55	; 0x37
 8001cda:	f000 fc23 	bl	8002524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40001400 	.word	0x40001400
 8001cec:	40021000 	.word	0x40021000

08001cf0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0ae      	sub	sp, #184	; 0xb8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d08:	f107 031c 	add.w	r3, r7, #28
 8001d0c:	2288      	movs	r2, #136	; 0x88
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f009 ff64 	bl	800bbde <memset>
  if(huart->Instance==USART1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	; (8001e34 <HAL_UART_MspInit+0x144>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d143      	bne.n	8001da8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d20:	2301      	movs	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d24:	2300      	movs	r3, #0
 8001d26:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d28:	f107 031c 	add.w	r3, r7, #28
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f002 ff51 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d38:	f7ff fde6 	bl	8001908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d3c:	4b3e      	ldr	r3, [pc, #248]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	4a3d      	ldr	r2, [pc, #244]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d46:	6613      	str	r3, [r2, #96]	; 0x60
 8001d48:	4b3b      	ldr	r3, [pc, #236]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d58:	4a37      	ldr	r2, [pc, #220]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d6c:	23c0      	movs	r3, #192	; 0xc0
 8001d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d84:	2307      	movs	r3, #7
 8001d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	482a      	ldr	r0, [pc, #168]	; (8001e3c <HAL_UART_MspInit+0x14c>)
 8001d92:	f000 fd61 	bl	8002858 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2105      	movs	r1, #5
 8001d9a:	2025      	movs	r0, #37	; 0x25
 8001d9c:	f000 fba6 	bl	80024ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001da0:	2025      	movs	r0, #37	; 0x25
 8001da2:	f000 fbbf 	bl	8002524 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001da6:	e040      	b.n	8001e2a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a24      	ldr	r2, [pc, #144]	; (8001e40 <HAL_UART_MspInit+0x150>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13b      	bne.n	8001e2a <HAL_UART_MspInit+0x13a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001db2:	2304      	movs	r3, #4
 8001db4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 ff08 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0xde>
      Error_Handler();
 8001dca:	f7ff fd9d 	bl	8001908 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	4a13      	ldr	r2, [pc, #76]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_UART_MspInit+0x148>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001dfe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e12:	2303      	movs	r3, #3
 8001e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <HAL_UART_MspInit+0x154>)
 8001e26:	f000 fd17 	bl	8002858 <HAL_GPIO_Init>
}
 8001e2a:	bf00      	nop
 8001e2c:	37b8      	adds	r7, #184	; 0xb8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000400 	.word	0x48000400
 8001e40:	40004800 	.word	0x40004800
 8001e44:	48000c00 	.word	0x48000c00

08001e48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0ac      	sub	sp, #176	; 0xb0
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2288      	movs	r2, #136	; 0x88
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f009 feb8 	bl	800bbde <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e76:	d17c      	bne.n	8001f72 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001e7e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001e82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001e8e:	2318      	movs	r3, #24
 8001e90:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001e92:	2307      	movs	r3, #7
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001e96:	2302      	movs	r3, #2
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001e9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ea2:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f002 fe93 	bl	8004bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001eb4:	f7ff fd28 	bl	8001908 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb8:	4b30      	ldr	r3, [pc, #192]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebc:	4a2f      	ldr	r2, [pc, #188]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ee4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eee:	f000 fcb3 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001ef2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ef6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f1c:	f000 fc9c 	bl	8002858 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f20:	4b16      	ldr	r3, [pc, #88]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f2c:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f38:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d114      	bne.n	8001f6e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a0c      	ldr	r2, [pc, #48]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001f5c:	f001 ff3c 	bl	8003dd8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <HAL_PCD_MspInit+0x134>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f6c:	e001      	b.n	8001f72 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001f6e:	f001 ff33 	bl	8003dd8 <HAL_PWREx_EnableVddUSB>
}
 8001f72:	bf00      	nop
 8001f74:	37b0      	adds	r7, #176	; 0xb0
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	; 0x38
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_InitTick+0xe0>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_InitTick+0xe0>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9a:	4b31      	ldr	r3, [pc, #196]	; (8002060 <HAL_InitTick+0xe0>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa6:	f107 0210 	add.w	r2, r7, #16
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 fd7d 	bl	8004ab0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001fb6:	6a3b      	ldr	r3, [r7, #32]
 8001fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d103      	bne.n	8001fc8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001fc0:	f002 fd4a 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8001fc4:	6378      	str	r0, [r7, #52]	; 0x34
 8001fc6:	e004      	b.n	8001fd2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001fc8:	f002 fd46 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd4:	4a23      	ldr	r2, [pc, #140]	; (8002064 <HAL_InitTick+0xe4>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_InitTick+0xe8>)
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_InitTick+0xec>)
 8001fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_InitTick+0xe8>)
 8001fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fee:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_InitTick+0xe8>)
 8001ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <HAL_InitTick+0xe8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_InitTick+0xe8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_InitTick+0xe8>)
 8002002:	2200      	movs	r2, #0
 8002004:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002006:	4818      	ldr	r0, [pc, #96]	; (8002068 <HAL_InitTick+0xe8>)
 8002008:	f003 fe6d 	bl	8005ce6 <HAL_TIM_Base_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002012:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002016:	2b00      	cmp	r3, #0
 8002018:	d11b      	bne.n	8002052 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800201a:	4813      	ldr	r0, [pc, #76]	; (8002068 <HAL_InitTick+0xe8>)
 800201c:	f003 feba 	bl	8005d94 <HAL_TIM_Base_Start_IT>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800202a:	2b00      	cmp	r3, #0
 800202c:	d111      	bne.n	8002052 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800202e:	2036      	movs	r0, #54	; 0x36
 8002030:	f000 fa78 	bl	8002524 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b0f      	cmp	r3, #15
 8002038:	d808      	bhi.n	800204c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800203a:	2200      	movs	r2, #0
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	2036      	movs	r0, #54	; 0x36
 8002040:	f000 fa54 	bl	80024ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002044:	4a0a      	ldr	r2, [pc, #40]	; (8002070 <HAL_InitTick+0xf0>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e002      	b.n	8002052 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002052:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002056:	4618      	mov	r0, r3
 8002058:	3738      	adds	r7, #56	; 0x38
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40021000 	.word	0x40021000
 8002064:	431bde83 	.word	0x431bde83
 8002068:	20000898 	.word	0x20000898
 800206c:	40001000 	.word	0x40001000
 8002070:	20000004 	.word	0x20000004

08002074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <NMI_Handler+0x4>

0800207a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <HardFault_Handler+0x4>

08002080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <MemManage_Handler+0x4>

08002086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800208a:	e7fe      	b.n	800208a <BusFault_Handler+0x4>

0800208c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002090:	e7fe      	b.n	8002090 <UsageFault_Handler+0x4>

08002092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80020a4:	2020      	movs	r0, #32
 80020a6:	f000 fe8d 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80020aa:	2040      	movs	r0, #64	; 0x40
 80020ac:	f000 fe8a 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80020b0:	2080      	movs	r0, #128	; 0x80
 80020b2:	f000 fe87 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80020b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80020ba:	f000 fe83 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
	...

080020c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80020c8:	4802      	ldr	r0, [pc, #8]	; (80020d4 <USART1_IRQHandler+0x10>)
 80020ca:	f004 fa93 	bl	80065f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000244 	.word	0x20000244

080020d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80020dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80020e0:	f000 fe70 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80020e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80020e8:	f000 fe6c 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80020ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020f0:	f000 fe68 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80020f4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80020f8:	f000 fe64 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80020fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002100:	f000 fe60 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	bd80      	pop	{r7, pc}

08002108 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <TIM6_DAC_IRQHandler+0x10>)
 800210e:	f003 feb1 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000898 	.word	0x20000898

0800211c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
  ulHighFrequencyTimerTicks++;
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <TIM7_IRQHandler+0x18>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a03      	ldr	r2, [pc, #12]	; (8002134 <TIM7_IRQHandler+0x18>)
 8002128:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800212a:	4803      	ldr	r0, [pc, #12]	; (8002138 <TIM7_IRQHandler+0x1c>)
 800212c:	f003 fea2 	bl	8005e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000888 	.word	0x20000888
 8002138:	200001f8 	.word	0x200001f8

0800213c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	e00a      	b.n	8002164 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800214e:	f3af 8000 	nop.w
 8002152:	4601      	mov	r1, r0
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	60ba      	str	r2, [r7, #8]
 800215a:	b2ca      	uxtb	r2, r1
 800215c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	3301      	adds	r3, #1
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	dbf0      	blt.n	800214e <_read+0x12>
  }

  return len;
 800216c:	687b      	ldr	r3, [r7, #4]
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219e:	605a      	str	r2, [r3, #4]
  return 0;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <_isatty>:

int _isatty(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b6:	2301      	movs	r3, #1
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
	...

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f009 fbb4 	bl	800b97c <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20018000 	.word	0x20018000
 8002240:	00000400 	.word	0x00000400
 8002244:	200008e4 	.word	0x200008e4
 8002248:	20002738 	.word	0x20002738

0800224c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <SystemInit+0x20>)
 8002252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002256:	4a05      	ldr	r2, [pc, #20]	; (800226c <SystemInit+0x20>)
 8002258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800225c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002260:	bf00      	nop
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002274:	f7ff ffea 	bl	800224c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	; (80022ac <LoopForever+0x6>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	; (80022b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	; (80022b4 <LoopForever+0xe>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	; (80022b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	; (80022bc <LoopForever+0x16>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f009 fc69 	bl	800bb74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022a2:	f7fe fb95 	bl	80009d0 <main>

080022a6 <LoopForever>:

LoopForever:
    b LoopForever
 80022a6:	e7fe      	b.n	80022a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80022b4:	0800d480 	.word	0x0800d480
  ldr r2, =_sbss
 80022b8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80022bc:	20002738 	.word	0x20002738

080022c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC1_2_IRQHandler>

080022c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f902 	bl	80024d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022d2:	200f      	movs	r0, #15
 80022d4:	f7ff fe54 	bl	8001f80 <HAL_InitTick>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	71fb      	strb	r3, [r7, #7]
 80022e2:	e001      	b.n	80022e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022e4:	f7ff fb16 	bl	8001914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f8:	4b06      	ldr	r3, [pc, #24]	; (8002314 <HAL_IncTick+0x20>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	461a      	mov	r2, r3
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_IncTick+0x24>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4413      	add	r3, r2
 8002304:	4a04      	ldr	r2, [pc, #16]	; (8002318 <HAL_IncTick+0x24>)
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	200008e8 	.word	0x200008e8

0800231c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return uwTick;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_GetTick+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	200008e8 	.word	0x200008e8

08002334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800233c:	f7ff ffee 	bl	800231c <HAL_GetTick>
 8002340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d005      	beq.n	800235a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_Delay+0x44>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4413      	add	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235a:	bf00      	nop
 800235c:	f7ff ffde 	bl	800231c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	429a      	cmp	r2, r3
 800236a:	d8f7      	bhi.n	800235c <HAL_Delay+0x28>
  {
  }
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008

0800237c <__NVIC_SetPriorityGrouping>:
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002398:	4013      	ands	r3, r2
 800239a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ae:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <__NVIC_SetPriorityGrouping+0x44>)
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	60d3      	str	r3, [r2, #12]
}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_GetPriorityGrouping>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <__NVIC_GetPriorityGrouping+0x18>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	0a1b      	lsrs	r3, r3, #8
 80023ce:	f003 0307 	and.w	r3, r3, #7
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_EnableIRQ>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	db0b      	blt.n	800240a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	f003 021f 	and.w	r2, r3, #31
 80023f8:	4907      	ldr	r1, [pc, #28]	; (8002418 <__NVIC_EnableIRQ+0x38>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	2001      	movs	r0, #1
 8002402:	fa00 f202 	lsl.w	r2, r0, r2
 8002406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <__NVIC_SetPriority>:
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	6039      	str	r1, [r7, #0]
 8002426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	db0a      	blt.n	8002446 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	490c      	ldr	r1, [pc, #48]	; (8002468 <__NVIC_SetPriority+0x4c>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	440b      	add	r3, r1
 8002440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002444:	e00a      	b.n	800245c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4908      	ldr	r1, [pc, #32]	; (800246c <__NVIC_SetPriority+0x50>)
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	3b04      	subs	r3, #4
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	b2d2      	uxtb	r2, r2
 8002458:	440b      	add	r3, r1
 800245a:	761a      	strb	r2, [r3, #24]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000e100 	.word	0xe000e100
 800246c:	e000ed00 	.word	0xe000ed00

08002470 <NVIC_EncodePriority>:
{
 8002470:	b480      	push	{r7}
 8002472:	b089      	sub	sp, #36	; 0x24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
 800248a:	2b04      	cmp	r3, #4
 800248c:	bf28      	it	cs
 800248e:	2304      	movcs	r3, #4
 8002490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3304      	adds	r3, #4
 8002496:	2b06      	cmp	r3, #6
 8002498:	d902      	bls.n	80024a0 <NVIC_EncodePriority+0x30>
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3b03      	subs	r3, #3
 800249e:	e000      	b.n	80024a2 <NVIC_EncodePriority+0x32>
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a4:	f04f 32ff 	mov.w	r2, #4294967295
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43da      	mvns	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	401a      	ands	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b8:	f04f 31ff 	mov.w	r1, #4294967295
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	fa01 f303 	lsl.w	r3, r1, r3
 80024c2:	43d9      	mvns	r1, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c8:	4313      	orrs	r3, r2
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff4c 	bl	800237c <__NVIC_SetPriorityGrouping>
}
 80024e4:	bf00      	nop
 80024e6:	3708      	adds	r7, #8
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024fe:	f7ff ff61 	bl	80023c4 <__NVIC_GetPriorityGrouping>
 8002502:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	68b9      	ldr	r1, [r7, #8]
 8002508:	6978      	ldr	r0, [r7, #20]
 800250a:	f7ff ffb1 	bl	8002470 <NVIC_EncodePriority>
 800250e:	4602      	mov	r2, r0
 8002510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff80 	bl	800241c <__NVIC_SetPriority>
}
 800251c:	bf00      	nop
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff54 	bl	80023e0 <__NVIC_EnableIRQ>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e0ac      	b.n	80026ac <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f8b2 	bl	80026c0 <DFSDM_GetChannelFromInstance>
 800255c:	4603      	mov	r3, r0
 800255e:	4a55      	ldr	r2, [pc, #340]	; (80026b4 <HAL_DFSDM_ChannelInit+0x174>)
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e09f      	b.n	80026ac <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff f9f9 	bl	8001964 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002572:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <HAL_DFSDM_ChannelInit+0x178>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3301      	adds	r3, #1
 8002578:	4a4f      	ldr	r2, [pc, #316]	; (80026b8 <HAL_DFSDM_ChannelInit+0x178>)
 800257a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800257c:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <HAL_DFSDM_ChannelInit+0x178>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d125      	bne.n	80025d0 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002584:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 800258a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800258e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002590:	4b4a      	ldr	r3, [pc, #296]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4948      	ldr	r1, [pc, #288]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 800259a:	4313      	orrs	r3, r2
 800259c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800259e:	4b47      	ldr	r3, [pc, #284]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a46      	ldr	r2, [pc, #280]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025a4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80025a8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	791b      	ldrb	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80025b2:	4b42      	ldr	r3, [pc, #264]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	041b      	lsls	r3, r3, #16
 80025be:	493f      	ldr	r1, [pc, #252]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80025c4:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <HAL_DFSDM_ChannelInit+0x17c>)
 80025ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025ce:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80025de:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025ee:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80025f4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 020f 	bic.w	r2, r2, #15
 800260c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6819      	ldr	r1, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689a      	ldr	r2, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002634:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6899      	ldr	r1, [r3, #8]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f002 0207 	and.w	r2, r2, #7
 8002660:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800268c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 f810 	bl	80026c0 <DFSDM_GetChannelFromInstance>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4904      	ldr	r1, [pc, #16]	; (80026b4 <HAL_DFSDM_ChannelInit+0x174>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	200008f0 	.word	0x200008f0
 80026b8:	200008ec 	.word	0x200008ec
 80026bc:	40016000 	.word	0x40016000

080026c0 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <DFSDM_GetChannelFromInstance+0x7c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d102      	bne.n	80026d6 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	e02b      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <DFSDM_GetChannelFromInstance+0x80>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d102      	bne.n	80026e4 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80026de:	2301      	movs	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e024      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a17      	ldr	r2, [pc, #92]	; (8002744 <DFSDM_GetChannelFromInstance+0x84>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d102      	bne.n	80026f2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80026ec:	2302      	movs	r3, #2
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e01d      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <DFSDM_GetChannelFromInstance+0x88>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d102      	bne.n	8002700 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80026fa:	2304      	movs	r3, #4
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	e016      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <DFSDM_GetChannelFromInstance+0x8c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002708:	2305      	movs	r3, #5
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e00f      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <DFSDM_GetChannelFromInstance+0x90>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d102      	bne.n	800271c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002716:	2306      	movs	r3, #6
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e008      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <DFSDM_GetChannelFromInstance+0x94>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d102      	bne.n	800272a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002724:	2307      	movs	r3, #7
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e001      	b.n	800272e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800272a:	2303      	movs	r3, #3
 800272c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800272e:	68fb      	ldr	r3, [r7, #12]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	40016000 	.word	0x40016000
 8002740:	40016020 	.word	0x40016020
 8002744:	40016040 	.word	0x40016040
 8002748:	40016080 	.word	0x40016080
 800274c:	400160a0 	.word	0x400160a0
 8002750:	400160c0 	.word	0x400160c0
 8002754:	400160e0 	.word	0x400160e0

08002758 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d008      	beq.n	8002782 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 020e 	bic.w	r2, r2, #14
 8002790:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0201 	bic.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a6:	f003 021c 	and.w	r2, r3, #28
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	2101      	movs	r1, #1
 80027b0:	fa01 f202 	lsl.w	r2, r1, r2
 80027b4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d005      	beq.n	80027f8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2204      	movs	r2, #4
 80027f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	e029      	b.n	800284c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 020e 	bic.w	r2, r2, #14
 8002806:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	f003 021c 	and.w	r2, r3, #28
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002840:	2b00      	cmp	r3, #0
 8002842:	d003      	beq.n	800284c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
    }
  }
  return status;
 800284c:	7bfb      	ldrb	r3, [r7, #15]
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
	...

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002866:	e17f      	b.n	8002b68 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	2101      	movs	r1, #1
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	4013      	ands	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 8171 	beq.w	8002b62 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b01      	cmp	r3, #1
 800288a:	d005      	beq.n	8002898 <HAL_GPIO_Init+0x40>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d130      	bne.n	80028fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	68da      	ldr	r2, [r3, #12]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028ce:	2201      	movs	r2, #1
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	4013      	ands	r3, r2
 80028dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	f003 0201 	and.w	r2, r3, #1
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b03      	cmp	r3, #3
 8002904:	d118      	bne.n	8002938 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800290c:	2201      	movs	r2, #1
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4013      	ands	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f003 0201 	and.w	r2, r3, #1
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	fa02 f303 	lsl.w	r3, r2, r3
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f003 0303 	and.w	r3, r3, #3
 8002940:	2b03      	cmp	r3, #3
 8002942:	d017      	beq.n	8002974 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	2203      	movs	r2, #3
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 0303 	and.w	r3, r3, #3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4013      	ands	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	6939      	ldr	r1, [r7, #16]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80ac 	beq.w	8002b62 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b5f      	ldr	r3, [pc, #380]	; (8002b88 <HAL_GPIO_Init+0x330>)
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	4a5e      	ldr	r2, [pc, #376]	; (8002b88 <HAL_GPIO_Init+0x330>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6613      	str	r3, [r2, #96]	; 0x60
 8002a16:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_GPIO_Init+0x330>)
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a22:	4a5a      	ldr	r2, [pc, #360]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4013      	ands	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x242>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4f      	ldr	r2, [pc, #316]	; (8002b90 <HAL_GPIO_Init+0x338>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x23e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a4e      	ldr	r2, [pc, #312]	; (8002b94 <HAL_GPIO_Init+0x33c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x23a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4d      	ldr	r2, [pc, #308]	; (8002b98 <HAL_GPIO_Init+0x340>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x236>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4c      	ldr	r2, [pc, #304]	; (8002b9c <HAL_GPIO_Init+0x344>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x232>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <HAL_GPIO_Init+0x348>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x22e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <HAL_GPIO_Init+0x34c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x22a>
 8002a7e:	2306      	movs	r3, #6
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a82:	2307      	movs	r3, #7
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x244>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002aac:	4937      	ldr	r1, [pc, #220]	; (8002b8c <HAL_GPIO_Init+0x334>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aba:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ade:	4a32      	ldr	r2, [pc, #200]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b32:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <HAL_GPIO_Init+0x350>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	3301      	adds	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f47f ae78 	bne.w	8002868 <HAL_GPIO_Init+0x10>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	48000400 	.word	0x48000400
 8002b94:	48000800 	.word	0x48000800
 8002b98:	48000c00 	.word	0x48000c00
 8002b9c:	48001000 	.word	0x48001000
 8002ba0:	48001400 	.word	0x48001400
 8002ba4:	48001800 	.word	0x48001800
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002bba:	e0cd      	b.n	8002d58 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	683a      	ldr	r2, [r7, #0]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80c0 	beq.w	8002d52 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002bd2:	4a68      	ldr	r2, [pc, #416]	; (8002d74 <HAL_GPIO_DeInit+0x1c8>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bfa:	d025      	beq.n	8002c48 <HAL_GPIO_DeInit+0x9c>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a5e      	ldr	r2, [pc, #376]	; (8002d78 <HAL_GPIO_DeInit+0x1cc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d01f      	beq.n	8002c44 <HAL_GPIO_DeInit+0x98>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a5d      	ldr	r2, [pc, #372]	; (8002d7c <HAL_GPIO_DeInit+0x1d0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d019      	beq.n	8002c40 <HAL_GPIO_DeInit+0x94>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a5c      	ldr	r2, [pc, #368]	; (8002d80 <HAL_GPIO_DeInit+0x1d4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_GPIO_DeInit+0x90>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a5b      	ldr	r2, [pc, #364]	; (8002d84 <HAL_GPIO_DeInit+0x1d8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_GPIO_DeInit+0x8c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_GPIO_DeInit+0x1dc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <HAL_GPIO_DeInit+0x88>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a59      	ldr	r2, [pc, #356]	; (8002d8c <HAL_GPIO_DeInit+0x1e0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_GPIO_DeInit+0x84>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e00c      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c30:	2307      	movs	r3, #7
 8002c32:	e00a      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c34:	2305      	movs	r3, #5
 8002c36:	e008      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	e006      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e004      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e002      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_GPIO_DeInit+0x9e>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	f002 0203 	and.w	r2, r2, #3
 8002c50:	0092      	lsls	r2, r2, #2
 8002c52:	4093      	lsls	r3, r2
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d132      	bne.n	8002cc0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	494b      	ldr	r1, [pc, #300]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c68:	4b49      	ldr	r3, [pc, #292]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	4947      	ldr	r1, [pc, #284]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002c76:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	4944      	ldr	r1, [pc, #272]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c84:	4b42      	ldr	r3, [pc, #264]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4940      	ldr	r1, [pc, #256]	; (8002d90 <HAL_GPIO_DeInit+0x1e4>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	220f      	movs	r2, #15
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ca2:	4a34      	ldr	r2, [pc, #208]	; (8002d74 <HAL_GPIO_DeInit+0x1c8>)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	089b      	lsrs	r3, r3, #2
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	4830      	ldr	r0, [pc, #192]	; (8002d74 <HAL_GPIO_DeInit+0x1c8>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	400a      	ands	r2, r1
 8002cba:	3302      	adds	r3, #2
 8002cbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	2103      	movs	r1, #3
 8002cca:	fa01 f303 	lsl.w	r3, r1, r3
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	220f      	movs	r2, #15
 8002cea:	fa02 f303 	lsl.w	r3, r2, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	08d2      	lsrs	r2, r2, #3
 8002cf4:	4019      	ands	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2103      	movs	r1, #3
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	2101      	movs	r1, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d42:	2101      	movs	r1, #1
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	3301      	adds	r3, #1
 8002d56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f47f af2b 	bne.w	8002bbc <HAL_GPIO_DeInit+0x10>
  }
}
 8002d66:	bf00      	nop
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	40010000 	.word	0x40010000
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	48000800 	.word	0x48000800
 8002d80:	48000c00 	.word	0x48000c00
 8002d84:	48001000 	.word	0x48001000
 8002d88:	48001400 	.word	0x48001400
 8002d8c:	48001800 	.word	0x48001800
 8002d90:	40010400 	.word	0x40010400

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002db0:	e002      	b.n	8002db8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 f806 	bl	8002df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40010400 	.word	0x40010400

08002df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002dfe:	bf00      	nop
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b082      	sub	sp, #8
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e081      	b.n	8002f20 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7fe fdfb 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2224      	movs	r2, #36	; 0x24
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d107      	bne.n	8002e84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e80:	609a      	str	r2, [r3, #8]
 8002e82:	e006      	b.n	8002e92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d104      	bne.n	8002ea4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691a      	ldr	r2, [r3, #16]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69d9      	ldr	r1, [r3, #28]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1a      	ldr	r2, [r3, #32]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0201 	orr.w	r2, r2, #1
 8002f00:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e021      	b.n	8002f7e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7fe fdc8 	bl	8001ae8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
	...

08002f88 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	4608      	mov	r0, r1
 8002f92:	4611      	mov	r1, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4603      	mov	r3, r0
 8002f98:	817b      	strh	r3, [r7, #10]
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	813b      	strh	r3, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 80f9 	bne.w	80031a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_I2C_Mem_Write+0x34>
 8002fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0ed      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_I2C_Mem_Write+0x4e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0e6      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fde:	f7ff f99d 	bl	800231c <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2319      	movs	r3, #25
 8002fea:	2201      	movs	r2, #1
 8002fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fac3 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0d1      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2221      	movs	r2, #33	; 0x21
 8003004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a3a      	ldr	r2, [r7, #32]
 800301a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003020:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003028:	88f8      	ldrh	r0, [r7, #6]
 800302a:	893a      	ldrh	r2, [r7, #8]
 800302c:	8979      	ldrh	r1, [r7, #10]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	4603      	mov	r3, r0
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 f9d3 	bl	80033e4 <I2C_RequestMemoryWrite>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0a9      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29b      	uxth	r3, r3
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d90e      	bls.n	8003078 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	22ff      	movs	r2, #255	; 0xff
 800305e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003064:	b2da      	uxtb	r2, r3
 8003066:	8979      	ldrh	r1, [r7, #10]
 8003068:	2300      	movs	r3, #0
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fc2b 	bl	80038cc <I2C_TransferConfig>
 8003076:	e00f      	b.n	8003098 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	b2da      	uxtb	r2, r3
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	2300      	movs	r3, #0
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fc1a 	bl	80038cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 faad 	bl	80035fc <I2C_WaitOnTXISFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e07b      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	781a      	ldrb	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	1c5a      	adds	r2, r3, #1
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	3b01      	subs	r3, #1
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d034      	beq.n	8003150 <HAL_I2C_Mem_Write+0x1c8>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d130      	bne.n	8003150 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f4:	2200      	movs	r2, #0
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fa3f 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e04d      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2bff      	cmp	r3, #255	; 0xff
 8003110:	d90e      	bls.n	8003130 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	22ff      	movs	r2, #255	; 0xff
 8003116:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	2300      	movs	r3, #0
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fbcf 	bl	80038cc <I2C_TransferConfig>
 800312e:	e00f      	b.n	8003150 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313e:	b2da      	uxtb	r2, r3
 8003140:	8979      	ldrh	r1, [r7, #10]
 8003142:	2300      	movs	r3, #0
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 fbbe 	bl	80038cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d19e      	bne.n	8003098 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 fa8c 	bl	800367c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e01a      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <HAL_I2C_Mem_Write+0x224>)
 8003182:	400b      	ands	r3, r1
 8003184:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031a2:	2302      	movs	r3, #2
  }
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3718      	adds	r7, #24
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fe00e800 	.word	0xfe00e800

080031b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af02      	add	r7, sp, #8
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	4608      	mov	r0, r1
 80031ba:	4611      	mov	r1, r2
 80031bc:	461a      	mov	r2, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	817b      	strh	r3, [r7, #10]
 80031c2:	460b      	mov	r3, r1
 80031c4:	813b      	strh	r3, [r7, #8]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	f040 80fd 	bne.w	80033d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d8:	6a3b      	ldr	r3, [r7, #32]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_I2C_Mem_Read+0x34>
 80031de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0f1      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_I2C_Mem_Read+0x4e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e0ea      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003206:	f7ff f889 	bl	800231c <HAL_GetTick>
 800320a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	2319      	movs	r3, #25
 8003212:	2201      	movs	r2, #1
 8003214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f9af 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0d5      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2222      	movs	r2, #34	; 0x22
 800322c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2240      	movs	r2, #64	; 0x40
 8003234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6a3a      	ldr	r2, [r7, #32]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003250:	88f8      	ldrh	r0, [r7, #6]
 8003252:	893a      	ldrh	r2, [r7, #8]
 8003254:	8979      	ldrh	r1, [r7, #10]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4603      	mov	r3, r0
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f913 	bl	800348c <I2C_RequestMemoryRead>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0ad      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	2bff      	cmp	r3, #255	; 0xff
 8003280:	d90e      	bls.n	80032a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	22ff      	movs	r2, #255	; 0xff
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	b2da      	uxtb	r2, r3
 800328e:	8979      	ldrh	r1, [r7, #10]
 8003290:	4b52      	ldr	r3, [pc, #328]	; (80033dc <HAL_I2C_Mem_Read+0x22c>)
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 fb17 	bl	80038cc <I2C_TransferConfig>
 800329e:	e00f      	b.n	80032c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	8979      	ldrh	r1, [r7, #10]
 80032b2:	4b4a      	ldr	r3, [pc, #296]	; (80033dc <HAL_I2C_Mem_Read+0x22c>)
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fb06 	bl	80038cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c6:	2200      	movs	r2, #0
 80032c8:	2104      	movs	r1, #4
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f956 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e07c      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d034      	beq.n	8003380 <HAL_I2C_Mem_Read+0x1d0>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2200      	movs	r2, #0
 8003326:	2180      	movs	r1, #128	; 0x80
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f927 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e04d      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2bff      	cmp	r3, #255	; 0xff
 8003340:	d90e      	bls.n	8003360 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	b2da      	uxtb	r2, r3
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	2300      	movs	r3, #0
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fab7 	bl	80038cc <I2C_TransferConfig>
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	2300      	movs	r3, #0
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 faa6 	bl	80038cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d19a      	bne.n	80032c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f974 	bl	800367c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01a      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2220      	movs	r2, #32
 80033a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_I2C_Mem_Read+0x230>)
 80033b2:	400b      	ands	r3, r1
 80033b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	80002400 	.word	0x80002400
 80033e0:	fe00e800 	.word	0xfe00e800

080033e4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	8979      	ldrh	r1, [r7, #10]
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <I2C_RequestMemoryWrite+0xa4>)
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fa5d 	bl	80038cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	69b9      	ldr	r1, [r7, #24]
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 f8f0 	bl	80035fc <I2C_WaitOnTXISFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e02c      	b.n	8003480 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800342c:	893b      	ldrh	r3, [r7, #8]
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	629a      	str	r2, [r3, #40]	; 0x28
 8003436:	e015      	b.n	8003464 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	0a1b      	lsrs	r3, r3, #8
 800343c:	b29b      	uxth	r3, r3
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f8d6 	bl	80035fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e012      	b.n	8003480 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800345a:	893b      	ldrh	r3, [r7, #8]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	2200      	movs	r2, #0
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f884 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	80002000 	.word	0x80002000

0800348c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b086      	sub	sp, #24
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	4608      	mov	r0, r1
 8003496:	4611      	mov	r1, r2
 8003498:	461a      	mov	r2, r3
 800349a:	4603      	mov	r3, r0
 800349c:	817b      	strh	r3, [r7, #10]
 800349e:	460b      	mov	r3, r1
 80034a0:	813b      	strh	r3, [r7, #8]
 80034a2:	4613      	mov	r3, r2
 80034a4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034a6:	88fb      	ldrh	r3, [r7, #6]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	8979      	ldrh	r1, [r7, #10]
 80034ac:	4b20      	ldr	r3, [pc, #128]	; (8003530 <I2C_RequestMemoryRead+0xa4>)
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	2300      	movs	r3, #0
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fa0a 	bl	80038cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b8:	69fa      	ldr	r2, [r7, #28]
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 f89d 	bl	80035fc <I2C_WaitOnTXISFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e02c      	b.n	8003526 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034d2:	893b      	ldrh	r3, [r7, #8]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	629a      	str	r2, [r3, #40]	; 0x28
 80034dc:	e015      	b.n	800350a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	0a1b      	lsrs	r3, r3, #8
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	69b9      	ldr	r1, [r7, #24]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f883 	bl	80035fc <I2C_WaitOnTXISFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e012      	b.n	8003526 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003500:	893b      	ldrh	r3, [r7, #8]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	2200      	movs	r2, #0
 8003512:	2140      	movs	r1, #64	; 0x40
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f831 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	80002000 	.word	0x80002000

08003534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d103      	bne.n	8003552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2200      	movs	r2, #0
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b01      	cmp	r3, #1
 800355e:	d007      	beq.n	8003570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	619a      	str	r2, [r3, #24]
  }
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	e022      	b.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d01e      	beq.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fec1 	bl	800231c <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d113      	bne.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e00f      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699a      	ldr	r2, [r3, #24]
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	4013      	ands	r3, r2
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	461a      	mov	r2, r3
 80035ec:	79fb      	ldrb	r3, [r7, #7]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d0cd      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003608:	e02c      	b.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f870 	bl	80036f4 <I2C_IsErrorOccurred>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e02a      	b.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d01e      	beq.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fe79 	bl	800231c <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d113      	bne.n	8003664 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003640:	f043 0220 	orr.w	r2, r3, #32
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e007      	b.n	8003674 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b02      	cmp	r3, #2
 8003670:	d1cb      	bne.n	800360a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003688:	e028      	b.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f000 f830 	bl	80036f4 <I2C_IsErrorOccurred>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e026      	b.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800369e:	f7fe fe3d 	bl	800231c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d302      	bcc.n	80036b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d113      	bne.n	80036dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e007      	b.n	80036ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d1cf      	bne.n	800368a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b08a      	sub	sp, #40	; 0x28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800370e:	2300      	movs	r3, #0
 8003710:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f003 0310 	and.w	r3, r3, #16
 800371c:	2b00      	cmp	r3, #0
 800371e:	d075      	beq.n	800380c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2210      	movs	r2, #16
 8003726:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003728:	e056      	b.n	80037d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d052      	beq.n	80037d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003732:	f7fe fdf3 	bl	800231c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	d302      	bcc.n	8003748 <I2C_IsErrorOccurred+0x54>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d147      	bne.n	80037d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003752:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800375a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376a:	d12e      	bne.n	80037ca <I2C_IsErrorOccurred+0xd6>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003772:	d02a      	beq.n	80037ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	2b20      	cmp	r3, #32
 8003778:	d027      	beq.n	80037ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003788:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800378a:	f7fe fdc7 	bl	800231c <HAL_GetTick>
 800378e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003790:	e01b      	b.n	80037ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003792:	f7fe fdc3 	bl	800231c <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b19      	cmp	r3, #25
 800379e:	d914      	bls.n	80037ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f003 0320 	and.w	r3, r3, #32
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d1dc      	bne.n	8003792 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b20      	cmp	r3, #32
 80037e4:	d003      	beq.n	80037ee <I2C_IsErrorOccurred+0xfa>
 80037e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d09d      	beq.n	800372a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2220      	movs	r2, #32
 80037fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f043 0304 	orr.w	r3, r3, #4
 8003804:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	f043 0301 	orr.w	r3, r3, #1
 8003824:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800382e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00b      	beq.n	8003858 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	f043 0308 	orr.w	r3, r3, #8
 8003846:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003850:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00b      	beq.n	800387a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003872:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800387a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800387e:	2b00      	cmp	r3, #0
 8003880:	d01c      	beq.n	80038bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f7ff fe56 	bl	8003534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <I2C_IsErrorOccurred+0x1d4>)
 8003894:	400b      	ands	r3, r1
 8003896:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3728      	adds	r7, #40	; 0x28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	fe00e800 	.word	0xfe00e800

080038cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	817b      	strh	r3, [r7, #10]
 80038da:	4613      	mov	r3, r2
 80038dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038de:	897b      	ldrh	r3, [r7, #10]
 80038e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038e4:	7a7b      	ldrb	r3, [r7, #9]
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	0d5b      	lsrs	r3, r3, #21
 8003906:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800390a:	4b08      	ldr	r3, [pc, #32]	; (800392c <I2C_TransferConfig+0x60>)
 800390c:	430b      	orrs	r3, r1
 800390e:	43db      	mvns	r3, r3
 8003910:	ea02 0103 	and.w	r1, r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800391e:	bf00      	nop
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	03ff63ff 	.word	0x03ff63ff

08003930 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b20      	cmp	r3, #32
 8003944:	d138      	bne.n	80039b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003950:	2302      	movs	r3, #2
 8003952:	e032      	b.n	80039ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003982:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6819      	ldr	r1, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e000      	b.n	80039ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039b8:	2302      	movs	r3, #2
  }
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	370c      	adds	r7, #12
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b085      	sub	sp, #20
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
 80039ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d139      	bne.n	8003a50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e033      	b.n	8003a52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2224      	movs	r2, #36	; 0x24
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f042 0201 	orr.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a60:	b08f      	sub	sp, #60	; 0x3c
 8003a62:	af0a      	add	r7, sp, #40	; 0x28
 8003a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e116      	b.n	8003c9e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fe f9dc 	bl	8001e48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2203      	movs	r2, #3
 8003a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f004 f80d 	bl	8007ace <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	687e      	ldr	r6, [r7, #4]
 8003abc:	466d      	mov	r5, sp
 8003abe:	f106 0410 	add.w	r4, r6, #16
 8003ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ad2:	1d33      	adds	r3, r6, #4
 8003ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f003 ffcd 	bl	8007a76 <USB_CoreInit>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0d7      	b.n	8003c9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f003 fffb 	bl	8007af0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	e04a      	b.n	8003b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b00:	7bfa      	ldrb	r2, [r7, #15]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	333d      	adds	r3, #61	; 0x3d
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	333c      	adds	r3, #60	; 0x3c
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	7bfb      	ldrb	r3, [r7, #15]
 8003b2c:	b298      	uxth	r0, r3
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	3344      	adds	r3, #68	; 0x44
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3340      	adds	r3, #64	; 0x40
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b54:	7bfa      	ldrb	r2, [r7, #15]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	3348      	adds	r3, #72	; 0x48
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	334c      	adds	r3, #76	; 0x4c
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	3354      	adds	r3, #84	; 0x54
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	3301      	adds	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d3af      	bcc.n	8003b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e044      	b.n	8003c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4413      	add	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bd2:	7bfa      	ldrb	r2, [r7, #15]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bfe:	7bfa      	ldrb	r2, [r7, #15]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
 8003c30:	7bfa      	ldrb	r2, [r7, #15]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d3b5      	bcc.n	8003ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	603b      	str	r3, [r7, #0]
 8003c40:	687e      	ldr	r6, [r7, #4]
 8003c42:	466d      	mov	r5, sp
 8003c44:	f106 0410 	add.w	r4, r6, #16
 8003c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c58:	1d33      	adds	r3, r6, #4
 8003c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5c:	6838      	ldr	r0, [r7, #0]
 8003c5e:	f003 ff93 	bl	8007b88 <USB_DevInit>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e014      	b.n	8003c9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d102      	bne.n	8003c92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f80a 	bl	8003ca6 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 f93f 	bl	8007f1a <USB_DevDisconnect>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ca6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	f043 0303 	orr.w	r3, r3, #3
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfe:	6013      	str	r3, [r2, #0]
}
 8003d00:	bf00      	nop
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d14:	4b04      	ldr	r3, [pc, #16]	; (8003d28 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	40007000 	.word	0x40007000

08003d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3a:	d130      	bne.n	8003d9e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d3c:	4b23      	ldr	r3, [pc, #140]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d038      	beq.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d4a:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d52:	4a1e      	ldr	r2, [pc, #120]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d54:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d58:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2232      	movs	r2, #50	; 0x32
 8003d60:	fb02 f303 	mul.w	r3, r2, r3
 8003d64:	4a1b      	ldr	r2, [pc, #108]	; (8003dd4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0c9b      	lsrs	r3, r3, #18
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d70:	e002      	b.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d102      	bne.n	8003d8c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1f2      	bne.n	8003d72 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d8c:	4b0f      	ldr	r3, [pc, #60]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	d110      	bne.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e00f      	b.n	8003dbe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d007      	beq.n	8003dbc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dac:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003db4:	4a05      	ldr	r2, [pc, #20]	; (8003dcc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	431bde83 	.word	0x431bde83

08003dd8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	; (8003df4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de6:	6053      	str	r3, [r2, #4]
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40007000 	.word	0x40007000

08003df8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003e00:	f7fe fa8c 	bl	800231c <HAL_GetTick>
 8003e04:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e063      	b.n	8003ed8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd fe83 	bl	8001b30 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003e2a:	f241 3188 	movw	r1, #5000	; 0x1388
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f858 	bl	8003ee4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	2120      	movs	r1, #32
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f850 	bl	8003f00 <QSPI_WaitFlagStateUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003e64:	7afb      	ldrb	r3, [r7, #11]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d131      	bne.n	8003ece <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6852      	ldr	r2, [r2, #4]
 8003e7c:	0611      	lsls	r1, r2, #24
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	4311      	orrs	r1, r2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	430b      	orrs	r3, r1
 8003e8a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_QSPI_Init+0xe8>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6912      	ldr	r2, [r2, #16]
 8003e9a:	0411      	lsls	r1, r2, #16
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6952      	ldr	r2, [r2, #20]
 8003ea0:	4311      	orrs	r1, r2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6992      	ldr	r2, [r2, #24]
 8003ea6:	4311      	orrs	r1, r2
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6812      	ldr	r2, [r2, #0]
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003ed6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	ffe0f8fe 	.word	0xffe0f8fe

08003ee4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f10:	e01a      	b.n	8003f48 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f18:	d016      	beq.n	8003f48 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fe f9ff 	bl	800231c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d302      	bcc.n	8003f30 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2204      	movs	r2, #4
 8003f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e00e      	b.n	8003f66 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf14      	ite	ne
 8003f56:	2301      	movne	r3, #1
 8003f58:	2300      	moveq	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	79fb      	ldrb	r3, [r7, #7]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d1d6      	bne.n	8003f12 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e3ca      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f82:	4b97      	ldr	r3, [pc, #604]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f8c:	4b94      	ldr	r3, [pc, #592]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0303 	and.w	r3, r3, #3
 8003f94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0310 	and.w	r3, r3, #16
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 80e4 	beq.w	800416c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d007      	beq.n	8003fba <HAL_RCC_OscConfig+0x4a>
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	f040 808b 	bne.w	80040c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 8087 	bne.w	80040c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fba:	4b89      	ldr	r3, [pc, #548]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d005      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x62>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d101      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e3a2      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1a      	ldr	r2, [r3, #32]
 8003fd6:	4b82      	ldr	r3, [pc, #520]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d004      	beq.n	8003fec <HAL_RCC_OscConfig+0x7c>
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fea:	e005      	b.n	8003ff8 <HAL_RCC_OscConfig+0x88>
 8003fec:	4b7c      	ldr	r3, [pc, #496]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8003fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d223      	bcs.n	8004044 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fd87 	bl	8004b14 <RCC_SetFlashLatencyFromMSIRange>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e383      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004010:	4b73      	ldr	r3, [pc, #460]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a72      	ldr	r2, [pc, #456]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004016:	f043 0308 	orr.w	r3, r3, #8
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b70      	ldr	r3, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1b      	ldr	r3, [r3, #32]
 8004028:	496d      	ldr	r1, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800402a:	4313      	orrs	r3, r2
 800402c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800402e:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	4968      	ldr	r1, [pc, #416]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800403e:	4313      	orrs	r3, r2
 8004040:	604b      	str	r3, [r1, #4]
 8004042:	e025      	b.n	8004090 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800404a:	f043 0308 	orr.w	r3, r3, #8
 800404e:	6013      	str	r3, [r2, #0]
 8004050:	4b63      	ldr	r3, [pc, #396]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	4960      	ldr	r1, [pc, #384]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004062:	4b5f      	ldr	r3, [pc, #380]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69db      	ldr	r3, [r3, #28]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	495b      	ldr	r1, [pc, #364]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004072:	4313      	orrs	r3, r2
 8004074:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d109      	bne.n	8004090 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd47 	bl	8004b14 <RCC_SetFlashLatencyFromMSIRange>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e343      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004090:	f000 fc4a 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8004094:	4602      	mov	r2, r0
 8004096:	4b52      	ldr	r3, [pc, #328]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	091b      	lsrs	r3, r3, #4
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	4950      	ldr	r1, [pc, #320]	; (80041e4 <HAL_RCC_OscConfig+0x274>)
 80040a2:	5ccb      	ldrb	r3, [r1, r3]
 80040a4:	f003 031f 	and.w	r3, r3, #31
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ac:	4a4e      	ldr	r2, [pc, #312]	; (80041e8 <HAL_RCC_OscConfig+0x278>)
 80040ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040b0:	4b4e      	ldr	r3, [pc, #312]	; (80041ec <HAL_RCC_OscConfig+0x27c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fd ff63 	bl	8001f80 <HAL_InitTick>
 80040ba:	4603      	mov	r3, r0
 80040bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d052      	beq.n	800416a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80040c4:	7bfb      	ldrb	r3, [r7, #15]
 80040c6:	e327      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d032      	beq.n	8004136 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a42      	ldr	r2, [pc, #264]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040dc:	f7fe f91e 	bl	800231c <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e4:	f7fe f91a 	bl	800231c <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e310      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80040f6:	4b3a      	ldr	r3, [pc, #232]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004102:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a36      	ldr	r2, [pc, #216]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004108:	f043 0308 	orr.w	r3, r3, #8
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b34      	ldr	r3, [pc, #208]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4931      	ldr	r1, [pc, #196]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800411c:	4313      	orrs	r3, r2
 800411e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004120:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	492c      	ldr	r1, [pc, #176]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004130:	4313      	orrs	r3, r2
 8004132:	604b      	str	r3, [r1, #4]
 8004134:	e01a      	b.n	800416c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004136:	4b2a      	ldr	r3, [pc, #168]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a29      	ldr	r2, [pc, #164]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800413c:	f023 0301 	bic.w	r3, r3, #1
 8004140:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004142:	f7fe f8eb 	bl	800231c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800414a:	f7fe f8e7 	bl	800231c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e2dd      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1f0      	bne.n	800414a <HAL_RCC_OscConfig+0x1da>
 8004168:	e000      	b.n	800416c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800416a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d074      	beq.n	8004262 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	2b08      	cmp	r3, #8
 800417c:	d005      	beq.n	800418a <HAL_RCC_OscConfig+0x21a>
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b0c      	cmp	r3, #12
 8004182:	d10e      	bne.n	80041a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2b03      	cmp	r3, #3
 8004188:	d10b      	bne.n	80041a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d064      	beq.n	8004260 <HAL_RCC_OscConfig+0x2f0>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d160      	bne.n	8004260 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e2ba      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x24a>
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a0b      	ldr	r2, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e026      	b.n	8004208 <HAL_RCC_OscConfig+0x298>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c2:	d115      	bne.n	80041f0 <HAL_RCC_OscConfig+0x280>
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4b03      	ldr	r3, [pc, #12]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a02      	ldr	r2, [pc, #8]	; (80041e0 <HAL_RCC_OscConfig+0x270>)
 80041d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	e014      	b.n	8004208 <HAL_RCC_OscConfig+0x298>
 80041de:	bf00      	nop
 80041e0:	40021000 	.word	0x40021000
 80041e4:	0800d390 	.word	0x0800d390
 80041e8:	20000000 	.word	0x20000000
 80041ec:	20000004 	.word	0x20000004
 80041f0:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a9f      	ldr	r2, [pc, #636]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b9d      	ldr	r3, [pc, #628]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a9c      	ldr	r2, [pc, #624]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fe f884 	bl	800231c <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004218:	f7fe f880 	bl	800231c <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b64      	cmp	r3, #100	; 0x64
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e276      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800422a:	4b92      	ldr	r3, [pc, #584]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x2a8>
 8004236:	e014      	b.n	8004262 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe f870 	bl	800231c <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fe f86c 	bl	800231c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e262      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004252:	4b88      	ldr	r3, [pc, #544]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x2d0>
 800425e:	e000      	b.n	8004262 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d060      	beq.n	8004330 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	2b04      	cmp	r3, #4
 8004272:	d005      	beq.n	8004280 <HAL_RCC_OscConfig+0x310>
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d119      	bne.n	80042ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b02      	cmp	r3, #2
 800427e:	d116      	bne.n	80042ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004280:	4b7c      	ldr	r3, [pc, #496]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_OscConfig+0x328>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e23f      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004298:	4b76      	ldr	r3, [pc, #472]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	061b      	lsls	r3, r3, #24
 80042a6:	4973      	ldr	r1, [pc, #460]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ac:	e040      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d023      	beq.n	80042fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042b6:	4b6f      	ldr	r3, [pc, #444]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a6e      	ldr	r2, [pc, #440]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c2:	f7fe f82b 	bl	800231c <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ca:	f7fe f827 	bl	800231c <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e21d      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042dc:	4b65      	ldr	r3, [pc, #404]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b62      	ldr	r3, [pc, #392]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	061b      	lsls	r3, r3, #24
 80042f6:	495f      	ldr	r1, [pc, #380]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
 80042fc:	e018      	b.n	8004330 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fe:	4b5d      	ldr	r3, [pc, #372]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe f807 	bl	800231c <HAL_GetTick>
 800430e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004310:	e008      	b.n	8004324 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004312:	f7fe f803 	bl	800231c <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e1f9      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0308 	and.w	r3, r3, #8
 8004338:	2b00      	cmp	r3, #0
 800433a:	d03c      	beq.n	80043b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01c      	beq.n	800437e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434a:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7fd ffe2 	bl	800231c <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800435c:	f7fd ffde 	bl	800231c <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e1d4      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800436e:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ef      	beq.n	800435c <HAL_RCC_OscConfig+0x3ec>
 800437c:	e01b      	b.n	80043b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437e:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004384:	4a3b      	ldr	r2, [pc, #236]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fd ffc5 	bl	800231c <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004396:	f7fd ffc1 	bl	800231c <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e1b7      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a8:	4b32      	ldr	r3, [pc, #200]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ef      	bne.n	8004396 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a6 	beq.w	8004510 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043c8:	4b2a      	ldr	r3, [pc, #168]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10d      	bne.n	80043f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	6593      	str	r3, [r2, #88]	; 0x58
 80043e0:	4b24      	ldr	r3, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 80043e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ec:	2301      	movs	r3, #1
 80043ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043f0:	4b21      	ldr	r3, [pc, #132]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d118      	bne.n	800442e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 8004402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004406:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004408:	f7fd ff88 	bl	800231c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004410:	f7fd ff84 	bl	800231c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e17a      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <HAL_RCC_OscConfig+0x508>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d108      	bne.n	8004448 <HAL_RCC_OscConfig+0x4d8>
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443c:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004446:	e029      	b.n	800449c <HAL_RCC_OscConfig+0x52c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2b05      	cmp	r3, #5
 800444e:	d115      	bne.n	800447c <HAL_RCC_OscConfig+0x50c>
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004456:	4a07      	ldr	r2, [pc, #28]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004458:	f043 0304 	orr.w	r3, r3, #4
 800445c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004460:	4b04      	ldr	r3, [pc, #16]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004466:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_RCC_OscConfig+0x504>)
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004470:	e014      	b.n	800449c <HAL_RCC_OscConfig+0x52c>
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
 800447c:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	4a9b      	ldr	r2, [pc, #620]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800448c:	4b98      	ldr	r3, [pc, #608]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a97      	ldr	r2, [pc, #604]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fd ff3a 	bl	800231c <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fd ff36 	bl	800231c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e12a      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c2:	4b8b      	ldr	r3, [pc, #556]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ed      	beq.n	80044ac <HAL_RCC_OscConfig+0x53c>
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fd ff23 	bl	800231c <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fd ff1f 	bl	800231c <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e113      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f0:	4b7f      	ldr	r3, [pc, #508]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ed      	bne.n	80044da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004504:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	4a79      	ldr	r2, [pc, #484]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800450e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80fe 	beq.w	8004716 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	2b02      	cmp	r3, #2
 8004520:	f040 80d0 	bne.w	80046c4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004524:	4b72      	ldr	r3, [pc, #456]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0203 	and.w	r2, r3, #3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	429a      	cmp	r2, r3
 8004536:	d130      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	3b01      	subs	r3, #1
 8004544:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d127      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004556:	429a      	cmp	r2, r3
 8004558:	d11f      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004564:	2a07      	cmp	r2, #7
 8004566:	bf14      	ite	ne
 8004568:	2201      	movne	r2, #1
 800456a:	2200      	moveq	r2, #0
 800456c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800456e:	4293      	cmp	r3, r2
 8004570:	d113      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	3b01      	subs	r3, #1
 8004580:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d109      	bne.n	800459a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	085b      	lsrs	r3, r3, #1
 8004592:	3b01      	subs	r3, #1
 8004594:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d06e      	beq.n	8004678 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b0c      	cmp	r3, #12
 800459e:	d069      	beq.n	8004674 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80045a0:	4b53      	ldr	r3, [pc, #332]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d105      	bne.n	80045b8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80045ac:	4b50      	ldr	r3, [pc, #320]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0ad      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80045bc:	4b4c      	ldr	r3, [pc, #304]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a4b      	ldr	r2, [pc, #300]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c8:	f7fd fea8 	bl	800231c <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fd fea4 	bl	800231c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e09a      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e2:	4b43      	ldr	r3, [pc, #268]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045ee:	4b40      	ldr	r3, [pc, #256]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	4b40      	ldr	r3, [pc, #256]	; (80046f4 <HAL_RCC_OscConfig+0x784>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80045fe:	3a01      	subs	r2, #1
 8004600:	0112      	lsls	r2, r2, #4
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004608:	0212      	lsls	r2, r2, #8
 800460a:	4311      	orrs	r1, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004610:	0852      	lsrs	r2, r2, #1
 8004612:	3a01      	subs	r2, #1
 8004614:	0552      	lsls	r2, r2, #21
 8004616:	4311      	orrs	r1, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800461c:	0852      	lsrs	r2, r2, #1
 800461e:	3a01      	subs	r2, #1
 8004620:	0652      	lsls	r2, r2, #25
 8004622:	4311      	orrs	r1, r2
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004628:	0912      	lsrs	r2, r2, #4
 800462a:	0452      	lsls	r2, r2, #17
 800462c:	430a      	orrs	r2, r1
 800462e:	4930      	ldr	r1, [pc, #192]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004630:	4313      	orrs	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004634:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a2d      	ldr	r2, [pc, #180]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a2a      	ldr	r2, [pc, #168]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800464c:	f7fd fe66 	bl	800231c <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd fe62 	bl	800231c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e058      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004672:	e050      	b.n	8004716 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e04f      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004678:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d148      	bne.n	8004716 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 800468a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004690:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 8004696:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800469a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800469c:	f7fd fe3e 	bl	800231c <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd fe3a 	bl	800231c <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e030      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x734>
 80046c2:	e028      	b.n	8004716 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b0c      	cmp	r3, #12
 80046c8:	d023      	beq.n	8004712 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <HAL_RCC_OscConfig+0x780>)
 80046d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d6:	f7fd fe21 	bl	800231c <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046dc:	e00c      	b.n	80046f8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046de:	f7fd fe1d 	bl	800231c <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d905      	bls.n	80046f8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80046ec:	2303      	movs	r3, #3
 80046ee:	e013      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
 80046f0:	40021000 	.word	0x40021000
 80046f4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCC_OscConfig+0x7b0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1ec      	bne.n	80046de <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004704:	4b06      	ldr	r3, [pc, #24]	; (8004720 <HAL_RCC_OscConfig+0x7b0>)
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	4905      	ldr	r1, [pc, #20]	; (8004720 <HAL_RCC_OscConfig+0x7b0>)
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_RCC_OscConfig+0x7b4>)
 800470c:	4013      	ands	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e001      	b.n	8004716 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e000      	b.n	8004718 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	40021000 	.word	0x40021000
 8004724:	feeefffc 	.word	0xfeeefffc

08004728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0e7      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800473c:	4b75      	ldr	r3, [pc, #468]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	429a      	cmp	r2, r3
 8004748:	d910      	bls.n	800476c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800474a:	4b72      	ldr	r3, [pc, #456]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f023 0207 	bic.w	r2, r3, #7
 8004752:	4970      	ldr	r1, [pc, #448]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	4313      	orrs	r3, r2
 8004758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800475a:	4b6e      	ldr	r3, [pc, #440]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cf      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d010      	beq.n	800479a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689a      	ldr	r2, [r3, #8]
 800477c:	4b66      	ldr	r3, [pc, #408]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004784:	429a      	cmp	r2, r3
 8004786:	d908      	bls.n	800479a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004788:	4b63      	ldr	r3, [pc, #396]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	4960      	ldr	r1, [pc, #384]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 8004796:	4313      	orrs	r3, r2
 8004798:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d04c      	beq.n	8004840 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	2b03      	cmp	r3, #3
 80047ac:	d107      	bne.n	80047be <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b5a      	ldr	r3, [pc, #360]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d121      	bne.n	80047fe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0a6      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d107      	bne.n	80047d6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047c6:	4b54      	ldr	r3, [pc, #336]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d115      	bne.n	80047fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e09a      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80047de:	4b4e      	ldr	r3, [pc, #312]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e08e      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80047ee:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e086      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b46      	ldr	r3, [pc, #280]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4943      	ldr	r1, [pc, #268]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004810:	f7fd fd84 	bl	800231c <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fd fd80 	bl	800231c <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e06e      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689a      	ldr	r2, [r3, #8]
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004858:	429a      	cmp	r2, r3
 800485a:	d208      	bcs.n	800486e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800485c:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	492b      	ldr	r1, [pc, #172]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800486e:	4b29      	ldr	r3, [pc, #164]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d210      	bcs.n	800489e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487c:	4b25      	ldr	r3, [pc, #148]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 0207 	bic.w	r2, r3, #7
 8004884:	4923      	ldr	r1, [pc, #140]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800488c:	4b21      	ldr	r3, [pc, #132]	; (8004914 <HAL_RCC_ClockConfig+0x1ec>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d001      	beq.n	800489e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e036      	b.n	800490c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048aa:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	4918      	ldr	r1, [pc, #96]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4910      	ldr	r1, [pc, #64]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80048dc:	f000 f824 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b0d      	ldr	r3, [pc, #52]	; (8004918 <HAL_RCC_ClockConfig+0x1f0>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	091b      	lsrs	r3, r3, #4
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	490b      	ldr	r1, [pc, #44]	; (800491c <HAL_RCC_ClockConfig+0x1f4>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
 80048f8:	4a09      	ldr	r2, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1f8>)
 80048fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <HAL_RCC_ClockConfig+0x1fc>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f7fd fb3d 	bl	8001f80 <HAL_InitTick>
 8004906:	4603      	mov	r3, r0
 8004908:	72fb      	strb	r3, [r7, #11]

  return status;
 800490a:	7afb      	ldrb	r3, [r7, #11]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40022000 	.word	0x40022000
 8004918:	40021000 	.word	0x40021000
 800491c:	0800d390 	.word	0x0800d390
 8004920:	20000000 	.word	0x20000000
 8004924:	20000004 	.word	0x20000004

08004928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	b089      	sub	sp, #36	; 0x24
 800492c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	61fb      	str	r3, [r7, #28]
 8004932:	2300      	movs	r3, #0
 8004934:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004936:	4b3e      	ldr	r3, [pc, #248]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004940:	4b3b      	ldr	r3, [pc, #236]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x34>
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0c      	cmp	r3, #12
 8004954:	d121      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d11e      	bne.n	800499a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800495c:	4b34      	ldr	r3, [pc, #208]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0308 	and.w	r3, r3, #8
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004968:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 030f 	and.w	r3, r3, #15
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e005      	b.n	8004984 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004978:	4b2d      	ldr	r3, [pc, #180]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004984:	4a2b      	ldr	r2, [pc, #172]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10d      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004998:	e00a      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b04      	cmp	r3, #4
 800499e:	d102      	bne.n	80049a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e004      	b.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d101      	bne.n	80049b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049ac:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80049ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d134      	bne.n	8004a20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049b6:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0xa6>
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	2b03      	cmp	r3, #3
 80049ca:	d003      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0xac>
 80049cc:	e005      	b.n	80049da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80049ce:	4b1a      	ldr	r3, [pc, #104]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x110>)
 80049d0:	617b      	str	r3, [r7, #20]
      break;
 80049d2:	e005      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_GetSysClockFreq+0x114>)
 80049d6:	617b      	str	r3, [r7, #20]
      break;
 80049d8:	e002      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	617b      	str	r3, [r7, #20]
      break;
 80049de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049e0:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	3301      	adds	r3, #1
 80049ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049ee:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	fb03 f202 	mul.w	r2, r3, r2
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a06:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	0e5b      	lsrs	r3, r3, #25
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	3301      	adds	r3, #1
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004a16:	697a      	ldr	r2, [r7, #20]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004a20:	69bb      	ldr	r3, [r7, #24]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3724      	adds	r7, #36	; 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	40021000 	.word	0x40021000
 8004a34:	0800d3a8 	.word	0x0800d3a8
 8004a38:	00f42400 	.word	0x00f42400
 8004a3c:	007a1200 	.word	0x007a1200

08004a40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a40:	b480      	push	{r7}
 8004a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a44:	4b03      	ldr	r3, [pc, #12]	; (8004a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a46:	681b      	ldr	r3, [r3, #0]
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	20000000 	.word	0x20000000

08004a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004a5c:	f7ff fff0 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4904      	ldr	r1, [pc, #16]	; (8004a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800d3a0 	.word	0x0800d3a0

08004a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004a88:	f7ff ffda 	bl	8004a40 <HAL_RCC_GetHCLKFreq>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	0adb      	lsrs	r3, r3, #11
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	4904      	ldr	r1, [pc, #16]	; (8004aac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004a9a:	5ccb      	ldrb	r3, [r1, r3]
 8004a9c:	f003 031f 	and.w	r3, r3, #31
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	0800d3a0 	.word	0x0800d3a0

08004ab0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	220f      	movs	r2, #15
 8004abe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004ac0:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 0203 	and.w	r2, r3, #3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004ad8:	4b0c      	ldr	r3, [pc, #48]	; (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004ae4:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCC_GetClockConfig+0x5c>)
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	08db      	lsrs	r3, r3, #3
 8004aea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004af2:	4b07      	ldr	r3, [pc, #28]	; (8004b10 <HAL_RCC_GetClockConfig+0x60>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0207 	and.w	r2, r3, #7
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	40022000 	.word	0x40022000

08004b14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b20:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d003      	beq.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b2c:	f7ff f8f0 	bl	8003d10 <HAL_PWREx_GetVoltageRange>
 8004b30:	6178      	str	r0, [r7, #20]
 8004b32:	e014      	b.n	8004b5e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b34:	4b25      	ldr	r3, [pc, #148]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8004b40:	4b22      	ldr	r3, [pc, #136]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b4c:	f7ff f8e0 	bl	8003d10 <HAL_PWREx_GetVoltageRange>
 8004b50:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b52:	4b1e      	ldr	r3, [pc, #120]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b64:	d10b      	bne.n	8004b7e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2b80      	cmp	r3, #128	; 0x80
 8004b6a:	d919      	bls.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2ba0      	cmp	r3, #160	; 0xa0
 8004b70:	d902      	bls.n	8004b78 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b72:	2302      	movs	r3, #2
 8004b74:	613b      	str	r3, [r7, #16]
 8004b76:	e013      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	e010      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b80      	cmp	r3, #128	; 0x80
 8004b82:	d902      	bls.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b84:	2303      	movs	r3, #3
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	e00a      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d102      	bne.n	8004b96 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b90:	2302      	movs	r3, #2
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	e004      	b.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b70      	cmp	r3, #112	; 0x70
 8004b9a:	d101      	bne.n	8004ba0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 0207 	bic.w	r2, r3, #7
 8004ba8:	4909      	ldr	r1, [pc, #36]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bb0:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0307 	and.w	r3, r3, #7
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d001      	beq.n	8004bc2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000
 8004bd0:	40022000 	.word	0x40022000

08004bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bdc:	2300      	movs	r3, #0
 8004bde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004be0:	2300      	movs	r3, #0
 8004be2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d041      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bf8:	d02a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004bfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bfe:	d824      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c04:	d008      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c0a:	d81e      	bhi.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c14:	d010      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c16:	e018      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c18:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	4a85      	ldr	r2, [pc, #532]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c22:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c24:	e015      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3304      	adds	r3, #4
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f000 facb 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c36:	e00c      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3320      	adds	r3, #32
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbb6 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8004c44:	4603      	mov	r3, r0
 8004c46:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c48:	e003      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	74fb      	strb	r3, [r7, #19]
      break;
 8004c4e:	e000      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c58:	4b76      	ldr	r3, [pc, #472]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c66:	4973      	ldr	r1, [pc, #460]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c6e:	e001      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c70:	7cfb      	ldrb	r3, [r7, #19]
 8004c72:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d041      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c88:	d02a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004c8a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c8e:	d824      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c94:	d008      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9a:	d81e      	bhi.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca4:	d010      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ca6:	e018      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ca8:	4b62      	ldr	r3, [pc, #392]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a61      	ldr	r2, [pc, #388]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cb2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3304      	adds	r3, #4
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fa83 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cc6:	e00c      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3320      	adds	r3, #32
 8004ccc:	2100      	movs	r1, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb6e 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd8:	e003      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	74fb      	strb	r3, [r7, #19]
      break;
 8004cde:	e000      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ce0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10b      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ce8:	4b52      	ldr	r3, [pc, #328]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cf6:	494f      	ldr	r1, [pc, #316]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004cfe:	e001      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80a0 	beq.w	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d12:	2300      	movs	r3, #0
 8004d14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d16:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d26:	2300      	movs	r3, #0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	4b41      	ldr	r3, [pc, #260]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d36:	6593      	str	r3, [r2, #88]	; 0x58
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d44:	2301      	movs	r3, #1
 8004d46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d54:	f7fd fae2 	bl	800231c <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d5a:	e009      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d5c:	f7fd fade 	bl	800231c <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	74fb      	strb	r3, [r7, #19]
        break;
 8004d6e:	e005      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d70:	4b31      	ldr	r3, [pc, #196]	; (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ef      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004d7c:	7cfb      	ldrb	r3, [r7, #19]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d15c      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d82:	4b2c      	ldr	r3, [pc, #176]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01f      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d9a:	697a      	ldr	r2, [r7, #20]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d019      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004da0:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dac:	4b21      	ldr	r3, [pc, #132]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	4a20      	ldr	r2, [pc, #128]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d016      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dde:	f7fd fa9d 	bl	800231c <HAL_GetTick>
 8004de2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004de4:	e00b      	b.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de6:	f7fd fa99 	bl	800231c <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d902      	bls.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	74fb      	strb	r3, [r7, #19]
            break;
 8004dfc:	e006      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dfe:	4b0d      	ldr	r3, [pc, #52]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d0ec      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e0c:	7cfb      	ldrb	r3, [r7, #19]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10c      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e12:	4b08      	ldr	r3, [pc, #32]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e22:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e2c:	7cfb      	ldrb	r3, [r7, #19]
 8004e2e:	74bb      	strb	r3, [r7, #18]
 8004e30:	e006      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e32:	bf00      	nop
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e40:	7c7b      	ldrb	r3, [r7, #17]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d105      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b9e      	ldr	r3, [pc, #632]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a9d      	ldr	r2, [pc, #628]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e5e:	4b98      	ldr	r3, [pc, #608]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e64:	f023 0203 	bic.w	r2, r3, #3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	4994      	ldr	r1, [pc, #592]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e80:	4b8f      	ldr	r3, [pc, #572]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f023 020c 	bic.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e8e:	498c      	ldr	r1, [pc, #560]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ea2:	4b87      	ldr	r3, [pc, #540]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	4983      	ldr	r1, [pc, #524]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ec4:	4b7e      	ldr	r3, [pc, #504]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	497b      	ldr	r1, [pc, #492]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0310 	and.w	r3, r3, #16
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef4:	4972      	ldr	r1, [pc, #456]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f08:	4b6d      	ldr	r3, [pc, #436]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f16:	496a      	ldr	r1, [pc, #424]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f2a:	4b65      	ldr	r3, [pc, #404]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f38:	4961      	ldr	r1, [pc, #388]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f4c:	4b5c      	ldr	r3, [pc, #368]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	4959      	ldr	r1, [pc, #356]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f6e:	4b54      	ldr	r3, [pc, #336]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7c:	4950      	ldr	r1, [pc, #320]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f90:	4b4b      	ldr	r3, [pc, #300]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	4948      	ldr	r1, [pc, #288]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fb2:	4b43      	ldr	r3, [pc, #268]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc0:	493f      	ldr	r1, [pc, #252]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d028      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fe2:	4937      	ldr	r1, [pc, #220]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff2:	d106      	bne.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ff4:	4b32      	ldr	r3, [pc, #200]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ffe:	60d3      	str	r3, [r2, #12]
 8005000:	e011      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005006:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800500a:	d10c      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	2101      	movs	r1, #1
 8005012:	4618      	mov	r0, r3
 8005014:	f000 f8d8 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005018:	4603      	mov	r3, r0
 800501a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800501c:	7cfb      	ldrb	r3, [r7, #19]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005022:	7cfb      	ldrb	r3, [r7, #19]
 8005024:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d028      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005032:	4b23      	ldr	r3, [pc, #140]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005038:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005040:	491f      	ldr	r1, [pc, #124]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800504c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005050:	d106      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4a1a      	ldr	r2, [pc, #104]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800505c:	60d3      	str	r3, [r2, #12]
 800505e:	e011      	b.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005068:	d10c      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2101      	movs	r1, #1
 8005070:	4618      	mov	r0, r3
 8005072:	f000 f8a9 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800507a:	7cfb      	ldrb	r3, [r7, #19]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005080:	7cfb      	ldrb	r3, [r7, #19]
 8005082:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d02b      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509e:	4908      	ldr	r1, [pc, #32]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050ae:	d109      	bne.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050b0:	4b03      	ldr	r3, [pc, #12]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a02      	ldr	r2, [pc, #8]	; (80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ba:	60d3      	str	r3, [r2, #12]
 80050bc:	e014      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80050be:	bf00      	nop
 80050c0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	3304      	adds	r3, #4
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f877 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050de:	7cfb      	ldrb	r3, [r7, #19]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02f      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005102:	4928      	ldr	r1, [pc, #160]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800510e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005112:	d10d      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	2102      	movs	r1, #2
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f854 	bl	80051c8 <RCCEx_PLLSAI1_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005124:	7cfb      	ldrb	r3, [r7, #19]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d014      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800512a:	7cfb      	ldrb	r3, [r7, #19]
 800512c:	74bb      	strb	r3, [r7, #18]
 800512e:	e011      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005138:	d10c      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3320      	adds	r3, #32
 800513e:	2102      	movs	r1, #2
 8005140:	4618      	mov	r0, r3
 8005142:	f000 f935 	bl	80053b0 <RCCEx_PLLSAI2_Config>
 8005146:	4603      	mov	r3, r0
 8005148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800514a:	7cfb      	ldrb	r3, [r7, #19]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005150:	7cfb      	ldrb	r3, [r7, #19]
 8005152:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005160:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005166:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800516e:	490d      	ldr	r1, [pc, #52]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005182:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005188:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005192:	4904      	ldr	r1, [pc, #16]	; (80051a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800519a:	7cbb      	ldrb	r3, [r7, #18]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3718      	adds	r7, #24
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40021000 	.word	0x40021000

080051a8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a04      	ldr	r2, [pc, #16]	; (80051c4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80051b2:	f043 0304 	orr.w	r3, r3, #4
 80051b6:	6013      	str	r3, [r2, #0]
}
 80051b8:	bf00      	nop
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40021000 	.word	0x40021000

080051c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051d2:	2300      	movs	r3, #0
 80051d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80051d6:	4b75      	ldr	r3, [pc, #468]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d018      	beq.n	8005214 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80051e2:	4b72      	ldr	r3, [pc, #456]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	68db      	ldr	r3, [r3, #12]
 80051e6:	f003 0203 	and.w	r2, r3, #3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d10d      	bne.n	800520e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
       ||
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d009      	beq.n	800520e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051fa:	4b6c      	ldr	r3, [pc, #432]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	091b      	lsrs	r3, r3, #4
 8005200:	f003 0307 	and.w	r3, r3, #7
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
       ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d047      	beq.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	73fb      	strb	r3, [r7, #15]
 8005212:	e044      	b.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b03      	cmp	r3, #3
 800521a:	d018      	beq.n	800524e <RCCEx_PLLSAI1_Config+0x86>
 800521c:	2b03      	cmp	r3, #3
 800521e:	d825      	bhi.n	800526c <RCCEx_PLLSAI1_Config+0xa4>
 8005220:	2b01      	cmp	r3, #1
 8005222:	d002      	beq.n	800522a <RCCEx_PLLSAI1_Config+0x62>
 8005224:	2b02      	cmp	r3, #2
 8005226:	d009      	beq.n	800523c <RCCEx_PLLSAI1_Config+0x74>
 8005228:	e020      	b.n	800526c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800522a:	4b60      	ldr	r3, [pc, #384]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d11d      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800523a:	e01a      	b.n	8005272 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800523c:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800524c:	e013      	b.n	8005276 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800525a:	4b54      	ldr	r3, [pc, #336]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d109      	bne.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800526a:	e006      	b.n	800527a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	73fb      	strb	r3, [r7, #15]
      break;
 8005270:	e004      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005272:	bf00      	nop
 8005274:	e002      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005276:	bf00      	nop
 8005278:	e000      	b.n	800527c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800527a:	bf00      	nop
    }

    if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10d      	bne.n	800529e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005282:	4b4a      	ldr	r3, [pc, #296]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6819      	ldr	r1, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	011b      	lsls	r3, r3, #4
 8005296:	430b      	orrs	r3, r1
 8005298:	4944      	ldr	r1, [pc, #272]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d17d      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80052a4:	4b41      	ldr	r3, [pc, #260]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a40      	ldr	r2, [pc, #256]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fd f834 	bl	800231c <HAL_GetTick>
 80052b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052b6:	e009      	b.n	80052cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b8:	f7fd f830 	bl	800231c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d902      	bls.n	80052cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	73fb      	strb	r3, [r7, #15]
        break;
 80052ca:	e005      	b.n	80052d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80052cc:	4b37      	ldr	r3, [pc, #220]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1ef      	bne.n	80052b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d160      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d111      	bne.n	8005308 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052e4:	4b31      	ldr	r3, [pc, #196]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80052ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6892      	ldr	r2, [r2, #8]
 80052f4:	0211      	lsls	r1, r2, #8
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68d2      	ldr	r2, [r2, #12]
 80052fa:	0912      	lsrs	r2, r2, #4
 80052fc:	0452      	lsls	r2, r2, #17
 80052fe:	430a      	orrs	r2, r1
 8005300:	492a      	ldr	r1, [pc, #168]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
 8005306:	e027      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d112      	bne.n	8005334 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800530e:	4b27      	ldr	r3, [pc, #156]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005316:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6892      	ldr	r2, [r2, #8]
 800531e:	0211      	lsls	r1, r2, #8
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6912      	ldr	r2, [r2, #16]
 8005324:	0852      	lsrs	r2, r2, #1
 8005326:	3a01      	subs	r2, #1
 8005328:	0552      	lsls	r2, r2, #21
 800532a:	430a      	orrs	r2, r1
 800532c:	491f      	ldr	r1, [pc, #124]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800532e:	4313      	orrs	r3, r2
 8005330:	610b      	str	r3, [r1, #16]
 8005332:	e011      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800533c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	6892      	ldr	r2, [r2, #8]
 8005344:	0211      	lsls	r1, r2, #8
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6952      	ldr	r2, [r2, #20]
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	430a      	orrs	r2, r1
 8005352:	4916      	ldr	r1, [pc, #88]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005354:	4313      	orrs	r3, r2
 8005356:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005358:	4b14      	ldr	r3, [pc, #80]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800535e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005362:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fc ffda 	bl	800231c <HAL_GetTick>
 8005368:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800536a:	e009      	b.n	8005380 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800536c:	f7fc ffd6 	bl	800231c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d902      	bls.n	8005380 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	73fb      	strb	r3, [r7, #15]
          break;
 800537e:	e005      	b.n	800538c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0ef      	beq.n	800536c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d106      	bne.n	80053a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	4904      	ldr	r1, [pc, #16]	; (80053ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800539c:	4313      	orrs	r3, r2
 800539e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80053a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000

080053b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053ba:	2300      	movs	r3, #0
 80053bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053be:	4b6a      	ldr	r3, [pc, #424]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80053ca:	4b67      	ldr	r3, [pc, #412]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	f003 0203 	and.w	r2, r3, #3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10d      	bne.n	80053f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
       ||
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d009      	beq.n	80053f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053e2:	4b61      	ldr	r3, [pc, #388]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	091b      	lsrs	r3, r3, #4
 80053e8:	f003 0307 	and.w	r3, r3, #7
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
       ||
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d047      	beq.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e044      	b.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d018      	beq.n	8005436 <RCCEx_PLLSAI2_Config+0x86>
 8005404:	2b03      	cmp	r3, #3
 8005406:	d825      	bhi.n	8005454 <RCCEx_PLLSAI2_Config+0xa4>
 8005408:	2b01      	cmp	r3, #1
 800540a:	d002      	beq.n	8005412 <RCCEx_PLLSAI2_Config+0x62>
 800540c:	2b02      	cmp	r3, #2
 800540e:	d009      	beq.n	8005424 <RCCEx_PLLSAI2_Config+0x74>
 8005410:	e020      	b.n	8005454 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005412:	4b55      	ldr	r3, [pc, #340]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11d      	bne.n	800545a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005422:	e01a      	b.n	800545a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800542c:	2b00      	cmp	r3, #0
 800542e:	d116      	bne.n	800545e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005434:	e013      	b.n	800545e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005436:	4b4c      	ldr	r3, [pc, #304]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10f      	bne.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005442:	4b49      	ldr	r3, [pc, #292]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800544a:	2b00      	cmp	r3, #0
 800544c:	d109      	bne.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005452:	e006      	b.n	8005462 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      break;
 8005458:	e004      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800545a:	bf00      	nop
 800545c:	e002      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800545e:	bf00      	nop
 8005460:	e000      	b.n	8005464 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005462:	bf00      	nop
    }

    if(status == HAL_OK)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800546a:	4b3f      	ldr	r3, [pc, #252]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6819      	ldr	r1, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	3b01      	subs	r3, #1
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	430b      	orrs	r3, r1
 8005480:	4939      	ldr	r1, [pc, #228]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005486:	7bfb      	ldrb	r3, [r7, #15]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d167      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a35      	ldr	r2, [pc, #212]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005498:	f7fc ff40 	bl	800231c <HAL_GetTick>
 800549c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800549e:	e009      	b.n	80054b4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054a0:	f7fc ff3c 	bl	800231c <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d902      	bls.n	80054b4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	73fb      	strb	r3, [r7, #15]
        break;
 80054b2:	e005      	b.n	80054c0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80054b4:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1ef      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d14a      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d111      	bne.n	80054f0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054cc:	4b26      	ldr	r3, [pc, #152]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6892      	ldr	r2, [r2, #8]
 80054dc:	0211      	lsls	r1, r2, #8
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	0912      	lsrs	r2, r2, #4
 80054e4:	0452      	lsls	r2, r2, #17
 80054e6:	430a      	orrs	r2, r1
 80054e8:	491f      	ldr	r1, [pc, #124]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	614b      	str	r3, [r1, #20]
 80054ee:	e011      	b.n	8005514 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80054f0:	4b1d      	ldr	r3, [pc, #116]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80054f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	0211      	lsls	r1, r2, #8
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	6912      	ldr	r2, [r2, #16]
 8005506:	0852      	lsrs	r2, r2, #1
 8005508:	3a01      	subs	r2, #1
 800550a:	0652      	lsls	r2, r2, #25
 800550c:	430a      	orrs	r2, r1
 800550e:	4916      	ldr	r1, [pc, #88]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005510:	4313      	orrs	r3, r2
 8005512:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005514:	4b14      	ldr	r3, [pc, #80]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a13      	ldr	r2, [pc, #76]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800551e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fc fefc 	bl	800231c <HAL_GetTick>
 8005524:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005526:	e009      	b.n	800553c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005528:	f7fc fef8 	bl	800231c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d902      	bls.n	800553c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	73fb      	strb	r3, [r7, #15]
          break;
 800553a:	e005      	b.n	8005548 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800553c:	4b0a      	ldr	r3, [pc, #40]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ef      	beq.n	8005528 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d106      	bne.n	800555c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800554e:	4b06      	ldr	r3, [pc, #24]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	4904      	ldr	r1, [pc, #16]	; (8005568 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005558:	4313      	orrs	r3, r2
 800555a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800555c:	7bfb      	ldrb	r3, [r7, #15]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	40021000 	.word	0x40021000

0800556c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d06c      	beq.n	8005658 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7fc fb10 	bl	8001bb8 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	22ca      	movs	r2, #202	; 0xca
 80055a6:	625a      	str	r2, [r3, #36]	; 0x24
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2253      	movs	r2, #83	; 0x53
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa49 	bl	8005a48 <RTC_EnterInitMode>
 80055b6:	4603      	mov	r3, r0
 80055b8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d14b      	bne.n	8005658 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	6812      	ldr	r2, [r2, #0]
 80055ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80055ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d2:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6899      	ldr	r1, [r3, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685a      	ldr	r2, [r3, #4]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68d2      	ldr	r2, [r2, #12]
 80055fa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6919      	ldr	r1, [r3, #16]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	041a      	lsls	r2, r3, #16
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fa4d 	bl	8005ab0 <RTC_ExitInitMode>
 8005616:	4603      	mov	r3, r0
 8005618:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d11b      	bne.n	8005658 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0203 	bic.w	r2, r2, #3
 800562e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	695b      	ldr	r3, [r3, #20]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	22ff      	movs	r2, #255	; 0xff
 800564e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005662:	b590      	push	{r4, r7, lr}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_RTC_SetTime+0x1a>
 8005678:	2302      	movs	r3, #2
 800567a:	e08b      	b.n	8005794 <HAL_RTC_SetTime+0x132>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2202      	movs	r2, #2
 8005688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	22ca      	movs	r2, #202	; 0xca
 8005692:	625a      	str	r2, [r3, #36]	; 0x24
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2253      	movs	r2, #83	; 0x53
 800569a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 f9d3 	bl	8005a48 <RTC_EnterInitMode>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80056a6:	7cfb      	ldrb	r3, [r7, #19]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d163      	bne.n	8005774 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d126      	bne.n	8005700 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2200      	movs	r2, #0
 80056c4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fa2e 	bl	8005b2c <RTC_ByteToBcd2>
 80056d0:	4603      	mov	r3, r0
 80056d2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fa27 	bl	8005b2c <RTC_ByteToBcd2>
 80056de:	4603      	mov	r3, r0
 80056e0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056e2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	789b      	ldrb	r3, [r3, #2]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 fa1f 	bl	8005b2c <RTC_ByteToBcd2>
 80056ee:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80056f0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	78db      	ldrb	r3, [r3, #3]
 80056f8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e018      	b.n	8005732 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d102      	bne.n	8005714 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	2200      	movs	r2, #0
 8005712:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005720:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005726:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	78db      	ldrb	r3, [r3, #3]
 800572c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800572e:	4313      	orrs	r3, r2
 8005730:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800573c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005740:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005750:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6899      	ldr	r1, [r3, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	431a      	orrs	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f9a0 	bl	8005ab0 <RTC_ExitInitMode>
 8005770:	4603      	mov	r3, r0
 8005772:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	22ff      	movs	r2, #255	; 0xff
 800577a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800577c:	7cfb      	ldrb	r3, [r7, #19]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d103      	bne.n	800578a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005792:	7cfb      	ldrb	r3, [r7, #19]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	bd90      	pop	{r4, r7, pc}

0800579c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	0c1b      	lsrs	r3, r3, #16
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	0d9b      	lsrs	r3, r3, #22
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	b2da      	uxtb	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11a      	bne.n	800584a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f000 f9a7 	bl	8005b6c <RTC_Bcd2ToByte>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f99e 	bl	8005b6c <RTC_Bcd2ToByte>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	4618      	mov	r0, r3
 800583e:	f000 f995 	bl	8005b6c <RTC_Bcd2ToByte>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_RTC_SetDate+0x1a>
 800586a:	2302      	movs	r3, #2
 800586c:	e075      	b.n	800595a <HAL_RTC_SetDate+0x106>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10e      	bne.n	80058a2 <HAL_RTC_SetDate+0x4e>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	785b      	ldrb	r3, [r3, #1]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	785b      	ldrb	r3, [r3, #1]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	b2db      	uxtb	r3, r3
 800589a:	330a      	adds	r3, #10
 800589c:	b2da      	uxtb	r2, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d11c      	bne.n	80058e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	78db      	ldrb	r3, [r3, #3]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f93d 	bl	8005b2c <RTC_ByteToBcd2>
 80058b2:	4603      	mov	r3, r0
 80058b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	785b      	ldrb	r3, [r3, #1]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f936 	bl	8005b2c <RTC_ByteToBcd2>
 80058c0:	4603      	mov	r3, r0
 80058c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80058c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	789b      	ldrb	r3, [r3, #2]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f92e 	bl	8005b2c <RTC_ByteToBcd2>
 80058d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80058d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	e00e      	b.n	8005900 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	78db      	ldrb	r3, [r3, #3]
 80058e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	785b      	ldrb	r3, [r3, #1]
 80058ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80058f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80058fc:	4313      	orrs	r3, r2
 80058fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	22ca      	movs	r2, #202	; 0xca
 8005906:	625a      	str	r2, [r3, #36]	; 0x24
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2253      	movs	r2, #83	; 0x53
 800590e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f000 f899 	bl	8005a48 <RTC_EnterInitMode>
 8005916:	4603      	mov	r3, r0
 8005918:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10c      	bne.n	800593a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800592e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 f8bd 	bl	8005ab0 <RTC_ExitInitMode>
 8005936:	4603      	mov	r3, r0
 8005938:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	22ff      	movs	r2, #255	; 0xff
 8005940:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005942:	7cfb      	ldrb	r3, [r7, #19]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005958:	7cfb      	ldrb	r3, [r7, #19]
}
 800595a:	4618      	mov	r0, r3
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	bd90      	pop	{r4, r7, pc}

08005962 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b086      	sub	sp, #24
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005978:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800597c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	0c1b      	lsrs	r3, r3, #16
 8005982:	b2da      	uxtb	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	0a1b      	lsrs	r3, r3, #8
 800598c:	b2db      	uxtb	r3, r3
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	b2da      	uxtb	r2, r3
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	b2db      	uxtb	r3, r3
 800599c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	0b5b      	lsrs	r3, r3, #13
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	f003 0307 	and.w	r3, r3, #7
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d11a      	bne.n	80059f2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	78db      	ldrb	r3, [r3, #3]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 f8d3 	bl	8005b6c <RTC_Bcd2ToByte>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	785b      	ldrb	r3, [r3, #1]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f8ca 	bl	8005b6c <RTC_Bcd2ToByte>
 80059d8:	4603      	mov	r3, r0
 80059da:	461a      	mov	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	789b      	ldrb	r3, [r3, #2]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f000 f8c1 	bl	8005b6c <RTC_Bcd2ToByte>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3718      	adds	r7, #24
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68da      	ldr	r2, [r3, #12]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a12:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005a14:	f7fc fc82 	bl	800231c <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a1a:	e009      	b.n	8005a30 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a1c:	f7fc fc7e 	bl	800231c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a2a:	d901      	bls.n	8005a30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e007      	b.n	8005a40 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f003 0320 	and.w	r3, r3, #32
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0ee      	beq.n	8005a1c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3710      	adds	r7, #16
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d120      	bne.n	8005aa4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005a6c:	f7fc fc56 	bl	800231c <HAL_GetTick>
 8005a70:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a72:	e00d      	b.n	8005a90 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005a74:	f7fc fc52 	bl	800231c <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a82:	d905      	bls.n	8005a90 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2203      	movs	r2, #3
 8005a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d102      	bne.n	8005aa4 <RTC_EnterInitMode+0x5c>
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	2b03      	cmp	r3, #3
 8005aa2:	d1e7      	bne.n	8005a74 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005abc:	4b1a      	ldr	r3, [pc, #104]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a19      	ldr	r2, [pc, #100]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ac6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10c      	bne.n	8005aee <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff ff91 	bl	80059fc <HAL_RTC_WaitForSynchro>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01e      	beq.n	8005b1e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2203      	movs	r2, #3
 8005ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	73fb      	strb	r3, [r7, #15]
 8005aec:	e017      	b.n	8005b1e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	4a0d      	ldr	r2, [pc, #52]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005af4:	f023 0320 	bic.w	r3, r3, #32
 8005af8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff7e 	bl	80059fc <HAL_RTC_WaitForSynchro>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	4a04      	ldr	r2, [pc, #16]	; (8005b28 <RTC_ExitInitMode+0x78>)
 8005b18:	f043 0320 	orr.w	r3, r3, #32
 8005b1c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	40002800 	.word	0x40002800

08005b2c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005b3a:	79fb      	ldrb	r3, [r7, #7]
 8005b3c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005b3e:	e005      	b.n	8005b4c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005b46:	7afb      	ldrb	r3, [r7, #11]
 8005b48:	3b0a      	subs	r3, #10
 8005b4a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005b4c:	7afb      	ldrb	r3, [r7, #11]
 8005b4e:	2b09      	cmp	r3, #9
 8005b50:	d8f6      	bhi.n	8005b40 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	011b      	lsls	r3, r3, #4
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	7afb      	ldrb	r3, [r7, #11]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	b2db      	uxtb	r3, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	4603      	mov	r3, r0
 8005b74:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	f003 030f 	and.w	r3, r3, #15
 8005b8c:	b2da      	uxtb	r2, r3
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	4413      	add	r3, r2
 8005b92:	b2db      	uxtb	r3, r3
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d101      	bne.n	8005bb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e095      	b.n	8005cde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d108      	bne.n	8005bcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bc2:	d009      	beq.n	8005bd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	61da      	str	r2, [r3, #28]
 8005bca:	e005      	b.n	8005bd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fc f812 	bl	8001c1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c18:	d902      	bls.n	8005c20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e002      	b.n	8005c26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c2e:	d007      	beq.n	8005c40 <HAL_SPI_Init+0xa0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c38:	d002      	beq.n	8005c40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	431a      	orrs	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	ea42 0103 	orr.w	r1, r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	0c1b      	lsrs	r3, r3, #16
 8005c9c:	f003 0204 	and.w	r2, r3, #4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	f003 0310 	and.w	r3, r3, #16
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005cbc:	ea42 0103 	orr.w	r1, r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	430a      	orrs	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b082      	sub	sp, #8
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d101      	bne.n	8005cf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e049      	b.n	8005d8c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d106      	bne.n	8005d12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f7fb ffc9 	bl	8001ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f000 f9ed 	bl	8006104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d001      	beq.n	8005dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e04f      	b.n	8005e4c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d01d      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd6:	d018      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d00e      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1c      	ldr	r2, [pc, #112]	; (8005e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d009      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1b      	ldr	r2, [pc, #108]	; (8005e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d004      	beq.n	8005e0a <HAL_TIM_Base_Start_IT+0x76>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a19      	ldr	r2, [pc, #100]	; (8005e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d115      	bne.n	8005e36 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b06      	cmp	r3, #6
 8005e1a:	d015      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0xb4>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e22:	d011      	beq.n	8005e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	e008      	b.n	8005e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e000      	b.n	8005e4a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40000800 	.word	0x40000800
 8005e64:	40000c00 	.word	0x40000c00
 8005e68:	40013400 	.word	0x40013400
 8005e6c:	40014000 	.word	0x40014000
 8005e70:	00010007 	.word	0x00010007

08005e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d122      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d11b      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f905 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f8f7 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f908 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d122      	bne.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d11b      	bne.n	8005f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0204 	mvn.w	r2, #4
 8005ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2202      	movs	r2, #2
 8005efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f8db 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005f10:	e005      	b.n	8005f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f8cd 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f8de 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	f003 0308 	and.w	r3, r3, #8
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d122      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d11b      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0208 	mvn.w	r2, #8
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8b1 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8a3 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8b4 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0310 	and.w	r3, r3, #16
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d122      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0310 	and.w	r3, r3, #16
 8005f90:	2b10      	cmp	r3, #16
 8005f92:	d11b      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0210 	mvn.w	r2, #16
 8005f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2208      	movs	r2, #8
 8005fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69db      	ldr	r3, [r3, #28]
 8005faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f887 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005fb8:	e005      	b.n	8005fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f879 	bl	80060b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f88a 	bl	80060da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0201 	mvn.w	r2, #1
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f7fb fc76 	bl	80018e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006002:	2b80      	cmp	r3, #128	; 0x80
 8006004:	d10e      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006010:	2b80      	cmp	r3, #128	; 0x80
 8006012:	d107      	bne.n	8006024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800601c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f99c 	bl	800635c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800602e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006032:	d10e      	bne.n	8006052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603e:	2b80      	cmp	r3, #128	; 0x80
 8006040:	d107      	bne.n	8006052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800604a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 f98f 	bl	8006370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d10e      	bne.n	800607e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d107      	bne.n	800607e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f838 	bl	80060ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b20      	cmp	r3, #32
 800608a:	d10e      	bne.n	80060aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b20      	cmp	r3, #32
 8006098:	d107      	bne.n	80060aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f06f 0220 	mvn.w	r2, #32
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f94f 	bl	8006348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060aa:	bf00      	nop
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060ba:	bf00      	nop
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a40      	ldr	r2, [pc, #256]	; (8006218 <TIM_Base_SetConfig+0x114>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d013      	beq.n	8006144 <TIM_Base_SetConfig+0x40>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006122:	d00f      	beq.n	8006144 <TIM_Base_SetConfig+0x40>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a3d      	ldr	r2, [pc, #244]	; (800621c <TIM_Base_SetConfig+0x118>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d00b      	beq.n	8006144 <TIM_Base_SetConfig+0x40>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a3c      	ldr	r2, [pc, #240]	; (8006220 <TIM_Base_SetConfig+0x11c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d007      	beq.n	8006144 <TIM_Base_SetConfig+0x40>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a3b      	ldr	r2, [pc, #236]	; (8006224 <TIM_Base_SetConfig+0x120>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_Base_SetConfig+0x40>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a3a      	ldr	r2, [pc, #232]	; (8006228 <TIM_Base_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d108      	bne.n	8006156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800614a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2f      	ldr	r2, [pc, #188]	; (8006218 <TIM_Base_SetConfig+0x114>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d01f      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d01b      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a2c      	ldr	r2, [pc, #176]	; (800621c <TIM_Base_SetConfig+0x118>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d017      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a2b      	ldr	r2, [pc, #172]	; (8006220 <TIM_Base_SetConfig+0x11c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d013      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a2a      	ldr	r2, [pc, #168]	; (8006224 <TIM_Base_SetConfig+0x120>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d00f      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a29      	ldr	r2, [pc, #164]	; (8006228 <TIM_Base_SetConfig+0x124>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00b      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a28      	ldr	r2, [pc, #160]	; (800622c <TIM_Base_SetConfig+0x128>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d007      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a27      	ldr	r2, [pc, #156]	; (8006230 <TIM_Base_SetConfig+0x12c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_Base_SetConfig+0x9a>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a26      	ldr	r2, [pc, #152]	; (8006234 <TIM_Base_SetConfig+0x130>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d108      	bne.n	80061b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	689a      	ldr	r2, [r3, #8]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a10      	ldr	r2, [pc, #64]	; (8006218 <TIM_Base_SetConfig+0x114>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00f      	beq.n	80061fc <TIM_Base_SetConfig+0xf8>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a12      	ldr	r2, [pc, #72]	; (8006228 <TIM_Base_SetConfig+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00b      	beq.n	80061fc <TIM_Base_SetConfig+0xf8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a11      	ldr	r2, [pc, #68]	; (800622c <TIM_Base_SetConfig+0x128>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <TIM_Base_SetConfig+0xf8>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a10      	ldr	r2, [pc, #64]	; (8006230 <TIM_Base_SetConfig+0x12c>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_Base_SetConfig+0xf8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a0f      	ldr	r2, [pc, #60]	; (8006234 <TIM_Base_SetConfig+0x130>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d103      	bne.n	8006204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	615a      	str	r2, [r3, #20]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	40013400 	.word	0x40013400
 800622c:	40014000 	.word	0x40014000
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006248:	2b01      	cmp	r3, #1
 800624a:	d101      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800624c:	2302      	movs	r3, #2
 800624e:	e068      	b.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2e      	ldr	r2, [pc, #184]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d004      	beq.n	8006284 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a2d      	ldr	r2, [pc, #180]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800628a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800629c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a1e      	ldr	r2, [pc, #120]	; (8006330 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d018      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1b      	ldr	r2, [pc, #108]	; (8006338 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1a      	ldr	r2, [pc, #104]	; (800633c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a13      	ldr	r2, [pc, #76]	; (8006334 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d10c      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4313      	orrs	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	40012c00 	.word	0x40012c00
 8006334:	40013400 	.word	0x40013400
 8006338:	40000400 	.word	0x40000400
 800633c:	40000800 	.word	0x40000800
 8006340:	40000c00 	.word	0x40000c00
 8006344:	40014000 	.word	0x40014000

08006348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e040      	b.n	8006418 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7fb fca2 	bl	8001cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2224      	movs	r2, #36	; 0x24
 80063b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fc18 	bl	8006bf8 <UART_SetConfig>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d101      	bne.n	80063d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e022      	b.n	8006418 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fec4 	bl	8007168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	689a      	ldr	r2, [r3, #8]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 ff4b 	bl	80072ac <UART_CheckIdleState>
 8006416:	4603      	mov	r3, r0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b08a      	sub	sp, #40	; 0x28
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	603b      	str	r3, [r7, #0]
 800642c:	4613      	mov	r3, r2
 800642e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006434:	2b20      	cmp	r3, #32
 8006436:	f040 8082 	bne.w	800653e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <HAL_UART_Transmit+0x26>
 8006440:	88fb      	ldrh	r3, [r7, #6]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e07a      	b.n	8006540 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_UART_Transmit+0x38>
 8006454:	2302      	movs	r3, #2
 8006456:	e073      	b.n	8006540 <HAL_UART_Transmit+0x120>
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2221      	movs	r2, #33	; 0x21
 800646c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800646e:	f7fb ff55 	bl	800231c <HAL_GetTick>
 8006472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	88fa      	ldrh	r2, [r7, #6]
 8006478:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	88fa      	ldrh	r2, [r7, #6]
 8006480:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648c:	d108      	bne.n	80064a0 <HAL_UART_Transmit+0x80>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d104      	bne.n	80064a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	61bb      	str	r3, [r7, #24]
 800649e:	e003      	b.n	80064a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064b0:	e02d      	b.n	800650e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 ff3e 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e039      	b.n	8006540 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10b      	bne.n	80064ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064de:	b292      	uxth	r2, r2
 80064e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	3302      	adds	r3, #2
 80064e6:	61bb      	str	r3, [r7, #24]
 80064e8:	e008      	b.n	80064fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	781a      	ldrb	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	b292      	uxth	r2, r2
 80064f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	3301      	adds	r3, #1
 80064fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006514:	b29b      	uxth	r3, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1cb      	bne.n	80064b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2200      	movs	r2, #0
 8006522:	2140      	movs	r1, #64	; 0x40
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f000 ff0a 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e005      	b.n	8006540 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2220      	movs	r2, #32
 8006538:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800653e:	2302      	movs	r3, #2
  }
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	4613      	mov	r3, r2
 8006554:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800655a:	2b20      	cmp	r3, #32
 800655c:	d142      	bne.n	80065e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d002      	beq.n	800656a <HAL_UART_Receive_IT+0x22>
 8006564:	88fb      	ldrh	r3, [r7, #6]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e03b      	b.n	80065e6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006574:	2b01      	cmp	r3, #1
 8006576:	d101      	bne.n	800657c <HAL_UART_Receive_IT+0x34>
 8006578:	2302      	movs	r3, #2
 800657a:	e034      	b.n	80065e6 <HAL_UART_Receive_IT+0x9e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <HAL_UART_Receive_IT+0xa8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d01f      	beq.n	80065d4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	e853 3f00 	ldrex	r3, [r3]
 80065ae:	613b      	str	r3, [r7, #16]
   return(result);
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	461a      	mov	r2, r3
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	6a3a      	ldr	r2, [r7, #32]
 80065c8:	e841 2300 	strex	r3, r2, [r1]
 80065cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e6      	bne.n	80065a2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 ff74 	bl	80074c8 <UART_Start_Receive_IT>
 80065e0:	4603      	mov	r3, r0
 80065e2:	e000      	b.n	80065e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3728      	adds	r7, #40	; 0x28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	40008000 	.word	0x40008000

080065f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b0ba      	sub	sp, #232	; 0xe8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800661a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800661e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006622:	4013      	ands	r3, r2
 8006624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006628:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800662c:	2b00      	cmp	r3, #0
 800662e:	d115      	bne.n	800665c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00f      	beq.n	800665c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800663c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006640:	f003 0320 	and.w	r3, r3, #32
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 82a6 	beq.w	8006b9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
      }
      return;
 800665a:	e2a0      	b.n	8006b9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800665c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8117 	beq.w	8006894 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006672:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006676:	4b85      	ldr	r3, [pc, #532]	; (800688c <HAL_UART_IRQHandler+0x298>)
 8006678:	4013      	ands	r3, r2
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 810a 	beq.w	8006894 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <HAL_UART_IRQHandler+0xbc>
 800668c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00b      	beq.n	80066b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2201      	movs	r2, #1
 800669e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d011      	beq.n	80066e0 <HAL_UART_IRQHandler+0xec>
 80066bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2202      	movs	r2, #2
 80066ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d6:	f043 0204 	orr.w	r2, r3, #4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <HAL_UART_IRQHandler+0x11c>
 80066ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00b      	beq.n	8006710 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2204      	movs	r2, #4
 80066fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006706:	f043 0202 	orr.w	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d017      	beq.n	800674c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800671c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006720:	f003 0320 	and.w	r3, r3, #32
 8006724:	2b00      	cmp	r3, #0
 8006726:	d105      	bne.n	8006734 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006728:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800672c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00b      	beq.n	800674c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2208      	movs	r2, #8
 800673a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800674c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006754:	2b00      	cmp	r3, #0
 8006756:	d012      	beq.n	800677e <HAL_UART_IRQHandler+0x18a>
 8006758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800675c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800676c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006774:	f043 0220 	orr.w	r2, r3, #32
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006784:	2b00      	cmp	r3, #0
 8006786:	f000 820c 	beq.w	8006ba2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800678a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00d      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800679a:	f003 0320 	and.w	r3, r3, #32
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d04f      	beq.n	8006876 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 ff40 	bl	800765c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d141      	bne.n	800686e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800681a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800682e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1d9      	bne.n	80067ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	2b00      	cmp	r3, #0
 800683c:	d013      	beq.n	8006866 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	4a13      	ldr	r2, [pc, #76]	; (8006890 <HAL_UART_IRQHandler+0x29c>)
 8006844:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684a:	4618      	mov	r0, r3
 800684c:	f7fb ffc2 	bl	80027d4 <HAL_DMA_Abort_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d017      	beq.n	8006886 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e00f      	b.n	8006886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f9b0 	bl	8006bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	e00b      	b.n	8006886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f9ac 	bl	8006bcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	e007      	b.n	8006886 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9a8 	bl	8006bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006884:	e18d      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006886:	bf00      	nop
    return;
 8006888:	e18b      	b.n	8006ba2 <HAL_UART_IRQHandler+0x5ae>
 800688a:	bf00      	nop
 800688c:	04000120 	.word	0x04000120
 8006890:	08007723 	.word	0x08007723

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006898:	2b01      	cmp	r3, #1
 800689a:	f040 8146 	bne.w	8006b2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 813f 	beq.w	8006b2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b0:	f003 0310 	and.w	r3, r3, #16
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	f000 8138 	beq.w	8006b2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2210      	movs	r2, #16
 80068c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b40      	cmp	r3, #64	; 0x40
 80068ce:	f040 80b4 	bne.w	8006a3a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 815f 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80068ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068f2:	429a      	cmp	r2, r3
 80068f4:	f080 8157 	bcs.w	8006ba6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	f040 8085 	bne.w	8006a1e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006920:	e853 3f00 	ldrex	r3, [r3]
 8006924:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006928:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800692c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800693e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006942:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800694a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006956:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1da      	bne.n	8006914 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006968:	e853 3f00 	ldrex	r3, [r3]
 800696c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800696e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006970:	f023 0301 	bic.w	r3, r3, #1
 8006974:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3308      	adds	r3, #8
 800697e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006982:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006986:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006988:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800698a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006994:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e1      	bne.n	800695e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3308      	adds	r3, #8
 80069a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e3      	bne.n	800699a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2220      	movs	r2, #32
 80069d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ee:	f023 0310 	bic.w	r3, r3, #16
 80069f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a00:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a08:	e841 2300 	strex	r3, r2, [r1]
 8006a0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d1e4      	bne.n	80069de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7fb fe9d 	bl	8002758 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8d4 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a38:	e0b5      	b.n	8006ba6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 80a7 	beq.w	8006baa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006a5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 80a2 	beq.w	8006baa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6e:	e853 3f00 	ldrex	r3, [r3]
 8006a72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a88:	647b      	str	r3, [r7, #68]	; 0x44
 8006a8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e4      	bne.n	8006a66 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	623b      	str	r3, [r7, #32]
   return(result);
 8006aac:	6a3b      	ldr	r3, [r7, #32]
 8006aae:	f023 0301 	bic.w	r3, r3, #1
 8006ab2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3308      	adds	r3, #8
 8006abc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ac0:	633a      	str	r2, [r7, #48]	; 0x30
 8006ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e3      	bne.n	8006a9c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2220      	movs	r2, #32
 8006ad8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	e853 3f00 	ldrex	r3, [r3]
 8006af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f023 0310 	bic.w	r3, r3, #16
 8006afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	461a      	mov	r2, r3
 8006b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	69b9      	ldr	r1, [r7, #24]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	e841 2300 	strex	r3, r2, [r1]
 8006b14:	617b      	str	r3, [r7, #20]
   return(result);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1e4      	bne.n	8006ae6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b20:	4619      	mov	r1, r3
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 f85c 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b28:	e03f      	b.n	8006baa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00e      	beq.n	8006b54 <HAL_UART_IRQHandler+0x560>
 8006b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 ff88 	bl	8007a62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b52:	e02d      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00e      	beq.n	8006b7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d008      	beq.n	8006b7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01c      	beq.n	8006bae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	4798      	blx	r3
    }
    return;
 8006b7c:	e017      	b.n	8006bae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d012      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
 8006b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fdd9 	bl	800774e <UART_EndTransmit_IT>
    return;
 8006b9c:	e008      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006b9e:	bf00      	nop
 8006ba0:	e006      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006ba2:	bf00      	nop
 8006ba4:	e004      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006ba6:	bf00      	nop
 8006ba8:	e002      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006bae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006bb0:	37e8      	adds	r7, #232	; 0xe8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop

08006bb8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	460b      	mov	r3, r1
 8006bea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c02:	2300      	movs	r3, #0
 8006c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	689a      	ldr	r2, [r3, #8]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	431a      	orrs	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	431a      	orrs	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	4ba4      	ldr	r3, [pc, #656]	; (8006eb8 <UART_SetConfig+0x2c0>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a99      	ldr	r2, [pc, #612]	; (8006ebc <UART_SetConfig+0x2c4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d004      	beq.n	8006c64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c60:	4313      	orrs	r3, r2
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a90      	ldr	r2, [pc, #576]	; (8006ec0 <UART_SetConfig+0x2c8>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d126      	bne.n	8006cd0 <UART_SetConfig+0xd8>
 8006c82:	4b90      	ldr	r3, [pc, #576]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	2b03      	cmp	r3, #3
 8006c8e:	d81b      	bhi.n	8006cc8 <UART_SetConfig+0xd0>
 8006c90:	a201      	add	r2, pc, #4	; (adr r2, 8006c98 <UART_SetConfig+0xa0>)
 8006c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c96:	bf00      	nop
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cb9 	.word	0x08006cb9
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cc1 	.word	0x08006cc1
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cae:	e116      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cb6:	e112      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cb8:	2304      	movs	r3, #4
 8006cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cbe:	e10e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cc0:	2308      	movs	r3, #8
 8006cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cc6:	e10a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cc8:	2310      	movs	r3, #16
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006cce:	e106      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7c      	ldr	r2, [pc, #496]	; (8006ec8 <UART_SetConfig+0x2d0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d138      	bne.n	8006d4c <UART_SetConfig+0x154>
 8006cda:	4b7a      	ldr	r3, [pc, #488]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce0:	f003 030c 	and.w	r3, r3, #12
 8006ce4:	2b0c      	cmp	r3, #12
 8006ce6:	d82d      	bhi.n	8006d44 <UART_SetConfig+0x14c>
 8006ce8:	a201      	add	r2, pc, #4	; (adr r2, 8006cf0 <UART_SetConfig+0xf8>)
 8006cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cee:	bf00      	nop
 8006cf0:	08006d25 	.word	0x08006d25
 8006cf4:	08006d45 	.word	0x08006d45
 8006cf8:	08006d45 	.word	0x08006d45
 8006cfc:	08006d45 	.word	0x08006d45
 8006d00:	08006d35 	.word	0x08006d35
 8006d04:	08006d45 	.word	0x08006d45
 8006d08:	08006d45 	.word	0x08006d45
 8006d0c:	08006d45 	.word	0x08006d45
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d45 	.word	0x08006d45
 8006d20:	08006d3d 	.word	0x08006d3d
 8006d24:	2300      	movs	r3, #0
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d2a:	e0d8      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d32:	e0d4      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d34:	2304      	movs	r3, #4
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d3a:	e0d0      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d42:	e0cc      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d44:	2310      	movs	r3, #16
 8006d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d4a:	e0c8      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a5e      	ldr	r2, [pc, #376]	; (8006ecc <UART_SetConfig+0x2d4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d125      	bne.n	8006da2 <UART_SetConfig+0x1aa>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d60:	2b30      	cmp	r3, #48	; 0x30
 8006d62:	d016      	beq.n	8006d92 <UART_SetConfig+0x19a>
 8006d64:	2b30      	cmp	r3, #48	; 0x30
 8006d66:	d818      	bhi.n	8006d9a <UART_SetConfig+0x1a2>
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d00a      	beq.n	8006d82 <UART_SetConfig+0x18a>
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d814      	bhi.n	8006d9a <UART_SetConfig+0x1a2>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <UART_SetConfig+0x182>
 8006d74:	2b10      	cmp	r3, #16
 8006d76:	d008      	beq.n	8006d8a <UART_SetConfig+0x192>
 8006d78:	e00f      	b.n	8006d9a <UART_SetConfig+0x1a2>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d80:	e0ad      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d82:	2302      	movs	r3, #2
 8006d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d88:	e0a9      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d8a:	2304      	movs	r3, #4
 8006d8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d90:	e0a5      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d92:	2308      	movs	r3, #8
 8006d94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006d98:	e0a1      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006da0:	e09d      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a4a      	ldr	r2, [pc, #296]	; (8006ed0 <UART_SetConfig+0x2d8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d125      	bne.n	8006df8 <UART_SetConfig+0x200>
 8006dac:	4b45      	ldr	r3, [pc, #276]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006db6:	2bc0      	cmp	r3, #192	; 0xc0
 8006db8:	d016      	beq.n	8006de8 <UART_SetConfig+0x1f0>
 8006dba:	2bc0      	cmp	r3, #192	; 0xc0
 8006dbc:	d818      	bhi.n	8006df0 <UART_SetConfig+0x1f8>
 8006dbe:	2b80      	cmp	r3, #128	; 0x80
 8006dc0:	d00a      	beq.n	8006dd8 <UART_SetConfig+0x1e0>
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	d814      	bhi.n	8006df0 <UART_SetConfig+0x1f8>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d002      	beq.n	8006dd0 <UART_SetConfig+0x1d8>
 8006dca:	2b40      	cmp	r3, #64	; 0x40
 8006dcc:	d008      	beq.n	8006de0 <UART_SetConfig+0x1e8>
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x1f8>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dd6:	e082      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dde:	e07e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006de0:	2304      	movs	r3, #4
 8006de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006de6:	e07a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006de8:	2308      	movs	r3, #8
 8006dea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006dee:	e076      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006df0:	2310      	movs	r3, #16
 8006df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006df6:	e072      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a35      	ldr	r2, [pc, #212]	; (8006ed4 <UART_SetConfig+0x2dc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d12a      	bne.n	8006e58 <UART_SetConfig+0x260>
 8006e02:	4b30      	ldr	r3, [pc, #192]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e10:	d01a      	beq.n	8006e48 <UART_SetConfig+0x250>
 8006e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e16:	d81b      	bhi.n	8006e50 <UART_SetConfig+0x258>
 8006e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e1c:	d00c      	beq.n	8006e38 <UART_SetConfig+0x240>
 8006e1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e22:	d815      	bhi.n	8006e50 <UART_SetConfig+0x258>
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d003      	beq.n	8006e30 <UART_SetConfig+0x238>
 8006e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e2c:	d008      	beq.n	8006e40 <UART_SetConfig+0x248>
 8006e2e:	e00f      	b.n	8006e50 <UART_SetConfig+0x258>
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e36:	e052      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e3e:	e04e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e40:	2304      	movs	r3, #4
 8006e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e46:	e04a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e4e:	e046      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e50:	2310      	movs	r3, #16
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e56:	e042      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a17      	ldr	r2, [pc, #92]	; (8006ebc <UART_SetConfig+0x2c4>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d13a      	bne.n	8006ed8 <UART_SetConfig+0x2e0>
 8006e62:	4b18      	ldr	r3, [pc, #96]	; (8006ec4 <UART_SetConfig+0x2cc>)
 8006e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e70:	d01a      	beq.n	8006ea8 <UART_SetConfig+0x2b0>
 8006e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e76:	d81b      	bhi.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e7c:	d00c      	beq.n	8006e98 <UART_SetConfig+0x2a0>
 8006e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e82:	d815      	bhi.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d003      	beq.n	8006e90 <UART_SetConfig+0x298>
 8006e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e8c:	d008      	beq.n	8006ea0 <UART_SetConfig+0x2a8>
 8006e8e:	e00f      	b.n	8006eb0 <UART_SetConfig+0x2b8>
 8006e90:	2300      	movs	r3, #0
 8006e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e96:	e022      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e9e:	e01e      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ea6:	e01a      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006ea8:	2308      	movs	r3, #8
 8006eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eae:	e016      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006eb0:	2310      	movs	r3, #16
 8006eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eb6:	e012      	b.n	8006ede <UART_SetConfig+0x2e6>
 8006eb8:	efff69f3 	.word	0xefff69f3
 8006ebc:	40008000 	.word	0x40008000
 8006ec0:	40013800 	.word	0x40013800
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	40004400 	.word	0x40004400
 8006ecc:	40004800 	.word	0x40004800
 8006ed0:	40004c00 	.word	0x40004c00
 8006ed4:	40005000 	.word	0x40005000
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a9f      	ldr	r2, [pc, #636]	; (8007160 <UART_SetConfig+0x568>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d17a      	bne.n	8006fde <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d824      	bhi.n	8006f3a <UART_SetConfig+0x342>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <UART_SetConfig+0x300>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f3b 	.word	0x08006f3b
 8006f00:	08006f25 	.word	0x08006f25
 8006f04:	08006f3b 	.word	0x08006f3b
 8006f08:	08006f2b 	.word	0x08006f2b
 8006f0c:	08006f3b 	.word	0x08006f3b
 8006f10:	08006f3b 	.word	0x08006f3b
 8006f14:	08006f3b 	.word	0x08006f3b
 8006f18:	08006f33 	.word	0x08006f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f1c:	f7fd fd9c 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8006f20:	61f8      	str	r0, [r7, #28]
        break;
 8006f22:	e010      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f24:	4b8f      	ldr	r3, [pc, #572]	; (8007164 <UART_SetConfig+0x56c>)
 8006f26:	61fb      	str	r3, [r7, #28]
        break;
 8006f28:	e00d      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f2a:	f7fd fcfd 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8006f2e:	61f8      	str	r0, [r7, #28]
        break;
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	61fb      	str	r3, [r7, #28]
        break;
 8006f38:	e005      	b.n	8006f46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006f44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f46:	69fb      	ldr	r3, [r7, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f000 80fb 	beq.w	8007144 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	4613      	mov	r3, r2
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	4413      	add	r3, r2
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d305      	bcc.n	8006f6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d903      	bls.n	8006f72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f70:	e0e8      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	2200      	movs	r2, #0
 8006f76:	461c      	mov	r4, r3
 8006f78:	4615      	mov	r5, r2
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	022b      	lsls	r3, r5, #8
 8006f84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006f88:	0222      	lsls	r2, r4, #8
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	6849      	ldr	r1, [r1, #4]
 8006f8e:	0849      	lsrs	r1, r1, #1
 8006f90:	2000      	movs	r0, #0
 8006f92:	4688      	mov	r8, r1
 8006f94:	4681      	mov	r9, r0
 8006f96:	eb12 0a08 	adds.w	sl, r2, r8
 8006f9a:	eb43 0b09 	adc.w	fp, r3, r9
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	607a      	str	r2, [r7, #4]
 8006fa8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fac:	4650      	mov	r0, sl
 8006fae:	4659      	mov	r1, fp
 8006fb0:	f7f9 fb4a 	bl	8000648 <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4613      	mov	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fc2:	d308      	bcc.n	8006fd6 <UART_SetConfig+0x3de>
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fca:	d204      	bcs.n	8006fd6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	69ba      	ldr	r2, [r7, #24]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e0b6      	b.n	8007144 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fdc:	e0b2      	b.n	8007144 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d15e      	bne.n	80070a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fec:	2b08      	cmp	r3, #8
 8006fee:	d828      	bhi.n	8007042 <UART_SetConfig+0x44a>
 8006ff0:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <UART_SetConfig+0x400>)
 8006ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff6:	bf00      	nop
 8006ff8:	0800701d 	.word	0x0800701d
 8006ffc:	08007025 	.word	0x08007025
 8007000:	0800702d 	.word	0x0800702d
 8007004:	08007043 	.word	0x08007043
 8007008:	08007033 	.word	0x08007033
 800700c:	08007043 	.word	0x08007043
 8007010:	08007043 	.word	0x08007043
 8007014:	08007043 	.word	0x08007043
 8007018:	0800703b 	.word	0x0800703b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fd fd1c 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 8007020:	61f8      	str	r0, [r7, #28]
        break;
 8007022:	e014      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007024:	f7fd fd2e 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 8007028:	61f8      	str	r0, [r7, #28]
        break;
 800702a:	e010      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800702c:	4b4d      	ldr	r3, [pc, #308]	; (8007164 <UART_SetConfig+0x56c>)
 800702e:	61fb      	str	r3, [r7, #28]
        break;
 8007030:	e00d      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007032:	f7fd fc79 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 8007036:	61f8      	str	r0, [r7, #28]
        break;
 8007038:	e009      	b.n	800704e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800703e:	61fb      	str	r3, [r7, #28]
        break;
 8007040:	e005      	b.n	800704e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800704c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d077      	beq.n	8007144 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	005a      	lsls	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	441a      	add	r2, r3
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	2b0f      	cmp	r3, #15
 800706e:	d916      	bls.n	800709e <UART_SetConfig+0x4a6>
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007076:	d212      	bcs.n	800709e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f023 030f 	bic.w	r3, r3, #15
 8007080:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	b29b      	uxth	r3, r3
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	b29a      	uxth	r2, r3
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	4313      	orrs	r3, r2
 8007092:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	8afa      	ldrh	r2, [r7, #22]
 800709a:	60da      	str	r2, [r3, #12]
 800709c:	e052      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80070a4:	e04e      	b.n	8007144 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d827      	bhi.n	80070fe <UART_SetConfig+0x506>
 80070ae:	a201      	add	r2, pc, #4	; (adr r2, 80070b4 <UART_SetConfig+0x4bc>)
 80070b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b4:	080070d9 	.word	0x080070d9
 80070b8:	080070e1 	.word	0x080070e1
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070ff 	.word	0x080070ff
 80070c4:	080070ef 	.word	0x080070ef
 80070c8:	080070ff 	.word	0x080070ff
 80070cc:	080070ff 	.word	0x080070ff
 80070d0:	080070ff 	.word	0x080070ff
 80070d4:	080070f7 	.word	0x080070f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070d8:	f7fd fcbe 	bl	8004a58 <HAL_RCC_GetPCLK1Freq>
 80070dc:	61f8      	str	r0, [r7, #28]
        break;
 80070de:	e014      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070e0:	f7fd fcd0 	bl	8004a84 <HAL_RCC_GetPCLK2Freq>
 80070e4:	61f8      	str	r0, [r7, #28]
        break;
 80070e6:	e010      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070e8:	4b1e      	ldr	r3, [pc, #120]	; (8007164 <UART_SetConfig+0x56c>)
 80070ea:	61fb      	str	r3, [r7, #28]
        break;
 80070ec:	e00d      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070ee:	f7fd fc1b 	bl	8004928 <HAL_RCC_GetSysClockFreq>
 80070f2:	61f8      	str	r0, [r7, #28]
        break;
 80070f4:	e009      	b.n	800710a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070fa:	61fb      	str	r3, [r7, #28]
        break;
 80070fc:	e005      	b.n	800710a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007108:	bf00      	nop
    }

    if (pclk != 0U)
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d019      	beq.n	8007144 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	085a      	lsrs	r2, r3, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	441a      	add	r2, r3
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007122:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2b0f      	cmp	r3, #15
 8007128:	d909      	bls.n	800713e <UART_SetConfig+0x546>
 800712a:	69bb      	ldr	r3, [r7, #24]
 800712c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007130:	d205      	bcs.n	800713e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	b29a      	uxth	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
 800713c:	e002      	b.n	8007144 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007150:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007154:	4618      	mov	r0, r3
 8007156:	3728      	adds	r7, #40	; 0x28
 8007158:	46bd      	mov	sp, r7
 800715a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800715e:	bf00      	nop
 8007160:	40008000 	.word	0x40008000
 8007164:	00f42400 	.word	0x00f42400

08007168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00a      	beq.n	8007192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007196:	f003 0302 	and.w	r3, r3, #2
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00a      	beq.n	80071d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00a      	beq.n	80071f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071fc:	f003 0310 	and.w	r3, r3, #16
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00a      	beq.n	800721a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	f003 0320 	and.w	r3, r3, #32
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	430a      	orrs	r2, r1
 800723a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b00      	cmp	r3, #0
 8007246:	d01a      	beq.n	800727e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007266:	d10a      	bne.n	800727e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	430a      	orrs	r2, r1
 800729e:	605a      	str	r2, [r3, #4]
  }
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af02      	add	r7, sp, #8
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072bc:	f7fb f82e 	bl	800231c <HAL_GetTick>
 80072c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0308 	and.w	r3, r3, #8
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d10e      	bne.n	80072ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80072d4:	9300      	str	r3, [sp, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f82d 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e023      	b.n	8007336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d10e      	bne.n	800731a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007300:	9300      	str	r3, [sp, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f817 	bl	800733e <UART_WaitOnFlagUntilTimeout>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e00d      	b.n	8007336 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2220      	movs	r2, #32
 8007324:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b09c      	sub	sp, #112	; 0x70
 8007342:	af00      	add	r7, sp, #0
 8007344:	60f8      	str	r0, [r7, #12]
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	4613      	mov	r3, r2
 800734c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800734e:	e0a5      	b.n	800749c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007350:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007356:	f000 80a1 	beq.w	800749c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800735a:	f7fa ffdf 	bl	800231c <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007366:	429a      	cmp	r2, r3
 8007368:	d302      	bcc.n	8007370 <UART_WaitOnFlagUntilTimeout+0x32>
 800736a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800736c:	2b00      	cmp	r3, #0
 800736e:	d13e      	bne.n	80073ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	e853 3f00 	ldrex	r3, [r3]
 800737c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007380:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007384:	667b      	str	r3, [r7, #100]	; 0x64
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800738e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007390:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007392:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007394:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007396:	e841 2300 	strex	r3, r2, [r1]
 800739a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800739c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1e6      	bne.n	8007370 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	3308      	adds	r3, #8
 80073a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	663b      	str	r3, [r7, #96]	; 0x60
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3308      	adds	r3, #8
 80073c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80073c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80073c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80073d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e5      	bne.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2220      	movs	r2, #32
 80073da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e067      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d04f      	beq.n	800749c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800740a:	d147      	bne.n	800749c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007414:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800742a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
 8007436:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800743a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e6      	bne.n	8007416 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007468:	623a      	str	r2, [r7, #32]
 800746a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	69f9      	ldr	r1, [r7, #28]
 800746e:	6a3a      	ldr	r2, [r7, #32]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	61bb      	str	r3, [r7, #24]
   return(result);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2220      	movs	r2, #32
 8007486:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007498:	2303      	movs	r3, #3
 800749a:	e010      	b.n	80074be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	69da      	ldr	r2, [r3, #28]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	4013      	ands	r3, r2
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	bf0c      	ite	eq
 80074ac:	2301      	moveq	r3, #1
 80074ae:	2300      	movne	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	461a      	mov	r2, r3
 80074b4:	79fb      	ldrb	r3, [r7, #7]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	f43f af4a 	beq.w	8007350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3770      	adds	r7, #112	; 0x70
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b097      	sub	sp, #92	; 0x5c
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	88fa      	ldrh	r2, [r7, #6]
 80074e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	88fa      	ldrh	r2, [r7, #6]
 80074e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074fa:	d10e      	bne.n	800751a <UART_Start_Receive_IT+0x52>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <UART_Start_Receive_IT+0x48>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f240 12ff 	movw	r2, #511	; 0x1ff
 800750a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800750e:	e02d      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	22ff      	movs	r2, #255	; 0xff
 8007514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007518:	e028      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d10d      	bne.n	800753e <UART_Start_Receive_IT+0x76>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d104      	bne.n	8007534 <UART_Start_Receive_IT+0x6c>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	22ff      	movs	r2, #255	; 0xff
 800752e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007532:	e01b      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	227f      	movs	r2, #127	; 0x7f
 8007538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800753c:	e016      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007546:	d10d      	bne.n	8007564 <UART_Start_Receive_IT+0x9c>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <UART_Start_Receive_IT+0x92>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	227f      	movs	r2, #127	; 0x7f
 8007554:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007558:	e008      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	223f      	movs	r2, #63	; 0x3f
 800755e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007562:	e003      	b.n	800756c <UART_Start_Receive_IT+0xa4>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2222      	movs	r2, #34	; 0x22
 8007578:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3308      	adds	r3, #8
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007584:	e853 3f00 	ldrex	r3, [r3]
 8007588:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f043 0301 	orr.w	r3, r3, #1
 8007590:	657b      	str	r3, [r7, #84]	; 0x54
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3308      	adds	r3, #8
 8007598:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800759a:	64ba      	str	r2, [r7, #72]	; 0x48
 800759c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80075a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075a2:	e841 2300 	strex	r3, r2, [r1]
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1e5      	bne.n	800757a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075b6:	d107      	bne.n	80075c8 <UART_Start_Receive_IT+0x100>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4a24      	ldr	r2, [pc, #144]	; (8007654 <UART_Start_Receive_IT+0x18c>)
 80075c4:	665a      	str	r2, [r3, #100]	; 0x64
 80075c6:	e002      	b.n	80075ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a23      	ldr	r2, [pc, #140]	; (8007658 <UART_Start_Receive_IT+0x190>)
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d019      	beq.n	8007612 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80075f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	637b      	str	r3, [r7, #52]	; 0x34
 80075fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007602:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800760a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_Start_Receive_IT+0x116>
 8007610:	e018      	b.n	8007644 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	613b      	str	r3, [r7, #16]
   return(result);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f043 0320 	orr.w	r3, r3, #32
 8007626:	653b      	str	r3, [r7, #80]	; 0x50
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	61bb      	str	r3, [r7, #24]
   return(result);
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	375c      	adds	r7, #92	; 0x5c
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	08007903 	.word	0x08007903
 8007658:	080077a3 	.word	0x080077a3

0800765c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800765c:	b480      	push	{r7}
 800765e:	b095      	sub	sp, #84	; 0x54
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766c:	e853 3f00 	ldrex	r3, [r3]
 8007670:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007678:	64fb      	str	r3, [r7, #76]	; 0x4c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	461a      	mov	r2, r3
 8007680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007682:	643b      	str	r3, [r7, #64]	; 0x40
 8007684:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800768a:	e841 2300 	strex	r3, r2, [r1]
 800768e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1e6      	bne.n	8007664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	3308      	adds	r3, #8
 800769c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	f023 0301 	bic.w	r3, r3, #1
 80076ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80076b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076be:	e841 2300 	strex	r3, r2, [r1]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1e5      	bne.n	8007696 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d118      	bne.n	8007704 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f023 0310 	bic.w	r3, r3, #16
 80076e6:	647b      	str	r3, [r7, #68]	; 0x44
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	69ba      	ldr	r2, [r7, #24]
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	613b      	str	r3, [r7, #16]
   return(result);
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e6      	bne.n	80076d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2220      	movs	r2, #32
 8007708:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007716:	bf00      	nop
 8007718:	3754      	adds	r7, #84	; 0x54
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr

08007722 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2200      	movs	r2, #0
 800773c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff fa43 	bl	8006bcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b088      	sub	sp, #32
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	60bb      	str	r3, [r7, #8]
   return(result);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800776a:	61fb      	str	r3, [r7, #28]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6979      	ldr	r1, [r7, #20]
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	613b      	str	r3, [r7, #16]
   return(result);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f7ff fa0f 	bl	8006bb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800779a:	bf00      	nop
 800779c:	3720      	adds	r7, #32
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b096      	sub	sp, #88	; 0x58
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077b0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b8:	2b22      	cmp	r3, #34	; 0x22
 80077ba:	f040 8094 	bne.w	80078e6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077c4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077c8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80077cc:	b2d9      	uxtb	r1, r3
 80077ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	400a      	ands	r2, r1
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007800:	b29b      	uxth	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d179      	bne.n	80078fa <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	e853 3f00 	ldrex	r3, [r3]
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007816:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781a:	653b      	str	r3, [r7, #80]	; 0x50
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	461a      	mov	r2, r3
 8007822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007824:	647b      	str	r3, [r7, #68]	; 0x44
 8007826:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007828:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800782a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800782c:	e841 2300 	strex	r3, r2, [r1]
 8007830:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1e6      	bne.n	8007806 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3308      	adds	r3, #8
 800783e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	623b      	str	r3, [r7, #32]
   return(result);
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	f023 0301 	bic.w	r3, r3, #1
 800784e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007858:	633a      	str	r2, [r7, #48]	; 0x30
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800785e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800787c:	2b01      	cmp	r3, #1
 800787e:	d12e      	bne.n	80078de <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	60fb      	str	r3, [r7, #12]
   return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	64bb      	str	r3, [r7, #72]	; 0x48
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078a4:	61fb      	str	r3, [r7, #28]
 80078a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	69b9      	ldr	r1, [r7, #24]
 80078aa:	69fa      	ldr	r2, [r7, #28]
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	617b      	str	r3, [r7, #20]
   return(result);
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e6      	bne.n	8007886 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0310 	and.w	r3, r3, #16
 80078c2:	2b10      	cmp	r3, #16
 80078c4:	d103      	bne.n	80078ce <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2210      	movs	r2, #16
 80078cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078d4:	4619      	mov	r1, r3
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff f982 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078dc:	e00d      	b.n	80078fa <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7f9 fd14 	bl	800130c <HAL_UART_RxCpltCallback>
}
 80078e4:	e009      	b.n	80078fa <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	8b1b      	ldrh	r3, [r3, #24]
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0208 	orr.w	r2, r2, #8
 80078f6:	b292      	uxth	r2, r2
 80078f8:	831a      	strh	r2, [r3, #24]
}
 80078fa:	bf00      	nop
 80078fc:	3758      	adds	r7, #88	; 0x58
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b096      	sub	sp, #88	; 0x58
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007910:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007918:	2b22      	cmp	r3, #34	; 0x22
 800791a:	f040 8094 	bne.w	8007a46 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007924:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800792c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800792e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007932:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007936:	4013      	ands	r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	1c9a      	adds	r2, r3, #2
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794e:	b29b      	uxth	r3, r3
 8007950:	3b01      	subs	r3, #1
 8007952:	b29a      	uxth	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007960:	b29b      	uxth	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d179      	bne.n	8007a5a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007984:	643b      	str	r3, [r7, #64]	; 0x40
 8007986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800798a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e5      	bne.n	8007998 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d12e      	bne.n	8007a3e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	e853 3f00 	ldrex	r3, [r3]
 80079f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	f023 0310 	bic.w	r3, r3, #16
 80079fa:	647b      	str	r3, [r7, #68]	; 0x44
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	461a      	mov	r2, r3
 8007a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6979      	ldr	r1, [r7, #20]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e6      	bne.n	80079e6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0310 	and.w	r3, r3, #16
 8007a22:	2b10      	cmp	r3, #16
 8007a24:	d103      	bne.n	8007a2e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff f8d2 	bl	8006be0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a3c:	e00d      	b.n	8007a5a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7f9 fc64 	bl	800130c <HAL_UART_RxCpltCallback>
}
 8007a44:	e009      	b.n	8007a5a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	8b1b      	ldrh	r3, [r3, #24]
 8007a4c:	b29a      	uxth	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0208 	orr.w	r2, r2, #8
 8007a56:	b292      	uxth	r2, r2
 8007a58:	831a      	strh	r2, [r3, #24]
}
 8007a5a:	bf00      	nop
 8007a5c:	3758      	adds	r7, #88	; 0x58
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a76:	b084      	sub	sp, #16
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	f107 001c 	add.w	r0, r7, #28
 8007a84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fa6f 	bl	8007f78 <USB_CoreReset>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d106      	bne.n	8007ab2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	639a      	str	r2, [r3, #56]	; 0x38
 8007ab0:	e005      	b.n	8007abe <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aca:	b004      	add	sp, #16
 8007acc:	4770      	bx	lr

08007ace <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f023 0201 	bic.w	r2, r3, #1
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b0c:	78fb      	ldrb	r3, [r7, #3]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d115      	bne.n	8007b3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b1e:	2001      	movs	r0, #1
 8007b20:	f7fa fc08 	bl	8002334 <HAL_Delay>
      ms++;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	3301      	adds	r3, #1
 8007b28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa16 	bl	8007f5c <USB_GetMode>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d01e      	beq.n	8007b74 <USB_SetCurrentMode+0x84>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b31      	cmp	r3, #49	; 0x31
 8007b3a:	d9f0      	bls.n	8007b1e <USB_SetCurrentMode+0x2e>
 8007b3c:	e01a      	b.n	8007b74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b3e:	78fb      	ldrb	r3, [r7, #3]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d115      	bne.n	8007b70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007b50:	2001      	movs	r0, #1
 8007b52:	f7fa fbef 	bl	8002334 <HAL_Delay>
      ms++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9fd 	bl	8007f5c <USB_GetMode>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <USB_SetCurrentMode+0x84>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2b31      	cmp	r3, #49	; 0x31
 8007b6c:	d9f0      	bls.n	8007b50 <USB_SetCurrentMode+0x60>
 8007b6e:	e001      	b.n	8007b74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e005      	b.n	8007b80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2b32      	cmp	r3, #50	; 0x32
 8007b78:	d101      	bne.n	8007b7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e000      	b.n	8007b80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b88:	b084      	sub	sp, #16
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b086      	sub	sp, #24
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	e009      	b.n	8007bbc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3340      	adds	r3, #64	; 0x40
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	613b      	str	r3, [r7, #16]
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	2b0e      	cmp	r3, #14
 8007bc0:	d9f2      	bls.n	8007ba8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007bc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11c      	bne.n	8007c02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bd6:	f043 0302 	orr.w	r3, r3, #2
 8007bda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e005      	b.n	8007c0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c14:	461a      	mov	r2, r3
 8007c16:	2300      	movs	r3, #0
 8007c18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c20:	4619      	mov	r1, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c28:	461a      	mov	r2, r3
 8007c2a:	680b      	ldr	r3, [r1, #0]
 8007c2c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007c2e:	2103      	movs	r1, #3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 f959 	bl	8007ee8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007c36:	2110      	movs	r1, #16
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8f1 	bl	8007e20 <USB_FlushTxFifo>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8007c44:	2301      	movs	r3, #1
 8007c46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f91d 	bl	8007e88 <USB_FlushRxFifo>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8007c54:	2301      	movs	r3, #1
 8007c56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c5e:	461a      	mov	r2, r3
 8007c60:	2300      	movs	r3, #0
 8007c62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	461a      	mov	r2, r3
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	613b      	str	r3, [r7, #16]
 8007c80:	e043      	b.n	8007d0a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c98:	d118      	bne.n	8007ccc <USB_DevInit+0x144>
    {
      if (i == 0U)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d10a      	bne.n	8007cb6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	461a      	mov	r2, r3
 8007cae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	e013      	b.n	8007cde <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	e008      	b.n	8007cde <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	015a      	lsls	r2, r3, #5
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd8:	461a      	mov	r2, r3
 8007cda:	2300      	movs	r3, #0
 8007cdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cea:	461a      	mov	r2, r3
 8007cec:	2300      	movs	r3, #0
 8007cee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	3301      	adds	r3, #1
 8007d08:	613b      	str	r3, [r7, #16]
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d3b7      	bcc.n	8007c82 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	613b      	str	r3, [r7, #16]
 8007d16:	e043      	b.n	8007da0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d2e:	d118      	bne.n	8007d62 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	015a      	lsls	r2, r3, #5
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d42:	461a      	mov	r2, r3
 8007d44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e013      	b.n	8007d74 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d58:	461a      	mov	r2, r3
 8007d5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e008      	b.n	8007d74 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d6e:	461a      	mov	r2, r3
 8007d70:	2300      	movs	r3, #0
 8007d72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d80:	461a      	mov	r2, r3
 8007d82:	2300      	movs	r3, #0
 8007d84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d92:	461a      	mov	r2, r3
 8007d94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007d98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d3b7      	bcc.n	8007d18 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	691b      	ldr	r3, [r3, #16]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007db6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007dc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	699b      	ldr	r3, [r3, #24]
 8007dce:	f043 0210 	orr.w	r2, r3, #16
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	4b10      	ldr	r3, [pc, #64]	; (8007e1c <USB_DevInit+0x294>)
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	f043 0208 	orr.w	r2, r3, #8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d107      	bne.n	8007e0a <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e02:	f043 0304 	orr.w	r3, r3, #4
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e16:	b004      	add	sp, #16
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	803c3800 	.word	0x803c3800

08007e20 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	3301      	adds	r3, #1
 8007e32:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4a13      	ldr	r2, [pc, #76]	; (8007e84 <USB_FlushTxFifo+0x64>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d901      	bls.n	8007e40 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e01b      	b.n	8007e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	daf2      	bge.n	8007e2e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	019b      	lsls	r3, r3, #6
 8007e50:	f043 0220 	orr.w	r2, r3, #32
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <USB_FlushTxFifo+0x64>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d901      	bls.n	8007e6a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e006      	b.n	8007e78 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d0f0      	beq.n	8007e58 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr
 8007e84:	00030d40 	.word	0x00030d40

08007e88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	3301      	adds	r3, #1
 8007e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	4a11      	ldr	r2, [pc, #68]	; (8007ee4 <USB_FlushRxFifo+0x5c>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d901      	bls.n	8007ea6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e018      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	daf2      	bge.n	8007e94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2210      	movs	r2, #16
 8007eb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4a08      	ldr	r2, [pc, #32]	; (8007ee4 <USB_FlushRxFifo+0x5c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e006      	b.n	8007ed8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0310 	and.w	r3, r3, #16
 8007ed2:	2b10      	cmp	r3, #16
 8007ed4:	d0f0      	beq.n	8007eb8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	00030d40 	.word	0x00030d40

08007ee8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	78fb      	ldrb	r3, [r7, #3]
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f48:	f043 0302 	orr.w	r3, r3, #2
 8007f4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	f003 0301 	and.w	r3, r3, #1
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b085      	sub	sp, #20
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <USB_CoreReset+0x64>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d901      	bls.n	8007f96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e01b      	b.n	8007fce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	daf2      	bge.n	8007f84 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	f043 0201 	orr.w	r2, r3, #1
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	4a09      	ldr	r2, [pc, #36]	; (8007fdc <USB_CoreReset+0x64>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d901      	bls.n	8007fc0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e006      	b.n	8007fce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	f003 0301 	and.w	r3, r3, #1
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d0f0      	beq.n	8007fae <USB_CoreReset+0x36>

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	00030d40 	.word	0x00030d40

08007fe0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <I2Cx_MspInit+0xa8>)
 8007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fec:	4a26      	ldr	r2, [pc, #152]	; (8008088 <I2Cx_MspInit+0xa8>)
 8007fee:	f043 0302 	orr.w	r3, r3, #2
 8007ff2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ff4:	4b24      	ldr	r3, [pc, #144]	; (8008088 <I2Cx_MspInit+0xa8>)
 8007ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8008000:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008004:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8008006:	2312      	movs	r3, #18
 8008008:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800800a:	2301      	movs	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800800e:	2303      	movs	r3, #3
 8008010:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008012:	2304      	movs	r3, #4
 8008014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008016:	f107 0314 	add.w	r3, r7, #20
 800801a:	4619      	mov	r1, r3
 800801c:	481b      	ldr	r0, [pc, #108]	; (800808c <I2Cx_MspInit+0xac>)
 800801e:	f7fa fc1b 	bl	8002858 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008022:	f107 0314 	add.w	r3, r7, #20
 8008026:	4619      	mov	r1, r3
 8008028:	4818      	ldr	r0, [pc, #96]	; (800808c <I2Cx_MspInit+0xac>)
 800802a:	f7fa fc15 	bl	8002858 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <I2Cx_MspInit+0xa8>)
 8008030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008032:	4a15      	ldr	r2, [pc, #84]	; (8008088 <I2Cx_MspInit+0xa8>)
 8008034:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008038:	6593      	str	r3, [r2, #88]	; 0x58
 800803a:	4b13      	ldr	r3, [pc, #76]	; (8008088 <I2Cx_MspInit+0xa8>)
 800803c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800803e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8008046:	4b10      	ldr	r3, [pc, #64]	; (8008088 <I2Cx_MspInit+0xa8>)
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	4a0f      	ldr	r2, [pc, #60]	; (8008088 <I2Cx_MspInit+0xa8>)
 800804c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008050:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8008052:	4b0d      	ldr	r3, [pc, #52]	; (8008088 <I2Cx_MspInit+0xa8>)
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <I2Cx_MspInit+0xa8>)
 8008058:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800805c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800805e:	2200      	movs	r2, #0
 8008060:	210f      	movs	r1, #15
 8008062:	2021      	movs	r0, #33	; 0x21
 8008064:	f7fa fa42 	bl	80024ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8008068:	2021      	movs	r0, #33	; 0x21
 800806a:	f7fa fa5b 	bl	8002524 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800806e:	2200      	movs	r2, #0
 8008070:	210f      	movs	r1, #15
 8008072:	2022      	movs	r0, #34	; 0x22
 8008074:	f7fa fa3a 	bl	80024ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8008078:	2022      	movs	r0, #34	; 0x22
 800807a:	f7fa fa53 	bl	8002524 <HAL_NVIC_EnableIRQ>
}
 800807e:	bf00      	nop
 8008080:	3728      	adds	r7, #40	; 0x28
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40021000 	.word	0x40021000
 800808c:	48000400 	.word	0x48000400

08008090 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4a12      	ldr	r2, [pc, #72]	; (80080e4 <I2Cx_Init+0x54>)
 800809c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a11      	ldr	r2, [pc, #68]	; (80080e8 <I2Cx_Init+0x58>)
 80080a2:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff ff89 	bl	8007fe0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fa fe9b 	bl	8002e0a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fb fc2a 	bl	8003930 <HAL_I2CEx_ConfigAnalogFilter>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40005800 	.word	0x40005800
 80080e8:	00702681 	.word	0x00702681

080080ec <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	4608      	mov	r0, r1
 80080f6:	4611      	mov	r1, r2
 80080f8:	461a      	mov	r2, r3
 80080fa:	4603      	mov	r3, r0
 80080fc:	72fb      	strb	r3, [r7, #11]
 80080fe:	460b      	mov	r3, r1
 8008100:	813b      	strh	r3, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008106:	2300      	movs	r3, #0
 8008108:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800810a:	7afb      	ldrb	r3, [r7, #11]
 800810c:	b299      	uxth	r1, r3
 800810e:	88f8      	ldrh	r0, [r7, #6]
 8008110:	893a      	ldrh	r2, [r7, #8]
 8008112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800811a:	9301      	str	r3, [sp, #4]
 800811c:	6a3b      	ldr	r3, [r7, #32]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4603      	mov	r3, r0
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f7fb f844 	bl	80031b0 <HAL_I2C_Mem_Read>
 8008128:	4603      	mov	r3, r0
 800812a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800812c:	7dfb      	ldrb	r3, [r7, #23]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d004      	beq.n	800813c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8008132:	7afb      	ldrb	r3, [r7, #11]
 8008134:	4619      	mov	r1, r3
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f832 	bl	80081a0 <I2Cx_Error>
  }
  return status;
 800813c:	7dfb      	ldrb	r3, [r7, #23]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8008146:	b580      	push	{r7, lr}
 8008148:	b08a      	sub	sp, #40	; 0x28
 800814a:	af04      	add	r7, sp, #16
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	4608      	mov	r0, r1
 8008150:	4611      	mov	r1, r2
 8008152:	461a      	mov	r2, r3
 8008154:	4603      	mov	r3, r0
 8008156:	72fb      	strb	r3, [r7, #11]
 8008158:	460b      	mov	r3, r1
 800815a:	813b      	strh	r3, [r7, #8]
 800815c:	4613      	mov	r3, r2
 800815e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008164:	7afb      	ldrb	r3, [r7, #11]
 8008166:	b299      	uxth	r1, r3
 8008168:	88f8      	ldrh	r0, [r7, #6]
 800816a:	893a      	ldrh	r2, [r7, #8]
 800816c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008170:	9302      	str	r3, [sp, #8]
 8008172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	4603      	mov	r3, r0
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f7fa ff03 	bl	8002f88 <HAL_I2C_Mem_Write>
 8008182:	4603      	mov	r3, r0
 8008184:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008186:	7dfb      	ldrb	r3, [r7, #23]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d004      	beq.n	8008196 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800818c:	7afb      	ldrb	r3, [r7, #11]
 800818e:	4619      	mov	r1, r3
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f805 	bl	80081a0 <I2Cx_Error>
  }
  return status;
 8008196:	7dfb      	ldrb	r3, [r7, #23]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	460b      	mov	r3, r1
 80081aa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fa febb 	bl	8002f28 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff ff6c 	bl	8008090 <I2Cx_Init>
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80081c4:	4802      	ldr	r0, [pc, #8]	; (80081d0 <SENSOR_IO_Init+0x10>)
 80081c6:	f7ff ff63 	bl	8008090 <I2Cx_Init>
}
 80081ca:	bf00      	nop
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	20000910 	.word	0x20000910

080081d4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af02      	add	r7, sp, #8
 80081da:	4603      	mov	r3, r0
 80081dc:	71fb      	strb	r3, [r7, #7]
 80081de:	460b      	mov	r3, r1
 80081e0:	71bb      	strb	r3, [r7, #6]
 80081e2:	4613      	mov	r3, r2
 80081e4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80081e6:	79bb      	ldrb	r3, [r7, #6]
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	79f9      	ldrb	r1, [r7, #7]
 80081ec:	2301      	movs	r3, #1
 80081ee:	9301      	str	r3, [sp, #4]
 80081f0:	1d7b      	adds	r3, r7, #5
 80081f2:	9300      	str	r3, [sp, #0]
 80081f4:	2301      	movs	r3, #1
 80081f6:	4803      	ldr	r0, [pc, #12]	; (8008204 <SENSOR_IO_Write+0x30>)
 80081f8:	f7ff ffa5 	bl	8008146 <I2Cx_WriteMultiple>
}
 80081fc:	bf00      	nop
 80081fe:	3708      	adds	r7, #8
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}
 8008204:	20000910 	.word	0x20000910

08008208 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b086      	sub	sp, #24
 800820c:	af02      	add	r7, sp, #8
 800820e:	4603      	mov	r3, r0
 8008210:	460a      	mov	r2, r1
 8008212:	71fb      	strb	r3, [r7, #7]
 8008214:	4613      	mov	r3, r2
 8008216:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8008218:	2300      	movs	r3, #0
 800821a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800821c:	79bb      	ldrb	r3, [r7, #6]
 800821e:	b29a      	uxth	r2, r3
 8008220:	79f9      	ldrb	r1, [r7, #7]
 8008222:	2301      	movs	r3, #1
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f107 030f 	add.w	r3, r7, #15
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	2301      	movs	r3, #1
 800822e:	4804      	ldr	r0, [pc, #16]	; (8008240 <SENSOR_IO_Read+0x38>)
 8008230:	f7ff ff5c 	bl	80080ec <I2Cx_ReadMultiple>

  return read_value;
 8008234:	7bfb      	ldrb	r3, [r7, #15]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000910 	.word	0x20000910

08008244 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af02      	add	r7, sp, #8
 800824a:	603a      	str	r2, [r7, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	4603      	mov	r3, r0
 8008250:	71fb      	strb	r3, [r7, #7]
 8008252:	460b      	mov	r3, r1
 8008254:	71bb      	strb	r3, [r7, #6]
 8008256:	4613      	mov	r3, r2
 8008258:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800825a:	79bb      	ldrb	r3, [r7, #6]
 800825c:	b29a      	uxth	r2, r3
 800825e:	79f9      	ldrb	r1, [r7, #7]
 8008260:	88bb      	ldrh	r3, [r7, #4]
 8008262:	9301      	str	r3, [sp, #4]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	2301      	movs	r3, #1
 800826a:	4804      	ldr	r0, [pc, #16]	; (800827c <SENSOR_IO_ReadMultiple+0x38>)
 800826c:	f7ff ff3e 	bl	80080ec <I2Cx_ReadMultiple>
 8008270:	4603      	mov	r3, r0
 8008272:	b29b      	uxth	r3, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20000910 	.word	0x20000910

08008280 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <BSP_TSENSOR_Init+0x30>)
 800828c:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <BSP_TSENSOR_Init+0x34>)
 800828e:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8008290:	f7ff ff96 	bl	80081c0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8008294:	4b06      	ldr	r3, [pc, #24]	; (80082b0 <BSP_TSENSOR_Init+0x30>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2100      	movs	r1, #0
 800829c:	20be      	movs	r0, #190	; 0xbe
 800829e:	4798      	blx	r3

  ret = TSENSOR_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80082a4:	79fb      	ldrb	r3, [r7, #7]
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000964 	.word	0x20000964
 80082b4:	2000000c 	.word	0x2000000c

080082b8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80082bc:	4b04      	ldr	r3, [pc, #16]	; (80082d0 <BSP_TSENSOR_ReadTemp+0x18>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	20be      	movs	r0, #190	; 0xbe
 80082c4:	4798      	blx	r3
 80082c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80082ca:	eeb0 0a67 	vmov.f32	s0, s15
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	20000964 	.word	0x20000964

080082d4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80082e0:	88fb      	ldrh	r3, [r7, #6]
 80082e2:	b2db      	uxtb	r3, r3
 80082e4:	2120      	movs	r1, #32
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff ff8e 	bl	8008208 <SENSOR_IO_Read>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	f023 0304 	bic.w	r3, r3, #4
 80082f6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
 80082fa:	f043 0304 	orr.w	r3, r3, #4
 80082fe:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8008308:	7bfb      	ldrb	r3, [r7, #15]
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008316:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8008318:	88fb      	ldrh	r3, [r7, #6]
 800831a:	b2db      	uxtb	r3, r3
 800831c:	7bfa      	ldrb	r2, [r7, #15]
 800831e:	2120      	movs	r1, #32
 8008320:	4618      	mov	r0, r3
 8008322:	f7ff ff57 	bl	80081d4 <SENSOR_IO_Write>
}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b088      	sub	sp, #32
 8008332:	af00      	add	r7, sp, #0
 8008334:	4603      	mov	r3, r0
 8008336:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8008338:	88fb      	ldrh	r3, [r7, #6]
 800833a:	b2d8      	uxtb	r0, r3
 800833c:	f107 0208 	add.w	r2, r7, #8
 8008340:	2302      	movs	r3, #2
 8008342:	21b2      	movs	r1, #178	; 0xb2
 8008344:	f7ff ff7e 	bl	8008244 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8008348:	88fb      	ldrh	r3, [r7, #6]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2135      	movs	r1, #53	; 0x35
 800834e:	4618      	mov	r0, r3
 8008350:	f7ff ff5a 	bl	8008208 <SENSOR_IO_Read>
 8008354:	4603      	mov	r3, r0
 8008356:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8008358:	7ffb      	ldrb	r3, [r7, #31]
 800835a:	021b      	lsls	r3, r3, #8
 800835c:	b21b      	sxth	r3, r3
 800835e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008362:	b21a      	sxth	r2, r3
 8008364:	7a3b      	ldrb	r3, [r7, #8]
 8008366:	b21b      	sxth	r3, r3
 8008368:	4313      	orrs	r3, r2
 800836a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800836c:	7ffb      	ldrb	r3, [r7, #31]
 800836e:	019b      	lsls	r3, r3, #6
 8008370:	b21b      	sxth	r3, r3
 8008372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008376:	b21a      	sxth	r2, r3
 8008378:	7a7b      	ldrb	r3, [r7, #9]
 800837a:	b21b      	sxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8008380:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008384:	10db      	asrs	r3, r3, #3
 8008386:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8008388:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800838c:	10db      	asrs	r3, r3, #3
 800838e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8008390:	88fb      	ldrh	r3, [r7, #6]
 8008392:	b2d8      	uxtb	r0, r3
 8008394:	f107 0208 	add.w	r2, r7, #8
 8008398:	2304      	movs	r3, #4
 800839a:	21bc      	movs	r1, #188	; 0xbc
 800839c:	f7ff ff52 	bl	8008244 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80083a0:	7a7b      	ldrb	r3, [r7, #9]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	b21a      	sxth	r2, r3
 80083a6:	7a3b      	ldrb	r3, [r7, #8]
 80083a8:	b21b      	sxth	r3, r3
 80083aa:	4313      	orrs	r3, r2
 80083ac:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80083ae:	7afb      	ldrb	r3, [r7, #11]
 80083b0:	021b      	lsls	r3, r3, #8
 80083b2:	b21a      	sxth	r2, r3
 80083b4:	7abb      	ldrb	r3, [r7, #10]
 80083b6:	b21b      	sxth	r3, r3
 80083b8:	4313      	orrs	r3, r2
 80083ba:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80083bc:	88fb      	ldrh	r3, [r7, #6]
 80083be:	b2d8      	uxtb	r0, r3
 80083c0:	f107 0208 	add.w	r2, r7, #8
 80083c4:	2302      	movs	r3, #2
 80083c6:	21aa      	movs	r1, #170	; 0xaa
 80083c8:	f7ff ff3c 	bl	8008244 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80083cc:	7a7b      	ldrb	r3, [r7, #9]
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	b21a      	sxth	r2, r3
 80083d2:	7a3b      	ldrb	r3, [r7, #8]
 80083d4:	b21b      	sxth	r3, r3
 80083d6:	4313      	orrs	r3, r2
 80083d8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80083da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80083de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80083e2:	1ad3      	subs	r3, r2, r3
 80083e4:	ee07 3a90 	vmov	s15, r3
 80083e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80083f0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80083fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008402:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8008406:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	ee07 3a90 	vmov	s15, r3
 8008410:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008414:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008418:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800841c:	ee07 3a90 	vmov	s15, r3
 8008420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008428:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	ee07 3a90 	vmov	s15, r3
}
 8008432:	eeb0 0a67 	vmov.f32	s0, s15
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <__NVIC_SetPriority>:
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	6039      	str	r1, [r7, #0]
 8008446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800844c:	2b00      	cmp	r3, #0
 800844e:	db0a      	blt.n	8008466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	b2da      	uxtb	r2, r3
 8008454:	490c      	ldr	r1, [pc, #48]	; (8008488 <__NVIC_SetPriority+0x4c>)
 8008456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800845a:	0112      	lsls	r2, r2, #4
 800845c:	b2d2      	uxtb	r2, r2
 800845e:	440b      	add	r3, r1
 8008460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008464:	e00a      	b.n	800847c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4908      	ldr	r1, [pc, #32]	; (800848c <__NVIC_SetPriority+0x50>)
 800846c:	79fb      	ldrb	r3, [r7, #7]
 800846e:	f003 030f 	and.w	r3, r3, #15
 8008472:	3b04      	subs	r3, #4
 8008474:	0112      	lsls	r2, r2, #4
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	440b      	add	r3, r1
 800847a:	761a      	strb	r2, [r3, #24]
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	e000e100 	.word	0xe000e100
 800848c:	e000ed00 	.word	0xe000ed00

08008490 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <SysTick_Handler+0x1c>)
 8008496:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008498:	f002 f804 	bl	800a4a4 <xTaskGetSchedulerState>
 800849c:	4603      	mov	r3, r0
 800849e:	2b01      	cmp	r3, #1
 80084a0:	d001      	beq.n	80084a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80084a2:	f002 fff1 	bl	800b488 <xPortSysTickHandler>
  }
}
 80084a6:	bf00      	nop
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	e000e010 	.word	0xe000e010

080084b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80084b4:	2100      	movs	r1, #0
 80084b6:	f06f 0004 	mvn.w	r0, #4
 80084ba:	f7ff ffbf 	bl	800843c <__NVIC_SetPriority>
#endif
}
 80084be:	bf00      	nop
 80084c0:	bd80      	pop	{r7, pc}
	...

080084c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084ca:	f3ef 8305 	mrs	r3, IPSR
 80084ce:	603b      	str	r3, [r7, #0]
  return(result);
 80084d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80084d6:	f06f 0305 	mvn.w	r3, #5
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	e00c      	b.n	80084f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80084de:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <osKernelInitialize+0x44>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d105      	bne.n	80084f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80084e6:	4b08      	ldr	r3, [pc, #32]	; (8008508 <osKernelInitialize+0x44>)
 80084e8:	2201      	movs	r2, #1
 80084ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	607b      	str	r3, [r7, #4]
 80084f0:	e002      	b.n	80084f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80084f2:	f04f 33ff 	mov.w	r3, #4294967295
 80084f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80084f8:	687b      	ldr	r3, [r7, #4]
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	370c      	adds	r7, #12
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20000968 	.word	0x20000968

0800850c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008512:	f3ef 8305 	mrs	r3, IPSR
 8008516:	603b      	str	r3, [r7, #0]
  return(result);
 8008518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <osKernelStart+0x1a>
    stat = osErrorISR;
 800851e:	f06f 0305 	mvn.w	r3, #5
 8008522:	607b      	str	r3, [r7, #4]
 8008524:	e010      	b.n	8008548 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008526:	4b0b      	ldr	r3, [pc, #44]	; (8008554 <osKernelStart+0x48>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d109      	bne.n	8008542 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800852e:	f7ff ffbf 	bl	80084b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008532:	4b08      	ldr	r3, [pc, #32]	; (8008554 <osKernelStart+0x48>)
 8008534:	2202      	movs	r2, #2
 8008536:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008538:	f001 fb3a 	bl	8009bb0 <vTaskStartScheduler>
      stat = osOK;
 800853c:	2300      	movs	r3, #0
 800853e:	607b      	str	r3, [r7, #4]
 8008540:	e002      	b.n	8008548 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008542:	f04f 33ff 	mov.w	r3, #4294967295
 8008546:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008548:	687b      	ldr	r3, [r7, #4]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000968 	.word	0x20000968

08008558 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008558:	b580      	push	{r7, lr}
 800855a:	b08e      	sub	sp, #56	; 0x38
 800855c:	af04      	add	r7, sp, #16
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008568:	f3ef 8305 	mrs	r3, IPSR
 800856c:	617b      	str	r3, [r7, #20]
  return(result);
 800856e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008570:	2b00      	cmp	r3, #0
 8008572:	d17e      	bne.n	8008672 <osThreadNew+0x11a>
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d07b      	beq.n	8008672 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800857a:	2380      	movs	r3, #128	; 0x80
 800857c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800857e:	2318      	movs	r3, #24
 8008580:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008582:	2300      	movs	r3, #0
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d045      	beq.n	800861e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <osThreadNew+0x48>
        name = attr->name;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d008      	beq.n	80085c6 <osThreadNew+0x6e>
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	2b38      	cmp	r3, #56	; 0x38
 80085b8:	d805      	bhi.n	80085c6 <osThreadNew+0x6e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <osThreadNew+0x72>
        return (NULL);
 80085c6:	2300      	movs	r3, #0
 80085c8:	e054      	b.n	8008674 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	089b      	lsrs	r3, r3, #2
 80085d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00e      	beq.n	8008600 <osThreadNew+0xa8>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	2bbf      	cmp	r3, #191	; 0xbf
 80085e8:	d90a      	bls.n	8008600 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d006      	beq.n	8008600 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <osThreadNew+0xa8>
        mem = 1;
 80085fa:	2301      	movs	r3, #1
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	e010      	b.n	8008622 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d10c      	bne.n	8008622 <osThreadNew+0xca>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d108      	bne.n	8008622 <osThreadNew+0xca>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <osThreadNew+0xca>
          mem = 0;
 8008618:	2300      	movs	r3, #0
 800861a:	61bb      	str	r3, [r7, #24]
 800861c:	e001      	b.n	8008622 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800861e:	2300      	movs	r3, #0
 8008620:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	2b01      	cmp	r3, #1
 8008626:	d110      	bne.n	800864a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008630:	9202      	str	r2, [sp, #8]
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 f8c6 	bl	80097d0 <xTaskCreateStatic>
 8008644:	4603      	mov	r3, r0
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	e013      	b.n	8008672 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d110      	bne.n	8008672 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	b29a      	uxth	r2, r3
 8008654:	f107 0310 	add.w	r3, r7, #16
 8008658:	9301      	str	r3, [sp, #4]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f001 f911 	bl	800988a <xTaskCreate>
 8008668:	4603      	mov	r3, r0
 800866a:	2b01      	cmp	r3, #1
 800866c:	d001      	beq.n	8008672 <osThreadNew+0x11a>
            hTask = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008672:	693b      	ldr	r3, [r7, #16]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3728      	adds	r7, #40	; 0x28
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800867c:	b580      	push	{r7, lr}
 800867e:	b088      	sub	sp, #32
 8008680:	af02      	add	r7, sp, #8
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <osThreadFlagsSet+0x1a>
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	da03      	bge.n	800869e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8008696:	f06f 0303 	mvn.w	r3, #3
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e035      	b.n	800870a <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800869e:	f04f 33ff 	mov.w	r3, #4294967295
 80086a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086a4:	f3ef 8305 	mrs	r3, IPSR
 80086a8:	613b      	str	r3, [r7, #16]
  return(result);
 80086aa:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01f      	beq.n	80086f0 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	2300      	movs	r3, #0
 80086bc:	2201      	movs	r2, #1
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6978      	ldr	r0, [r7, #20]
 80086c2:	f002 f899 	bl	800a7f8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80086c6:	f107 030c 	add.w	r3, r7, #12
 80086ca:	2200      	movs	r2, #0
 80086cc:	9200      	str	r2, [sp, #0]
 80086ce:	2200      	movs	r2, #0
 80086d0:	2100      	movs	r1, #0
 80086d2:	6978      	ldr	r0, [r7, #20]
 80086d4:	f002 f890 	bl	800a7f8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d015      	beq.n	800870a <osThreadFlagsSet+0x8e>
 80086de:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <osThreadFlagsSet+0x98>)
 80086e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e4:	601a      	str	r2, [r3, #0]
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	f3bf 8f6f 	isb	sy
 80086ee:	e00c      	b.n	800870a <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 80086f0:	2300      	movs	r3, #0
 80086f2:	2201      	movs	r2, #1
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6978      	ldr	r0, [r7, #20]
 80086f8:	f001 ffc0 	bl	800a67c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 80086fc:	f107 030c 	add.w	r3, r7, #12
 8008700:	2200      	movs	r2, #0
 8008702:	2100      	movs	r1, #0
 8008704:	6978      	ldr	r0, [r7, #20]
 8008706:	f001 ffb9 	bl	800a67c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800870a:	68fb      	ldr	r3, [r7, #12]
}
 800870c:	4618      	mov	r0, r3
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	e000ed04 	.word	0xe000ed04

08008718 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008718:	b580      	push	{r7, lr}
 800871a:	b08c      	sub	sp, #48	; 0x30
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008724:	f3ef 8305 	mrs	r3, IPSR
 8008728:	617b      	str	r3, [r7, #20]
  return(result);
 800872a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008730:	f06f 0305 	mvn.w	r3, #5
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008736:	e06b      	b.n	8008810 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	da03      	bge.n	8008746 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800873e:	f06f 0303 	mvn.w	r3, #3
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008744:	e064      	b.n	8008810 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <osThreadFlagsWait+0x3e>
      clear = 0U;
 8008750:	2300      	movs	r3, #0
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
 8008754:	e001      	b.n	800875a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8008762:	f001 fb43 	bl	8009dec <xTaskGetTickCount>
 8008766:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8008768:	f107 0210 	add.w	r2, r7, #16
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008770:	2000      	movs	r0, #0
 8008772:	f001 ff23 	bl	800a5bc <xTaskNotifyWait>
 8008776:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8008778:	69fb      	ldr	r3, [r7, #28]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d137      	bne.n	80087ee <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800877e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4013      	ands	r3, r2
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	4313      	orrs	r3, r2
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00c      	beq.n	80087b2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800879c:	4013      	ands	r3, r2
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d032      	beq.n	800880a <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d10f      	bne.n	80087ca <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80087aa:	f06f 0302 	mvn.w	r3, #2
 80087ae:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087b0:	e02e      	b.n	8008810 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b6:	4013      	ands	r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d128      	bne.n	800880e <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80087c2:	f06f 0302 	mvn.w	r3, #2
 80087c6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80087c8:	e022      	b.n	8008810 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80087ca:	f001 fb0f 	bl	8009dec <xTaskGetTickCount>
 80087ce:	4602      	mov	r2, r0
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	429a      	cmp	r2, r3
 80087dc:	d902      	bls.n	80087e4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	627b      	str	r3, [r7, #36]	; 0x24
 80087e2:	e00e      	b.n	8008802 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80087e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
 80087ec:	e009      	b.n	8008802 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d103      	bne.n	80087fc <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80087f4:	f06f 0302 	mvn.w	r3, #2
 80087f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087fa:	e002      	b.n	8008802 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80087fc:	f06f 0301 	mvn.w	r3, #1
 8008800:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1af      	bne.n	8008768 <osThreadFlagsWait+0x50>
 8008808:	e002      	b.n	8008810 <osThreadFlagsWait+0xf8>
            break;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <osThreadFlagsWait+0xf8>
            break;
 800880e:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008812:	4618      	mov	r0, r3
 8008814:	3730      	adds	r7, #48	; 0x30
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008822:	f3ef 8305 	mrs	r3, IPSR
 8008826:	60bb      	str	r3, [r7, #8]
  return(result);
 8008828:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <osDelay+0x1c>
    stat = osErrorISR;
 800882e:	f06f 0305 	mvn.w	r3, #5
 8008832:	60fb      	str	r3, [r7, #12]
 8008834:	e007      	b.n	8008846 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008836:	2300      	movs	r3, #0
 8008838:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 f981 	bl	8009b48 <vTaskDelay>
    }
  }

  return (stat);
 8008846:	68fb      	ldr	r3, [r7, #12]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008850:	b580      	push	{r7, lr}
 8008852:	b08a      	sub	sp, #40	; 0x28
 8008854:	af02      	add	r7, sp, #8
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800885c:	2300      	movs	r3, #0
 800885e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008860:	f3ef 8305 	mrs	r3, IPSR
 8008864:	613b      	str	r3, [r7, #16]
  return(result);
 8008866:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008868:	2b00      	cmp	r3, #0
 800886a:	d15f      	bne.n	800892c <osMessageQueueNew+0xdc>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d05c      	beq.n	800892c <osMessageQueueNew+0xdc>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d059      	beq.n	800892c <osMessageQueueNew+0xdc>
    mem = -1;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d029      	beq.n	80088d8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d012      	beq.n	80088b2 <osMessageQueueNew+0x62>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b4f      	cmp	r3, #79	; 0x4f
 8008892:	d90e      	bls.n	80088b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00a      	beq.n	80088b2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	695a      	ldr	r2, [r3, #20]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	68b9      	ldr	r1, [r7, #8]
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d302      	bcc.n	80088b2 <osMessageQueueNew+0x62>
        mem = 1;
 80088ac:	2301      	movs	r3, #1
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	e014      	b.n	80088dc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d110      	bne.n	80088dc <osMessageQueueNew+0x8c>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10c      	bne.n	80088dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d108      	bne.n	80088dc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <osMessageQueueNew+0x8c>
          mem = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61bb      	str	r3, [r7, #24]
 80088d6:	e001      	b.n	80088dc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80088d8:	2300      	movs	r3, #0
 80088da:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d10b      	bne.n	80088fa <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2100      	movs	r1, #0
 80088ec:	9100      	str	r1, [sp, #0]
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 fa2f 	bl	8008d54 <xQueueGenericCreateStatic>
 80088f6:	61f8      	str	r0, [r7, #28]
 80088f8:	e008      	b.n	800890c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d105      	bne.n	800890c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008900:	2200      	movs	r2, #0
 8008902:	68b9      	ldr	r1, [r7, #8]
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 fa9d 	bl	8008e44 <xQueueGenericCreate>
 800890a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00c      	beq.n	800892c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	617b      	str	r3, [r7, #20]
 800891e:	e001      	b.n	8008924 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008924:	6979      	ldr	r1, [r7, #20]
 8008926:	69f8      	ldr	r0, [r7, #28]
 8008928:	f000 fef4 	bl	8009714 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800892c:	69fb      	ldr	r3, [r7, #28]
}
 800892e:	4618      	mov	r0, r3
 8008930:	3720      	adds	r7, #32
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800894c:	2300      	movs	r3, #0
 800894e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008950:	f3ef 8305 	mrs	r3, IPSR
 8008954:	617b      	str	r3, [r7, #20]
  return(result);
 8008956:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008958:	2b00      	cmp	r3, #0
 800895a:	d028      	beq.n	80089ae <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d005      	beq.n	800896e <osMessageQueuePut+0x36>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <osMessageQueuePut+0x36>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800896e:	f06f 0303 	mvn.w	r3, #3
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	e038      	b.n	80089e8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800897a:	f107 0210 	add.w	r2, r7, #16
 800897e:	2300      	movs	r3, #0
 8008980:	68b9      	ldr	r1, [r7, #8]
 8008982:	69b8      	ldr	r0, [r7, #24]
 8008984:	f000 fbba 	bl	80090fc <xQueueGenericSendFromISR>
 8008988:	4603      	mov	r3, r0
 800898a:	2b01      	cmp	r3, #1
 800898c:	d003      	beq.n	8008996 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800898e:	f06f 0302 	mvn.w	r3, #2
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	e028      	b.n	80089e8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d025      	beq.n	80089e8 <osMessageQueuePut+0xb0>
 800899c:	4b15      	ldr	r3, [pc, #84]	; (80089f4 <osMessageQueuePut+0xbc>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	e01c      	b.n	80089e8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <osMessageQueuePut+0x82>
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d103      	bne.n	80089c2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80089ba:	f06f 0303 	mvn.w	r3, #3
 80089be:	61fb      	str	r3, [r7, #28]
 80089c0:	e012      	b.n	80089e8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089c2:	2300      	movs	r3, #0
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	68b9      	ldr	r1, [r7, #8]
 80089c8:	69b8      	ldr	r0, [r7, #24]
 80089ca:	f000 fa99 	bl	8008f00 <xQueueGenericSend>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d009      	beq.n	80089e8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80089da:	f06f 0301 	mvn.w	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	e002      	b.n	80089e8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80089e2:	f06f 0302 	mvn.w	r3, #2
 80089e6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089e8:	69fb      	ldr	r3, [r7, #28]
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3720      	adds	r7, #32
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop
 80089f4:	e000ed04 	.word	0xe000ed04

080089f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
 8008a04:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a0e:	f3ef 8305 	mrs	r3, IPSR
 8008a12:	617b      	str	r3, [r7, #20]
  return(result);
 8008a14:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d028      	beq.n	8008a6c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <osMessageQueueGet+0x34>
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d002      	beq.n	8008a2c <osMessageQueueGet+0x34>
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d003      	beq.n	8008a34 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a2c:	f06f 0303 	mvn.w	r3, #3
 8008a30:	61fb      	str	r3, [r7, #28]
 8008a32:	e037      	b.n	8008aa4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a38:	f107 0310 	add.w	r3, r7, #16
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	68b9      	ldr	r1, [r7, #8]
 8008a40:	69b8      	ldr	r0, [r7, #24]
 8008a42:	f000 fcd7 	bl	80093f4 <xQueueReceiveFromISR>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d003      	beq.n	8008a54 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008a4c:	f06f 0302 	mvn.w	r3, #2
 8008a50:	61fb      	str	r3, [r7, #28]
 8008a52:	e027      	b.n	8008aa4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d024      	beq.n	8008aa4 <osMessageQueueGet+0xac>
 8008a5a:	4b15      	ldr	r3, [pc, #84]	; (8008ab0 <osMessageQueueGet+0xb8>)
 8008a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	e01b      	b.n	8008aa4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <osMessageQueueGet+0x80>
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d103      	bne.n	8008a80 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a78:	f06f 0303 	mvn.w	r3, #3
 8008a7c:	61fb      	str	r3, [r7, #28]
 8008a7e:	e011      	b.n	8008aa4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	69b8      	ldr	r0, [r7, #24]
 8008a86:	f000 fbd5 	bl	8009234 <xQueueReceive>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d009      	beq.n	8008aa4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008a96:	f06f 0301 	mvn.w	r3, #1
 8008a9a:	61fb      	str	r3, [r7, #28]
 8008a9c:	e002      	b.n	8008aa4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008a9e:	f06f 0302 	mvn.w	r3, #2
 8008aa2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008aa4:	69fb      	ldr	r3, [r7, #28]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3720      	adds	r7, #32
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	4a07      	ldr	r2, [pc, #28]	; (8008ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	4a06      	ldr	r2, [pc, #24]	; (8008ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8008aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2280      	movs	r2, #128	; 0x80
 8008ad0:	601a      	str	r2, [r3, #0]
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	2000096c 	.word	0x2000096c
 8008ae4:	20000a2c 	.word	0x20000a2c

08008ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8008af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4a06      	ldr	r2, [pc, #24]	; (8008b18 <vApplicationGetTimerTaskMemory+0x30>)
 8008afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b06:	601a      	str	r2, [r3, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3714      	adds	r7, #20
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	20000c2c 	.word	0x20000c2c
 8008b18:	20000cec 	.word	0x20000cec

08008b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f103 0208 	add.w	r2, r3, #8
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f04f 32ff 	mov.w	r2, #4294967295
 8008b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f103 0208 	add.w	r2, r3, #8
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f103 0208 	add.w	r2, r3, #8
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b6a:	bf00      	nop
 8008b6c:	370c      	adds	r7, #12
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
}
 8008bb2:	bf00      	nop
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b085      	sub	sp, #20
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd4:	d103      	bne.n	8008bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e00c      	b.n	8008bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3308      	adds	r3, #8
 8008be2:	60fb      	str	r3, [r7, #12]
 8008be4:	e002      	b.n	8008bec <vListInsert+0x2e>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d2f6      	bcs.n	8008be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	683a      	ldr	r2, [r7, #0]
 8008c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	1c5a      	adds	r2, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	6892      	ldr	r2, [r2, #8]
 8008c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	6852      	ldr	r2, [r2, #4]
 8008c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d103      	bne.n	8008c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689a      	ldr	r2, [r3, #8]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10a      	bne.n	8008cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9c:	f383 8811 	msr	BASEPRI, r3
 8008ca0:	f3bf 8f6f 	isb	sy
 8008ca4:	f3bf 8f4f 	dsb	sy
 8008ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008caa:	bf00      	nop
 8008cac:	e7fe      	b.n	8008cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cae:	f002 fb59 	bl	800b364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	441a      	add	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cde:	3b01      	subs	r3, #1
 8008ce0:	68f9      	ldr	r1, [r7, #12]
 8008ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ce4:	fb01 f303 	mul.w	r3, r1, r3
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	22ff      	movs	r2, #255	; 0xff
 8008cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	22ff      	movs	r2, #255	; 0xff
 8008cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d114      	bne.n	8008d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01a      	beq.n	8008d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	3310      	adds	r3, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	f001 fa05 	bl	800a120 <xTaskRemoveFromEventList>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d012      	beq.n	8008d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d1c:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <xQueueGenericReset+0xcc>)
 8008d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	f3bf 8f6f 	isb	sy
 8008d2c:	e009      	b.n	8008d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	3310      	adds	r3, #16
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7ff fef2 	bl	8008b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3324      	adds	r3, #36	; 0x24
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7ff feed 	bl	8008b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d42:	f002 fb3f 	bl	800b3c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d46:	2301      	movs	r3, #1
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08e      	sub	sp, #56	; 0x38
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d10a      	bne.n	8008d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6c:	f383 8811 	msr	BASEPRI, r3
 8008d70:	f3bf 8f6f 	isb	sy
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d7a:	bf00      	nop
 8008d7c:	e7fe      	b.n	8008d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10a      	bne.n	8008d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d88:	f383 8811 	msr	BASEPRI, r3
 8008d8c:	f3bf 8f6f 	isb	sy
 8008d90:	f3bf 8f4f 	dsb	sy
 8008d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d96:	bf00      	nop
 8008d98:	e7fe      	b.n	8008d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d002      	beq.n	8008da6 <xQueueGenericCreateStatic+0x52>
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <xQueueGenericCreateStatic+0x56>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <xQueueGenericCreateStatic+0x58>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db4:	f383 8811 	msr	BASEPRI, r3
 8008db8:	f3bf 8f6f 	isb	sy
 8008dbc:	f3bf 8f4f 	dsb	sy
 8008dc0:	623b      	str	r3, [r7, #32]
}
 8008dc2:	bf00      	nop
 8008dc4:	e7fe      	b.n	8008dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <xQueueGenericCreateStatic+0x7e>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x82>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <xQueueGenericCreateStatic+0x84>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	61fb      	str	r3, [r7, #28]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008df2:	2350      	movs	r3, #80	; 0x50
 8008df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b50      	cmp	r3, #80	; 0x50
 8008dfa:	d00a      	beq.n	8008e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e00:	f383 8811 	msr	BASEPRI, r3
 8008e04:	f3bf 8f6f 	isb	sy
 8008e08:	f3bf 8f4f 	dsb	sy
 8008e0c:	61bb      	str	r3, [r7, #24]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00d      	beq.n	8008e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	68b9      	ldr	r1, [r7, #8]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f000 f83f 	bl	8008eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3730      	adds	r7, #48	; 0x30
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b08a      	sub	sp, #40	; 0x28
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	f383 8811 	msr	BASEPRI, r3
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	613b      	str	r3, [r7, #16]
}
 8008e6a:	bf00      	nop
 8008e6c:	e7fe      	b.n	8008e6c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	fb02 f303 	mul.w	r3, r2, r3
 8008e76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	3350      	adds	r3, #80	; 0x50
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f002 fb93 	bl	800b5a8 <pvPortMalloc>
 8008e82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d011      	beq.n	8008eae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	3350      	adds	r3, #80	; 0x50
 8008e92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e9c:	79fa      	ldrb	r2, [r7, #7]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	697a      	ldr	r2, [r7, #20]
 8008ea6:	68b9      	ldr	r1, [r7, #8]
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 f805 	bl	8008eb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008eae:	69bb      	ldr	r3, [r7, #24]
	}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e002      	b.n	8008eda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	69b8      	ldr	r0, [r7, #24]
 8008eea:	f7ff fecb 	bl	8008c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ef6:	bf00      	nop
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b08e      	sub	sp, #56	; 0x38
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
 8008f0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <xQueueGenericSend+0x32>
	__asm volatile
 8008f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f20:	f383 8811 	msr	BASEPRI, r3
 8008f24:	f3bf 8f6f 	isb	sy
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f2e:	bf00      	nop
 8008f30:	e7fe      	b.n	8008f30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d103      	bne.n	8008f40 <xQueueGenericSend+0x40>
 8008f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <xQueueGenericSend+0x44>
 8008f40:	2301      	movs	r3, #1
 8008f42:	e000      	b.n	8008f46 <xQueueGenericSend+0x46>
 8008f44:	2300      	movs	r3, #0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d10a      	bne.n	8008f60 <xQueueGenericSend+0x60>
	__asm volatile
 8008f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4e:	f383 8811 	msr	BASEPRI, r3
 8008f52:	f3bf 8f6f 	isb	sy
 8008f56:	f3bf 8f4f 	dsb	sy
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f5c:	bf00      	nop
 8008f5e:	e7fe      	b.n	8008f5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d103      	bne.n	8008f6e <xQueueGenericSend+0x6e>
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d101      	bne.n	8008f72 <xQueueGenericSend+0x72>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e000      	b.n	8008f74 <xQueueGenericSend+0x74>
 8008f72:	2300      	movs	r3, #0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10a      	bne.n	8008f8e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	623b      	str	r3, [r7, #32]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f8e:	f001 fa89 	bl	800a4a4 <xTaskGetSchedulerState>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <xQueueGenericSend+0x9e>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <xQueueGenericSend+0xa2>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e000      	b.n	8008fa4 <xQueueGenericSend+0xa4>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d10a      	bne.n	8008fbe <xQueueGenericSend+0xbe>
	__asm volatile
 8008fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fac:	f383 8811 	msr	BASEPRI, r3
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	f3bf 8f4f 	dsb	sy
 8008fb8:	61fb      	str	r3, [r7, #28]
}
 8008fba:	bf00      	nop
 8008fbc:	e7fe      	b.n	8008fbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fbe:	f002 f9d1 	bl	800b364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d302      	bcc.n	8008fd4 <xQueueGenericSend+0xd4>
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d129      	bne.n	8009028 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fda:	f000 fa8b 	bl	80094f4 <prvCopyDataToQueue>
 8008fde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d010      	beq.n	800900a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fea:	3324      	adds	r3, #36	; 0x24
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 f897 	bl	800a120 <xTaskRemoveFromEventList>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d013      	beq.n	8009020 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ff8:	4b3f      	ldr	r3, [pc, #252]	; (80090f8 <xQueueGenericSend+0x1f8>)
 8008ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	f3bf 8f4f 	dsb	sy
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	e00a      	b.n	8009020 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800900a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d007      	beq.n	8009020 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009010:	4b39      	ldr	r3, [pc, #228]	; (80090f8 <xQueueGenericSend+0x1f8>)
 8009012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009016:	601a      	str	r2, [r3, #0]
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009020:	f002 f9d0 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 8009024:	2301      	movs	r3, #1
 8009026:	e063      	b.n	80090f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d103      	bne.n	8009036 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800902e:	f002 f9c9 	bl	800b3c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009032:	2300      	movs	r3, #0
 8009034:	e05c      	b.n	80090f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800903c:	f107 0314 	add.w	r3, r7, #20
 8009040:	4618      	mov	r0, r3
 8009042:	f001 f8d1 	bl	800a1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009046:	2301      	movs	r3, #1
 8009048:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800904a:	f002 f9bb 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800904e:	f000 fe21 	bl	8009c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009052:	f002 f987 	bl	800b364 <vPortEnterCritical>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800905c:	b25b      	sxtb	r3, r3
 800905e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009062:	d103      	bne.n	800906c <xQueueGenericSend+0x16c>
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009072:	b25b      	sxtb	r3, r3
 8009074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009078:	d103      	bne.n	8009082 <xQueueGenericSend+0x182>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009082:	f002 f99f 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009086:	1d3a      	adds	r2, r7, #4
 8009088:	f107 0314 	add.w	r3, r7, #20
 800908c:	4611      	mov	r1, r2
 800908e:	4618      	mov	r0, r3
 8009090:	f001 f8c0 	bl	800a214 <xTaskCheckForTimeOut>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d124      	bne.n	80090e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800909a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800909c:	f000 fb22 	bl	80096e4 <prvIsQueueFull>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d018      	beq.n	80090d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a8:	3310      	adds	r3, #16
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	4611      	mov	r1, r2
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 ffe6 	bl	800a080 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b6:	f000 faad 	bl	8009614 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ba:	f000 fdf9 	bl	8009cb0 <xTaskResumeAll>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f47f af7c 	bne.w	8008fbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090c6:	4b0c      	ldr	r3, [pc, #48]	; (80090f8 <xQueueGenericSend+0x1f8>)
 80090c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	f3bf 8f6f 	isb	sy
 80090d6:	e772      	b.n	8008fbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090da:	f000 fa9b 	bl	8009614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090de:	f000 fde7 	bl	8009cb0 <xTaskResumeAll>
 80090e2:	e76c      	b.n	8008fbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090e6:	f000 fa95 	bl	8009614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ea:	f000 fde1 	bl	8009cb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3738      	adds	r7, #56	; 0x38
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b090      	sub	sp, #64	; 0x40
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800910e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d103      	bne.n	8009138 <xQueueGenericSendFromISR+0x3c>
 8009130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <xQueueGenericSendFromISR+0x40>
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <xQueueGenericSendFromISR+0x42>
 800913c:	2300      	movs	r3, #0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009154:	bf00      	nop
 8009156:	e7fe      	b.n	8009156 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b02      	cmp	r3, #2
 800915c:	d103      	bne.n	8009166 <xQueueGenericSendFromISR+0x6a>
 800915e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <xQueueGenericSendFromISR+0x6e>
 8009166:	2301      	movs	r3, #1
 8009168:	e000      	b.n	800916c <xQueueGenericSendFromISR+0x70>
 800916a:	2300      	movs	r3, #0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10a      	bne.n	8009186 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	f383 8811 	msr	BASEPRI, r3
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	f3bf 8f4f 	dsb	sy
 8009180:	623b      	str	r3, [r7, #32]
}
 8009182:	bf00      	nop
 8009184:	e7fe      	b.n	8009184 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009186:	f002 f9cf 	bl	800b528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800918a:	f3ef 8211 	mrs	r2, BASEPRI
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	f383 8811 	msr	BASEPRI, r3
 8009196:	f3bf 8f6f 	isb	sy
 800919a:	f3bf 8f4f 	dsb	sy
 800919e:	61fa      	str	r2, [r7, #28]
 80091a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d302      	bcc.n	80091b8 <xQueueGenericSendFromISR+0xbc>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d12f      	bne.n	8009218 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091c8:	683a      	ldr	r2, [r7, #0]
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091ce:	f000 f991 	bl	80094f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091da:	d112      	bne.n	8009202 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d016      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	3324      	adds	r3, #36	; 0x24
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 ff99 	bl	800a120 <xTaskRemoveFromEventList>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00b      	beq.n	8009212 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	e007      	b.n	8009212 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009206:	3301      	adds	r3, #1
 8009208:	b2db      	uxtb	r3, r3
 800920a:	b25a      	sxtb	r2, r3
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009212:	2301      	movs	r3, #1
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009216:	e001      	b.n	800921c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009218:	2300      	movs	r3, #0
 800921a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800921e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009226:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800922a:	4618      	mov	r0, r3
 800922c:	3740      	adds	r7, #64	; 0x40
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08c      	sub	sp, #48	; 0x30
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009240:	2300      	movs	r3, #0
 8009242:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <xQueueReceive+0x30>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	623b      	str	r3, [r7, #32]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d103      	bne.n	8009272 <xQueueReceive+0x3e>
 800926a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <xQueueReceive+0x42>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <xQueueReceive+0x44>
 8009276:	2300      	movs	r3, #0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <xQueueReceive+0x5e>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	f383 8811 	msr	BASEPRI, r3
 8009284:	f3bf 8f6f 	isb	sy
 8009288:	f3bf 8f4f 	dsb	sy
 800928c:	61fb      	str	r3, [r7, #28]
}
 800928e:	bf00      	nop
 8009290:	e7fe      	b.n	8009290 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009292:	f001 f907 	bl	800a4a4 <xTaskGetSchedulerState>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d102      	bne.n	80092a2 <xQueueReceive+0x6e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <xQueueReceive+0x72>
 80092a2:	2301      	movs	r3, #1
 80092a4:	e000      	b.n	80092a8 <xQueueReceive+0x74>
 80092a6:	2300      	movs	r3, #0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d10a      	bne.n	80092c2 <xQueueReceive+0x8e>
	__asm volatile
 80092ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b0:	f383 8811 	msr	BASEPRI, r3
 80092b4:	f3bf 8f6f 	isb	sy
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	61bb      	str	r3, [r7, #24]
}
 80092be:	bf00      	nop
 80092c0:	e7fe      	b.n	80092c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092c2:	f002 f84f 	bl	800b364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d01f      	beq.n	8009312 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092d2:	68b9      	ldr	r1, [r7, #8]
 80092d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092d6:	f000 f977 	bl	80095c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	1e5a      	subs	r2, r3, #1
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00f      	beq.n	800930a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	3310      	adds	r3, #16
 80092ee:	4618      	mov	r0, r3
 80092f0:	f000 ff16 	bl	800a120 <xTaskRemoveFromEventList>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d007      	beq.n	800930a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092fa:	4b3d      	ldr	r3, [pc, #244]	; (80093f0 <xQueueReceive+0x1bc>)
 80092fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	f3bf 8f4f 	dsb	sy
 8009306:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800930a:	f002 f85b 	bl	800b3c4 <vPortExitCritical>
				return pdPASS;
 800930e:	2301      	movs	r3, #1
 8009310:	e069      	b.n	80093e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d103      	bne.n	8009320 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009318:	f002 f854 	bl	800b3c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800931c:	2300      	movs	r3, #0
 800931e:	e062      	b.n	80093e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009322:	2b00      	cmp	r3, #0
 8009324:	d106      	bne.n	8009334 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009326:	f107 0310 	add.w	r3, r7, #16
 800932a:	4618      	mov	r0, r3
 800932c:	f000 ff5c 	bl	800a1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009334:	f002 f846 	bl	800b3c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009338:	f000 fcac 	bl	8009c94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800933c:	f002 f812 	bl	800b364 <vPortEnterCritical>
 8009340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009346:	b25b      	sxtb	r3, r3
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d103      	bne.n	8009356 <xQueueReceive+0x122>
 800934e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009350:	2200      	movs	r2, #0
 8009352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800935c:	b25b      	sxtb	r3, r3
 800935e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009362:	d103      	bne.n	800936c <xQueueReceive+0x138>
 8009364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009366:	2200      	movs	r2, #0
 8009368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800936c:	f002 f82a 	bl	800b3c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009370:	1d3a      	adds	r2, r7, #4
 8009372:	f107 0310 	add.w	r3, r7, #16
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f000 ff4b 	bl	800a214 <xTaskCheckForTimeOut>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d123      	bne.n	80093cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009386:	f000 f997 	bl	80096b8 <prvIsQueueEmpty>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d017      	beq.n	80093c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	3324      	adds	r3, #36	; 0x24
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fe71 	bl	800a080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800939e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093a0:	f000 f938 	bl	8009614 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093a4:	f000 fc84 	bl	8009cb0 <xTaskResumeAll>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d189      	bne.n	80092c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093ae:	4b10      	ldr	r3, [pc, #64]	; (80093f0 <xQueueReceive+0x1bc>)
 80093b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	e780      	b.n	80092c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093c2:	f000 f927 	bl	8009614 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093c6:	f000 fc73 	bl	8009cb0 <xTaskResumeAll>
 80093ca:	e77a      	b.n	80092c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093ce:	f000 f921 	bl	8009614 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093d2:	f000 fc6d 	bl	8009cb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d8:	f000 f96e 	bl	80096b8 <prvIsQueueEmpty>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	f43f af6f 	beq.w	80092c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3730      	adds	r7, #48	; 0x30
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	e000ed04 	.word	0xe000ed04

080093f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08e      	sub	sp, #56	; 0x38
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10a      	bne.n	8009420 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	623b      	str	r3, [r7, #32]
}
 800941c:	bf00      	nop
 800941e:	e7fe      	b.n	800941e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d103      	bne.n	800942e <xQueueReceiveFromISR+0x3a>
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942a:	2b00      	cmp	r3, #0
 800942c:	d101      	bne.n	8009432 <xQueueReceiveFromISR+0x3e>
 800942e:	2301      	movs	r3, #1
 8009430:	e000      	b.n	8009434 <xQueueReceiveFromISR+0x40>
 8009432:	2300      	movs	r3, #0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800943c:	f383 8811 	msr	BASEPRI, r3
 8009440:	f3bf 8f6f 	isb	sy
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	61fb      	str	r3, [r7, #28]
}
 800944a:	bf00      	nop
 800944c:	e7fe      	b.n	800944c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800944e:	f002 f86b 	bl	800b528 <vPortValidateInterruptPriority>
	__asm volatile
 8009452:	f3ef 8211 	mrs	r2, BASEPRI
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	61ba      	str	r2, [r7, #24]
 8009468:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800946a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800946c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	2b00      	cmp	r3, #0
 8009478:	d02f      	beq.n	80094da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800947a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009484:	68b9      	ldr	r1, [r7, #8]
 8009486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009488:	f000 f89e 	bl	80095c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800948c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800948e:	1e5a      	subs	r2, r3, #1
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009494:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800949c:	d112      	bne.n	80094c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d016      	beq.n	80094d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a8:	3310      	adds	r3, #16
 80094aa:	4618      	mov	r0, r3
 80094ac:	f000 fe38 	bl	800a120 <xTaskRemoveFromEventList>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00e      	beq.n	80094d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00b      	beq.n	80094d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e007      	b.n	80094d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094c8:	3301      	adds	r3, #1
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	b25a      	sxtb	r2, r3
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094d4:	2301      	movs	r3, #1
 80094d6:	637b      	str	r3, [r7, #52]	; 0x34
 80094d8:	e001      	b.n	80094de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80094da:	2300      	movs	r3, #0
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	f383 8811 	msr	BASEPRI, r3
}
 80094e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3738      	adds	r7, #56	; 0x38
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}

080094f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009500:	2300      	movs	r3, #0
 8009502:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10d      	bne.n	800952e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d14d      	bne.n	80095b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	4618      	mov	r0, r3
 8009520:	f000 ffde 	bl	800a4e0 <xTaskPriorityDisinherit>
 8009524:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	e043      	b.n	80095b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d119      	bne.n	8009568 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6858      	ldr	r0, [r3, #4]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	461a      	mov	r2, r3
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	f002 fb3f 	bl	800bbc2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	441a      	add	r2, r3
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	429a      	cmp	r2, r3
 800955c:	d32b      	bcc.n	80095b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	e026      	b.n	80095b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	68d8      	ldr	r0, [r3, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009570:	461a      	mov	r2, r3
 8009572:	68b9      	ldr	r1, [r7, #8]
 8009574:	f002 fb25 	bl	800bbc2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	425b      	negs	r3, r3
 8009582:	441a      	add	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d207      	bcs.n	80095a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959c:	425b      	negs	r3, r3
 800959e:	441a      	add	r2, r3
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2b02      	cmp	r3, #2
 80095a8:	d105      	bne.n	80095b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095be:	697b      	ldr	r3, [r7, #20]
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3718      	adds	r7, #24
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d018      	beq.n	800960c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	441a      	add	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d303      	bcc.n	80095fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	68d9      	ldr	r1, [r3, #12]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	461a      	mov	r2, r3
 8009606:	6838      	ldr	r0, [r7, #0]
 8009608:	f002 fadb 	bl	800bbc2 <memcpy>
	}
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800961c:	f001 fea2 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009626:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009628:	e011      	b.n	800964e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962e:	2b00      	cmp	r3, #0
 8009630:	d012      	beq.n	8009658 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	3324      	adds	r3, #36	; 0x24
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fd72 	bl	800a120 <xTaskRemoveFromEventList>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009642:	f000 fe49 	bl	800a2d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	3b01      	subs	r3, #1
 800964a:	b2db      	uxtb	r3, r3
 800964c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800964e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009652:	2b00      	cmp	r3, #0
 8009654:	dce9      	bgt.n	800962a <prvUnlockQueue+0x16>
 8009656:	e000      	b.n	800965a <prvUnlockQueue+0x46>
					break;
 8009658:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	22ff      	movs	r2, #255	; 0xff
 800965e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009662:	f001 feaf 	bl	800b3c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009666:	f001 fe7d 	bl	800b364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009670:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009672:	e011      	b.n	8009698 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d012      	beq.n	80096a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3310      	adds	r3, #16
 8009680:	4618      	mov	r0, r3
 8009682:	f000 fd4d 	bl	800a120 <xTaskRemoveFromEventList>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800968c:	f000 fe24 	bl	800a2d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009690:	7bbb      	ldrb	r3, [r7, #14]
 8009692:	3b01      	subs	r3, #1
 8009694:	b2db      	uxtb	r3, r3
 8009696:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009698:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800969c:	2b00      	cmp	r3, #0
 800969e:	dce9      	bgt.n	8009674 <prvUnlockQueue+0x60>
 80096a0:	e000      	b.n	80096a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	22ff      	movs	r2, #255	; 0xff
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096ac:	f001 fe8a 	bl	800b3c4 <vPortExitCritical>
}
 80096b0:	bf00      	nop
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c0:	f001 fe50 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096cc:	2301      	movs	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
 80096d0:	e001      	b.n	80096d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096d6:	f001 fe75 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 80096da:	68fb      	ldr	r3, [r7, #12]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096ec:	f001 fe3a 	bl	800b364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d102      	bne.n	8009702 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	60fb      	str	r3, [r7, #12]
 8009700:	e001      	b.n	8009706 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009706:	f001 fe5d 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800970a:	68fb      	ldr	r3, [r7, #12]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e014      	b.n	800974e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009724:	4a0f      	ldr	r2, [pc, #60]	; (8009764 <vQueueAddToRegistry+0x50>)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10b      	bne.n	8009748 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009730:	490c      	ldr	r1, [pc, #48]	; (8009764 <vQueueAddToRegistry+0x50>)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800973a:	4a0a      	ldr	r2, [pc, #40]	; (8009764 <vQueueAddToRegistry+0x50>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	00db      	lsls	r3, r3, #3
 8009740:	4413      	add	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009746:	e006      	b.n	8009756 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3301      	adds	r3, #1
 800974c:	60fb      	str	r3, [r7, #12]
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2b07      	cmp	r3, #7
 8009752:	d9e7      	bls.n	8009724 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009754:	bf00      	nop
 8009756:	bf00      	nop
 8009758:	3714      	adds	r7, #20
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	200010ec 	.word	0x200010ec

08009768 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009768:	b580      	push	{r7, lr}
 800976a:	b086      	sub	sp, #24
 800976c:	af00      	add	r7, sp, #0
 800976e:	60f8      	str	r0, [r7, #12]
 8009770:	60b9      	str	r1, [r7, #8]
 8009772:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009778:	f001 fdf4 	bl	800b364 <vPortEnterCritical>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009782:	b25b      	sxtb	r3, r3
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d103      	bne.n	8009792 <vQueueWaitForMessageRestricted+0x2a>
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2200      	movs	r2, #0
 800978e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009798:	b25b      	sxtb	r3, r3
 800979a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979e:	d103      	bne.n	80097a8 <vQueueWaitForMessageRestricted+0x40>
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097a8:	f001 fe0c 	bl	800b3c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d106      	bne.n	80097c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	3324      	adds	r3, #36	; 0x24
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	68b9      	ldr	r1, [r7, #8]
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 fc83 	bl	800a0c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f7ff ff26 	bl	8009614 <prvUnlockQueue>
	}
 80097c8:	bf00      	nop
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b08e      	sub	sp, #56	; 0x38
 80097d4:	af04      	add	r7, sp, #16
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
 80097dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	623b      	str	r3, [r7, #32]
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xTaskCreateStatic+0x46>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	61fb      	str	r3, [r7, #28]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009816:	23c0      	movs	r3, #192	; 0xc0
 8009818:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	2bc0      	cmp	r3, #192	; 0xc0
 800981e:	d00a      	beq.n	8009836 <xTaskCreateStatic+0x66>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	61bb      	str	r3, [r7, #24]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009836:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983a:	2b00      	cmp	r3, #0
 800983c:	d01e      	beq.n	800987c <xTaskCreateStatic+0xac>
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	2b00      	cmp	r3, #0
 8009842:	d01b      	beq.n	800987c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800984c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	2202      	movs	r2, #2
 8009852:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009856:	2300      	movs	r3, #0
 8009858:	9303      	str	r3, [sp, #12]
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	9302      	str	r3, [sp, #8]
 800985e:	f107 0314 	add.w	r3, r7, #20
 8009862:	9301      	str	r3, [sp, #4]
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68b9      	ldr	r1, [r7, #8]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f850 	bl	8009914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009874:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009876:	f000 f8f7 	bl	8009a68 <prvAddNewTaskToReadyList>
 800987a:	e001      	b.n	8009880 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009880:	697b      	ldr	r3, [r7, #20]
	}
 8009882:	4618      	mov	r0, r3
 8009884:	3728      	adds	r7, #40	; 0x28
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800988a:	b580      	push	{r7, lr}
 800988c:	b08c      	sub	sp, #48	; 0x30
 800988e:	af04      	add	r7, sp, #16
 8009890:	60f8      	str	r0, [r7, #12]
 8009892:	60b9      	str	r1, [r7, #8]
 8009894:	603b      	str	r3, [r7, #0]
 8009896:	4613      	mov	r3, r2
 8009898:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800989a:	88fb      	ldrh	r3, [r7, #6]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 fe82 	bl	800b5a8 <pvPortMalloc>
 80098a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d00e      	beq.n	80098ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098ac:	20c0      	movs	r0, #192	; 0xc0
 80098ae:	f001 fe7b 	bl	800b5a8 <pvPortMalloc>
 80098b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d003      	beq.n	80098c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	697a      	ldr	r2, [r7, #20]
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
 80098c0:	e005      	b.n	80098ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098c2:	6978      	ldr	r0, [r7, #20]
 80098c4:	f001 ff3c 	bl	800b740 <vPortFree>
 80098c8:	e001      	b.n	80098ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d017      	beq.n	8009904 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098dc:	88fa      	ldrh	r2, [r7, #6]
 80098de:	2300      	movs	r3, #0
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	69fb      	ldr	r3, [r7, #28]
 80098e4:	9302      	str	r3, [sp, #8]
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	9300      	str	r3, [sp, #0]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68b9      	ldr	r1, [r7, #8]
 80098f2:	68f8      	ldr	r0, [r7, #12]
 80098f4:	f000 f80e 	bl	8009914 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098f8:	69f8      	ldr	r0, [r7, #28]
 80098fa:	f000 f8b5 	bl	8009a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098fe:	2301      	movs	r3, #1
 8009900:	61bb      	str	r3, [r7, #24]
 8009902:	e002      	b.n	800990a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009904:	f04f 33ff 	mov.w	r3, #4294967295
 8009908:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800990a:	69bb      	ldr	r3, [r7, #24]
	}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009924:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	461a      	mov	r2, r3
 800992c:	21a5      	movs	r1, #165	; 0xa5
 800992e:	f002 f956 	bl	800bbde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800993c:	3b01      	subs	r3, #1
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	f003 0307 	and.w	r3, r3, #7
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	617b      	str	r3, [r7, #20]
}
 8009968:	bf00      	nop
 800996a:	e7fe      	b.n	800996a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01f      	beq.n	80099b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009972:	2300      	movs	r3, #0
 8009974:	61fb      	str	r3, [r7, #28]
 8009976:	e012      	b.n	800999e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	7819      	ldrb	r1, [r3, #0]
 8009980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	3334      	adds	r3, #52	; 0x34
 8009988:	460a      	mov	r2, r1
 800998a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800998c:	68ba      	ldr	r2, [r7, #8]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	4413      	add	r3, r2
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d006      	beq.n	80099a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	3301      	adds	r3, #1
 800999c:	61fb      	str	r3, [r7, #28]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	2b0f      	cmp	r3, #15
 80099a2:	d9e9      	bls.n	8009978 <prvInitialiseNewTask+0x64>
 80099a4:	e000      	b.n	80099a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80099a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099b0:	e003      	b.n	80099ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	2b37      	cmp	r3, #55	; 0x37
 80099be:	d901      	bls.n	80099c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099c0:	2337      	movs	r3, #55	; 0x37
 80099c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	2200      	movs	r2, #0
 80099d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	3304      	adds	r3, #4
 80099da:	4618      	mov	r0, r3
 80099dc:	f7ff f8be 	bl	8008b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	3318      	adds	r3, #24
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff f8b9 	bl	8008b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	2200      	movs	r2, #0
 8009a04:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	3358      	adds	r3, #88	; 0x58
 8009a1a:	2260      	movs	r2, #96	; 0x60
 8009a1c:	2100      	movs	r1, #0
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f002 f8dd 	bl	800bbde <memset>
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	4a0d      	ldr	r2, [pc, #52]	; (8009a5c <prvInitialiseNewTask+0x148>)
 8009a28:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a2c:	4a0c      	ldr	r2, [pc, #48]	; (8009a60 <prvInitialiseNewTask+0x14c>)
 8009a2e:	661a      	str	r2, [r3, #96]	; 0x60
 8009a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a32:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <prvInitialiseNewTask+0x150>)
 8009a34:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	68f9      	ldr	r1, [r7, #12]
 8009a3a:	69b8      	ldr	r0, [r7, #24]
 8009a3c:	f001 fb62 	bl	800b104 <pxPortInitialiseStack>
 8009a40:	4602      	mov	r2, r0
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a52:	bf00      	nop
 8009a54:	3720      	adds	r7, #32
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	0800d3f8 	.word	0x0800d3f8
 8009a60:	0800d418 	.word	0x0800d418
 8009a64:	0800d3d8 	.word	0x0800d3d8

08009a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a70:	f001 fc78 	bl	800b364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a74:	4b2d      	ldr	r3, [pc, #180]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	4a2c      	ldr	r2, [pc, #176]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a7e:	4b2c      	ldr	r3, [pc, #176]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a86:	4a2a      	ldr	r2, [pc, #168]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a8c:	4b27      	ldr	r3, [pc, #156]	; (8009b2c <prvAddNewTaskToReadyList+0xc4>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d110      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a94:	f000 fc44 	bl	800a320 <prvInitialiseTaskLists>
 8009a98:	e00d      	b.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a9a:	4b26      	ldr	r3, [pc, #152]	; (8009b34 <prvAddNewTaskToReadyList+0xcc>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aa2:	4b23      	ldr	r3, [pc, #140]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d802      	bhi.n	8009ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ab0:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009ab6:	4b20      	ldr	r3, [pc, #128]	; (8009b38 <prvAddNewTaskToReadyList+0xd0>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3301      	adds	r3, #1
 8009abc:	4a1e      	ldr	r2, [pc, #120]	; (8009b38 <prvAddNewTaskToReadyList+0xd0>)
 8009abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ac0:	4b1d      	ldr	r3, [pc, #116]	; (8009b38 <prvAddNewTaskToReadyList+0xd0>)
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009acc:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <prvAddNewTaskToReadyList+0xd4>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d903      	bls.n	8009adc <prvAddNewTaskToReadyList+0x74>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad8:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <prvAddNewTaskToReadyList+0xd4>)
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4413      	add	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4a15      	ldr	r2, [pc, #84]	; (8009b40 <prvAddNewTaskToReadyList+0xd8>)
 8009aea:	441a      	add	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3304      	adds	r3, #4
 8009af0:	4619      	mov	r1, r3
 8009af2:	4610      	mov	r0, r2
 8009af4:	f7ff f83f 	bl	8008b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009af8:	f001 fc64 	bl	800b3c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <prvAddNewTaskToReadyList+0xcc>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00e      	beq.n	8009b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b04:	4b0a      	ldr	r3, [pc, #40]	; (8009b30 <prvAddNewTaskToReadyList+0xc8>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d207      	bcs.n	8009b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b12:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <prvAddNewTaskToReadyList+0xdc>)
 8009b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b22:	bf00      	nop
 8009b24:	3708      	adds	r7, #8
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20001600 	.word	0x20001600
 8009b30:	2000112c 	.word	0x2000112c
 8009b34:	2000160c 	.word	0x2000160c
 8009b38:	2000161c 	.word	0x2000161c
 8009b3c:	20001608 	.word	0x20001608
 8009b40:	20001130 	.word	0x20001130
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d017      	beq.n	8009b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b5a:	4b13      	ldr	r3, [pc, #76]	; (8009ba8 <vTaskDelay+0x60>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d00a      	beq.n	8009b78 <vTaskDelay+0x30>
	__asm volatile
 8009b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b66:	f383 8811 	msr	BASEPRI, r3
 8009b6a:	f3bf 8f6f 	isb	sy
 8009b6e:	f3bf 8f4f 	dsb	sy
 8009b72:	60bb      	str	r3, [r7, #8]
}
 8009b74:	bf00      	nop
 8009b76:	e7fe      	b.n	8009b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b78:	f000 f88c 	bl	8009c94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 ff1e 	bl	800a9c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b84:	f000 f894 	bl	8009cb0 <xTaskResumeAll>
 8009b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d107      	bne.n	8009ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b90:	4b06      	ldr	r3, [pc, #24]	; (8009bac <vTaskDelay+0x64>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ba0:	bf00      	nop
 8009ba2:	3710      	adds	r7, #16
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	20001628 	.word	0x20001628
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b08a      	sub	sp, #40	; 0x28
 8009bb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bbe:	463a      	mov	r2, r7
 8009bc0:	1d39      	adds	r1, r7, #4
 8009bc2:	f107 0308 	add.w	r3, r7, #8
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe ff74 	bl	8008ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	9202      	str	r2, [sp, #8]
 8009bd4:	9301      	str	r3, [sp, #4]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9300      	str	r3, [sp, #0]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	460a      	mov	r2, r1
 8009bde:	4925      	ldr	r1, [pc, #148]	; (8009c74 <vTaskStartScheduler+0xc4>)
 8009be0:	4825      	ldr	r0, [pc, #148]	; (8009c78 <vTaskStartScheduler+0xc8>)
 8009be2:	f7ff fdf5 	bl	80097d0 <xTaskCreateStatic>
 8009be6:	4603      	mov	r3, r0
 8009be8:	4a24      	ldr	r2, [pc, #144]	; (8009c7c <vTaskStartScheduler+0xcc>)
 8009bea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bec:	4b23      	ldr	r3, [pc, #140]	; (8009c7c <vTaskStartScheduler+0xcc>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	617b      	str	r3, [r7, #20]
 8009bf8:	e001      	b.n	8009bfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d102      	bne.n	8009c0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c04:	f000 ff30 	bl	800aa68 <xTimerCreateTimerTask>
 8009c08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d11d      	bne.n	8009c4c <vTaskStartScheduler+0x9c>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	613b      	str	r3, [r7, #16]
}
 8009c22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c24:	4b16      	ldr	r3, [pc, #88]	; (8009c80 <vTaskStartScheduler+0xd0>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3358      	adds	r3, #88	; 0x58
 8009c2a:	4a16      	ldr	r2, [pc, #88]	; (8009c84 <vTaskStartScheduler+0xd4>)
 8009c2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c2e:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <vTaskStartScheduler+0xd8>)
 8009c30:	f04f 32ff 	mov.w	r2, #4294967295
 8009c34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c36:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <vTaskStartScheduler+0xdc>)
 8009c38:	2201      	movs	r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c3c:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <vTaskStartScheduler+0xe0>)
 8009c3e:	2200      	movs	r2, #0
 8009c40:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009c42:	f7f6 feab 	bl	800099c <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c46:	f001 faeb 	bl	800b220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c4a:	e00e      	b.n	8009c6a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c52:	d10a      	bne.n	8009c6a <vTaskStartScheduler+0xba>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	60fb      	str	r3, [r7, #12]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <vTaskStartScheduler+0xb8>
}
 8009c6a:	bf00      	nop
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	0800d290 	.word	0x0800d290
 8009c78:	0800a2f1 	.word	0x0800a2f1
 8009c7c:	20001624 	.word	0x20001624
 8009c80:	2000112c 	.word	0x2000112c
 8009c84:	20000020 	.word	0x20000020
 8009c88:	20001620 	.word	0x20001620
 8009c8c:	2000160c 	.word	0x2000160c
 8009c90:	20001604 	.word	0x20001604

08009c94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <vTaskSuspendAll+0x18>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	4a03      	ldr	r2, [pc, #12]	; (8009cac <vTaskSuspendAll+0x18>)
 8009ca0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ca2:	bf00      	nop
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20001628 	.word	0x20001628

08009cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cbe:	4b42      	ldr	r3, [pc, #264]	; (8009dc8 <xTaskResumeAll+0x118>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <xTaskResumeAll+0x2c>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	603b      	str	r3, [r7, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cdc:	f001 fb42 	bl	800b364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ce0:	4b39      	ldr	r3, [pc, #228]	; (8009dc8 <xTaskResumeAll+0x118>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	4a38      	ldr	r2, [pc, #224]	; (8009dc8 <xTaskResumeAll+0x118>)
 8009ce8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cea:	4b37      	ldr	r3, [pc, #220]	; (8009dc8 <xTaskResumeAll+0x118>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d162      	bne.n	8009db8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cf2:	4b36      	ldr	r3, [pc, #216]	; (8009dcc <xTaskResumeAll+0x11c>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d05e      	beq.n	8009db8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cfa:	e02f      	b.n	8009d5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cfc:	4b34      	ldr	r3, [pc, #208]	; (8009dd0 <xTaskResumeAll+0x120>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	3318      	adds	r3, #24
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe ff91 	bl	8008c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	3304      	adds	r3, #4
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7fe ff8c 	bl	8008c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1c:	4b2d      	ldr	r3, [pc, #180]	; (8009dd4 <xTaskResumeAll+0x124>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d903      	bls.n	8009d2c <xTaskResumeAll+0x7c>
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d28:	4a2a      	ldr	r2, [pc, #168]	; (8009dd4 <xTaskResumeAll+0x124>)
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4a27      	ldr	r2, [pc, #156]	; (8009dd8 <xTaskResumeAll+0x128>)
 8009d3a:	441a      	add	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	3304      	adds	r3, #4
 8009d40:	4619      	mov	r1, r3
 8009d42:	4610      	mov	r0, r2
 8009d44:	f7fe ff17 	bl	8008b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4c:	4b23      	ldr	r3, [pc, #140]	; (8009ddc <xTaskResumeAll+0x12c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d302      	bcc.n	8009d5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d56:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <xTaskResumeAll+0x130>)
 8009d58:	2201      	movs	r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d5c:	4b1c      	ldr	r3, [pc, #112]	; (8009dd0 <xTaskResumeAll+0x120>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d1cb      	bne.n	8009cfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d6a:	f000 fb7b 	bl	800a464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d6e:	4b1d      	ldr	r3, [pc, #116]	; (8009de4 <xTaskResumeAll+0x134>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d010      	beq.n	8009d9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d7a:	f000 f847 	bl	8009e0c <xTaskIncrementTick>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d002      	beq.n	8009d8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d84:	4b16      	ldr	r3, [pc, #88]	; (8009de0 <xTaskResumeAll+0x130>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1f1      	bne.n	8009d7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d96:	4b13      	ldr	r3, [pc, #76]	; (8009de4 <xTaskResumeAll+0x134>)
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d9c:	4b10      	ldr	r3, [pc, #64]	; (8009de0 <xTaskResumeAll+0x130>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d009      	beq.n	8009db8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009da4:	2301      	movs	r3, #1
 8009da6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009da8:	4b0f      	ldr	r3, [pc, #60]	; (8009de8 <xTaskResumeAll+0x138>)
 8009daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009db8:	f001 fb04 	bl	800b3c4 <vPortExitCritical>

	return xAlreadyYielded;
 8009dbc:	68bb      	ldr	r3, [r7, #8]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	20001628 	.word	0x20001628
 8009dcc:	20001600 	.word	0x20001600
 8009dd0:	200015c0 	.word	0x200015c0
 8009dd4:	20001608 	.word	0x20001608
 8009dd8:	20001130 	.word	0x20001130
 8009ddc:	2000112c 	.word	0x2000112c
 8009de0:	20001614 	.word	0x20001614
 8009de4:	20001610 	.word	0x20001610
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009df2:	4b05      	ldr	r3, [pc, #20]	; (8009e08 <xTaskGetTickCount+0x1c>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009df8:	687b      	ldr	r3, [r7, #4]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	20001604 	.word	0x20001604

08009e0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b086      	sub	sp, #24
 8009e10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e16:	4b4f      	ldr	r3, [pc, #316]	; (8009f54 <xTaskIncrementTick+0x148>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f040 808f 	bne.w	8009f3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e20:	4b4d      	ldr	r3, [pc, #308]	; (8009f58 <xTaskIncrementTick+0x14c>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	3301      	adds	r3, #1
 8009e26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e28:	4a4b      	ldr	r2, [pc, #300]	; (8009f58 <xTaskIncrementTick+0x14c>)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d120      	bne.n	8009e76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e34:	4b49      	ldr	r3, [pc, #292]	; (8009f5c <xTaskIncrementTick+0x150>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	603b      	str	r3, [r7, #0]
}
 8009e50:	bf00      	nop
 8009e52:	e7fe      	b.n	8009e52 <xTaskIncrementTick+0x46>
 8009e54:	4b41      	ldr	r3, [pc, #260]	; (8009f5c <xTaskIncrementTick+0x150>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <xTaskIncrementTick+0x154>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a3f      	ldr	r2, [pc, #252]	; (8009f5c <xTaskIncrementTick+0x150>)
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	4a3f      	ldr	r2, [pc, #252]	; (8009f60 <xTaskIncrementTick+0x154>)
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6013      	str	r3, [r2, #0]
 8009e68:	4b3e      	ldr	r3, [pc, #248]	; (8009f64 <xTaskIncrementTick+0x158>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	4a3d      	ldr	r2, [pc, #244]	; (8009f64 <xTaskIncrementTick+0x158>)
 8009e70:	6013      	str	r3, [r2, #0]
 8009e72:	f000 faf7 	bl	800a464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e76:	4b3c      	ldr	r3, [pc, #240]	; (8009f68 <xTaskIncrementTick+0x15c>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	693a      	ldr	r2, [r7, #16]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d349      	bcc.n	8009f14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e80:	4b36      	ldr	r3, [pc, #216]	; (8009f5c <xTaskIncrementTick+0x150>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d104      	bne.n	8009e94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8a:	4b37      	ldr	r3, [pc, #220]	; (8009f68 <xTaskIncrementTick+0x15c>)
 8009e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e90:	601a      	str	r2, [r3, #0]
					break;
 8009e92:	e03f      	b.n	8009f14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e94:	4b31      	ldr	r3, [pc, #196]	; (8009f5c <xTaskIncrementTick+0x150>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ea4:	693a      	ldr	r2, [r7, #16]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d203      	bcs.n	8009eb4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eac:	4a2e      	ldr	r2, [pc, #184]	; (8009f68 <xTaskIncrementTick+0x15c>)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eb2:	e02f      	b.n	8009f14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7fe feb9 	bl	8008c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d004      	beq.n	8009ed0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	3318      	adds	r3, #24
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe feb0 	bl	8008c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4b25      	ldr	r3, [pc, #148]	; (8009f6c <xTaskIncrementTick+0x160>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d903      	bls.n	8009ee4 <xTaskIncrementTick+0xd8>
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	4a22      	ldr	r2, [pc, #136]	; (8009f6c <xTaskIncrementTick+0x160>)
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4a1f      	ldr	r2, [pc, #124]	; (8009f70 <xTaskIncrementTick+0x164>)
 8009ef2:	441a      	add	r2, r3
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	3304      	adds	r3, #4
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4610      	mov	r0, r2
 8009efc:	f7fe fe3b 	bl	8008b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f04:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <xTaskIncrementTick+0x168>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d3b8      	bcc.n	8009e80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f12:	e7b5      	b.n	8009e80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f14:	4b17      	ldr	r3, [pc, #92]	; (8009f74 <xTaskIncrementTick+0x168>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1a:	4915      	ldr	r1, [pc, #84]	; (8009f70 <xTaskIncrementTick+0x164>)
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d901      	bls.n	8009f30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f30:	4b11      	ldr	r3, [pc, #68]	; (8009f78 <xTaskIncrementTick+0x16c>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d007      	beq.n	8009f48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	617b      	str	r3, [r7, #20]
 8009f3c:	e004      	b.n	8009f48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <xTaskIncrementTick+0x170>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3301      	adds	r3, #1
 8009f44:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <xTaskIncrementTick+0x170>)
 8009f46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f48:	697b      	ldr	r3, [r7, #20]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	20001628 	.word	0x20001628
 8009f58:	20001604 	.word	0x20001604
 8009f5c:	200015b8 	.word	0x200015b8
 8009f60:	200015bc 	.word	0x200015bc
 8009f64:	20001618 	.word	0x20001618
 8009f68:	20001620 	.word	0x20001620
 8009f6c:	20001608 	.word	0x20001608
 8009f70:	20001130 	.word	0x20001130
 8009f74:	2000112c 	.word	0x2000112c
 8009f78:	20001614 	.word	0x20001614
 8009f7c:	20001610 	.word	0x20001610

08009f80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f86:	4b36      	ldr	r3, [pc, #216]	; (800a060 <vTaskSwitchContext+0xe0>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f8e:	4b35      	ldr	r3, [pc, #212]	; (800a064 <vTaskSwitchContext+0xe4>)
 8009f90:	2201      	movs	r2, #1
 8009f92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f94:	e05f      	b.n	800a056 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009f96:	4b33      	ldr	r3, [pc, #204]	; (800a064 <vTaskSwitchContext+0xe4>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009f9c:	f7f6 fd0c 	bl	80009b8 <getRunTimeCounterValue>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	4a31      	ldr	r2, [pc, #196]	; (800a068 <vTaskSwitchContext+0xe8>)
 8009fa4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009fa6:	4b30      	ldr	r3, [pc, #192]	; (800a068 <vTaskSwitchContext+0xe8>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b30      	ldr	r3, [pc, #192]	; (800a06c <vTaskSwitchContext+0xec>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d909      	bls.n	8009fc6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8009fb2:	4b2f      	ldr	r3, [pc, #188]	; (800a070 <vTaskSwitchContext+0xf0>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fb8:	4a2b      	ldr	r2, [pc, #172]	; (800a068 <vTaskSwitchContext+0xe8>)
 8009fba:	6810      	ldr	r0, [r2, #0]
 8009fbc:	4a2b      	ldr	r2, [pc, #172]	; (800a06c <vTaskSwitchContext+0xec>)
 8009fbe:	6812      	ldr	r2, [r2, #0]
 8009fc0:	1a82      	subs	r2, r0, r2
 8009fc2:	440a      	add	r2, r1
 8009fc4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009fc6:	4b28      	ldr	r3, [pc, #160]	; (800a068 <vTaskSwitchContext+0xe8>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a28      	ldr	r2, [pc, #160]	; (800a06c <vTaskSwitchContext+0xec>)
 8009fcc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fce:	4b29      	ldr	r3, [pc, #164]	; (800a074 <vTaskSwitchContext+0xf4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	e010      	b.n	8009ff8 <vTaskSwitchContext+0x78>
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <vTaskSwitchContext+0x72>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	607b      	str	r3, [r7, #4]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <vTaskSwitchContext+0x70>
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	60fb      	str	r3, [r7, #12]
 8009ff8:	491f      	ldr	r1, [pc, #124]	; (800a078 <vTaskSwitchContext+0xf8>)
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d0e4      	beq.n	8009fd6 <vTaskSwitchContext+0x56>
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4613      	mov	r3, r2
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4a18      	ldr	r2, [pc, #96]	; (800a078 <vTaskSwitchContext+0xf8>)
 800a018:	4413      	add	r3, r2
 800a01a:	60bb      	str	r3, [r7, #8]
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	685b      	ldr	r3, [r3, #4]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	605a      	str	r2, [r3, #4]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	3308      	adds	r3, #8
 800a02e:	429a      	cmp	r2, r3
 800a030:	d104      	bne.n	800a03c <vTaskSwitchContext+0xbc>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	685a      	ldr	r2, [r3, #4]
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	605a      	str	r2, [r3, #4]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	4a0b      	ldr	r2, [pc, #44]	; (800a070 <vTaskSwitchContext+0xf0>)
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	4a0b      	ldr	r2, [pc, #44]	; (800a074 <vTaskSwitchContext+0xf4>)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a04c:	4b08      	ldr	r3, [pc, #32]	; (800a070 <vTaskSwitchContext+0xf0>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3358      	adds	r3, #88	; 0x58
 800a052:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <vTaskSwitchContext+0xfc>)
 800a054:	6013      	str	r3, [r2, #0]
}
 800a056:	bf00      	nop
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20001628 	.word	0x20001628
 800a064:	20001614 	.word	0x20001614
 800a068:	20001630 	.word	0x20001630
 800a06c:	2000162c 	.word	0x2000162c
 800a070:	2000112c 	.word	0x2000112c
 800a074:	20001608 	.word	0x20001608
 800a078:	20001130 	.word	0x20001130
 800a07c:	20000020 	.word	0x20000020

0800a080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10a      	bne.n	800a0a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a094:	f383 8811 	msr	BASEPRI, r3
 800a098:	f3bf 8f6f 	isb	sy
 800a09c:	f3bf 8f4f 	dsb	sy
 800a0a0:	60fb      	str	r3, [r7, #12]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0a6:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <vTaskPlaceOnEventList+0x44>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3318      	adds	r3, #24
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7fe fd85 	bl	8008bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	6838      	ldr	r0, [r7, #0]
 800a0b8:	f000 fc82 	bl	800a9c0 <prvAddCurrentTaskToDelayedList>
}
 800a0bc:	bf00      	nop
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	2000112c 	.word	0x2000112c

0800a0c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	60f8      	str	r0, [r7, #12]
 800a0d0:	60b9      	str	r1, [r7, #8]
 800a0d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d10a      	bne.n	800a0f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	617b      	str	r3, [r7, #20]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <vTaskPlaceOnEventListRestricted+0x54>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7fe fd3c 	bl	8008b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d002      	beq.n	800a10a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a104:	f04f 33ff 	mov.w	r3, #4294967295
 800a108:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a10a:	6879      	ldr	r1, [r7, #4]
 800a10c:	68b8      	ldr	r0, [r7, #8]
 800a10e:	f000 fc57 	bl	800a9c0 <prvAddCurrentTaskToDelayedList>
	}
 800a112:	bf00      	nop
 800a114:	3718      	adds	r7, #24
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
 800a11a:	bf00      	nop
 800a11c:	2000112c 	.word	0x2000112c

0800a120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d10a      	bne.n	800a14c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a13a:	f383 8811 	msr	BASEPRI, r3
 800a13e:	f3bf 8f6f 	isb	sy
 800a142:	f3bf 8f4f 	dsb	sy
 800a146:	60fb      	str	r3, [r7, #12]
}
 800a148:	bf00      	nop
 800a14a:	e7fe      	b.n	800a14a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	3318      	adds	r3, #24
 800a150:	4618      	mov	r0, r3
 800a152:	f7fe fd6d 	bl	8008c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a156:	4b1e      	ldr	r3, [pc, #120]	; (800a1d0 <xTaskRemoveFromEventList+0xb0>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d11d      	bne.n	800a19a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	3304      	adds	r3, #4
 800a162:	4618      	mov	r0, r3
 800a164:	f7fe fd64 	bl	8008c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a16c:	4b19      	ldr	r3, [pc, #100]	; (800a1d4 <xTaskRemoveFromEventList+0xb4>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d903      	bls.n	800a17c <xTaskRemoveFromEventList+0x5c>
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a16      	ldr	r2, [pc, #88]	; (800a1d4 <xTaskRemoveFromEventList+0xb4>)
 800a17a:	6013      	str	r3, [r2, #0]
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a180:	4613      	mov	r3, r2
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4a13      	ldr	r2, [pc, #76]	; (800a1d8 <xTaskRemoveFromEventList+0xb8>)
 800a18a:	441a      	add	r2, r3
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	3304      	adds	r3, #4
 800a190:	4619      	mov	r1, r3
 800a192:	4610      	mov	r0, r2
 800a194:	f7fe fcef 	bl	8008b76 <vListInsertEnd>
 800a198:	e005      	b.n	800a1a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	3318      	adds	r3, #24
 800a19e:	4619      	mov	r1, r3
 800a1a0:	480e      	ldr	r0, [pc, #56]	; (800a1dc <xTaskRemoveFromEventList+0xbc>)
 800a1a2:	f7fe fce8 	bl	8008b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1aa:	4b0d      	ldr	r3, [pc, #52]	; (800a1e0 <xTaskRemoveFromEventList+0xc0>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d905      	bls.n	800a1c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1b8:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <xTaskRemoveFromEventList+0xc4>)
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	601a      	str	r2, [r3, #0]
 800a1be:	e001      	b.n	800a1c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1c4:	697b      	ldr	r3, [r7, #20]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20001628 	.word	0x20001628
 800a1d4:	20001608 	.word	0x20001608
 800a1d8:	20001130 	.word	0x20001130
 800a1dc:	200015c0 	.word	0x200015c0
 800a1e0:	2000112c 	.word	0x2000112c
 800a1e4:	20001614 	.word	0x20001614

0800a1e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1f0:	4b06      	ldr	r3, [pc, #24]	; (800a20c <vTaskInternalSetTimeOutState+0x24>)
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1f8:	4b05      	ldr	r3, [pc, #20]	; (800a210 <vTaskInternalSetTimeOutState+0x28>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	605a      	str	r2, [r3, #4]
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	20001618 	.word	0x20001618
 800a210:	20001604 	.word	0x20001604

0800a214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10a      	bne.n	800a23a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	613b      	str	r3, [r7, #16]
}
 800a236:	bf00      	nop
 800a238:	e7fe      	b.n	800a238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d10a      	bne.n	800a256 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a244:	f383 8811 	msr	BASEPRI, r3
 800a248:	f3bf 8f6f 	isb	sy
 800a24c:	f3bf 8f4f 	dsb	sy
 800a250:	60fb      	str	r3, [r7, #12]
}
 800a252:	bf00      	nop
 800a254:	e7fe      	b.n	800a254 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a256:	f001 f885 	bl	800b364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <xTaskCheckForTimeOut+0xbc>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	1ad3      	subs	r3, r2, r3
 800a268:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a272:	d102      	bne.n	800a27a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a274:	2300      	movs	r3, #0
 800a276:	61fb      	str	r3, [r7, #28]
 800a278:	e023      	b.n	800a2c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	4b15      	ldr	r3, [pc, #84]	; (800a2d4 <xTaskCheckForTimeOut+0xc0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d007      	beq.n	800a296 <xTaskCheckForTimeOut+0x82>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	69ba      	ldr	r2, [r7, #24]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d302      	bcc.n	800a296 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a290:	2301      	movs	r3, #1
 800a292:	61fb      	str	r3, [r7, #28]
 800a294:	e015      	b.n	800a2c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d20b      	bcs.n	800a2b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	697b      	ldr	r3, [r7, #20]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f7ff ff9b 	bl	800a1e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	e004      	b.n	800a2c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2c2:	f001 f87f 	bl	800b3c4 <vPortExitCritical>

	return xReturn;
 800a2c6:	69fb      	ldr	r3, [r7, #28]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3720      	adds	r7, #32
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	20001604 	.word	0x20001604
 800a2d4:	20001618 	.word	0x20001618

0800a2d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2dc:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <vTaskMissedYield+0x14>)
 800a2de:	2201      	movs	r2, #1
 800a2e0:	601a      	str	r2, [r3, #0]
}
 800a2e2:	bf00      	nop
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr
 800a2ec:	20001614 	.word	0x20001614

0800a2f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2f8:	f000 f852 	bl	800a3a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <prvIdleTask+0x28>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d9f9      	bls.n	800a2f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <prvIdleTask+0x2c>)
 800a306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30a:	601a      	str	r2, [r3, #0]
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a314:	e7f0      	b.n	800a2f8 <prvIdleTask+0x8>
 800a316:	bf00      	nop
 800a318:	20001130 	.word	0x20001130
 800a31c:	e000ed04 	.word	0xe000ed04

0800a320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a326:	2300      	movs	r3, #0
 800a328:	607b      	str	r3, [r7, #4]
 800a32a:	e00c      	b.n	800a346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	4613      	mov	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	4413      	add	r3, r2
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	4a12      	ldr	r2, [pc, #72]	; (800a380 <prvInitialiseTaskLists+0x60>)
 800a338:	4413      	add	r3, r2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7fe fbee 	bl	8008b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3301      	adds	r3, #1
 800a344:	607b      	str	r3, [r7, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b37      	cmp	r3, #55	; 0x37
 800a34a:	d9ef      	bls.n	800a32c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a34c:	480d      	ldr	r0, [pc, #52]	; (800a384 <prvInitialiseTaskLists+0x64>)
 800a34e:	f7fe fbe5 	bl	8008b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a352:	480d      	ldr	r0, [pc, #52]	; (800a388 <prvInitialiseTaskLists+0x68>)
 800a354:	f7fe fbe2 	bl	8008b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a358:	480c      	ldr	r0, [pc, #48]	; (800a38c <prvInitialiseTaskLists+0x6c>)
 800a35a:	f7fe fbdf 	bl	8008b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a35e:	480c      	ldr	r0, [pc, #48]	; (800a390 <prvInitialiseTaskLists+0x70>)
 800a360:	f7fe fbdc 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a364:	480b      	ldr	r0, [pc, #44]	; (800a394 <prvInitialiseTaskLists+0x74>)
 800a366:	f7fe fbd9 	bl	8008b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a36a:	4b0b      	ldr	r3, [pc, #44]	; (800a398 <prvInitialiseTaskLists+0x78>)
 800a36c:	4a05      	ldr	r2, [pc, #20]	; (800a384 <prvInitialiseTaskLists+0x64>)
 800a36e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a370:	4b0a      	ldr	r3, [pc, #40]	; (800a39c <prvInitialiseTaskLists+0x7c>)
 800a372:	4a05      	ldr	r2, [pc, #20]	; (800a388 <prvInitialiseTaskLists+0x68>)
 800a374:	601a      	str	r2, [r3, #0]
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	20001130 	.word	0x20001130
 800a384:	20001590 	.word	0x20001590
 800a388:	200015a4 	.word	0x200015a4
 800a38c:	200015c0 	.word	0x200015c0
 800a390:	200015d4 	.word	0x200015d4
 800a394:	200015ec 	.word	0x200015ec
 800a398:	200015b8 	.word	0x200015b8
 800a39c:	200015bc 	.word	0x200015bc

0800a3a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3a6:	e019      	b.n	800a3dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3a8:	f000 ffdc 	bl	800b364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3ac:	4b10      	ldr	r3, [pc, #64]	; (800a3f0 <prvCheckTasksWaitingTermination+0x50>)
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3304      	adds	r3, #4
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7fe fc39 	bl	8008c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3be:	4b0d      	ldr	r3, [pc, #52]	; (800a3f4 <prvCheckTasksWaitingTermination+0x54>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	4a0b      	ldr	r2, [pc, #44]	; (800a3f4 <prvCheckTasksWaitingTermination+0x54>)
 800a3c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3c8:	4b0b      	ldr	r3, [pc, #44]	; (800a3f8 <prvCheckTasksWaitingTermination+0x58>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	3b01      	subs	r3, #1
 800a3ce:	4a0a      	ldr	r2, [pc, #40]	; (800a3f8 <prvCheckTasksWaitingTermination+0x58>)
 800a3d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3d2:	f000 fff7 	bl	800b3c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f810 	bl	800a3fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3dc:	4b06      	ldr	r3, [pc, #24]	; (800a3f8 <prvCheckTasksWaitingTermination+0x58>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d1e1      	bne.n	800a3a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200015d4 	.word	0x200015d4
 800a3f4:	20001600 	.word	0x20001600
 800a3f8:	200015e8 	.word	0x200015e8

0800a3fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3358      	adds	r3, #88	; 0x58
 800a408:	4618      	mov	r0, r3
 800a40a:	f001 fd21 	bl	800be50 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a414:	2b00      	cmp	r3, #0
 800a416:	d108      	bne.n	800a42a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 f98f 	bl	800b740 <vPortFree>
				vPortFree( pxTCB );
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f001 f98c 	bl	800b740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a428:	e018      	b.n	800a45c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a430:	2b01      	cmp	r3, #1
 800a432:	d103      	bne.n	800a43c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f001 f983 	bl	800b740 <vPortFree>
	}
 800a43a:	e00f      	b.n	800a45c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800a442:	2b02      	cmp	r3, #2
 800a444:	d00a      	beq.n	800a45c <prvDeleteTCB+0x60>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	60fb      	str	r3, [r7, #12]
}
 800a458:	bf00      	nop
 800a45a:	e7fe      	b.n	800a45a <prvDeleteTCB+0x5e>
	}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a46a:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <prvResetNextTaskUnblockTime+0x38>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a474:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a476:	f04f 32ff 	mov.w	r2, #4294967295
 800a47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a47c:	e008      	b.n	800a490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47e:	4b07      	ldr	r3, [pc, #28]	; (800a49c <prvResetNextTaskUnblockTime+0x38>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4a04      	ldr	r2, [pc, #16]	; (800a4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a48e:	6013      	str	r3, [r2, #0]
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	200015b8 	.word	0x200015b8
 800a4a0:	20001620 	.word	0x20001620

0800a4a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <xTaskGetSchedulerState+0x34>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	607b      	str	r3, [r7, #4]
 800a4b6:	e008      	b.n	800a4ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <xTaskGetSchedulerState+0x38>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	607b      	str	r3, [r7, #4]
 800a4c4:	e001      	b.n	800a4ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4ca:	687b      	ldr	r3, [r7, #4]
	}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	2000160c 	.word	0x2000160c
 800a4dc:	20001628 	.word	0x20001628

0800a4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d056      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4f6:	4b2e      	ldr	r3, [pc, #184]	; (800a5b0 <xTaskPriorityDisinherit+0xd0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d00a      	beq.n	800a516 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60bb      	str	r3, [r7, #8]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a538:	1e5a      	subs	r2, r3, #1
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	429a      	cmp	r2, r3
 800a548:	d02c      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d128      	bne.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3304      	adds	r3, #4
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fb6a 	bl	8008c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a574:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <xTaskPriorityDisinherit+0xd4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d903      	bls.n	800a584 <xTaskPriorityDisinherit+0xa4>
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <xTaskPriorityDisinherit+0xd4>)
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <xTaskPriorityDisinherit+0xd8>)
 800a592:	441a      	add	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe faeb 	bl	8008b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5a4:	697b      	ldr	r3, [r7, #20]
	}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	2000112c 	.word	0x2000112c
 800a5b4:	20001608 	.word	0x20001608
 800a5b8:	20001130 	.word	0x20001130

0800a5bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b086      	sub	sp, #24
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
 800a5c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a5ca:	f000 fecb 	bl	800b364 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a5ce:	4b29      	ldr	r3, [pc, #164]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d01c      	beq.n	800a616 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a5dc:	4b25      	ldr	r3, [pc, #148]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	43d2      	mvns	r2, r2
 800a5e8:	400a      	ands	r2, r1
 800a5ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a5ee:	4b21      	ldr	r3, [pc, #132]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00b      	beq.n	800a616 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5fe:	2101      	movs	r1, #1
 800a600:	6838      	ldr	r0, [r7, #0]
 800a602:	f000 f9dd 	bl	800a9c0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a606:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <xTaskNotifyWait+0xbc>)
 800a608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a60c:	601a      	str	r2, [r3, #0]
 800a60e:	f3bf 8f4f 	dsb	sy
 800a612:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a616:	f000 fed5 	bl	800b3c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a61a:	f000 fea3 	bl	800b364 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d005      	beq.n	800a630 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a624:	4b13      	ldr	r3, [pc, #76]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a630:	4b10      	ldr	r3, [pc, #64]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d002      	beq.n	800a644 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a63e:	2300      	movs	r3, #0
 800a640:	617b      	str	r3, [r7, #20]
 800a642:	e00a      	b.n	800a65a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a644:	4b0b      	ldr	r3, [pc, #44]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	43d2      	mvns	r2, r2
 800a650:	400a      	ands	r2, r1
 800a652:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800a656:	2301      	movs	r3, #1
 800a658:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a65a:	4b06      	ldr	r3, [pc, #24]	; (800a674 <xTaskNotifyWait+0xb8>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2200      	movs	r2, #0
 800a660:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800a664:	f000 feae 	bl	800b3c4 <vPortExitCritical>

		return xReturn;
 800a668:	697b      	ldr	r3, [r7, #20]
	}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	2000112c 	.word	0x2000112c
 800a678:	e000ed04 	.word	0xe000ed04

0800a67c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b08a      	sub	sp, #40	; 0x28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	603b      	str	r3, [r7, #0]
 800a688:	4613      	mov	r3, r2
 800a68a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a68c:	2301      	movs	r3, #1
 800a68e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10a      	bne.n	800a6ac <xTaskGenericNotify+0x30>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	61bb      	str	r3, [r7, #24]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a6b0:	f000 fe58 	bl	800b364 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d004      	beq.n	800a6c4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a6ba:	6a3b      	ldr	r3, [r7, #32]
 800a6bc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a6ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a6cc:	6a3b      	ldr	r3, [r7, #32]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	2b04      	cmp	r3, #4
 800a6d8:	d82d      	bhi.n	800a736 <xTaskGenericNotify+0xba>
 800a6da:	a201      	add	r2, pc, #4	; (adr r2, 800a6e0 <xTaskGenericNotify+0x64>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a759 	.word	0x0800a759
 800a6e4:	0800a6f5 	.word	0x0800a6f5
 800a6e8:	0800a707 	.word	0x0800a707
 800a6ec:	0800a717 	.word	0x0800a717
 800a6f0:	0800a721 	.word	0x0800a721
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a704:	e02b      	b.n	800a75e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a70c:	1c5a      	adds	r2, r3, #1
 800a70e:	6a3b      	ldr	r3, [r7, #32]
 800a710:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a714:	e023      	b.n	800a75e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a71e:	e01e      	b.n	800a75e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a720:	7ffb      	ldrb	r3, [r7, #31]
 800a722:	2b02      	cmp	r3, #2
 800a724:	d004      	beq.n	800a730 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a726:	6a3b      	ldr	r3, [r7, #32]
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a72e:	e016      	b.n	800a75e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a730:	2300      	movs	r3, #0
 800a732:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a734:	e013      	b.n	800a75e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a736:	6a3b      	ldr	r3, [r7, #32]
 800a738:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d00c      	beq.n	800a75c <xTaskGenericNotify+0xe0>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	617b      	str	r3, [r7, #20]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xTaskGenericNotify+0xda>
					break;
 800a758:	bf00      	nop
 800a75a:	e000      	b.n	800a75e <xTaskGenericNotify+0xe2>

					break;
 800a75c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a75e:	7ffb      	ldrb	r3, [r7, #31]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d13a      	bne.n	800a7da <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a764:	6a3b      	ldr	r3, [r7, #32]
 800a766:	3304      	adds	r3, #4
 800a768:	4618      	mov	r0, r3
 800a76a:	f7fe fa61 	bl	8008c30 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a772:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <xTaskGenericNotify+0x16c>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d903      	bls.n	800a782 <xTaskGenericNotify+0x106>
 800a77a:	6a3b      	ldr	r3, [r7, #32]
 800a77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77e:	4a1a      	ldr	r2, [pc, #104]	; (800a7e8 <xTaskGenericNotify+0x16c>)
 800a780:	6013      	str	r3, [r2, #0]
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	4a17      	ldr	r2, [pc, #92]	; (800a7ec <xTaskGenericNotify+0x170>)
 800a790:	441a      	add	r2, r3
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	3304      	adds	r3, #4
 800a796:	4619      	mov	r1, r3
 800a798:	4610      	mov	r0, r2
 800a79a:	f7fe f9ec 	bl	8008b76 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a79e:	6a3b      	ldr	r3, [r7, #32]
 800a7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00a      	beq.n	800a7bc <xTaskGenericNotify+0x140>
	__asm volatile
 800a7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7aa:	f383 8811 	msr	BASEPRI, r3
 800a7ae:	f3bf 8f6f 	isb	sy
 800a7b2:	f3bf 8f4f 	dsb	sy
 800a7b6:	613b      	str	r3, [r7, #16]
}
 800a7b8:	bf00      	nop
 800a7ba:	e7fe      	b.n	800a7ba <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7bc:	6a3b      	ldr	r3, [r7, #32]
 800a7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <xTaskGenericNotify+0x174>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d907      	bls.n	800a7da <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a7ca:	4b0a      	ldr	r3, [pc, #40]	; (800a7f4 <xTaskGenericNotify+0x178>)
 800a7cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a7da:	f000 fdf3 	bl	800b3c4 <vPortExitCritical>

		return xReturn;
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3728      	adds	r7, #40	; 0x28
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}
 800a7e8:	20001608 	.word	0x20001608
 800a7ec:	20001130 	.word	0x20001130
 800a7f0:	2000112c 	.word	0x2000112c
 800a7f4:	e000ed04 	.word	0xe000ed04

0800a7f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	; 0x38
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	60f8      	str	r0, [r7, #12]
 800a800:	60b9      	str	r1, [r7, #8]
 800a802:	603b      	str	r3, [r7, #0]
 800a804:	4613      	mov	r3, r2
 800a806:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a808:	2301      	movs	r3, #1
 800a80a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10a      	bne.n	800a828 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a816:	f383 8811 	msr	BASEPRI, r3
 800a81a:	f3bf 8f6f 	isb	sy
 800a81e:	f3bf 8f4f 	dsb	sy
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a824:	bf00      	nop
 800a826:	e7fe      	b.n	800a826 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a828:	f000 fe7e 	bl	800b528 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a830:	f3ef 8211 	mrs	r2, BASEPRI
 800a834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	623a      	str	r2, [r7, #32]
 800a846:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a848:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a84a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a85c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800a862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a868:	2202      	movs	r2, #2
 800a86a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800a86e:	79fb      	ldrb	r3, [r7, #7]
 800a870:	2b04      	cmp	r3, #4
 800a872:	d82f      	bhi.n	800a8d4 <xTaskGenericNotifyFromISR+0xdc>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <xTaskGenericNotifyFromISR+0x84>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a8f7 	.word	0x0800a8f7
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a8a3 	.word	0x0800a8a3
 800a888:	0800a8b3 	.word	0x0800a8b3
 800a88c:	0800a8bd 	.word	0x0800a8bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	431a      	orrs	r2, r3
 800a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a89c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a8a0:	e02c      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8ac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a8b0:	e024      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800a8ba:	e01f      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a8bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d004      	beq.n	800a8ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8c6:	68ba      	ldr	r2, [r7, #8]
 800a8c8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a8cc:	e016      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a8d2:	e013      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a8d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a8da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8de:	d00c      	beq.n	800a8fa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61bb      	str	r3, [r7, #24]
}
 800a8f2:	bf00      	nop
 800a8f4:	e7fe      	b.n	800a8f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a8f6:	bf00      	nop
 800a8f8:	e000      	b.n	800a8fc <xTaskGenericNotifyFromISR+0x104>
					break;
 800a8fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a8fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a900:	2b01      	cmp	r3, #1
 800a902:	d146      	bne.n	800a992 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d00a      	beq.n	800a922 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	617b      	str	r3, [r7, #20]
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a922:	4b21      	ldr	r3, [pc, #132]	; (800a9a8 <xTaskGenericNotifyFromISR+0x1b0>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d11d      	bne.n	800a966 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92c:	3304      	adds	r3, #4
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fe f97e 	bl	8008c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a938:	4b1c      	ldr	r3, [pc, #112]	; (800a9ac <xTaskGenericNotifyFromISR+0x1b4>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d903      	bls.n	800a948 <xTaskGenericNotifyFromISR+0x150>
 800a940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a944:	4a19      	ldr	r2, [pc, #100]	; (800a9ac <xTaskGenericNotifyFromISR+0x1b4>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a94c:	4613      	mov	r3, r2
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4a16      	ldr	r2, [pc, #88]	; (800a9b0 <xTaskGenericNotifyFromISR+0x1b8>)
 800a956:	441a      	add	r2, r3
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	3304      	adds	r3, #4
 800a95c:	4619      	mov	r1, r3
 800a95e:	4610      	mov	r0, r2
 800a960:	f7fe f909 	bl	8008b76 <vListInsertEnd>
 800a964:	e005      	b.n	800a972 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a968:	3318      	adds	r3, #24
 800a96a:	4619      	mov	r1, r3
 800a96c:	4811      	ldr	r0, [pc, #68]	; (800a9b4 <xTaskGenericNotifyFromISR+0x1bc>)
 800a96e:	f7fe f902 	bl	8008b76 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <xTaskGenericNotifyFromISR+0x1c0>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d908      	bls.n	800a992 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a988:	2201      	movs	r2, #1
 800a98a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a98c:	4b0b      	ldr	r3, [pc, #44]	; (800a9bc <xTaskGenericNotifyFromISR+0x1c4>)
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f383 8811 	msr	BASEPRI, r3
}
 800a99c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	3738      	adds	r7, #56	; 0x38
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20001628 	.word	0x20001628
 800a9ac:	20001608 	.word	0x20001608
 800a9b0:	20001130 	.word	0x20001130
 800a9b4:	200015c0 	.word	0x200015c0
 800a9b8:	2000112c 	.word	0x2000112c
 800a9bc:	20001614 	.word	0x20001614

0800a9c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a9ca:	4b21      	ldr	r3, [pc, #132]	; (800aa50 <prvAddCurrentTaskToDelayedList+0x90>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d0:	4b20      	ldr	r3, [pc, #128]	; (800aa54 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe f92a 	bl	8008c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e2:	d10a      	bne.n	800a9fa <prvAddCurrentTaskToDelayedList+0x3a>
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d007      	beq.n	800a9fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9ea:	4b1a      	ldr	r3, [pc, #104]	; (800aa54 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	3304      	adds	r3, #4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	4819      	ldr	r0, [pc, #100]	; (800aa58 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9f4:	f7fe f8bf 	bl	8008b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9f8:	e026      	b.n	800aa48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4413      	add	r3, r2
 800aa00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa02:	4b14      	ldr	r3, [pc, #80]	; (800aa54 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa0a:	68ba      	ldr	r2, [r7, #8]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	429a      	cmp	r2, r3
 800aa10:	d209      	bcs.n	800aa26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3304      	adds	r3, #4
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	4610      	mov	r0, r2
 800aa20:	f7fe f8cd 	bl	8008bbe <vListInsert>
}
 800aa24:	e010      	b.n	800aa48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa26:	4b0e      	ldr	r3, [pc, #56]	; (800aa60 <prvAddCurrentTaskToDelayedList+0xa0>)
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4b0a      	ldr	r3, [pc, #40]	; (800aa54 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fe f8c3 	bl	8008bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aa38:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d202      	bcs.n	800aa48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aa42:	4a08      	ldr	r2, [pc, #32]	; (800aa64 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	6013      	str	r3, [r2, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	20001604 	.word	0x20001604
 800aa54:	2000112c 	.word	0x2000112c
 800aa58:	200015ec 	.word	0x200015ec
 800aa5c:	200015bc 	.word	0x200015bc
 800aa60:	200015b8 	.word	0x200015b8
 800aa64:	20001620 	.word	0x20001620

0800aa68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08a      	sub	sp, #40	; 0x28
 800aa6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa72:	f000 fb07 	bl	800b084 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa76:	4b1c      	ldr	r3, [pc, #112]	; (800aae8 <xTimerCreateTimerTask+0x80>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d021      	beq.n	800aac2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa82:	2300      	movs	r3, #0
 800aa84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa86:	1d3a      	adds	r2, r7, #4
 800aa88:	f107 0108 	add.w	r1, r7, #8
 800aa8c:	f107 030c 	add.w	r3, r7, #12
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7fe f829 	bl	8008ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	68fa      	ldr	r2, [r7, #12]
 800aa9c:	9202      	str	r2, [sp, #8]
 800aa9e:	9301      	str	r3, [sp, #4]
 800aaa0:	2302      	movs	r3, #2
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	460a      	mov	r2, r1
 800aaa8:	4910      	ldr	r1, [pc, #64]	; (800aaec <xTimerCreateTimerTask+0x84>)
 800aaaa:	4811      	ldr	r0, [pc, #68]	; (800aaf0 <xTimerCreateTimerTask+0x88>)
 800aaac:	f7fe fe90 	bl	80097d0 <xTaskCreateStatic>
 800aab0:	4603      	mov	r3, r0
 800aab2:	4a10      	ldr	r2, [pc, #64]	; (800aaf4 <xTimerCreateTimerTask+0x8c>)
 800aab4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aab6:	4b0f      	ldr	r3, [pc, #60]	; (800aaf4 <xTimerCreateTimerTask+0x8c>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d001      	beq.n	800aac2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aabe:	2301      	movs	r3, #1
 800aac0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	613b      	str	r3, [r7, #16]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aade:	697b      	ldr	r3, [r7, #20]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	20001664 	.word	0x20001664
 800aaec:	0800d2c0 	.word	0x0800d2c0
 800aaf0:	0800ac2d 	.word	0x0800ac2d
 800aaf4:	20001668 	.word	0x20001668

0800aaf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b08a      	sub	sp, #40	; 0x28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab06:	2300      	movs	r3, #0
 800ab08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10a      	bne.n	800ab26 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	623b      	str	r3, [r7, #32]
}
 800ab22:	bf00      	nop
 800ab24:	e7fe      	b.n	800ab24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ab26:	4b1a      	ldr	r3, [pc, #104]	; (800ab90 <xTimerGenericCommand+0x98>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d02a      	beq.n	800ab84 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	dc18      	bgt.n	800ab72 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ab40:	f7ff fcb0 	bl	800a4a4 <xTaskGetSchedulerState>
 800ab44:	4603      	mov	r3, r0
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	d109      	bne.n	800ab5e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab4a:	4b11      	ldr	r3, [pc, #68]	; (800ab90 <xTimerGenericCommand+0x98>)
 800ab4c:	6818      	ldr	r0, [r3, #0]
 800ab4e:	f107 0110 	add.w	r1, r7, #16
 800ab52:	2300      	movs	r3, #0
 800ab54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab56:	f7fe f9d3 	bl	8008f00 <xQueueGenericSend>
 800ab5a:	6278      	str	r0, [r7, #36]	; 0x24
 800ab5c:	e012      	b.n	800ab84 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab5e:	4b0c      	ldr	r3, [pc, #48]	; (800ab90 <xTimerGenericCommand+0x98>)
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	f107 0110 	add.w	r1, r7, #16
 800ab66:	2300      	movs	r3, #0
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f7fe f9c9 	bl	8008f00 <xQueueGenericSend>
 800ab6e:	6278      	str	r0, [r7, #36]	; 0x24
 800ab70:	e008      	b.n	800ab84 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab72:	4b07      	ldr	r3, [pc, #28]	; (800ab90 <xTimerGenericCommand+0x98>)
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f107 0110 	add.w	r1, r7, #16
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	683a      	ldr	r2, [r7, #0]
 800ab7e:	f7fe fabd 	bl	80090fc <xQueueGenericSendFromISR>
 800ab82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3728      	adds	r7, #40	; 0x28
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20001664 	.word	0x20001664

0800ab94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b088      	sub	sp, #32
 800ab98:	af02      	add	r7, sp, #8
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9e:	4b22      	ldr	r3, [pc, #136]	; (800ac28 <prvProcessExpiredTimer+0x94>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	3304      	adds	r3, #4
 800abac:	4618      	mov	r0, r3
 800abae:	f7fe f83f 	bl	8008c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d022      	beq.n	800ac06 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	699a      	ldr	r2, [r3, #24]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	18d1      	adds	r1, r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	683a      	ldr	r2, [r7, #0]
 800abcc:	6978      	ldr	r0, [r7, #20]
 800abce:	f000 f8d1 	bl	800ad74 <prvInsertTimerInActiveList>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d01f      	beq.n	800ac18 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abd8:	2300      	movs	r3, #0
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	2300      	movs	r3, #0
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	2100      	movs	r1, #0
 800abe2:	6978      	ldr	r0, [r7, #20]
 800abe4:	f7ff ff88 	bl	800aaf8 <xTimerGenericCommand>
 800abe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d113      	bne.n	800ac18 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800abf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abf4:	f383 8811 	msr	BASEPRI, r3
 800abf8:	f3bf 8f6f 	isb	sy
 800abfc:	f3bf 8f4f 	dsb	sy
 800ac00:	60fb      	str	r3, [r7, #12]
}
 800ac02:	bf00      	nop
 800ac04:	e7fe      	b.n	800ac04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac0c:	f023 0301 	bic.w	r3, r3, #1
 800ac10:	b2da      	uxtb	r2, r3
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	6978      	ldr	r0, [r7, #20]
 800ac1e:	4798      	blx	r3
}
 800ac20:	bf00      	nop
 800ac22:	3718      	adds	r7, #24
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}
 800ac28:	2000165c 	.word	0x2000165c

0800ac2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac34:	f107 0308 	add.w	r3, r7, #8
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 f857 	bl	800acec <prvGetNextExpireTime>
 800ac3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4619      	mov	r1, r3
 800ac44:	68f8      	ldr	r0, [r7, #12]
 800ac46:	f000 f803 	bl	800ac50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac4a:	f000 f8d5 	bl	800adf8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac4e:	e7f1      	b.n	800ac34 <prvTimerTask+0x8>

0800ac50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
 800ac58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac5a:	f7ff f81b 	bl	8009c94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 f866 	bl	800ad34 <prvSampleTimeNow>
 800ac68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d130      	bne.n	800acd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d10a      	bne.n	800ac8c <prvProcessTimerOrBlockTask+0x3c>
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d806      	bhi.n	800ac8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac7e:	f7ff f817 	bl	8009cb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac82:	68f9      	ldr	r1, [r7, #12]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7ff ff85 	bl	800ab94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac8a:	e024      	b.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d008      	beq.n	800aca4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac92:	4b13      	ldr	r3, [pc, #76]	; (800ace0 <prvProcessTimerOrBlockTask+0x90>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <prvProcessTimerOrBlockTask+0x50>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e000      	b.n	800aca2 <prvProcessTimerOrBlockTask+0x52>
 800aca0:	2300      	movs	r3, #0
 800aca2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800aca4:	4b0f      	ldr	r3, [pc, #60]	; (800ace4 <prvProcessTimerOrBlockTask+0x94>)
 800aca6:	6818      	ldr	r0, [r3, #0]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	1ad3      	subs	r3, r2, r3
 800acae:	683a      	ldr	r2, [r7, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	f7fe fd59 	bl	8009768 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800acb6:	f7fe fffb 	bl	8009cb0 <xTaskResumeAll>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d10a      	bne.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800acc0:	4b09      	ldr	r3, [pc, #36]	; (800ace8 <prvProcessTimerOrBlockTask+0x98>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	f3bf 8f4f 	dsb	sy
 800accc:	f3bf 8f6f 	isb	sy
}
 800acd0:	e001      	b.n	800acd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800acd2:	f7fe ffed 	bl	8009cb0 <xTaskResumeAll>
}
 800acd6:	bf00      	nop
 800acd8:	3710      	adds	r7, #16
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20001660 	.word	0x20001660
 800ace4:	20001664 	.word	0x20001664
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800acec:	b480      	push	{r7}
 800acee:	b085      	sub	sp, #20
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acf4:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <prvGetNextExpireTime+0x44>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d101      	bne.n	800ad02 <prvGetNextExpireTime+0x16>
 800acfe:	2201      	movs	r2, #1
 800ad00:	e000      	b.n	800ad04 <prvGetNextExpireTime+0x18>
 800ad02:	2200      	movs	r2, #0
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d105      	bne.n	800ad1c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad10:	4b07      	ldr	r3, [pc, #28]	; (800ad30 <prvGetNextExpireTime+0x44>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	60fb      	str	r3, [r7, #12]
 800ad1a:	e001      	b.n	800ad20 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	2000165c 	.word	0x2000165c

0800ad34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ad3c:	f7ff f856 	bl	8009dec <xTaskGetTickCount>
 800ad40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ad42:	4b0b      	ldr	r3, [pc, #44]	; (800ad70 <prvSampleTimeNow+0x3c>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d205      	bcs.n	800ad58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad4c:	f000 f936 	bl	800afbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	e002      	b.n	800ad5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad5e:	4a04      	ldr	r2, [pc, #16]	; (800ad70 <prvSampleTimeNow+0x3c>)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad64:	68fb      	ldr	r3, [r7, #12]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	2000166c 	.word	0x2000166c

0800ad74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b086      	sub	sp, #24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
 800ad80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad82:	2300      	movs	r3, #0
 800ad84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	68ba      	ldr	r2, [r7, #8]
 800ad8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	68fa      	ldr	r2, [r7, #12]
 800ad90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d812      	bhi.n	800adc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	1ad2      	subs	r2, r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	699b      	ldr	r3, [r3, #24]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d302      	bcc.n	800adae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ada8:	2301      	movs	r3, #1
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e01b      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800adae:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <prvInsertTimerInActiveList+0x7c>)
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	3304      	adds	r3, #4
 800adb6:	4619      	mov	r1, r3
 800adb8:	4610      	mov	r0, r2
 800adba:	f7fd ff00 	bl	8008bbe <vListInsert>
 800adbe:	e012      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d206      	bcs.n	800add6 <prvInsertTimerInActiveList+0x62>
 800adc8:	68ba      	ldr	r2, [r7, #8]
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	429a      	cmp	r2, r3
 800adce:	d302      	bcc.n	800add6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800add0:	2301      	movs	r3, #1
 800add2:	617b      	str	r3, [r7, #20]
 800add4:	e007      	b.n	800ade6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800add6:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <prvInsertTimerInActiveList+0x80>)
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	3304      	adds	r3, #4
 800adde:	4619      	mov	r1, r3
 800ade0:	4610      	mov	r0, r2
 800ade2:	f7fd feec 	bl	8008bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ade6:	697b      	ldr	r3, [r7, #20]
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3718      	adds	r7, #24
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	20001660 	.word	0x20001660
 800adf4:	2000165c 	.word	0x2000165c

0800adf8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b08e      	sub	sp, #56	; 0x38
 800adfc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adfe:	e0ca      	b.n	800af96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	da18      	bge.n	800ae38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae06:	1d3b      	adds	r3, r7, #4
 800ae08:	3304      	adds	r3, #4
 800ae0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10a      	bne.n	800ae28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	61fb      	str	r3, [r7, #28]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae2e:	6850      	ldr	r0, [r2, #4]
 800ae30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae32:	6892      	ldr	r2, [r2, #8]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f2c0 80aa 	blt.w	800af94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d004      	beq.n	800ae56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4618      	mov	r0, r3
 800ae52:	f7fd feed 	bl	8008c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae56:	463b      	mov	r3, r7
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f7ff ff6b 	bl	800ad34 <prvSampleTimeNow>
 800ae5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2b09      	cmp	r3, #9
 800ae64:	f200 8097 	bhi.w	800af96 <prvProcessReceivedCommands+0x19e>
 800ae68:	a201      	add	r2, pc, #4	; (adr r2, 800ae70 <prvProcessReceivedCommands+0x78>)
 800ae6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae6e:	bf00      	nop
 800ae70:	0800ae99 	.word	0x0800ae99
 800ae74:	0800ae99 	.word	0x0800ae99
 800ae78:	0800ae99 	.word	0x0800ae99
 800ae7c:	0800af0d 	.word	0x0800af0d
 800ae80:	0800af21 	.word	0x0800af21
 800ae84:	0800af6b 	.word	0x0800af6b
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800ae99 	.word	0x0800ae99
 800ae90:	0800af0d 	.word	0x0800af0d
 800ae94:	0800af21 	.word	0x0800af21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aeaa:	68ba      	ldr	r2, [r7, #8]
 800aeac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	18d1      	adds	r1, r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeb8:	f7ff ff5c 	bl	800ad74 <prvInsertTimerInActiveList>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d069      	beq.n	800af96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aec8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed0:	f003 0304 	and.w	r3, r3, #4
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d05e      	beq.n	800af96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aedc:	699b      	ldr	r3, [r3, #24]
 800aede:	441a      	add	r2, r3
 800aee0:	2300      	movs	r3, #0
 800aee2:	9300      	str	r3, [sp, #0]
 800aee4:	2300      	movs	r3, #0
 800aee6:	2100      	movs	r1, #0
 800aee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aeea:	f7ff fe05 	bl	800aaf8 <xTimerGenericCommand>
 800aeee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aef0:	6a3b      	ldr	r3, [r7, #32]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d14f      	bne.n	800af96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefa:	f383 8811 	msr	BASEPRI, r3
 800aefe:	f3bf 8f6f 	isb	sy
 800af02:	f3bf 8f4f 	dsb	sy
 800af06:	61bb      	str	r3, [r7, #24]
}
 800af08:	bf00      	nop
 800af0a:	e7fe      	b.n	800af0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af12:	f023 0301 	bic.w	r3, r3, #1
 800af16:	b2da      	uxtb	r2, r3
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800af1e:	e03a      	b.n	800af96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d10a      	bne.n	800af56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800af40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af44:	f383 8811 	msr	BASEPRI, r3
 800af48:	f3bf 8f6f 	isb	sy
 800af4c:	f3bf 8f4f 	dsb	sy
 800af50:	617b      	str	r3, [r7, #20]
}
 800af52:	bf00      	nop
 800af54:	e7fe      	b.n	800af54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	699a      	ldr	r2, [r3, #24]
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	18d1      	adds	r1, r2, r3
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af64:	f7ff ff06 	bl	800ad74 <prvInsertTimerInActiveList>
					break;
 800af68:	e015      	b.n	800af96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d103      	bne.n	800af80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800af78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af7a:	f000 fbe1 	bl	800b740 <vPortFree>
 800af7e:	e00a      	b.n	800af96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af86:	f023 0301 	bic.w	r3, r3, #1
 800af8a:	b2da      	uxtb	r2, r3
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af92:	e000      	b.n	800af96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800af94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af96:	4b08      	ldr	r3, [pc, #32]	; (800afb8 <prvProcessReceivedCommands+0x1c0>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	1d39      	adds	r1, r7, #4
 800af9c:	2200      	movs	r2, #0
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe f948 	bl	8009234 <xQueueReceive>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f47f af2a 	bne.w	800ae00 <prvProcessReceivedCommands+0x8>
	}
}
 800afac:	bf00      	nop
 800afae:	bf00      	nop
 800afb0:	3730      	adds	r7, #48	; 0x30
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20001664 	.word	0x20001664

0800afbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800afc2:	e048      	b.n	800b056 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afc4:	4b2d      	ldr	r3, [pc, #180]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68db      	ldr	r3, [r3, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afce:	4b2b      	ldr	r3, [pc, #172]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	68db      	ldr	r3, [r3, #12]
 800afd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	3304      	adds	r3, #4
 800afdc:	4618      	mov	r0, r3
 800afde:	f7fd fe27 	bl	8008c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff0:	f003 0304 	and.w	r3, r3, #4
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d02e      	beq.n	800b056 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	693a      	ldr	r2, [r7, #16]
 800affe:	4413      	add	r3, r2
 800b000:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	429a      	cmp	r2, r3
 800b008:	d90e      	bls.n	800b028 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	68fa      	ldr	r2, [r7, #12]
 800b014:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b016:	4b19      	ldr	r3, [pc, #100]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3304      	adds	r3, #4
 800b01e:	4619      	mov	r1, r3
 800b020:	4610      	mov	r0, r2
 800b022:	f7fd fdcc 	bl	8008bbe <vListInsert>
 800b026:	e016      	b.n	800b056 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b028:	2300      	movs	r3, #0
 800b02a:	9300      	str	r3, [sp, #0]
 800b02c:	2300      	movs	r3, #0
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	2100      	movs	r1, #0
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f7ff fd60 	bl	800aaf8 <xTimerGenericCommand>
 800b038:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b044:	f383 8811 	msr	BASEPRI, r3
 800b048:	f3bf 8f6f 	isb	sy
 800b04c:	f3bf 8f4f 	dsb	sy
 800b050:	603b      	str	r3, [r7, #0]
}
 800b052:	bf00      	nop
 800b054:	e7fe      	b.n	800b054 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b056:	4b09      	ldr	r3, [pc, #36]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d1b1      	bne.n	800afc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b060:	4b06      	ldr	r3, [pc, #24]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b066:	4b06      	ldr	r3, [pc, #24]	; (800b080 <prvSwitchTimerLists+0xc4>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a04      	ldr	r2, [pc, #16]	; (800b07c <prvSwitchTimerLists+0xc0>)
 800b06c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b06e:	4a04      	ldr	r2, [pc, #16]	; (800b080 <prvSwitchTimerLists+0xc4>)
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	6013      	str	r3, [r2, #0]
}
 800b074:	bf00      	nop
 800b076:	3718      	adds	r7, #24
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	2000165c 	.word	0x2000165c
 800b080:	20001660 	.word	0x20001660

0800b084 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b08a:	f000 f96b 	bl	800b364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b08e:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <prvCheckForValidListAndQueue+0x60>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d120      	bne.n	800b0d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b096:	4814      	ldr	r0, [pc, #80]	; (800b0e8 <prvCheckForValidListAndQueue+0x64>)
 800b098:	f7fd fd40 	bl	8008b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b09c:	4813      	ldr	r0, [pc, #76]	; (800b0ec <prvCheckForValidListAndQueue+0x68>)
 800b09e:	f7fd fd3d 	bl	8008b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b0a2:	4b13      	ldr	r3, [pc, #76]	; (800b0f0 <prvCheckForValidListAndQueue+0x6c>)
 800b0a4:	4a10      	ldr	r2, [pc, #64]	; (800b0e8 <prvCheckForValidListAndQueue+0x64>)
 800b0a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b0a8:	4b12      	ldr	r3, [pc, #72]	; (800b0f4 <prvCheckForValidListAndQueue+0x70>)
 800b0aa:	4a10      	ldr	r2, [pc, #64]	; (800b0ec <prvCheckForValidListAndQueue+0x68>)
 800b0ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9300      	str	r3, [sp, #0]
 800b0b2:	4b11      	ldr	r3, [pc, #68]	; (800b0f8 <prvCheckForValidListAndQueue+0x74>)
 800b0b4:	4a11      	ldr	r2, [pc, #68]	; (800b0fc <prvCheckForValidListAndQueue+0x78>)
 800b0b6:	2110      	movs	r1, #16
 800b0b8:	200a      	movs	r0, #10
 800b0ba:	f7fd fe4b 	bl	8008d54 <xQueueGenericCreateStatic>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	4a08      	ldr	r2, [pc, #32]	; (800b0e4 <prvCheckForValidListAndQueue+0x60>)
 800b0c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b0c4:	4b07      	ldr	r3, [pc, #28]	; (800b0e4 <prvCheckForValidListAndQueue+0x60>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d005      	beq.n	800b0d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b0cc:	4b05      	ldr	r3, [pc, #20]	; (800b0e4 <prvCheckForValidListAndQueue+0x60>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	490b      	ldr	r1, [pc, #44]	; (800b100 <prvCheckForValidListAndQueue+0x7c>)
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fb1e 	bl	8009714 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0d8:	f000 f974 	bl	800b3c4 <vPortExitCritical>
}
 800b0dc:	bf00      	nop
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20001664 	.word	0x20001664
 800b0e8:	20001634 	.word	0x20001634
 800b0ec:	20001648 	.word	0x20001648
 800b0f0:	2000165c 	.word	0x2000165c
 800b0f4:	20001660 	.word	0x20001660
 800b0f8:	20001710 	.word	0x20001710
 800b0fc:	20001670 	.word	0x20001670
 800b100:	0800d2c8 	.word	0x0800d2c8

0800b104 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	60f8      	str	r0, [r7, #12]
 800b10c:	60b9      	str	r1, [r7, #8]
 800b10e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3b04      	subs	r3, #4
 800b114:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b11c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3b04      	subs	r3, #4
 800b122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	f023 0201 	bic.w	r2, r3, #1
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3b04      	subs	r3, #4
 800b132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b134:	4a0c      	ldr	r2, [pc, #48]	; (800b168 <pxPortInitialiseStack+0x64>)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	3b14      	subs	r3, #20
 800b13e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	3b04      	subs	r3, #4
 800b14a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f06f 0202 	mvn.w	r2, #2
 800b152:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	3b20      	subs	r3, #32
 800b158:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b15a:	68fb      	ldr	r3, [r7, #12]
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	0800b16d 	.word	0x0800b16d

0800b16c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b172:	2300      	movs	r3, #0
 800b174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b176:	4b12      	ldr	r3, [pc, #72]	; (800b1c0 <prvTaskExitError+0x54>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b17e:	d00a      	beq.n	800b196 <prvTaskExitError+0x2a>
	__asm volatile
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	60fb      	str	r3, [r7, #12]
}
 800b192:	bf00      	nop
 800b194:	e7fe      	b.n	800b194 <prvTaskExitError+0x28>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	60bb      	str	r3, [r7, #8]
}
 800b1a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b1aa:	bf00      	nop
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d0fc      	beq.n	800b1ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b1b2:	bf00      	nop
 800b1b4:	bf00      	nop
 800b1b6:	3714      	adds	r7, #20
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	2000001c 	.word	0x2000001c
	...

0800b1d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <pxCurrentTCBConst2>)
 800b1d2:	6819      	ldr	r1, [r3, #0]
 800b1d4:	6808      	ldr	r0, [r1, #0]
 800b1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1da:	f380 8809 	msr	PSP, r0
 800b1de:	f3bf 8f6f 	isb	sy
 800b1e2:	f04f 0000 	mov.w	r0, #0
 800b1e6:	f380 8811 	msr	BASEPRI, r0
 800b1ea:	4770      	bx	lr
 800b1ec:	f3af 8000 	nop.w

0800b1f0 <pxCurrentTCBConst2>:
 800b1f0:	2000112c 	.word	0x2000112c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop

0800b1f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1f8:	4808      	ldr	r0, [pc, #32]	; (800b21c <prvPortStartFirstTask+0x24>)
 800b1fa:	6800      	ldr	r0, [r0, #0]
 800b1fc:	6800      	ldr	r0, [r0, #0]
 800b1fe:	f380 8808 	msr	MSP, r0
 800b202:	f04f 0000 	mov.w	r0, #0
 800b206:	f380 8814 	msr	CONTROL, r0
 800b20a:	b662      	cpsie	i
 800b20c:	b661      	cpsie	f
 800b20e:	f3bf 8f4f 	dsb	sy
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	df00      	svc	0
 800b218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b21a:	bf00      	nop
 800b21c:	e000ed08 	.word	0xe000ed08

0800b220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b226:	4b46      	ldr	r3, [pc, #280]	; (800b340 <xPortStartScheduler+0x120>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a46      	ldr	r2, [pc, #280]	; (800b344 <xPortStartScheduler+0x124>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d10a      	bne.n	800b246 <xPortStartScheduler+0x26>
	__asm volatile
 800b230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	613b      	str	r3, [r7, #16]
}
 800b242:	bf00      	nop
 800b244:	e7fe      	b.n	800b244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b246:	4b3e      	ldr	r3, [pc, #248]	; (800b340 <xPortStartScheduler+0x120>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a3f      	ldr	r2, [pc, #252]	; (800b348 <xPortStartScheduler+0x128>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d10a      	bne.n	800b266 <xPortStartScheduler+0x46>
	__asm volatile
 800b250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b254:	f383 8811 	msr	BASEPRI, r3
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	f3bf 8f4f 	dsb	sy
 800b260:	60fb      	str	r3, [r7, #12]
}
 800b262:	bf00      	nop
 800b264:	e7fe      	b.n	800b264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b266:	4b39      	ldr	r3, [pc, #228]	; (800b34c <xPortStartScheduler+0x12c>)
 800b268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b2db      	uxtb	r3, r3
 800b270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	22ff      	movs	r2, #255	; 0xff
 800b276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	4b31      	ldr	r3, [pc, #196]	; (800b350 <xPortStartScheduler+0x130>)
 800b28c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b28e:	4b31      	ldr	r3, [pc, #196]	; (800b354 <xPortStartScheduler+0x134>)
 800b290:	2207      	movs	r2, #7
 800b292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b294:	e009      	b.n	800b2aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b296:	4b2f      	ldr	r3, [pc, #188]	; (800b354 <xPortStartScheduler+0x134>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	3b01      	subs	r3, #1
 800b29c:	4a2d      	ldr	r2, [pc, #180]	; (800b354 <xPortStartScheduler+0x134>)
 800b29e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	b2db      	uxtb	r3, r3
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2aa:	78fb      	ldrb	r3, [r7, #3]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2b2:	2b80      	cmp	r3, #128	; 0x80
 800b2b4:	d0ef      	beq.n	800b296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b2b6:	4b27      	ldr	r3, [pc, #156]	; (800b354 <xPortStartScheduler+0x134>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f1c3 0307 	rsb	r3, r3, #7
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	d00a      	beq.n	800b2d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c6:	f383 8811 	msr	BASEPRI, r3
 800b2ca:	f3bf 8f6f 	isb	sy
 800b2ce:	f3bf 8f4f 	dsb	sy
 800b2d2:	60bb      	str	r3, [r7, #8]
}
 800b2d4:	bf00      	nop
 800b2d6:	e7fe      	b.n	800b2d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b2d8:	4b1e      	ldr	r3, [pc, #120]	; (800b354 <xPortStartScheduler+0x134>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	4a1d      	ldr	r2, [pc, #116]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2e2:	4b1c      	ldr	r3, [pc, #112]	; (800b354 <xPortStartScheduler+0x134>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b2ea:	4a1a      	ldr	r2, [pc, #104]	; (800b354 <xPortStartScheduler+0x134>)
 800b2ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	b2da      	uxtb	r2, r3
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <xPortStartScheduler+0x138>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a17      	ldr	r2, [pc, #92]	; (800b358 <xPortStartScheduler+0x138>)
 800b2fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b302:	4b15      	ldr	r3, [pc, #84]	; (800b358 <xPortStartScheduler+0x138>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a14      	ldr	r2, [pc, #80]	; (800b358 <xPortStartScheduler+0x138>)
 800b308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b30c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b30e:	f000 f8dd 	bl	800b4cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <xPortStartScheduler+0x13c>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b318:	f000 f8fc 	bl	800b514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b31c:	4b10      	ldr	r3, [pc, #64]	; (800b360 <xPortStartScheduler+0x140>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a0f      	ldr	r2, [pc, #60]	; (800b360 <xPortStartScheduler+0x140>)
 800b322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b328:	f7ff ff66 	bl	800b1f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b32c:	f7fe fe28 	bl	8009f80 <vTaskSwitchContext>
	prvTaskExitError();
 800b330:	f7ff ff1c 	bl	800b16c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3718      	adds	r7, #24
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	e000ed00 	.word	0xe000ed00
 800b344:	410fc271 	.word	0x410fc271
 800b348:	410fc270 	.word	0x410fc270
 800b34c:	e000e400 	.word	0xe000e400
 800b350:	20001760 	.word	0x20001760
 800b354:	20001764 	.word	0x20001764
 800b358:	e000ed20 	.word	0xe000ed20
 800b35c:	2000001c 	.word	0x2000001c
 800b360:	e000ef34 	.word	0xe000ef34

0800b364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
	__asm volatile
 800b36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b36e:	f383 8811 	msr	BASEPRI, r3
 800b372:	f3bf 8f6f 	isb	sy
 800b376:	f3bf 8f4f 	dsb	sy
 800b37a:	607b      	str	r3, [r7, #4]
}
 800b37c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <vPortEnterCritical+0x58>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	3301      	adds	r3, #1
 800b384:	4a0d      	ldr	r2, [pc, #52]	; (800b3bc <vPortEnterCritical+0x58>)
 800b386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b388:	4b0c      	ldr	r3, [pc, #48]	; (800b3bc <vPortEnterCritical+0x58>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d10f      	bne.n	800b3b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b390:	4b0b      	ldr	r3, [pc, #44]	; (800b3c0 <vPortEnterCritical+0x5c>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00a      	beq.n	800b3b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	603b      	str	r3, [r7, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <vPortEnterCritical+0x4a>
	}
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	2000001c 	.word	0x2000001c
 800b3c0:	e000ed04 	.word	0xe000ed04

0800b3c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b3ca:	4b12      	ldr	r3, [pc, #72]	; (800b414 <vPortExitCritical+0x50>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <vPortExitCritical+0x24>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	607b      	str	r3, [r7, #4]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <vPortExitCritical+0x50>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <vPortExitCritical+0x50>)
 800b3f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3f2:	4b08      	ldr	r3, [pc, #32]	; (800b414 <vPortExitCritical+0x50>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d105      	bne.n	800b406 <vPortExitCritical+0x42>
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	f383 8811 	msr	BASEPRI, r3
}
 800b404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b406:	bf00      	nop
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	2000001c 	.word	0x2000001c
	...

0800b420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b420:	f3ef 8009 	mrs	r0, PSP
 800b424:	f3bf 8f6f 	isb	sy
 800b428:	4b15      	ldr	r3, [pc, #84]	; (800b480 <pxCurrentTCBConst>)
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	f01e 0f10 	tst.w	lr, #16
 800b430:	bf08      	it	eq
 800b432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43a:	6010      	str	r0, [r2, #0]
 800b43c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b440:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b444:	f380 8811 	msr	BASEPRI, r0
 800b448:	f3bf 8f4f 	dsb	sy
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f7fe fd96 	bl	8009f80 <vTaskSwitchContext>
 800b454:	f04f 0000 	mov.w	r0, #0
 800b458:	f380 8811 	msr	BASEPRI, r0
 800b45c:	bc09      	pop	{r0, r3}
 800b45e:	6819      	ldr	r1, [r3, #0]
 800b460:	6808      	ldr	r0, [r1, #0]
 800b462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b466:	f01e 0f10 	tst.w	lr, #16
 800b46a:	bf08      	it	eq
 800b46c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b470:	f380 8809 	msr	PSP, r0
 800b474:	f3bf 8f6f 	isb	sy
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	f3af 8000 	nop.w

0800b480 <pxCurrentTCBConst>:
 800b480:	2000112c 	.word	0x2000112c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b484:	bf00      	nop
 800b486:	bf00      	nop

0800b488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	607b      	str	r3, [r7, #4]
}
 800b4a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b4a2:	f7fe fcb3 	bl	8009e0c <xTaskIncrementTick>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b4ac:	4b06      	ldr	r3, [pc, #24]	; (800b4c8 <xPortSysTickHandler+0x40>)
 800b4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	f383 8811 	msr	BASEPRI, r3
}
 800b4be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b4c0:	bf00      	nop
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	e000ed04 	.word	0xe000ed04

0800b4cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b4d0:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b4d6:	4b0b      	ldr	r3, [pc, #44]	; (800b504 <vPortSetupTimerInterrupt+0x38>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <vPortSetupTimerInterrupt+0x3c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a0a      	ldr	r2, [pc, #40]	; (800b50c <vPortSetupTimerInterrupt+0x40>)
 800b4e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4e6:	099b      	lsrs	r3, r3, #6
 800b4e8:	4a09      	ldr	r2, [pc, #36]	; (800b510 <vPortSetupTimerInterrupt+0x44>)
 800b4ea:	3b01      	subs	r3, #1
 800b4ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ee:	4b04      	ldr	r3, [pc, #16]	; (800b500 <vPortSetupTimerInterrupt+0x34>)
 800b4f0:	2207      	movs	r2, #7
 800b4f2:	601a      	str	r2, [r3, #0]
}
 800b4f4:	bf00      	nop
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	e000e010 	.word	0xe000e010
 800b504:	e000e018 	.word	0xe000e018
 800b508:	20000000 	.word	0x20000000
 800b50c:	10624dd3 	.word	0x10624dd3
 800b510:	e000e014 	.word	0xe000e014

0800b514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b524 <vPortEnableVFP+0x10>
 800b518:	6801      	ldr	r1, [r0, #0]
 800b51a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b51e:	6001      	str	r1, [r0, #0]
 800b520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b522:	bf00      	nop
 800b524:	e000ed88 	.word	0xe000ed88

0800b528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b52e:	f3ef 8305 	mrs	r3, IPSR
 800b532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	2b0f      	cmp	r3, #15
 800b538:	d914      	bls.n	800b564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b53a:	4a17      	ldr	r2, [pc, #92]	; (800b598 <vPortValidateInterruptPriority+0x70>)
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	4413      	add	r3, r2
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b544:	4b15      	ldr	r3, [pc, #84]	; (800b59c <vPortValidateInterruptPriority+0x74>)
 800b546:	781b      	ldrb	r3, [r3, #0]
 800b548:	7afa      	ldrb	r2, [r7, #11]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d20a      	bcs.n	800b564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	607b      	str	r3, [r7, #4]
}
 800b560:	bf00      	nop
 800b562:	e7fe      	b.n	800b562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b564:	4b0e      	ldr	r3, [pc, #56]	; (800b5a0 <vPortValidateInterruptPriority+0x78>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b56c:	4b0d      	ldr	r3, [pc, #52]	; (800b5a4 <vPortValidateInterruptPriority+0x7c>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	429a      	cmp	r2, r3
 800b572:	d90a      	bls.n	800b58a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	603b      	str	r3, [r7, #0]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <vPortValidateInterruptPriority+0x60>
	}
 800b58a:	bf00      	nop
 800b58c:	3714      	adds	r7, #20
 800b58e:	46bd      	mov	sp, r7
 800b590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b594:	4770      	bx	lr
 800b596:	bf00      	nop
 800b598:	e000e3f0 	.word	0xe000e3f0
 800b59c:	20001760 	.word	0x20001760
 800b5a0:	e000ed0c 	.word	0xe000ed0c
 800b5a4:	20001764 	.word	0x20001764

0800b5a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b08a      	sub	sp, #40	; 0x28
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b5b4:	f7fe fb6e 	bl	8009c94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b5b8:	4b5b      	ldr	r3, [pc, #364]	; (800b728 <pvPortMalloc+0x180>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b5c0:	f000 f920 	bl	800b804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b5c4:	4b59      	ldr	r3, [pc, #356]	; (800b72c <pvPortMalloc+0x184>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f040 8093 	bne.w	800b6f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d01d      	beq.n	800b614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b5d8:	2208      	movs	r2, #8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	4413      	add	r3, r2
 800b5de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f003 0307 	and.w	r3, r3, #7
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d014      	beq.n	800b614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f023 0307 	bic.w	r3, r3, #7
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0307 	and.w	r3, r3, #7
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00a      	beq.n	800b614 <pvPortMalloc+0x6c>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	617b      	str	r3, [r7, #20]
}
 800b610:	bf00      	nop
 800b612:	e7fe      	b.n	800b612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d06e      	beq.n	800b6f8 <pvPortMalloc+0x150>
 800b61a:	4b45      	ldr	r3, [pc, #276]	; (800b730 <pvPortMalloc+0x188>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	429a      	cmp	r2, r3
 800b622:	d869      	bhi.n	800b6f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b624:	4b43      	ldr	r3, [pc, #268]	; (800b734 <pvPortMalloc+0x18c>)
 800b626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b628:	4b42      	ldr	r3, [pc, #264]	; (800b734 <pvPortMalloc+0x18c>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b62e:	e004      	b.n	800b63a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	687a      	ldr	r2, [r7, #4]
 800b640:	429a      	cmp	r2, r3
 800b642:	d903      	bls.n	800b64c <pvPortMalloc+0xa4>
 800b644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f1      	bne.n	800b630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b64c:	4b36      	ldr	r3, [pc, #216]	; (800b728 <pvPortMalloc+0x180>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b652:	429a      	cmp	r2, r3
 800b654:	d050      	beq.n	800b6f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b656:	6a3b      	ldr	r3, [r7, #32]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	2208      	movs	r2, #8
 800b65c:	4413      	add	r3, r2
 800b65e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	2308      	movs	r3, #8
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	429a      	cmp	r2, r3
 800b676:	d91f      	bls.n	800b6b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	4413      	add	r3, r2
 800b67e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	f003 0307 	and.w	r3, r3, #7
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <pvPortMalloc+0xf8>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	613b      	str	r3, [r7, #16]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b6b2:	69b8      	ldr	r0, [r7, #24]
 800b6b4:	f000 f908 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b6b8:	4b1d      	ldr	r3, [pc, #116]	; (800b730 <pvPortMalloc+0x188>)
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	1ad3      	subs	r3, r2, r3
 800b6c2:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <pvPortMalloc+0x188>)
 800b6c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b6c6:	4b1a      	ldr	r3, [pc, #104]	; (800b730 <pvPortMalloc+0x188>)
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	; (800b738 <pvPortMalloc+0x190>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d203      	bcs.n	800b6da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b6d2:	4b17      	ldr	r3, [pc, #92]	; (800b730 <pvPortMalloc+0x188>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a18      	ldr	r2, [pc, #96]	; (800b738 <pvPortMalloc+0x190>)
 800b6d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	4b13      	ldr	r3, [pc, #76]	; (800b72c <pvPortMalloc+0x184>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	431a      	orrs	r2, r3
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6ee:	4b13      	ldr	r3, [pc, #76]	; (800b73c <pvPortMalloc+0x194>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	4a11      	ldr	r2, [pc, #68]	; (800b73c <pvPortMalloc+0x194>)
 800b6f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6f8:	f7fe fada 	bl	8009cb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6fc:	69fb      	ldr	r3, [r7, #28]
 800b6fe:	f003 0307 	and.w	r3, r3, #7
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <pvPortMalloc+0x174>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	60fb      	str	r3, [r7, #12]
}
 800b718:	bf00      	nop
 800b71a:	e7fe      	b.n	800b71a <pvPortMalloc+0x172>
	return pvReturn;
 800b71c:	69fb      	ldr	r3, [r7, #28]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3728      	adds	r7, #40	; 0x28
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	20002710 	.word	0x20002710
 800b72c:	20002724 	.word	0x20002724
 800b730:	20002714 	.word	0x20002714
 800b734:	20002708 	.word	0x20002708
 800b738:	20002718 	.word	0x20002718
 800b73c:	2000271c 	.word	0x2000271c

0800b740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d04d      	beq.n	800b7ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b752:	2308      	movs	r3, #8
 800b754:	425b      	negs	r3, r3
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	4413      	add	r3, r2
 800b75a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	685a      	ldr	r2, [r3, #4]
 800b764:	4b24      	ldr	r3, [pc, #144]	; (800b7f8 <vPortFree+0xb8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4013      	ands	r3, r2
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10a      	bne.n	800b784 <vPortFree+0x44>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60fb      	str	r3, [r7, #12]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d00a      	beq.n	800b7a2 <vPortFree+0x62>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	60bb      	str	r3, [r7, #8]
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	685a      	ldr	r2, [r3, #4]
 800b7a6:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <vPortFree+0xb8>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d01e      	beq.n	800b7ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d11a      	bne.n	800b7ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	685a      	ldr	r2, [r3, #4]
 800b7bc:	4b0e      	ldr	r3, [pc, #56]	; (800b7f8 <vPortFree+0xb8>)
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b7c8:	f7fe fa64 	bl	8009c94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	685a      	ldr	r2, [r3, #4]
 800b7d0:	4b0a      	ldr	r3, [pc, #40]	; (800b7fc <vPortFree+0xbc>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4413      	add	r3, r2
 800b7d6:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <vPortFree+0xbc>)
 800b7d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7da:	6938      	ldr	r0, [r7, #16]
 800b7dc:	f000 f874 	bl	800b8c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7e0:	4b07      	ldr	r3, [pc, #28]	; (800b800 <vPortFree+0xc0>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	4a06      	ldr	r2, [pc, #24]	; (800b800 <vPortFree+0xc0>)
 800b7e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7ea:	f7fe fa61 	bl	8009cb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20002724 	.word	0x20002724
 800b7fc:	20002714 	.word	0x20002714
 800b800:	20002720 	.word	0x20002720

0800b804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b80a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b80e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b810:	4b27      	ldr	r3, [pc, #156]	; (800b8b0 <prvHeapInit+0xac>)
 800b812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00c      	beq.n	800b838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	3307      	adds	r3, #7
 800b822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0307 	bic.w	r3, r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	4a1f      	ldr	r2, [pc, #124]	; (800b8b0 <prvHeapInit+0xac>)
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b83c:	4a1d      	ldr	r2, [pc, #116]	; (800b8b4 <prvHeapInit+0xb0>)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b842:	4b1c      	ldr	r3, [pc, #112]	; (800b8b4 <prvHeapInit+0xb0>)
 800b844:	2200      	movs	r2, #0
 800b846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68ba      	ldr	r2, [r7, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b850:	2208      	movs	r2, #8
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	1a9b      	subs	r3, r3, r2
 800b856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f023 0307 	bic.w	r3, r3, #7
 800b85e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	4a15      	ldr	r2, [pc, #84]	; (800b8b8 <prvHeapInit+0xb4>)
 800b864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b866:	4b14      	ldr	r3, [pc, #80]	; (800b8b8 <prvHeapInit+0xb4>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b86e:	4b12      	ldr	r3, [pc, #72]	; (800b8b8 <prvHeapInit+0xb4>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2200      	movs	r2, #0
 800b874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b884:	4b0c      	ldr	r3, [pc, #48]	; (800b8b8 <prvHeapInit+0xb4>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	4a0a      	ldr	r2, [pc, #40]	; (800b8bc <prvHeapInit+0xb8>)
 800b892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <prvHeapInit+0xbc>)
 800b89a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b89c:	4b09      	ldr	r3, [pc, #36]	; (800b8c4 <prvHeapInit+0xc0>)
 800b89e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b8a2:	601a      	str	r2, [r3, #0]
}
 800b8a4:	bf00      	nop
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	20001768 	.word	0x20001768
 800b8b4:	20002708 	.word	0x20002708
 800b8b8:	20002710 	.word	0x20002710
 800b8bc:	20002718 	.word	0x20002718
 800b8c0:	20002714 	.word	0x20002714
 800b8c4:	20002724 	.word	0x20002724

0800b8c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	b085      	sub	sp, #20
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b8d0:	4b28      	ldr	r3, [pc, #160]	; (800b974 <prvInsertBlockIntoFreeList+0xac>)
 800b8d2:	60fb      	str	r3, [r7, #12]
 800b8d4:	e002      	b.n	800b8dc <prvInsertBlockIntoFreeList+0x14>
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	60fb      	str	r3, [r7, #12]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d8f7      	bhi.n	800b8d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d108      	bne.n	800b90a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	441a      	add	r2, r3
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	441a      	add	r2, r3
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d118      	bne.n	800b950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b15      	ldr	r3, [pc, #84]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	429a      	cmp	r2, r3
 800b928:	d00d      	beq.n	800b946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685a      	ldr	r2, [r3, #4]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	441a      	add	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e008      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b946:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <prvInsertBlockIntoFreeList+0xb0>)
 800b948:	681a      	ldr	r2, [r3, #0]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e003      	b.n	800b958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b958:	68fa      	ldr	r2, [r7, #12]
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	d002      	beq.n	800b966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b966:	bf00      	nop
 800b968:	3714      	adds	r7, #20
 800b96a:	46bd      	mov	sp, r7
 800b96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b970:	4770      	bx	lr
 800b972:	bf00      	nop
 800b974:	20002708 	.word	0x20002708
 800b978:	20002710 	.word	0x20002710

0800b97c <__errno>:
 800b97c:	4b01      	ldr	r3, [pc, #4]	; (800b984 <__errno+0x8>)
 800b97e:	6818      	ldr	r0, [r3, #0]
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	20000020 	.word	0x20000020

0800b988 <std>:
 800b988:	2300      	movs	r3, #0
 800b98a:	b510      	push	{r4, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	e9c0 3300 	strd	r3, r3, [r0]
 800b992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b996:	6083      	str	r3, [r0, #8]
 800b998:	8181      	strh	r1, [r0, #12]
 800b99a:	6643      	str	r3, [r0, #100]	; 0x64
 800b99c:	81c2      	strh	r2, [r0, #14]
 800b99e:	6183      	str	r3, [r0, #24]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	2208      	movs	r2, #8
 800b9a4:	305c      	adds	r0, #92	; 0x5c
 800b9a6:	f000 f91a 	bl	800bbde <memset>
 800b9aa:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <std+0x38>)
 800b9ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b9ae:	4b05      	ldr	r3, [pc, #20]	; (800b9c4 <std+0x3c>)
 800b9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b9b2:	4b05      	ldr	r3, [pc, #20]	; (800b9c8 <std+0x40>)
 800b9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b9b6:	4b05      	ldr	r3, [pc, #20]	; (800b9cc <std+0x44>)
 800b9b8:	6224      	str	r4, [r4, #32]
 800b9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	bf00      	nop
 800b9c0:	0800bf91 	.word	0x0800bf91
 800b9c4:	0800bfb3 	.word	0x0800bfb3
 800b9c8:	0800bfeb 	.word	0x0800bfeb
 800b9cc:	0800c00f 	.word	0x0800c00f

0800b9d0 <_cleanup_r>:
 800b9d0:	4901      	ldr	r1, [pc, #4]	; (800b9d8 <_cleanup_r+0x8>)
 800b9d2:	f000 b8af 	b.w	800bb34 <_fwalk_reent>
 800b9d6:	bf00      	nop
 800b9d8:	0800c2e9 	.word	0x0800c2e9

0800b9dc <__sfmoreglue>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	2268      	movs	r2, #104	; 0x68
 800b9e0:	1e4d      	subs	r5, r1, #1
 800b9e2:	4355      	muls	r5, r2
 800b9e4:	460e      	mov	r6, r1
 800b9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b9ea:	f000 f921 	bl	800bc30 <_malloc_r>
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	b140      	cbz	r0, 800ba04 <__sfmoreglue+0x28>
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	60a0      	str	r0, [r4, #8]
 800b9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ba00:	f000 f8ed 	bl	800bbde <memset>
 800ba04:	4620      	mov	r0, r4
 800ba06:	bd70      	pop	{r4, r5, r6, pc}

0800ba08 <__sfp_lock_acquire>:
 800ba08:	4801      	ldr	r0, [pc, #4]	; (800ba10 <__sfp_lock_acquire+0x8>)
 800ba0a:	f000 b8d8 	b.w	800bbbe <__retarget_lock_acquire_recursive>
 800ba0e:	bf00      	nop
 800ba10:	20002729 	.word	0x20002729

0800ba14 <__sfp_lock_release>:
 800ba14:	4801      	ldr	r0, [pc, #4]	; (800ba1c <__sfp_lock_release+0x8>)
 800ba16:	f000 b8d3 	b.w	800bbc0 <__retarget_lock_release_recursive>
 800ba1a:	bf00      	nop
 800ba1c:	20002729 	.word	0x20002729

0800ba20 <__sinit_lock_acquire>:
 800ba20:	4801      	ldr	r0, [pc, #4]	; (800ba28 <__sinit_lock_acquire+0x8>)
 800ba22:	f000 b8cc 	b.w	800bbbe <__retarget_lock_acquire_recursive>
 800ba26:	bf00      	nop
 800ba28:	2000272a 	.word	0x2000272a

0800ba2c <__sinit_lock_release>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__sinit_lock_release+0x8>)
 800ba2e:	f000 b8c7 	b.w	800bbc0 <__retarget_lock_release_recursive>
 800ba32:	bf00      	nop
 800ba34:	2000272a 	.word	0x2000272a

0800ba38 <__sinit>:
 800ba38:	b510      	push	{r4, lr}
 800ba3a:	4604      	mov	r4, r0
 800ba3c:	f7ff fff0 	bl	800ba20 <__sinit_lock_acquire>
 800ba40:	69a3      	ldr	r3, [r4, #24]
 800ba42:	b11b      	cbz	r3, 800ba4c <__sinit+0x14>
 800ba44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba48:	f7ff bff0 	b.w	800ba2c <__sinit_lock_release>
 800ba4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ba50:	6523      	str	r3, [r4, #80]	; 0x50
 800ba52:	4b13      	ldr	r3, [pc, #76]	; (800baa0 <__sinit+0x68>)
 800ba54:	4a13      	ldr	r2, [pc, #76]	; (800baa4 <__sinit+0x6c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	62a2      	str	r2, [r4, #40]	; 0x28
 800ba5a:	42a3      	cmp	r3, r4
 800ba5c:	bf04      	itt	eq
 800ba5e:	2301      	moveq	r3, #1
 800ba60:	61a3      	streq	r3, [r4, #24]
 800ba62:	4620      	mov	r0, r4
 800ba64:	f000 f820 	bl	800baa8 <__sfp>
 800ba68:	6060      	str	r0, [r4, #4]
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 f81c 	bl	800baa8 <__sfp>
 800ba70:	60a0      	str	r0, [r4, #8]
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 f818 	bl	800baa8 <__sfp>
 800ba78:	2200      	movs	r2, #0
 800ba7a:	60e0      	str	r0, [r4, #12]
 800ba7c:	2104      	movs	r1, #4
 800ba7e:	6860      	ldr	r0, [r4, #4]
 800ba80:	f7ff ff82 	bl	800b988 <std>
 800ba84:	68a0      	ldr	r0, [r4, #8]
 800ba86:	2201      	movs	r2, #1
 800ba88:	2109      	movs	r1, #9
 800ba8a:	f7ff ff7d 	bl	800b988 <std>
 800ba8e:	68e0      	ldr	r0, [r4, #12]
 800ba90:	2202      	movs	r2, #2
 800ba92:	2112      	movs	r1, #18
 800ba94:	f7ff ff78 	bl	800b988 <std>
 800ba98:	2301      	movs	r3, #1
 800ba9a:	61a3      	str	r3, [r4, #24]
 800ba9c:	e7d2      	b.n	800ba44 <__sinit+0xc>
 800ba9e:	bf00      	nop
 800baa0:	0800d438 	.word	0x0800d438
 800baa4:	0800b9d1 	.word	0x0800b9d1

0800baa8 <__sfp>:
 800baa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baaa:	4607      	mov	r7, r0
 800baac:	f7ff ffac 	bl	800ba08 <__sfp_lock_acquire>
 800bab0:	4b1e      	ldr	r3, [pc, #120]	; (800bb2c <__sfp+0x84>)
 800bab2:	681e      	ldr	r6, [r3, #0]
 800bab4:	69b3      	ldr	r3, [r6, #24]
 800bab6:	b913      	cbnz	r3, 800babe <__sfp+0x16>
 800bab8:	4630      	mov	r0, r6
 800baba:	f7ff ffbd 	bl	800ba38 <__sinit>
 800babe:	3648      	adds	r6, #72	; 0x48
 800bac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	d503      	bpl.n	800bad0 <__sfp+0x28>
 800bac8:	6833      	ldr	r3, [r6, #0]
 800baca:	b30b      	cbz	r3, 800bb10 <__sfp+0x68>
 800bacc:	6836      	ldr	r6, [r6, #0]
 800bace:	e7f7      	b.n	800bac0 <__sfp+0x18>
 800bad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bad4:	b9d5      	cbnz	r5, 800bb0c <__sfp+0x64>
 800bad6:	4b16      	ldr	r3, [pc, #88]	; (800bb30 <__sfp+0x88>)
 800bad8:	60e3      	str	r3, [r4, #12]
 800bada:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bade:	6665      	str	r5, [r4, #100]	; 0x64
 800bae0:	f000 f86c 	bl	800bbbc <__retarget_lock_init_recursive>
 800bae4:	f7ff ff96 	bl	800ba14 <__sfp_lock_release>
 800bae8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800baec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800baf0:	6025      	str	r5, [r4, #0]
 800baf2:	61a5      	str	r5, [r4, #24]
 800baf4:	2208      	movs	r2, #8
 800baf6:	4629      	mov	r1, r5
 800baf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bafc:	f000 f86f 	bl	800bbde <memset>
 800bb00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bb04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bb08:	4620      	mov	r0, r4
 800bb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb0c:	3468      	adds	r4, #104	; 0x68
 800bb0e:	e7d9      	b.n	800bac4 <__sfp+0x1c>
 800bb10:	2104      	movs	r1, #4
 800bb12:	4638      	mov	r0, r7
 800bb14:	f7ff ff62 	bl	800b9dc <__sfmoreglue>
 800bb18:	4604      	mov	r4, r0
 800bb1a:	6030      	str	r0, [r6, #0]
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d1d5      	bne.n	800bacc <__sfp+0x24>
 800bb20:	f7ff ff78 	bl	800ba14 <__sfp_lock_release>
 800bb24:	230c      	movs	r3, #12
 800bb26:	603b      	str	r3, [r7, #0]
 800bb28:	e7ee      	b.n	800bb08 <__sfp+0x60>
 800bb2a:	bf00      	nop
 800bb2c:	0800d438 	.word	0x0800d438
 800bb30:	ffff0001 	.word	0xffff0001

0800bb34 <_fwalk_reent>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	4606      	mov	r6, r0
 800bb3a:	4688      	mov	r8, r1
 800bb3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bb40:	2700      	movs	r7, #0
 800bb42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bb46:	f1b9 0901 	subs.w	r9, r9, #1
 800bb4a:	d505      	bpl.n	800bb58 <_fwalk_reent+0x24>
 800bb4c:	6824      	ldr	r4, [r4, #0]
 800bb4e:	2c00      	cmp	r4, #0
 800bb50:	d1f7      	bne.n	800bb42 <_fwalk_reent+0xe>
 800bb52:	4638      	mov	r0, r7
 800bb54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb58:	89ab      	ldrh	r3, [r5, #12]
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d907      	bls.n	800bb6e <_fwalk_reent+0x3a>
 800bb5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bb62:	3301      	adds	r3, #1
 800bb64:	d003      	beq.n	800bb6e <_fwalk_reent+0x3a>
 800bb66:	4629      	mov	r1, r5
 800bb68:	4630      	mov	r0, r6
 800bb6a:	47c0      	blx	r8
 800bb6c:	4307      	orrs	r7, r0
 800bb6e:	3568      	adds	r5, #104	; 0x68
 800bb70:	e7e9      	b.n	800bb46 <_fwalk_reent+0x12>
	...

0800bb74 <__libc_init_array>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4d0d      	ldr	r5, [pc, #52]	; (800bbac <__libc_init_array+0x38>)
 800bb78:	4c0d      	ldr	r4, [pc, #52]	; (800bbb0 <__libc_init_array+0x3c>)
 800bb7a:	1b64      	subs	r4, r4, r5
 800bb7c:	10a4      	asrs	r4, r4, #2
 800bb7e:	2600      	movs	r6, #0
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	d109      	bne.n	800bb98 <__libc_init_array+0x24>
 800bb84:	4d0b      	ldr	r5, [pc, #44]	; (800bbb4 <__libc_init_array+0x40>)
 800bb86:	4c0c      	ldr	r4, [pc, #48]	; (800bbb8 <__libc_init_array+0x44>)
 800bb88:	f001 f9bc 	bl	800cf04 <_init>
 800bb8c:	1b64      	subs	r4, r4, r5
 800bb8e:	10a4      	asrs	r4, r4, #2
 800bb90:	2600      	movs	r6, #0
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	d105      	bne.n	800bba2 <__libc_init_array+0x2e>
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9c:	4798      	blx	r3
 800bb9e:	3601      	adds	r6, #1
 800bba0:	e7ee      	b.n	800bb80 <__libc_init_array+0xc>
 800bba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba6:	4798      	blx	r3
 800bba8:	3601      	adds	r6, #1
 800bbaa:	e7f2      	b.n	800bb92 <__libc_init_array+0x1e>
 800bbac:	0800d478 	.word	0x0800d478
 800bbb0:	0800d478 	.word	0x0800d478
 800bbb4:	0800d478 	.word	0x0800d478
 800bbb8:	0800d47c 	.word	0x0800d47c

0800bbbc <__retarget_lock_init_recursive>:
 800bbbc:	4770      	bx	lr

0800bbbe <__retarget_lock_acquire_recursive>:
 800bbbe:	4770      	bx	lr

0800bbc0 <__retarget_lock_release_recursive>:
 800bbc0:	4770      	bx	lr

0800bbc2 <memcpy>:
 800bbc2:	440a      	add	r2, r1
 800bbc4:	4291      	cmp	r1, r2
 800bbc6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbca:	d100      	bne.n	800bbce <memcpy+0xc>
 800bbcc:	4770      	bx	lr
 800bbce:	b510      	push	{r4, lr}
 800bbd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbd8:	4291      	cmp	r1, r2
 800bbda:	d1f9      	bne.n	800bbd0 <memcpy+0xe>
 800bbdc:	bd10      	pop	{r4, pc}

0800bbde <memset>:
 800bbde:	4402      	add	r2, r0
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d100      	bne.n	800bbe8 <memset+0xa>
 800bbe6:	4770      	bx	lr
 800bbe8:	f803 1b01 	strb.w	r1, [r3], #1
 800bbec:	e7f9      	b.n	800bbe2 <memset+0x4>
	...

0800bbf0 <sbrk_aligned>:
 800bbf0:	b570      	push	{r4, r5, r6, lr}
 800bbf2:	4e0e      	ldr	r6, [pc, #56]	; (800bc2c <sbrk_aligned+0x3c>)
 800bbf4:	460c      	mov	r4, r1
 800bbf6:	6831      	ldr	r1, [r6, #0]
 800bbf8:	4605      	mov	r5, r0
 800bbfa:	b911      	cbnz	r1, 800bc02 <sbrk_aligned+0x12>
 800bbfc:	f000 f984 	bl	800bf08 <_sbrk_r>
 800bc00:	6030      	str	r0, [r6, #0]
 800bc02:	4621      	mov	r1, r4
 800bc04:	4628      	mov	r0, r5
 800bc06:	f000 f97f 	bl	800bf08 <_sbrk_r>
 800bc0a:	1c43      	adds	r3, r0, #1
 800bc0c:	d00a      	beq.n	800bc24 <sbrk_aligned+0x34>
 800bc0e:	1cc4      	adds	r4, r0, #3
 800bc10:	f024 0403 	bic.w	r4, r4, #3
 800bc14:	42a0      	cmp	r0, r4
 800bc16:	d007      	beq.n	800bc28 <sbrk_aligned+0x38>
 800bc18:	1a21      	subs	r1, r4, r0
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	f000 f974 	bl	800bf08 <_sbrk_r>
 800bc20:	3001      	adds	r0, #1
 800bc22:	d101      	bne.n	800bc28 <sbrk_aligned+0x38>
 800bc24:	f04f 34ff 	mov.w	r4, #4294967295
 800bc28:	4620      	mov	r0, r4
 800bc2a:	bd70      	pop	{r4, r5, r6, pc}
 800bc2c:	20002730 	.word	0x20002730

0800bc30 <_malloc_r>:
 800bc30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc34:	1ccd      	adds	r5, r1, #3
 800bc36:	f025 0503 	bic.w	r5, r5, #3
 800bc3a:	3508      	adds	r5, #8
 800bc3c:	2d0c      	cmp	r5, #12
 800bc3e:	bf38      	it	cc
 800bc40:	250c      	movcc	r5, #12
 800bc42:	2d00      	cmp	r5, #0
 800bc44:	4607      	mov	r7, r0
 800bc46:	db01      	blt.n	800bc4c <_malloc_r+0x1c>
 800bc48:	42a9      	cmp	r1, r5
 800bc4a:	d905      	bls.n	800bc58 <_malloc_r+0x28>
 800bc4c:	230c      	movs	r3, #12
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	2600      	movs	r6, #0
 800bc52:	4630      	mov	r0, r6
 800bc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc58:	4e2e      	ldr	r6, [pc, #184]	; (800bd14 <_malloc_r+0xe4>)
 800bc5a:	f000 fbf9 	bl	800c450 <__malloc_lock>
 800bc5e:	6833      	ldr	r3, [r6, #0]
 800bc60:	461c      	mov	r4, r3
 800bc62:	bb34      	cbnz	r4, 800bcb2 <_malloc_r+0x82>
 800bc64:	4629      	mov	r1, r5
 800bc66:	4638      	mov	r0, r7
 800bc68:	f7ff ffc2 	bl	800bbf0 <sbrk_aligned>
 800bc6c:	1c43      	adds	r3, r0, #1
 800bc6e:	4604      	mov	r4, r0
 800bc70:	d14d      	bne.n	800bd0e <_malloc_r+0xde>
 800bc72:	6834      	ldr	r4, [r6, #0]
 800bc74:	4626      	mov	r6, r4
 800bc76:	2e00      	cmp	r6, #0
 800bc78:	d140      	bne.n	800bcfc <_malloc_r+0xcc>
 800bc7a:	6823      	ldr	r3, [r4, #0]
 800bc7c:	4631      	mov	r1, r6
 800bc7e:	4638      	mov	r0, r7
 800bc80:	eb04 0803 	add.w	r8, r4, r3
 800bc84:	f000 f940 	bl	800bf08 <_sbrk_r>
 800bc88:	4580      	cmp	r8, r0
 800bc8a:	d13a      	bne.n	800bd02 <_malloc_r+0xd2>
 800bc8c:	6821      	ldr	r1, [r4, #0]
 800bc8e:	3503      	adds	r5, #3
 800bc90:	1a6d      	subs	r5, r5, r1
 800bc92:	f025 0503 	bic.w	r5, r5, #3
 800bc96:	3508      	adds	r5, #8
 800bc98:	2d0c      	cmp	r5, #12
 800bc9a:	bf38      	it	cc
 800bc9c:	250c      	movcc	r5, #12
 800bc9e:	4629      	mov	r1, r5
 800bca0:	4638      	mov	r0, r7
 800bca2:	f7ff ffa5 	bl	800bbf0 <sbrk_aligned>
 800bca6:	3001      	adds	r0, #1
 800bca8:	d02b      	beq.n	800bd02 <_malloc_r+0xd2>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	442b      	add	r3, r5
 800bcae:	6023      	str	r3, [r4, #0]
 800bcb0:	e00e      	b.n	800bcd0 <_malloc_r+0xa0>
 800bcb2:	6822      	ldr	r2, [r4, #0]
 800bcb4:	1b52      	subs	r2, r2, r5
 800bcb6:	d41e      	bmi.n	800bcf6 <_malloc_r+0xc6>
 800bcb8:	2a0b      	cmp	r2, #11
 800bcba:	d916      	bls.n	800bcea <_malloc_r+0xba>
 800bcbc:	1961      	adds	r1, r4, r5
 800bcbe:	42a3      	cmp	r3, r4
 800bcc0:	6025      	str	r5, [r4, #0]
 800bcc2:	bf18      	it	ne
 800bcc4:	6059      	strne	r1, [r3, #4]
 800bcc6:	6863      	ldr	r3, [r4, #4]
 800bcc8:	bf08      	it	eq
 800bcca:	6031      	streq	r1, [r6, #0]
 800bccc:	5162      	str	r2, [r4, r5]
 800bcce:	604b      	str	r3, [r1, #4]
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	f104 060b 	add.w	r6, r4, #11
 800bcd6:	f000 fbc1 	bl	800c45c <__malloc_unlock>
 800bcda:	f026 0607 	bic.w	r6, r6, #7
 800bcde:	1d23      	adds	r3, r4, #4
 800bce0:	1af2      	subs	r2, r6, r3
 800bce2:	d0b6      	beq.n	800bc52 <_malloc_r+0x22>
 800bce4:	1b9b      	subs	r3, r3, r6
 800bce6:	50a3      	str	r3, [r4, r2]
 800bce8:	e7b3      	b.n	800bc52 <_malloc_r+0x22>
 800bcea:	6862      	ldr	r2, [r4, #4]
 800bcec:	42a3      	cmp	r3, r4
 800bcee:	bf0c      	ite	eq
 800bcf0:	6032      	streq	r2, [r6, #0]
 800bcf2:	605a      	strne	r2, [r3, #4]
 800bcf4:	e7ec      	b.n	800bcd0 <_malloc_r+0xa0>
 800bcf6:	4623      	mov	r3, r4
 800bcf8:	6864      	ldr	r4, [r4, #4]
 800bcfa:	e7b2      	b.n	800bc62 <_malloc_r+0x32>
 800bcfc:	4634      	mov	r4, r6
 800bcfe:	6876      	ldr	r6, [r6, #4]
 800bd00:	e7b9      	b.n	800bc76 <_malloc_r+0x46>
 800bd02:	230c      	movs	r3, #12
 800bd04:	603b      	str	r3, [r7, #0]
 800bd06:	4638      	mov	r0, r7
 800bd08:	f000 fba8 	bl	800c45c <__malloc_unlock>
 800bd0c:	e7a1      	b.n	800bc52 <_malloc_r+0x22>
 800bd0e:	6025      	str	r5, [r4, #0]
 800bd10:	e7de      	b.n	800bcd0 <_malloc_r+0xa0>
 800bd12:	bf00      	nop
 800bd14:	2000272c 	.word	0x2000272c

0800bd18 <iprintf>:
 800bd18:	b40f      	push	{r0, r1, r2, r3}
 800bd1a:	4b0a      	ldr	r3, [pc, #40]	; (800bd44 <iprintf+0x2c>)
 800bd1c:	b513      	push	{r0, r1, r4, lr}
 800bd1e:	681c      	ldr	r4, [r3, #0]
 800bd20:	b124      	cbz	r4, 800bd2c <iprintf+0x14>
 800bd22:	69a3      	ldr	r3, [r4, #24]
 800bd24:	b913      	cbnz	r3, 800bd2c <iprintf+0x14>
 800bd26:	4620      	mov	r0, r4
 800bd28:	f7ff fe86 	bl	800ba38 <__sinit>
 800bd2c:	ab05      	add	r3, sp, #20
 800bd2e:	9a04      	ldr	r2, [sp, #16]
 800bd30:	68a1      	ldr	r1, [r4, #8]
 800bd32:	9301      	str	r3, [sp, #4]
 800bd34:	4620      	mov	r0, r4
 800bd36:	f000 fd69 	bl	800c80c <_vfiprintf_r>
 800bd3a:	b002      	add	sp, #8
 800bd3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd40:	b004      	add	sp, #16
 800bd42:	4770      	bx	lr
 800bd44:	20000020 	.word	0x20000020

0800bd48 <_puts_r>:
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	460e      	mov	r6, r1
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	b118      	cbz	r0, 800bd58 <_puts_r+0x10>
 800bd50:	6983      	ldr	r3, [r0, #24]
 800bd52:	b90b      	cbnz	r3, 800bd58 <_puts_r+0x10>
 800bd54:	f7ff fe70 	bl	800ba38 <__sinit>
 800bd58:	69ab      	ldr	r3, [r5, #24]
 800bd5a:	68ac      	ldr	r4, [r5, #8]
 800bd5c:	b913      	cbnz	r3, 800bd64 <_puts_r+0x1c>
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f7ff fe6a 	bl	800ba38 <__sinit>
 800bd64:	4b2c      	ldr	r3, [pc, #176]	; (800be18 <_puts_r+0xd0>)
 800bd66:	429c      	cmp	r4, r3
 800bd68:	d120      	bne.n	800bdac <_puts_r+0x64>
 800bd6a:	686c      	ldr	r4, [r5, #4]
 800bd6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd6e:	07db      	lsls	r3, r3, #31
 800bd70:	d405      	bmi.n	800bd7e <_puts_r+0x36>
 800bd72:	89a3      	ldrh	r3, [r4, #12]
 800bd74:	0598      	lsls	r0, r3, #22
 800bd76:	d402      	bmi.n	800bd7e <_puts_r+0x36>
 800bd78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd7a:	f7ff ff20 	bl	800bbbe <__retarget_lock_acquire_recursive>
 800bd7e:	89a3      	ldrh	r3, [r4, #12]
 800bd80:	0719      	lsls	r1, r3, #28
 800bd82:	d51d      	bpl.n	800bdc0 <_puts_r+0x78>
 800bd84:	6923      	ldr	r3, [r4, #16]
 800bd86:	b1db      	cbz	r3, 800bdc0 <_puts_r+0x78>
 800bd88:	3e01      	subs	r6, #1
 800bd8a:	68a3      	ldr	r3, [r4, #8]
 800bd8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd90:	3b01      	subs	r3, #1
 800bd92:	60a3      	str	r3, [r4, #8]
 800bd94:	bb39      	cbnz	r1, 800bde6 <_puts_r+0x9e>
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	da38      	bge.n	800be0c <_puts_r+0xc4>
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	210a      	movs	r1, #10
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 f93a 	bl	800c018 <__swbuf_r>
 800bda4:	3001      	adds	r0, #1
 800bda6:	d011      	beq.n	800bdcc <_puts_r+0x84>
 800bda8:	250a      	movs	r5, #10
 800bdaa:	e011      	b.n	800bdd0 <_puts_r+0x88>
 800bdac:	4b1b      	ldr	r3, [pc, #108]	; (800be1c <_puts_r+0xd4>)
 800bdae:	429c      	cmp	r4, r3
 800bdb0:	d101      	bne.n	800bdb6 <_puts_r+0x6e>
 800bdb2:	68ac      	ldr	r4, [r5, #8]
 800bdb4:	e7da      	b.n	800bd6c <_puts_r+0x24>
 800bdb6:	4b1a      	ldr	r3, [pc, #104]	; (800be20 <_puts_r+0xd8>)
 800bdb8:	429c      	cmp	r4, r3
 800bdba:	bf08      	it	eq
 800bdbc:	68ec      	ldreq	r4, [r5, #12]
 800bdbe:	e7d5      	b.n	800bd6c <_puts_r+0x24>
 800bdc0:	4621      	mov	r1, r4
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	f000 f98c 	bl	800c0e0 <__swsetup_r>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d0dd      	beq.n	800bd88 <_puts_r+0x40>
 800bdcc:	f04f 35ff 	mov.w	r5, #4294967295
 800bdd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdd2:	07da      	lsls	r2, r3, #31
 800bdd4:	d405      	bmi.n	800bde2 <_puts_r+0x9a>
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	059b      	lsls	r3, r3, #22
 800bdda:	d402      	bmi.n	800bde2 <_puts_r+0x9a>
 800bddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdde:	f7ff feef 	bl	800bbc0 <__retarget_lock_release_recursive>
 800bde2:	4628      	mov	r0, r5
 800bde4:	bd70      	pop	{r4, r5, r6, pc}
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	da04      	bge.n	800bdf4 <_puts_r+0xac>
 800bdea:	69a2      	ldr	r2, [r4, #24]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	dc06      	bgt.n	800bdfe <_puts_r+0xb6>
 800bdf0:	290a      	cmp	r1, #10
 800bdf2:	d004      	beq.n	800bdfe <_puts_r+0xb6>
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	1c5a      	adds	r2, r3, #1
 800bdf8:	6022      	str	r2, [r4, #0]
 800bdfa:	7019      	strb	r1, [r3, #0]
 800bdfc:	e7c5      	b.n	800bd8a <_puts_r+0x42>
 800bdfe:	4622      	mov	r2, r4
 800be00:	4628      	mov	r0, r5
 800be02:	f000 f909 	bl	800c018 <__swbuf_r>
 800be06:	3001      	adds	r0, #1
 800be08:	d1bf      	bne.n	800bd8a <_puts_r+0x42>
 800be0a:	e7df      	b.n	800bdcc <_puts_r+0x84>
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	250a      	movs	r5, #10
 800be10:	1c5a      	adds	r2, r3, #1
 800be12:	6022      	str	r2, [r4, #0]
 800be14:	701d      	strb	r5, [r3, #0]
 800be16:	e7db      	b.n	800bdd0 <_puts_r+0x88>
 800be18:	0800d3f8 	.word	0x0800d3f8
 800be1c:	0800d418 	.word	0x0800d418
 800be20:	0800d3d8 	.word	0x0800d3d8

0800be24 <puts>:
 800be24:	4b02      	ldr	r3, [pc, #8]	; (800be30 <puts+0xc>)
 800be26:	4601      	mov	r1, r0
 800be28:	6818      	ldr	r0, [r3, #0]
 800be2a:	f7ff bf8d 	b.w	800bd48 <_puts_r>
 800be2e:	bf00      	nop
 800be30:	20000020 	.word	0x20000020

0800be34 <cleanup_glue>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	460c      	mov	r4, r1
 800be38:	6809      	ldr	r1, [r1, #0]
 800be3a:	4605      	mov	r5, r0
 800be3c:	b109      	cbz	r1, 800be42 <cleanup_glue+0xe>
 800be3e:	f7ff fff9 	bl	800be34 <cleanup_glue>
 800be42:	4621      	mov	r1, r4
 800be44:	4628      	mov	r0, r5
 800be46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4a:	f000 bb0d 	b.w	800c468 <_free_r>
	...

0800be50 <_reclaim_reent>:
 800be50:	4b2c      	ldr	r3, [pc, #176]	; (800bf04 <_reclaim_reent+0xb4>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4283      	cmp	r3, r0
 800be56:	b570      	push	{r4, r5, r6, lr}
 800be58:	4604      	mov	r4, r0
 800be5a:	d051      	beq.n	800bf00 <_reclaim_reent+0xb0>
 800be5c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800be5e:	b143      	cbz	r3, 800be72 <_reclaim_reent+0x22>
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d14a      	bne.n	800befc <_reclaim_reent+0xac>
 800be66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be68:	6819      	ldr	r1, [r3, #0]
 800be6a:	b111      	cbz	r1, 800be72 <_reclaim_reent+0x22>
 800be6c:	4620      	mov	r0, r4
 800be6e:	f000 fafb 	bl	800c468 <_free_r>
 800be72:	6961      	ldr	r1, [r4, #20]
 800be74:	b111      	cbz	r1, 800be7c <_reclaim_reent+0x2c>
 800be76:	4620      	mov	r0, r4
 800be78:	f000 faf6 	bl	800c468 <_free_r>
 800be7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800be7e:	b111      	cbz	r1, 800be86 <_reclaim_reent+0x36>
 800be80:	4620      	mov	r0, r4
 800be82:	f000 faf1 	bl	800c468 <_free_r>
 800be86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800be88:	b111      	cbz	r1, 800be90 <_reclaim_reent+0x40>
 800be8a:	4620      	mov	r0, r4
 800be8c:	f000 faec 	bl	800c468 <_free_r>
 800be90:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800be92:	b111      	cbz	r1, 800be9a <_reclaim_reent+0x4a>
 800be94:	4620      	mov	r0, r4
 800be96:	f000 fae7 	bl	800c468 <_free_r>
 800be9a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800be9c:	b111      	cbz	r1, 800bea4 <_reclaim_reent+0x54>
 800be9e:	4620      	mov	r0, r4
 800bea0:	f000 fae2 	bl	800c468 <_free_r>
 800bea4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bea6:	b111      	cbz	r1, 800beae <_reclaim_reent+0x5e>
 800bea8:	4620      	mov	r0, r4
 800beaa:	f000 fadd 	bl	800c468 <_free_r>
 800beae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800beb0:	b111      	cbz	r1, 800beb8 <_reclaim_reent+0x68>
 800beb2:	4620      	mov	r0, r4
 800beb4:	f000 fad8 	bl	800c468 <_free_r>
 800beb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800beba:	b111      	cbz	r1, 800bec2 <_reclaim_reent+0x72>
 800bebc:	4620      	mov	r0, r4
 800bebe:	f000 fad3 	bl	800c468 <_free_r>
 800bec2:	69a3      	ldr	r3, [r4, #24]
 800bec4:	b1e3      	cbz	r3, 800bf00 <_reclaim_reent+0xb0>
 800bec6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bec8:	4620      	mov	r0, r4
 800beca:	4798      	blx	r3
 800becc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bece:	b1b9      	cbz	r1, 800bf00 <_reclaim_reent+0xb0>
 800bed0:	4620      	mov	r0, r4
 800bed2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bed6:	f7ff bfad 	b.w	800be34 <cleanup_glue>
 800beda:	5949      	ldr	r1, [r1, r5]
 800bedc:	b941      	cbnz	r1, 800bef0 <_reclaim_reent+0xa0>
 800bede:	3504      	adds	r5, #4
 800bee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bee2:	2d80      	cmp	r5, #128	; 0x80
 800bee4:	68d9      	ldr	r1, [r3, #12]
 800bee6:	d1f8      	bne.n	800beda <_reclaim_reent+0x8a>
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 fabd 	bl	800c468 <_free_r>
 800beee:	e7ba      	b.n	800be66 <_reclaim_reent+0x16>
 800bef0:	680e      	ldr	r6, [r1, #0]
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 fab8 	bl	800c468 <_free_r>
 800bef8:	4631      	mov	r1, r6
 800befa:	e7ef      	b.n	800bedc <_reclaim_reent+0x8c>
 800befc:	2500      	movs	r5, #0
 800befe:	e7ef      	b.n	800bee0 <_reclaim_reent+0x90>
 800bf00:	bd70      	pop	{r4, r5, r6, pc}
 800bf02:	bf00      	nop
 800bf04:	20000020 	.word	0x20000020

0800bf08 <_sbrk_r>:
 800bf08:	b538      	push	{r3, r4, r5, lr}
 800bf0a:	4d06      	ldr	r5, [pc, #24]	; (800bf24 <_sbrk_r+0x1c>)
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4604      	mov	r4, r0
 800bf10:	4608      	mov	r0, r1
 800bf12:	602b      	str	r3, [r5, #0]
 800bf14:	f7f6 f964 	bl	80021e0 <_sbrk>
 800bf18:	1c43      	adds	r3, r0, #1
 800bf1a:	d102      	bne.n	800bf22 <_sbrk_r+0x1a>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b103      	cbz	r3, 800bf22 <_sbrk_r+0x1a>
 800bf20:	6023      	str	r3, [r4, #0]
 800bf22:	bd38      	pop	{r3, r4, r5, pc}
 800bf24:	20002734 	.word	0x20002734

0800bf28 <sniprintf>:
 800bf28:	b40c      	push	{r2, r3}
 800bf2a:	b530      	push	{r4, r5, lr}
 800bf2c:	4b17      	ldr	r3, [pc, #92]	; (800bf8c <sniprintf+0x64>)
 800bf2e:	1e0c      	subs	r4, r1, #0
 800bf30:	681d      	ldr	r5, [r3, #0]
 800bf32:	b09d      	sub	sp, #116	; 0x74
 800bf34:	da08      	bge.n	800bf48 <sniprintf+0x20>
 800bf36:	238b      	movs	r3, #139	; 0x8b
 800bf38:	602b      	str	r3, [r5, #0]
 800bf3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf3e:	b01d      	add	sp, #116	; 0x74
 800bf40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf44:	b002      	add	sp, #8
 800bf46:	4770      	bx	lr
 800bf48:	f44f 7302 	mov.w	r3, #520	; 0x208
 800bf4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800bf50:	bf14      	ite	ne
 800bf52:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bf56:	4623      	moveq	r3, r4
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	9307      	str	r3, [sp, #28]
 800bf5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf60:	9002      	str	r0, [sp, #8]
 800bf62:	9006      	str	r0, [sp, #24]
 800bf64:	f8ad 3016 	strh.w	r3, [sp, #22]
 800bf68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bf6a:	ab21      	add	r3, sp, #132	; 0x84
 800bf6c:	a902      	add	r1, sp, #8
 800bf6e:	4628      	mov	r0, r5
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	f000 fb21 	bl	800c5b8 <_svfiprintf_r>
 800bf76:	1c43      	adds	r3, r0, #1
 800bf78:	bfbc      	itt	lt
 800bf7a:	238b      	movlt	r3, #139	; 0x8b
 800bf7c:	602b      	strlt	r3, [r5, #0]
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	d0dd      	beq.n	800bf3e <sniprintf+0x16>
 800bf82:	9b02      	ldr	r3, [sp, #8]
 800bf84:	2200      	movs	r2, #0
 800bf86:	701a      	strb	r2, [r3, #0]
 800bf88:	e7d9      	b.n	800bf3e <sniprintf+0x16>
 800bf8a:	bf00      	nop
 800bf8c:	20000020 	.word	0x20000020

0800bf90 <__sread>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	460c      	mov	r4, r1
 800bf94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf98:	f000 fefc 	bl	800cd94 <_read_r>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	bfab      	itete	ge
 800bfa0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bfa2:	89a3      	ldrhlt	r3, [r4, #12]
 800bfa4:	181b      	addge	r3, r3, r0
 800bfa6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bfaa:	bfac      	ite	ge
 800bfac:	6563      	strge	r3, [r4, #84]	; 0x54
 800bfae:	81a3      	strhlt	r3, [r4, #12]
 800bfb0:	bd10      	pop	{r4, pc}

0800bfb2 <__swrite>:
 800bfb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb6:	461f      	mov	r7, r3
 800bfb8:	898b      	ldrh	r3, [r1, #12]
 800bfba:	05db      	lsls	r3, r3, #23
 800bfbc:	4605      	mov	r5, r0
 800bfbe:	460c      	mov	r4, r1
 800bfc0:	4616      	mov	r6, r2
 800bfc2:	d505      	bpl.n	800bfd0 <__swrite+0x1e>
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	2302      	movs	r3, #2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f000 f9c8 	bl	800c360 <_lseek_r>
 800bfd0:	89a3      	ldrh	r3, [r4, #12]
 800bfd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	4632      	mov	r2, r6
 800bfde:	463b      	mov	r3, r7
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe6:	f000 b869 	b.w	800c0bc <_write_r>

0800bfea <__sseek>:
 800bfea:	b510      	push	{r4, lr}
 800bfec:	460c      	mov	r4, r1
 800bfee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff2:	f000 f9b5 	bl	800c360 <_lseek_r>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	89a3      	ldrh	r3, [r4, #12]
 800bffa:	bf15      	itete	ne
 800bffc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bffe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c002:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c006:	81a3      	strheq	r3, [r4, #12]
 800c008:	bf18      	it	ne
 800c00a:	81a3      	strhne	r3, [r4, #12]
 800c00c:	bd10      	pop	{r4, pc}

0800c00e <__sclose>:
 800c00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c012:	f000 b8d3 	b.w	800c1bc <_close_r>
	...

0800c018 <__swbuf_r>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	460e      	mov	r6, r1
 800c01c:	4614      	mov	r4, r2
 800c01e:	4605      	mov	r5, r0
 800c020:	b118      	cbz	r0, 800c02a <__swbuf_r+0x12>
 800c022:	6983      	ldr	r3, [r0, #24]
 800c024:	b90b      	cbnz	r3, 800c02a <__swbuf_r+0x12>
 800c026:	f7ff fd07 	bl	800ba38 <__sinit>
 800c02a:	4b21      	ldr	r3, [pc, #132]	; (800c0b0 <__swbuf_r+0x98>)
 800c02c:	429c      	cmp	r4, r3
 800c02e:	d12b      	bne.n	800c088 <__swbuf_r+0x70>
 800c030:	686c      	ldr	r4, [r5, #4]
 800c032:	69a3      	ldr	r3, [r4, #24]
 800c034:	60a3      	str	r3, [r4, #8]
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	071a      	lsls	r2, r3, #28
 800c03a:	d52f      	bpl.n	800c09c <__swbuf_r+0x84>
 800c03c:	6923      	ldr	r3, [r4, #16]
 800c03e:	b36b      	cbz	r3, 800c09c <__swbuf_r+0x84>
 800c040:	6923      	ldr	r3, [r4, #16]
 800c042:	6820      	ldr	r0, [r4, #0]
 800c044:	1ac0      	subs	r0, r0, r3
 800c046:	6963      	ldr	r3, [r4, #20]
 800c048:	b2f6      	uxtb	r6, r6
 800c04a:	4283      	cmp	r3, r0
 800c04c:	4637      	mov	r7, r6
 800c04e:	dc04      	bgt.n	800c05a <__swbuf_r+0x42>
 800c050:	4621      	mov	r1, r4
 800c052:	4628      	mov	r0, r5
 800c054:	f000 f948 	bl	800c2e8 <_fflush_r>
 800c058:	bb30      	cbnz	r0, 800c0a8 <__swbuf_r+0x90>
 800c05a:	68a3      	ldr	r3, [r4, #8]
 800c05c:	3b01      	subs	r3, #1
 800c05e:	60a3      	str	r3, [r4, #8]
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	1c5a      	adds	r2, r3, #1
 800c064:	6022      	str	r2, [r4, #0]
 800c066:	701e      	strb	r6, [r3, #0]
 800c068:	6963      	ldr	r3, [r4, #20]
 800c06a:	3001      	adds	r0, #1
 800c06c:	4283      	cmp	r3, r0
 800c06e:	d004      	beq.n	800c07a <__swbuf_r+0x62>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	07db      	lsls	r3, r3, #31
 800c074:	d506      	bpl.n	800c084 <__swbuf_r+0x6c>
 800c076:	2e0a      	cmp	r6, #10
 800c078:	d104      	bne.n	800c084 <__swbuf_r+0x6c>
 800c07a:	4621      	mov	r1, r4
 800c07c:	4628      	mov	r0, r5
 800c07e:	f000 f933 	bl	800c2e8 <_fflush_r>
 800c082:	b988      	cbnz	r0, 800c0a8 <__swbuf_r+0x90>
 800c084:	4638      	mov	r0, r7
 800c086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c088:	4b0a      	ldr	r3, [pc, #40]	; (800c0b4 <__swbuf_r+0x9c>)
 800c08a:	429c      	cmp	r4, r3
 800c08c:	d101      	bne.n	800c092 <__swbuf_r+0x7a>
 800c08e:	68ac      	ldr	r4, [r5, #8]
 800c090:	e7cf      	b.n	800c032 <__swbuf_r+0x1a>
 800c092:	4b09      	ldr	r3, [pc, #36]	; (800c0b8 <__swbuf_r+0xa0>)
 800c094:	429c      	cmp	r4, r3
 800c096:	bf08      	it	eq
 800c098:	68ec      	ldreq	r4, [r5, #12]
 800c09a:	e7ca      	b.n	800c032 <__swbuf_r+0x1a>
 800c09c:	4621      	mov	r1, r4
 800c09e:	4628      	mov	r0, r5
 800c0a0:	f000 f81e 	bl	800c0e0 <__swsetup_r>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d0cb      	beq.n	800c040 <__swbuf_r+0x28>
 800c0a8:	f04f 37ff 	mov.w	r7, #4294967295
 800c0ac:	e7ea      	b.n	800c084 <__swbuf_r+0x6c>
 800c0ae:	bf00      	nop
 800c0b0:	0800d3f8 	.word	0x0800d3f8
 800c0b4:	0800d418 	.word	0x0800d418
 800c0b8:	0800d3d8 	.word	0x0800d3d8

0800c0bc <_write_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4d07      	ldr	r5, [pc, #28]	; (800c0dc <_write_r+0x20>)
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	4608      	mov	r0, r1
 800c0c4:	4611      	mov	r1, r2
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	602a      	str	r2, [r5, #0]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	f7f5 f902 	bl	80012d4 <_write>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_write_r+0x1e>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_write_r+0x1e>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	20002734 	.word	0x20002734

0800c0e0 <__swsetup_r>:
 800c0e0:	4b32      	ldr	r3, [pc, #200]	; (800c1ac <__swsetup_r+0xcc>)
 800c0e2:	b570      	push	{r4, r5, r6, lr}
 800c0e4:	681d      	ldr	r5, [r3, #0]
 800c0e6:	4606      	mov	r6, r0
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	b125      	cbz	r5, 800c0f6 <__swsetup_r+0x16>
 800c0ec:	69ab      	ldr	r3, [r5, #24]
 800c0ee:	b913      	cbnz	r3, 800c0f6 <__swsetup_r+0x16>
 800c0f0:	4628      	mov	r0, r5
 800c0f2:	f7ff fca1 	bl	800ba38 <__sinit>
 800c0f6:	4b2e      	ldr	r3, [pc, #184]	; (800c1b0 <__swsetup_r+0xd0>)
 800c0f8:	429c      	cmp	r4, r3
 800c0fa:	d10f      	bne.n	800c11c <__swsetup_r+0x3c>
 800c0fc:	686c      	ldr	r4, [r5, #4]
 800c0fe:	89a3      	ldrh	r3, [r4, #12]
 800c100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c104:	0719      	lsls	r1, r3, #28
 800c106:	d42c      	bmi.n	800c162 <__swsetup_r+0x82>
 800c108:	06dd      	lsls	r5, r3, #27
 800c10a:	d411      	bmi.n	800c130 <__swsetup_r+0x50>
 800c10c:	2309      	movs	r3, #9
 800c10e:	6033      	str	r3, [r6, #0]
 800c110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	f04f 30ff 	mov.w	r0, #4294967295
 800c11a:	e03e      	b.n	800c19a <__swsetup_r+0xba>
 800c11c:	4b25      	ldr	r3, [pc, #148]	; (800c1b4 <__swsetup_r+0xd4>)
 800c11e:	429c      	cmp	r4, r3
 800c120:	d101      	bne.n	800c126 <__swsetup_r+0x46>
 800c122:	68ac      	ldr	r4, [r5, #8]
 800c124:	e7eb      	b.n	800c0fe <__swsetup_r+0x1e>
 800c126:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <__swsetup_r+0xd8>)
 800c128:	429c      	cmp	r4, r3
 800c12a:	bf08      	it	eq
 800c12c:	68ec      	ldreq	r4, [r5, #12]
 800c12e:	e7e6      	b.n	800c0fe <__swsetup_r+0x1e>
 800c130:	0758      	lsls	r0, r3, #29
 800c132:	d512      	bpl.n	800c15a <__swsetup_r+0x7a>
 800c134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c136:	b141      	cbz	r1, 800c14a <__swsetup_r+0x6a>
 800c138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c13c:	4299      	cmp	r1, r3
 800c13e:	d002      	beq.n	800c146 <__swsetup_r+0x66>
 800c140:	4630      	mov	r0, r6
 800c142:	f000 f991 	bl	800c468 <_free_r>
 800c146:	2300      	movs	r3, #0
 800c148:	6363      	str	r3, [r4, #52]	; 0x34
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	2300      	movs	r3, #0
 800c154:	6063      	str	r3, [r4, #4]
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	6023      	str	r3, [r4, #0]
 800c15a:	89a3      	ldrh	r3, [r4, #12]
 800c15c:	f043 0308 	orr.w	r3, r3, #8
 800c160:	81a3      	strh	r3, [r4, #12]
 800c162:	6923      	ldr	r3, [r4, #16]
 800c164:	b94b      	cbnz	r3, 800c17a <__swsetup_r+0x9a>
 800c166:	89a3      	ldrh	r3, [r4, #12]
 800c168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c170:	d003      	beq.n	800c17a <__swsetup_r+0x9a>
 800c172:	4621      	mov	r1, r4
 800c174:	4630      	mov	r0, r6
 800c176:	f000 f92b 	bl	800c3d0 <__smakebuf_r>
 800c17a:	89a0      	ldrh	r0, [r4, #12]
 800c17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c180:	f010 0301 	ands.w	r3, r0, #1
 800c184:	d00a      	beq.n	800c19c <__swsetup_r+0xbc>
 800c186:	2300      	movs	r3, #0
 800c188:	60a3      	str	r3, [r4, #8]
 800c18a:	6963      	ldr	r3, [r4, #20]
 800c18c:	425b      	negs	r3, r3
 800c18e:	61a3      	str	r3, [r4, #24]
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	b943      	cbnz	r3, 800c1a6 <__swsetup_r+0xc6>
 800c194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c198:	d1ba      	bne.n	800c110 <__swsetup_r+0x30>
 800c19a:	bd70      	pop	{r4, r5, r6, pc}
 800c19c:	0781      	lsls	r1, r0, #30
 800c19e:	bf58      	it	pl
 800c1a0:	6963      	ldrpl	r3, [r4, #20]
 800c1a2:	60a3      	str	r3, [r4, #8]
 800c1a4:	e7f4      	b.n	800c190 <__swsetup_r+0xb0>
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	e7f7      	b.n	800c19a <__swsetup_r+0xba>
 800c1aa:	bf00      	nop
 800c1ac:	20000020 	.word	0x20000020
 800c1b0:	0800d3f8 	.word	0x0800d3f8
 800c1b4:	0800d418 	.word	0x0800d418
 800c1b8:	0800d3d8 	.word	0x0800d3d8

0800c1bc <_close_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	4d06      	ldr	r5, [pc, #24]	; (800c1d8 <_close_r+0x1c>)
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602b      	str	r3, [r5, #0]
 800c1c8:	f7f5 ffd5 	bl	8002176 <_close>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d102      	bne.n	800c1d6 <_close_r+0x1a>
 800c1d0:	682b      	ldr	r3, [r5, #0]
 800c1d2:	b103      	cbz	r3, 800c1d6 <_close_r+0x1a>
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	bd38      	pop	{r3, r4, r5, pc}
 800c1d8:	20002734 	.word	0x20002734

0800c1dc <__sflush_r>:
 800c1dc:	898a      	ldrh	r2, [r1, #12]
 800c1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	0710      	lsls	r0, r2, #28
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	d458      	bmi.n	800c29c <__sflush_r+0xc0>
 800c1ea:	684b      	ldr	r3, [r1, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	dc05      	bgt.n	800c1fc <__sflush_r+0x20>
 800c1f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	dc02      	bgt.n	800c1fc <__sflush_r+0x20>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1fe:	2e00      	cmp	r6, #0
 800c200:	d0f9      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c202:	2300      	movs	r3, #0
 800c204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c208:	682f      	ldr	r7, [r5, #0]
 800c20a:	602b      	str	r3, [r5, #0]
 800c20c:	d032      	beq.n	800c274 <__sflush_r+0x98>
 800c20e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	075a      	lsls	r2, r3, #29
 800c214:	d505      	bpl.n	800c222 <__sflush_r+0x46>
 800c216:	6863      	ldr	r3, [r4, #4]
 800c218:	1ac0      	subs	r0, r0, r3
 800c21a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c21c:	b10b      	cbz	r3, 800c222 <__sflush_r+0x46>
 800c21e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c220:	1ac0      	subs	r0, r0, r3
 800c222:	2300      	movs	r3, #0
 800c224:	4602      	mov	r2, r0
 800c226:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c228:	6a21      	ldr	r1, [r4, #32]
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b0      	blx	r6
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	d106      	bne.n	800c242 <__sflush_r+0x66>
 800c234:	6829      	ldr	r1, [r5, #0]
 800c236:	291d      	cmp	r1, #29
 800c238:	d82c      	bhi.n	800c294 <__sflush_r+0xb8>
 800c23a:	4a2a      	ldr	r2, [pc, #168]	; (800c2e4 <__sflush_r+0x108>)
 800c23c:	40ca      	lsrs	r2, r1
 800c23e:	07d6      	lsls	r6, r2, #31
 800c240:	d528      	bpl.n	800c294 <__sflush_r+0xb8>
 800c242:	2200      	movs	r2, #0
 800c244:	6062      	str	r2, [r4, #4]
 800c246:	04d9      	lsls	r1, r3, #19
 800c248:	6922      	ldr	r2, [r4, #16]
 800c24a:	6022      	str	r2, [r4, #0]
 800c24c:	d504      	bpl.n	800c258 <__sflush_r+0x7c>
 800c24e:	1c42      	adds	r2, r0, #1
 800c250:	d101      	bne.n	800c256 <__sflush_r+0x7a>
 800c252:	682b      	ldr	r3, [r5, #0]
 800c254:	b903      	cbnz	r3, 800c258 <__sflush_r+0x7c>
 800c256:	6560      	str	r0, [r4, #84]	; 0x54
 800c258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c25a:	602f      	str	r7, [r5, #0]
 800c25c:	2900      	cmp	r1, #0
 800c25e:	d0ca      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c264:	4299      	cmp	r1, r3
 800c266:	d002      	beq.n	800c26e <__sflush_r+0x92>
 800c268:	4628      	mov	r0, r5
 800c26a:	f000 f8fd 	bl	800c468 <_free_r>
 800c26e:	2000      	movs	r0, #0
 800c270:	6360      	str	r0, [r4, #52]	; 0x34
 800c272:	e7c1      	b.n	800c1f8 <__sflush_r+0x1c>
 800c274:	6a21      	ldr	r1, [r4, #32]
 800c276:	2301      	movs	r3, #1
 800c278:	4628      	mov	r0, r5
 800c27a:	47b0      	blx	r6
 800c27c:	1c41      	adds	r1, r0, #1
 800c27e:	d1c7      	bne.n	800c210 <__sflush_r+0x34>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d0c4      	beq.n	800c210 <__sflush_r+0x34>
 800c286:	2b1d      	cmp	r3, #29
 800c288:	d001      	beq.n	800c28e <__sflush_r+0xb2>
 800c28a:	2b16      	cmp	r3, #22
 800c28c:	d101      	bne.n	800c292 <__sflush_r+0xb6>
 800c28e:	602f      	str	r7, [r5, #0]
 800c290:	e7b1      	b.n	800c1f6 <__sflush_r+0x1a>
 800c292:	89a3      	ldrh	r3, [r4, #12]
 800c294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c298:	81a3      	strh	r3, [r4, #12]
 800c29a:	e7ad      	b.n	800c1f8 <__sflush_r+0x1c>
 800c29c:	690f      	ldr	r7, [r1, #16]
 800c29e:	2f00      	cmp	r7, #0
 800c2a0:	d0a9      	beq.n	800c1f6 <__sflush_r+0x1a>
 800c2a2:	0793      	lsls	r3, r2, #30
 800c2a4:	680e      	ldr	r6, [r1, #0]
 800c2a6:	bf08      	it	eq
 800c2a8:	694b      	ldreq	r3, [r1, #20]
 800c2aa:	600f      	str	r7, [r1, #0]
 800c2ac:	bf18      	it	ne
 800c2ae:	2300      	movne	r3, #0
 800c2b0:	eba6 0807 	sub.w	r8, r6, r7
 800c2b4:	608b      	str	r3, [r1, #8]
 800c2b6:	f1b8 0f00 	cmp.w	r8, #0
 800c2ba:	dd9c      	ble.n	800c1f6 <__sflush_r+0x1a>
 800c2bc:	6a21      	ldr	r1, [r4, #32]
 800c2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2c0:	4643      	mov	r3, r8
 800c2c2:	463a      	mov	r2, r7
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	47b0      	blx	r6
 800c2c8:	2800      	cmp	r0, #0
 800c2ca:	dc06      	bgt.n	800c2da <__sflush_r+0xfe>
 800c2cc:	89a3      	ldrh	r3, [r4, #12]
 800c2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	e78e      	b.n	800c1f8 <__sflush_r+0x1c>
 800c2da:	4407      	add	r7, r0
 800c2dc:	eba8 0800 	sub.w	r8, r8, r0
 800c2e0:	e7e9      	b.n	800c2b6 <__sflush_r+0xda>
 800c2e2:	bf00      	nop
 800c2e4:	20400001 	.word	0x20400001

0800c2e8 <_fflush_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	690b      	ldr	r3, [r1, #16]
 800c2ec:	4605      	mov	r5, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	b913      	cbnz	r3, 800c2f8 <_fflush_r+0x10>
 800c2f2:	2500      	movs	r5, #0
 800c2f4:	4628      	mov	r0, r5
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	b118      	cbz	r0, 800c302 <_fflush_r+0x1a>
 800c2fa:	6983      	ldr	r3, [r0, #24]
 800c2fc:	b90b      	cbnz	r3, 800c302 <_fflush_r+0x1a>
 800c2fe:	f7ff fb9b 	bl	800ba38 <__sinit>
 800c302:	4b14      	ldr	r3, [pc, #80]	; (800c354 <_fflush_r+0x6c>)
 800c304:	429c      	cmp	r4, r3
 800c306:	d11b      	bne.n	800c340 <_fflush_r+0x58>
 800c308:	686c      	ldr	r4, [r5, #4]
 800c30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d0ef      	beq.n	800c2f2 <_fflush_r+0xa>
 800c312:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c314:	07d0      	lsls	r0, r2, #31
 800c316:	d404      	bmi.n	800c322 <_fflush_r+0x3a>
 800c318:	0599      	lsls	r1, r3, #22
 800c31a:	d402      	bmi.n	800c322 <_fflush_r+0x3a>
 800c31c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c31e:	f7ff fc4e 	bl	800bbbe <__retarget_lock_acquire_recursive>
 800c322:	4628      	mov	r0, r5
 800c324:	4621      	mov	r1, r4
 800c326:	f7ff ff59 	bl	800c1dc <__sflush_r>
 800c32a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c32c:	07da      	lsls	r2, r3, #31
 800c32e:	4605      	mov	r5, r0
 800c330:	d4e0      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c332:	89a3      	ldrh	r3, [r4, #12]
 800c334:	059b      	lsls	r3, r3, #22
 800c336:	d4dd      	bmi.n	800c2f4 <_fflush_r+0xc>
 800c338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c33a:	f7ff fc41 	bl	800bbc0 <__retarget_lock_release_recursive>
 800c33e:	e7d9      	b.n	800c2f4 <_fflush_r+0xc>
 800c340:	4b05      	ldr	r3, [pc, #20]	; (800c358 <_fflush_r+0x70>)
 800c342:	429c      	cmp	r4, r3
 800c344:	d101      	bne.n	800c34a <_fflush_r+0x62>
 800c346:	68ac      	ldr	r4, [r5, #8]
 800c348:	e7df      	b.n	800c30a <_fflush_r+0x22>
 800c34a:	4b04      	ldr	r3, [pc, #16]	; (800c35c <_fflush_r+0x74>)
 800c34c:	429c      	cmp	r4, r3
 800c34e:	bf08      	it	eq
 800c350:	68ec      	ldreq	r4, [r5, #12]
 800c352:	e7da      	b.n	800c30a <_fflush_r+0x22>
 800c354:	0800d3f8 	.word	0x0800d3f8
 800c358:	0800d418 	.word	0x0800d418
 800c35c:	0800d3d8 	.word	0x0800d3d8

0800c360 <_lseek_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	4d07      	ldr	r5, [pc, #28]	; (800c380 <_lseek_r+0x20>)
 800c364:	4604      	mov	r4, r0
 800c366:	4608      	mov	r0, r1
 800c368:	4611      	mov	r1, r2
 800c36a:	2200      	movs	r2, #0
 800c36c:	602a      	str	r2, [r5, #0]
 800c36e:	461a      	mov	r2, r3
 800c370:	f7f5 ff28 	bl	80021c4 <_lseek>
 800c374:	1c43      	adds	r3, r0, #1
 800c376:	d102      	bne.n	800c37e <_lseek_r+0x1e>
 800c378:	682b      	ldr	r3, [r5, #0]
 800c37a:	b103      	cbz	r3, 800c37e <_lseek_r+0x1e>
 800c37c:	6023      	str	r3, [r4, #0]
 800c37e:	bd38      	pop	{r3, r4, r5, pc}
 800c380:	20002734 	.word	0x20002734

0800c384 <__swhatbuf_r>:
 800c384:	b570      	push	{r4, r5, r6, lr}
 800c386:	460e      	mov	r6, r1
 800c388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c38c:	2900      	cmp	r1, #0
 800c38e:	b096      	sub	sp, #88	; 0x58
 800c390:	4614      	mov	r4, r2
 800c392:	461d      	mov	r5, r3
 800c394:	da08      	bge.n	800c3a8 <__swhatbuf_r+0x24>
 800c396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	602a      	str	r2, [r5, #0]
 800c39e:	061a      	lsls	r2, r3, #24
 800c3a0:	d410      	bmi.n	800c3c4 <__swhatbuf_r+0x40>
 800c3a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3a6:	e00e      	b.n	800c3c6 <__swhatbuf_r+0x42>
 800c3a8:	466a      	mov	r2, sp
 800c3aa:	f000 fd05 	bl	800cdb8 <_fstat_r>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	dbf1      	blt.n	800c396 <__swhatbuf_r+0x12>
 800c3b2:	9a01      	ldr	r2, [sp, #4]
 800c3b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3bc:	425a      	negs	r2, r3
 800c3be:	415a      	adcs	r2, r3
 800c3c0:	602a      	str	r2, [r5, #0]
 800c3c2:	e7ee      	b.n	800c3a2 <__swhatbuf_r+0x1e>
 800c3c4:	2340      	movs	r3, #64	; 0x40
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	b016      	add	sp, #88	; 0x58
 800c3cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3d0 <__smakebuf_r>:
 800c3d0:	898b      	ldrh	r3, [r1, #12]
 800c3d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3d4:	079d      	lsls	r5, r3, #30
 800c3d6:	4606      	mov	r6, r0
 800c3d8:	460c      	mov	r4, r1
 800c3da:	d507      	bpl.n	800c3ec <__smakebuf_r+0x1c>
 800c3dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3e0:	6023      	str	r3, [r4, #0]
 800c3e2:	6123      	str	r3, [r4, #16]
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	6163      	str	r3, [r4, #20]
 800c3e8:	b002      	add	sp, #8
 800c3ea:	bd70      	pop	{r4, r5, r6, pc}
 800c3ec:	ab01      	add	r3, sp, #4
 800c3ee:	466a      	mov	r2, sp
 800c3f0:	f7ff ffc8 	bl	800c384 <__swhatbuf_r>
 800c3f4:	9900      	ldr	r1, [sp, #0]
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f7ff fc19 	bl	800bc30 <_malloc_r>
 800c3fe:	b948      	cbnz	r0, 800c414 <__smakebuf_r+0x44>
 800c400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c404:	059a      	lsls	r2, r3, #22
 800c406:	d4ef      	bmi.n	800c3e8 <__smakebuf_r+0x18>
 800c408:	f023 0303 	bic.w	r3, r3, #3
 800c40c:	f043 0302 	orr.w	r3, r3, #2
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	e7e3      	b.n	800c3dc <__smakebuf_r+0xc>
 800c414:	4b0d      	ldr	r3, [pc, #52]	; (800c44c <__smakebuf_r+0x7c>)
 800c416:	62b3      	str	r3, [r6, #40]	; 0x28
 800c418:	89a3      	ldrh	r3, [r4, #12]
 800c41a:	6020      	str	r0, [r4, #0]
 800c41c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c420:	81a3      	strh	r3, [r4, #12]
 800c422:	9b00      	ldr	r3, [sp, #0]
 800c424:	6163      	str	r3, [r4, #20]
 800c426:	9b01      	ldr	r3, [sp, #4]
 800c428:	6120      	str	r0, [r4, #16]
 800c42a:	b15b      	cbz	r3, 800c444 <__smakebuf_r+0x74>
 800c42c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c430:	4630      	mov	r0, r6
 800c432:	f000 fcd3 	bl	800cddc <_isatty_r>
 800c436:	b128      	cbz	r0, 800c444 <__smakebuf_r+0x74>
 800c438:	89a3      	ldrh	r3, [r4, #12]
 800c43a:	f023 0303 	bic.w	r3, r3, #3
 800c43e:	f043 0301 	orr.w	r3, r3, #1
 800c442:	81a3      	strh	r3, [r4, #12]
 800c444:	89a0      	ldrh	r0, [r4, #12]
 800c446:	4305      	orrs	r5, r0
 800c448:	81a5      	strh	r5, [r4, #12]
 800c44a:	e7cd      	b.n	800c3e8 <__smakebuf_r+0x18>
 800c44c:	0800b9d1 	.word	0x0800b9d1

0800c450 <__malloc_lock>:
 800c450:	4801      	ldr	r0, [pc, #4]	; (800c458 <__malloc_lock+0x8>)
 800c452:	f7ff bbb4 	b.w	800bbbe <__retarget_lock_acquire_recursive>
 800c456:	bf00      	nop
 800c458:	20002728 	.word	0x20002728

0800c45c <__malloc_unlock>:
 800c45c:	4801      	ldr	r0, [pc, #4]	; (800c464 <__malloc_unlock+0x8>)
 800c45e:	f7ff bbaf 	b.w	800bbc0 <__retarget_lock_release_recursive>
 800c462:	bf00      	nop
 800c464:	20002728 	.word	0x20002728

0800c468 <_free_r>:
 800c468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c46a:	2900      	cmp	r1, #0
 800c46c:	d044      	beq.n	800c4f8 <_free_r+0x90>
 800c46e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c472:	9001      	str	r0, [sp, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	f1a1 0404 	sub.w	r4, r1, #4
 800c47a:	bfb8      	it	lt
 800c47c:	18e4      	addlt	r4, r4, r3
 800c47e:	f7ff ffe7 	bl	800c450 <__malloc_lock>
 800c482:	4a1e      	ldr	r2, [pc, #120]	; (800c4fc <_free_r+0x94>)
 800c484:	9801      	ldr	r0, [sp, #4]
 800c486:	6813      	ldr	r3, [r2, #0]
 800c488:	b933      	cbnz	r3, 800c498 <_free_r+0x30>
 800c48a:	6063      	str	r3, [r4, #4]
 800c48c:	6014      	str	r4, [r2, #0]
 800c48e:	b003      	add	sp, #12
 800c490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c494:	f7ff bfe2 	b.w	800c45c <__malloc_unlock>
 800c498:	42a3      	cmp	r3, r4
 800c49a:	d908      	bls.n	800c4ae <_free_r+0x46>
 800c49c:	6825      	ldr	r5, [r4, #0]
 800c49e:	1961      	adds	r1, r4, r5
 800c4a0:	428b      	cmp	r3, r1
 800c4a2:	bf01      	itttt	eq
 800c4a4:	6819      	ldreq	r1, [r3, #0]
 800c4a6:	685b      	ldreq	r3, [r3, #4]
 800c4a8:	1949      	addeq	r1, r1, r5
 800c4aa:	6021      	streq	r1, [r4, #0]
 800c4ac:	e7ed      	b.n	800c48a <_free_r+0x22>
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	b10b      	cbz	r3, 800c4b8 <_free_r+0x50>
 800c4b4:	42a3      	cmp	r3, r4
 800c4b6:	d9fa      	bls.n	800c4ae <_free_r+0x46>
 800c4b8:	6811      	ldr	r1, [r2, #0]
 800c4ba:	1855      	adds	r5, r2, r1
 800c4bc:	42a5      	cmp	r5, r4
 800c4be:	d10b      	bne.n	800c4d8 <_free_r+0x70>
 800c4c0:	6824      	ldr	r4, [r4, #0]
 800c4c2:	4421      	add	r1, r4
 800c4c4:	1854      	adds	r4, r2, r1
 800c4c6:	42a3      	cmp	r3, r4
 800c4c8:	6011      	str	r1, [r2, #0]
 800c4ca:	d1e0      	bne.n	800c48e <_free_r+0x26>
 800c4cc:	681c      	ldr	r4, [r3, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
 800c4d0:	6053      	str	r3, [r2, #4]
 800c4d2:	4421      	add	r1, r4
 800c4d4:	6011      	str	r1, [r2, #0]
 800c4d6:	e7da      	b.n	800c48e <_free_r+0x26>
 800c4d8:	d902      	bls.n	800c4e0 <_free_r+0x78>
 800c4da:	230c      	movs	r3, #12
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	e7d6      	b.n	800c48e <_free_r+0x26>
 800c4e0:	6825      	ldr	r5, [r4, #0]
 800c4e2:	1961      	adds	r1, r4, r5
 800c4e4:	428b      	cmp	r3, r1
 800c4e6:	bf04      	itt	eq
 800c4e8:	6819      	ldreq	r1, [r3, #0]
 800c4ea:	685b      	ldreq	r3, [r3, #4]
 800c4ec:	6063      	str	r3, [r4, #4]
 800c4ee:	bf04      	itt	eq
 800c4f0:	1949      	addeq	r1, r1, r5
 800c4f2:	6021      	streq	r1, [r4, #0]
 800c4f4:	6054      	str	r4, [r2, #4]
 800c4f6:	e7ca      	b.n	800c48e <_free_r+0x26>
 800c4f8:	b003      	add	sp, #12
 800c4fa:	bd30      	pop	{r4, r5, pc}
 800c4fc:	2000272c 	.word	0x2000272c

0800c500 <__ssputs_r>:
 800c500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	688e      	ldr	r6, [r1, #8]
 800c506:	429e      	cmp	r6, r3
 800c508:	4682      	mov	sl, r0
 800c50a:	460c      	mov	r4, r1
 800c50c:	4690      	mov	r8, r2
 800c50e:	461f      	mov	r7, r3
 800c510:	d838      	bhi.n	800c584 <__ssputs_r+0x84>
 800c512:	898a      	ldrh	r2, [r1, #12]
 800c514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c518:	d032      	beq.n	800c580 <__ssputs_r+0x80>
 800c51a:	6825      	ldr	r5, [r4, #0]
 800c51c:	6909      	ldr	r1, [r1, #16]
 800c51e:	eba5 0901 	sub.w	r9, r5, r1
 800c522:	6965      	ldr	r5, [r4, #20]
 800c524:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c528:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c52c:	3301      	adds	r3, #1
 800c52e:	444b      	add	r3, r9
 800c530:	106d      	asrs	r5, r5, #1
 800c532:	429d      	cmp	r5, r3
 800c534:	bf38      	it	cc
 800c536:	461d      	movcc	r5, r3
 800c538:	0553      	lsls	r3, r2, #21
 800c53a:	d531      	bpl.n	800c5a0 <__ssputs_r+0xa0>
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7ff fb77 	bl	800bc30 <_malloc_r>
 800c542:	4606      	mov	r6, r0
 800c544:	b950      	cbnz	r0, 800c55c <__ssputs_r+0x5c>
 800c546:	230c      	movs	r3, #12
 800c548:	f8ca 3000 	str.w	r3, [sl]
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	f04f 30ff 	mov.w	r0, #4294967295
 800c558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c55c:	6921      	ldr	r1, [r4, #16]
 800c55e:	464a      	mov	r2, r9
 800c560:	f7ff fb2f 	bl	800bbc2 <memcpy>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c56e:	81a3      	strh	r3, [r4, #12]
 800c570:	6126      	str	r6, [r4, #16]
 800c572:	6165      	str	r5, [r4, #20]
 800c574:	444e      	add	r6, r9
 800c576:	eba5 0509 	sub.w	r5, r5, r9
 800c57a:	6026      	str	r6, [r4, #0]
 800c57c:	60a5      	str	r5, [r4, #8]
 800c57e:	463e      	mov	r6, r7
 800c580:	42be      	cmp	r6, r7
 800c582:	d900      	bls.n	800c586 <__ssputs_r+0x86>
 800c584:	463e      	mov	r6, r7
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	4632      	mov	r2, r6
 800c58a:	4641      	mov	r1, r8
 800c58c:	f000 fc36 	bl	800cdfc <memmove>
 800c590:	68a3      	ldr	r3, [r4, #8]
 800c592:	1b9b      	subs	r3, r3, r6
 800c594:	60a3      	str	r3, [r4, #8]
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	4433      	add	r3, r6
 800c59a:	6023      	str	r3, [r4, #0]
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7db      	b.n	800c558 <__ssputs_r+0x58>
 800c5a0:	462a      	mov	r2, r5
 800c5a2:	f000 fc45 	bl	800ce30 <_realloc_r>
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	2800      	cmp	r0, #0
 800c5aa:	d1e1      	bne.n	800c570 <__ssputs_r+0x70>
 800c5ac:	6921      	ldr	r1, [r4, #16]
 800c5ae:	4650      	mov	r0, sl
 800c5b0:	f7ff ff5a 	bl	800c468 <_free_r>
 800c5b4:	e7c7      	b.n	800c546 <__ssputs_r+0x46>
	...

0800c5b8 <_svfiprintf_r>:
 800c5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5bc:	4698      	mov	r8, r3
 800c5be:	898b      	ldrh	r3, [r1, #12]
 800c5c0:	061b      	lsls	r3, r3, #24
 800c5c2:	b09d      	sub	sp, #116	; 0x74
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460d      	mov	r5, r1
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	d50e      	bpl.n	800c5ea <_svfiprintf_r+0x32>
 800c5cc:	690b      	ldr	r3, [r1, #16]
 800c5ce:	b963      	cbnz	r3, 800c5ea <_svfiprintf_r+0x32>
 800c5d0:	2140      	movs	r1, #64	; 0x40
 800c5d2:	f7ff fb2d 	bl	800bc30 <_malloc_r>
 800c5d6:	6028      	str	r0, [r5, #0]
 800c5d8:	6128      	str	r0, [r5, #16]
 800c5da:	b920      	cbnz	r0, 800c5e6 <_svfiprintf_r+0x2e>
 800c5dc:	230c      	movs	r3, #12
 800c5de:	603b      	str	r3, [r7, #0]
 800c5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e4:	e0d1      	b.n	800c78a <_svfiprintf_r+0x1d2>
 800c5e6:	2340      	movs	r3, #64	; 0x40
 800c5e8:	616b      	str	r3, [r5, #20]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ee:	2320      	movs	r3, #32
 800c5f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f8:	2330      	movs	r3, #48	; 0x30
 800c5fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7a4 <_svfiprintf_r+0x1ec>
 800c5fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c602:	f04f 0901 	mov.w	r9, #1
 800c606:	4623      	mov	r3, r4
 800c608:	469a      	mov	sl, r3
 800c60a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c60e:	b10a      	cbz	r2, 800c614 <_svfiprintf_r+0x5c>
 800c610:	2a25      	cmp	r2, #37	; 0x25
 800c612:	d1f9      	bne.n	800c608 <_svfiprintf_r+0x50>
 800c614:	ebba 0b04 	subs.w	fp, sl, r4
 800c618:	d00b      	beq.n	800c632 <_svfiprintf_r+0x7a>
 800c61a:	465b      	mov	r3, fp
 800c61c:	4622      	mov	r2, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	4638      	mov	r0, r7
 800c622:	f7ff ff6d 	bl	800c500 <__ssputs_r>
 800c626:	3001      	adds	r0, #1
 800c628:	f000 80aa 	beq.w	800c780 <_svfiprintf_r+0x1c8>
 800c62c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c62e:	445a      	add	r2, fp
 800c630:	9209      	str	r2, [sp, #36]	; 0x24
 800c632:	f89a 3000 	ldrb.w	r3, [sl]
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 80a2 	beq.w	800c780 <_svfiprintf_r+0x1c8>
 800c63c:	2300      	movs	r3, #0
 800c63e:	f04f 32ff 	mov.w	r2, #4294967295
 800c642:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c646:	f10a 0a01 	add.w	sl, sl, #1
 800c64a:	9304      	str	r3, [sp, #16]
 800c64c:	9307      	str	r3, [sp, #28]
 800c64e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c652:	931a      	str	r3, [sp, #104]	; 0x68
 800c654:	4654      	mov	r4, sl
 800c656:	2205      	movs	r2, #5
 800c658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65c:	4851      	ldr	r0, [pc, #324]	; (800c7a4 <_svfiprintf_r+0x1ec>)
 800c65e:	f7f3 fdbf 	bl	80001e0 <memchr>
 800c662:	9a04      	ldr	r2, [sp, #16]
 800c664:	b9d8      	cbnz	r0, 800c69e <_svfiprintf_r+0xe6>
 800c666:	06d0      	lsls	r0, r2, #27
 800c668:	bf44      	itt	mi
 800c66a:	2320      	movmi	r3, #32
 800c66c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c670:	0711      	lsls	r1, r2, #28
 800c672:	bf44      	itt	mi
 800c674:	232b      	movmi	r3, #43	; 0x2b
 800c676:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c67a:	f89a 3000 	ldrb.w	r3, [sl]
 800c67e:	2b2a      	cmp	r3, #42	; 0x2a
 800c680:	d015      	beq.n	800c6ae <_svfiprintf_r+0xf6>
 800c682:	9a07      	ldr	r2, [sp, #28]
 800c684:	4654      	mov	r4, sl
 800c686:	2000      	movs	r0, #0
 800c688:	f04f 0c0a 	mov.w	ip, #10
 800c68c:	4621      	mov	r1, r4
 800c68e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c692:	3b30      	subs	r3, #48	; 0x30
 800c694:	2b09      	cmp	r3, #9
 800c696:	d94e      	bls.n	800c736 <_svfiprintf_r+0x17e>
 800c698:	b1b0      	cbz	r0, 800c6c8 <_svfiprintf_r+0x110>
 800c69a:	9207      	str	r2, [sp, #28]
 800c69c:	e014      	b.n	800c6c8 <_svfiprintf_r+0x110>
 800c69e:	eba0 0308 	sub.w	r3, r0, r8
 800c6a2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	46a2      	mov	sl, r4
 800c6ac:	e7d2      	b.n	800c654 <_svfiprintf_r+0x9c>
 800c6ae:	9b03      	ldr	r3, [sp, #12]
 800c6b0:	1d19      	adds	r1, r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	9103      	str	r1, [sp, #12]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bfbb      	ittet	lt
 800c6ba:	425b      	neglt	r3, r3
 800c6bc:	f042 0202 	orrlt.w	r2, r2, #2
 800c6c0:	9307      	strge	r3, [sp, #28]
 800c6c2:	9307      	strlt	r3, [sp, #28]
 800c6c4:	bfb8      	it	lt
 800c6c6:	9204      	strlt	r2, [sp, #16]
 800c6c8:	7823      	ldrb	r3, [r4, #0]
 800c6ca:	2b2e      	cmp	r3, #46	; 0x2e
 800c6cc:	d10c      	bne.n	800c6e8 <_svfiprintf_r+0x130>
 800c6ce:	7863      	ldrb	r3, [r4, #1]
 800c6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d2:	d135      	bne.n	800c740 <_svfiprintf_r+0x188>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	1d1a      	adds	r2, r3, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	9203      	str	r2, [sp, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfb8      	it	lt
 800c6e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6e4:	3402      	adds	r4, #2
 800c6e6:	9305      	str	r3, [sp, #20]
 800c6e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7b4 <_svfiprintf_r+0x1fc>
 800c6ec:	7821      	ldrb	r1, [r4, #0]
 800c6ee:	2203      	movs	r2, #3
 800c6f0:	4650      	mov	r0, sl
 800c6f2:	f7f3 fd75 	bl	80001e0 <memchr>
 800c6f6:	b140      	cbz	r0, 800c70a <_svfiprintf_r+0x152>
 800c6f8:	2340      	movs	r3, #64	; 0x40
 800c6fa:	eba0 000a 	sub.w	r0, r0, sl
 800c6fe:	fa03 f000 	lsl.w	r0, r3, r0
 800c702:	9b04      	ldr	r3, [sp, #16]
 800c704:	4303      	orrs	r3, r0
 800c706:	3401      	adds	r4, #1
 800c708:	9304      	str	r3, [sp, #16]
 800c70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c70e:	4826      	ldr	r0, [pc, #152]	; (800c7a8 <_svfiprintf_r+0x1f0>)
 800c710:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c714:	2206      	movs	r2, #6
 800c716:	f7f3 fd63 	bl	80001e0 <memchr>
 800c71a:	2800      	cmp	r0, #0
 800c71c:	d038      	beq.n	800c790 <_svfiprintf_r+0x1d8>
 800c71e:	4b23      	ldr	r3, [pc, #140]	; (800c7ac <_svfiprintf_r+0x1f4>)
 800c720:	bb1b      	cbnz	r3, 800c76a <_svfiprintf_r+0x1b2>
 800c722:	9b03      	ldr	r3, [sp, #12]
 800c724:	3307      	adds	r3, #7
 800c726:	f023 0307 	bic.w	r3, r3, #7
 800c72a:	3308      	adds	r3, #8
 800c72c:	9303      	str	r3, [sp, #12]
 800c72e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c730:	4433      	add	r3, r6
 800c732:	9309      	str	r3, [sp, #36]	; 0x24
 800c734:	e767      	b.n	800c606 <_svfiprintf_r+0x4e>
 800c736:	fb0c 3202 	mla	r2, ip, r2, r3
 800c73a:	460c      	mov	r4, r1
 800c73c:	2001      	movs	r0, #1
 800c73e:	e7a5      	b.n	800c68c <_svfiprintf_r+0xd4>
 800c740:	2300      	movs	r3, #0
 800c742:	3401      	adds	r4, #1
 800c744:	9305      	str	r3, [sp, #20]
 800c746:	4619      	mov	r1, r3
 800c748:	f04f 0c0a 	mov.w	ip, #10
 800c74c:	4620      	mov	r0, r4
 800c74e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c752:	3a30      	subs	r2, #48	; 0x30
 800c754:	2a09      	cmp	r2, #9
 800c756:	d903      	bls.n	800c760 <_svfiprintf_r+0x1a8>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0c5      	beq.n	800c6e8 <_svfiprintf_r+0x130>
 800c75c:	9105      	str	r1, [sp, #20]
 800c75e:	e7c3      	b.n	800c6e8 <_svfiprintf_r+0x130>
 800c760:	fb0c 2101 	mla	r1, ip, r1, r2
 800c764:	4604      	mov	r4, r0
 800c766:	2301      	movs	r3, #1
 800c768:	e7f0      	b.n	800c74c <_svfiprintf_r+0x194>
 800c76a:	ab03      	add	r3, sp, #12
 800c76c:	9300      	str	r3, [sp, #0]
 800c76e:	462a      	mov	r2, r5
 800c770:	4b0f      	ldr	r3, [pc, #60]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c772:	a904      	add	r1, sp, #16
 800c774:	4638      	mov	r0, r7
 800c776:	f3af 8000 	nop.w
 800c77a:	1c42      	adds	r2, r0, #1
 800c77c:	4606      	mov	r6, r0
 800c77e:	d1d6      	bne.n	800c72e <_svfiprintf_r+0x176>
 800c780:	89ab      	ldrh	r3, [r5, #12]
 800c782:	065b      	lsls	r3, r3, #25
 800c784:	f53f af2c 	bmi.w	800c5e0 <_svfiprintf_r+0x28>
 800c788:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c78a:	b01d      	add	sp, #116	; 0x74
 800c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c790:	ab03      	add	r3, sp, #12
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	462a      	mov	r2, r5
 800c796:	4b06      	ldr	r3, [pc, #24]	; (800c7b0 <_svfiprintf_r+0x1f8>)
 800c798:	a904      	add	r1, sp, #16
 800c79a:	4638      	mov	r0, r7
 800c79c:	f000 f9d4 	bl	800cb48 <_printf_i>
 800c7a0:	e7eb      	b.n	800c77a <_svfiprintf_r+0x1c2>
 800c7a2:	bf00      	nop
 800c7a4:	0800d43c 	.word	0x0800d43c
 800c7a8:	0800d446 	.word	0x0800d446
 800c7ac:	00000000 	.word	0x00000000
 800c7b0:	0800c501 	.word	0x0800c501
 800c7b4:	0800d442 	.word	0x0800d442

0800c7b8 <__sfputc_r>:
 800c7b8:	6893      	ldr	r3, [r2, #8]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	b410      	push	{r4}
 800c7c0:	6093      	str	r3, [r2, #8]
 800c7c2:	da08      	bge.n	800c7d6 <__sfputc_r+0x1e>
 800c7c4:	6994      	ldr	r4, [r2, #24]
 800c7c6:	42a3      	cmp	r3, r4
 800c7c8:	db01      	blt.n	800c7ce <__sfputc_r+0x16>
 800c7ca:	290a      	cmp	r1, #10
 800c7cc:	d103      	bne.n	800c7d6 <__sfputc_r+0x1e>
 800c7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7d2:	f7ff bc21 	b.w	800c018 <__swbuf_r>
 800c7d6:	6813      	ldr	r3, [r2, #0]
 800c7d8:	1c58      	adds	r0, r3, #1
 800c7da:	6010      	str	r0, [r2, #0]
 800c7dc:	7019      	strb	r1, [r3, #0]
 800c7de:	4608      	mov	r0, r1
 800c7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <__sfputs_r>:
 800c7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e8:	4606      	mov	r6, r0
 800c7ea:	460f      	mov	r7, r1
 800c7ec:	4614      	mov	r4, r2
 800c7ee:	18d5      	adds	r5, r2, r3
 800c7f0:	42ac      	cmp	r4, r5
 800c7f2:	d101      	bne.n	800c7f8 <__sfputs_r+0x12>
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	e007      	b.n	800c808 <__sfputs_r+0x22>
 800c7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fc:	463a      	mov	r2, r7
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7ff ffda 	bl	800c7b8 <__sfputc_r>
 800c804:	1c43      	adds	r3, r0, #1
 800c806:	d1f3      	bne.n	800c7f0 <__sfputs_r+0xa>
 800c808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c80c <_vfiprintf_r>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	460d      	mov	r5, r1
 800c812:	b09d      	sub	sp, #116	; 0x74
 800c814:	4614      	mov	r4, r2
 800c816:	4698      	mov	r8, r3
 800c818:	4606      	mov	r6, r0
 800c81a:	b118      	cbz	r0, 800c824 <_vfiprintf_r+0x18>
 800c81c:	6983      	ldr	r3, [r0, #24]
 800c81e:	b90b      	cbnz	r3, 800c824 <_vfiprintf_r+0x18>
 800c820:	f7ff f90a 	bl	800ba38 <__sinit>
 800c824:	4b89      	ldr	r3, [pc, #548]	; (800ca4c <_vfiprintf_r+0x240>)
 800c826:	429d      	cmp	r5, r3
 800c828:	d11b      	bne.n	800c862 <_vfiprintf_r+0x56>
 800c82a:	6875      	ldr	r5, [r6, #4]
 800c82c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c82e:	07d9      	lsls	r1, r3, #31
 800c830:	d405      	bmi.n	800c83e <_vfiprintf_r+0x32>
 800c832:	89ab      	ldrh	r3, [r5, #12]
 800c834:	059a      	lsls	r2, r3, #22
 800c836:	d402      	bmi.n	800c83e <_vfiprintf_r+0x32>
 800c838:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c83a:	f7ff f9c0 	bl	800bbbe <__retarget_lock_acquire_recursive>
 800c83e:	89ab      	ldrh	r3, [r5, #12]
 800c840:	071b      	lsls	r3, r3, #28
 800c842:	d501      	bpl.n	800c848 <_vfiprintf_r+0x3c>
 800c844:	692b      	ldr	r3, [r5, #16]
 800c846:	b9eb      	cbnz	r3, 800c884 <_vfiprintf_r+0x78>
 800c848:	4629      	mov	r1, r5
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7ff fc48 	bl	800c0e0 <__swsetup_r>
 800c850:	b1c0      	cbz	r0, 800c884 <_vfiprintf_r+0x78>
 800c852:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c854:	07dc      	lsls	r4, r3, #31
 800c856:	d50e      	bpl.n	800c876 <_vfiprintf_r+0x6a>
 800c858:	f04f 30ff 	mov.w	r0, #4294967295
 800c85c:	b01d      	add	sp, #116	; 0x74
 800c85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c862:	4b7b      	ldr	r3, [pc, #492]	; (800ca50 <_vfiprintf_r+0x244>)
 800c864:	429d      	cmp	r5, r3
 800c866:	d101      	bne.n	800c86c <_vfiprintf_r+0x60>
 800c868:	68b5      	ldr	r5, [r6, #8]
 800c86a:	e7df      	b.n	800c82c <_vfiprintf_r+0x20>
 800c86c:	4b79      	ldr	r3, [pc, #484]	; (800ca54 <_vfiprintf_r+0x248>)
 800c86e:	429d      	cmp	r5, r3
 800c870:	bf08      	it	eq
 800c872:	68f5      	ldreq	r5, [r6, #12]
 800c874:	e7da      	b.n	800c82c <_vfiprintf_r+0x20>
 800c876:	89ab      	ldrh	r3, [r5, #12]
 800c878:	0598      	lsls	r0, r3, #22
 800c87a:	d4ed      	bmi.n	800c858 <_vfiprintf_r+0x4c>
 800c87c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c87e:	f7ff f99f 	bl	800bbc0 <__retarget_lock_release_recursive>
 800c882:	e7e9      	b.n	800c858 <_vfiprintf_r+0x4c>
 800c884:	2300      	movs	r3, #0
 800c886:	9309      	str	r3, [sp, #36]	; 0x24
 800c888:	2320      	movs	r3, #32
 800c88a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c88e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c892:	2330      	movs	r3, #48	; 0x30
 800c894:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca58 <_vfiprintf_r+0x24c>
 800c898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c89c:	f04f 0901 	mov.w	r9, #1
 800c8a0:	4623      	mov	r3, r4
 800c8a2:	469a      	mov	sl, r3
 800c8a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8a8:	b10a      	cbz	r2, 800c8ae <_vfiprintf_r+0xa2>
 800c8aa:	2a25      	cmp	r2, #37	; 0x25
 800c8ac:	d1f9      	bne.n	800c8a2 <_vfiprintf_r+0x96>
 800c8ae:	ebba 0b04 	subs.w	fp, sl, r4
 800c8b2:	d00b      	beq.n	800c8cc <_vfiprintf_r+0xc0>
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7ff ff93 	bl	800c7e6 <__sfputs_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	f000 80aa 	beq.w	800ca1a <_vfiprintf_r+0x20e>
 800c8c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8c8:	445a      	add	r2, fp
 800c8ca:	9209      	str	r2, [sp, #36]	; 0x24
 800c8cc:	f89a 3000 	ldrb.w	r3, [sl]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 80a2 	beq.w	800ca1a <_vfiprintf_r+0x20e>
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8e0:	f10a 0a01 	add.w	sl, sl, #1
 800c8e4:	9304      	str	r3, [sp, #16]
 800c8e6:	9307      	str	r3, [sp, #28]
 800c8e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ec:	931a      	str	r3, [sp, #104]	; 0x68
 800c8ee:	4654      	mov	r4, sl
 800c8f0:	2205      	movs	r2, #5
 800c8f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8f6:	4858      	ldr	r0, [pc, #352]	; (800ca58 <_vfiprintf_r+0x24c>)
 800c8f8:	f7f3 fc72 	bl	80001e0 <memchr>
 800c8fc:	9a04      	ldr	r2, [sp, #16]
 800c8fe:	b9d8      	cbnz	r0, 800c938 <_vfiprintf_r+0x12c>
 800c900:	06d1      	lsls	r1, r2, #27
 800c902:	bf44      	itt	mi
 800c904:	2320      	movmi	r3, #32
 800c906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c90a:	0713      	lsls	r3, r2, #28
 800c90c:	bf44      	itt	mi
 800c90e:	232b      	movmi	r3, #43	; 0x2b
 800c910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c914:	f89a 3000 	ldrb.w	r3, [sl]
 800c918:	2b2a      	cmp	r3, #42	; 0x2a
 800c91a:	d015      	beq.n	800c948 <_vfiprintf_r+0x13c>
 800c91c:	9a07      	ldr	r2, [sp, #28]
 800c91e:	4654      	mov	r4, sl
 800c920:	2000      	movs	r0, #0
 800c922:	f04f 0c0a 	mov.w	ip, #10
 800c926:	4621      	mov	r1, r4
 800c928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c92c:	3b30      	subs	r3, #48	; 0x30
 800c92e:	2b09      	cmp	r3, #9
 800c930:	d94e      	bls.n	800c9d0 <_vfiprintf_r+0x1c4>
 800c932:	b1b0      	cbz	r0, 800c962 <_vfiprintf_r+0x156>
 800c934:	9207      	str	r2, [sp, #28]
 800c936:	e014      	b.n	800c962 <_vfiprintf_r+0x156>
 800c938:	eba0 0308 	sub.w	r3, r0, r8
 800c93c:	fa09 f303 	lsl.w	r3, r9, r3
 800c940:	4313      	orrs	r3, r2
 800c942:	9304      	str	r3, [sp, #16]
 800c944:	46a2      	mov	sl, r4
 800c946:	e7d2      	b.n	800c8ee <_vfiprintf_r+0xe2>
 800c948:	9b03      	ldr	r3, [sp, #12]
 800c94a:	1d19      	adds	r1, r3, #4
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	9103      	str	r1, [sp, #12]
 800c950:	2b00      	cmp	r3, #0
 800c952:	bfbb      	ittet	lt
 800c954:	425b      	neglt	r3, r3
 800c956:	f042 0202 	orrlt.w	r2, r2, #2
 800c95a:	9307      	strge	r3, [sp, #28]
 800c95c:	9307      	strlt	r3, [sp, #28]
 800c95e:	bfb8      	it	lt
 800c960:	9204      	strlt	r2, [sp, #16]
 800c962:	7823      	ldrb	r3, [r4, #0]
 800c964:	2b2e      	cmp	r3, #46	; 0x2e
 800c966:	d10c      	bne.n	800c982 <_vfiprintf_r+0x176>
 800c968:	7863      	ldrb	r3, [r4, #1]
 800c96a:	2b2a      	cmp	r3, #42	; 0x2a
 800c96c:	d135      	bne.n	800c9da <_vfiprintf_r+0x1ce>
 800c96e:	9b03      	ldr	r3, [sp, #12]
 800c970:	1d1a      	adds	r2, r3, #4
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	9203      	str	r2, [sp, #12]
 800c976:	2b00      	cmp	r3, #0
 800c978:	bfb8      	it	lt
 800c97a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c97e:	3402      	adds	r4, #2
 800c980:	9305      	str	r3, [sp, #20]
 800c982:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca68 <_vfiprintf_r+0x25c>
 800c986:	7821      	ldrb	r1, [r4, #0]
 800c988:	2203      	movs	r2, #3
 800c98a:	4650      	mov	r0, sl
 800c98c:	f7f3 fc28 	bl	80001e0 <memchr>
 800c990:	b140      	cbz	r0, 800c9a4 <_vfiprintf_r+0x198>
 800c992:	2340      	movs	r3, #64	; 0x40
 800c994:	eba0 000a 	sub.w	r0, r0, sl
 800c998:	fa03 f000 	lsl.w	r0, r3, r0
 800c99c:	9b04      	ldr	r3, [sp, #16]
 800c99e:	4303      	orrs	r3, r0
 800c9a0:	3401      	adds	r4, #1
 800c9a2:	9304      	str	r3, [sp, #16]
 800c9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9a8:	482c      	ldr	r0, [pc, #176]	; (800ca5c <_vfiprintf_r+0x250>)
 800c9aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ae:	2206      	movs	r2, #6
 800c9b0:	f7f3 fc16 	bl	80001e0 <memchr>
 800c9b4:	2800      	cmp	r0, #0
 800c9b6:	d03f      	beq.n	800ca38 <_vfiprintf_r+0x22c>
 800c9b8:	4b29      	ldr	r3, [pc, #164]	; (800ca60 <_vfiprintf_r+0x254>)
 800c9ba:	bb1b      	cbnz	r3, 800ca04 <_vfiprintf_r+0x1f8>
 800c9bc:	9b03      	ldr	r3, [sp, #12]
 800c9be:	3307      	adds	r3, #7
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	9303      	str	r3, [sp, #12]
 800c9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ca:	443b      	add	r3, r7
 800c9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ce:	e767      	b.n	800c8a0 <_vfiprintf_r+0x94>
 800c9d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9d4:	460c      	mov	r4, r1
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	e7a5      	b.n	800c926 <_vfiprintf_r+0x11a>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	3401      	adds	r4, #1
 800c9de:	9305      	str	r3, [sp, #20]
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	f04f 0c0a 	mov.w	ip, #10
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9ec:	3a30      	subs	r2, #48	; 0x30
 800c9ee:	2a09      	cmp	r2, #9
 800c9f0:	d903      	bls.n	800c9fa <_vfiprintf_r+0x1ee>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d0c5      	beq.n	800c982 <_vfiprintf_r+0x176>
 800c9f6:	9105      	str	r1, [sp, #20]
 800c9f8:	e7c3      	b.n	800c982 <_vfiprintf_r+0x176>
 800c9fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9fe:	4604      	mov	r4, r0
 800ca00:	2301      	movs	r3, #1
 800ca02:	e7f0      	b.n	800c9e6 <_vfiprintf_r+0x1da>
 800ca04:	ab03      	add	r3, sp, #12
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	462a      	mov	r2, r5
 800ca0a:	4b16      	ldr	r3, [pc, #88]	; (800ca64 <_vfiprintf_r+0x258>)
 800ca0c:	a904      	add	r1, sp, #16
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f3af 8000 	nop.w
 800ca14:	4607      	mov	r7, r0
 800ca16:	1c78      	adds	r0, r7, #1
 800ca18:	d1d6      	bne.n	800c9c8 <_vfiprintf_r+0x1bc>
 800ca1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca1c:	07d9      	lsls	r1, r3, #31
 800ca1e:	d405      	bmi.n	800ca2c <_vfiprintf_r+0x220>
 800ca20:	89ab      	ldrh	r3, [r5, #12]
 800ca22:	059a      	lsls	r2, r3, #22
 800ca24:	d402      	bmi.n	800ca2c <_vfiprintf_r+0x220>
 800ca26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca28:	f7ff f8ca 	bl	800bbc0 <__retarget_lock_release_recursive>
 800ca2c:	89ab      	ldrh	r3, [r5, #12]
 800ca2e:	065b      	lsls	r3, r3, #25
 800ca30:	f53f af12 	bmi.w	800c858 <_vfiprintf_r+0x4c>
 800ca34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca36:	e711      	b.n	800c85c <_vfiprintf_r+0x50>
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	462a      	mov	r2, r5
 800ca3e:	4b09      	ldr	r3, [pc, #36]	; (800ca64 <_vfiprintf_r+0x258>)
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 f880 	bl	800cb48 <_printf_i>
 800ca48:	e7e4      	b.n	800ca14 <_vfiprintf_r+0x208>
 800ca4a:	bf00      	nop
 800ca4c:	0800d3f8 	.word	0x0800d3f8
 800ca50:	0800d418 	.word	0x0800d418
 800ca54:	0800d3d8 	.word	0x0800d3d8
 800ca58:	0800d43c 	.word	0x0800d43c
 800ca5c:	0800d446 	.word	0x0800d446
 800ca60:	00000000 	.word	0x00000000
 800ca64:	0800c7e7 	.word	0x0800c7e7
 800ca68:	0800d442 	.word	0x0800d442

0800ca6c <_printf_common>:
 800ca6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	4616      	mov	r6, r2
 800ca72:	4699      	mov	r9, r3
 800ca74:	688a      	ldr	r2, [r1, #8]
 800ca76:	690b      	ldr	r3, [r1, #16]
 800ca78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	bfb8      	it	lt
 800ca80:	4613      	movlt	r3, r2
 800ca82:	6033      	str	r3, [r6, #0]
 800ca84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ca88:	4607      	mov	r7, r0
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	b10a      	cbz	r2, 800ca92 <_printf_common+0x26>
 800ca8e:	3301      	adds	r3, #1
 800ca90:	6033      	str	r3, [r6, #0]
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	0699      	lsls	r1, r3, #26
 800ca96:	bf42      	ittt	mi
 800ca98:	6833      	ldrmi	r3, [r6, #0]
 800ca9a:	3302      	addmi	r3, #2
 800ca9c:	6033      	strmi	r3, [r6, #0]
 800ca9e:	6825      	ldr	r5, [r4, #0]
 800caa0:	f015 0506 	ands.w	r5, r5, #6
 800caa4:	d106      	bne.n	800cab4 <_printf_common+0x48>
 800caa6:	f104 0a19 	add.w	sl, r4, #25
 800caaa:	68e3      	ldr	r3, [r4, #12]
 800caac:	6832      	ldr	r2, [r6, #0]
 800caae:	1a9b      	subs	r3, r3, r2
 800cab0:	42ab      	cmp	r3, r5
 800cab2:	dc26      	bgt.n	800cb02 <_printf_common+0x96>
 800cab4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cab8:	1e13      	subs	r3, r2, #0
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	bf18      	it	ne
 800cabe:	2301      	movne	r3, #1
 800cac0:	0692      	lsls	r2, r2, #26
 800cac2:	d42b      	bmi.n	800cb1c <_printf_common+0xb0>
 800cac4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cac8:	4649      	mov	r1, r9
 800caca:	4638      	mov	r0, r7
 800cacc:	47c0      	blx	r8
 800cace:	3001      	adds	r0, #1
 800cad0:	d01e      	beq.n	800cb10 <_printf_common+0xa4>
 800cad2:	6823      	ldr	r3, [r4, #0]
 800cad4:	68e5      	ldr	r5, [r4, #12]
 800cad6:	6832      	ldr	r2, [r6, #0]
 800cad8:	f003 0306 	and.w	r3, r3, #6
 800cadc:	2b04      	cmp	r3, #4
 800cade:	bf08      	it	eq
 800cae0:	1aad      	subeq	r5, r5, r2
 800cae2:	68a3      	ldr	r3, [r4, #8]
 800cae4:	6922      	ldr	r2, [r4, #16]
 800cae6:	bf0c      	ite	eq
 800cae8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800caec:	2500      	movne	r5, #0
 800caee:	4293      	cmp	r3, r2
 800caf0:	bfc4      	itt	gt
 800caf2:	1a9b      	subgt	r3, r3, r2
 800caf4:	18ed      	addgt	r5, r5, r3
 800caf6:	2600      	movs	r6, #0
 800caf8:	341a      	adds	r4, #26
 800cafa:	42b5      	cmp	r5, r6
 800cafc:	d11a      	bne.n	800cb34 <_printf_common+0xc8>
 800cafe:	2000      	movs	r0, #0
 800cb00:	e008      	b.n	800cb14 <_printf_common+0xa8>
 800cb02:	2301      	movs	r3, #1
 800cb04:	4652      	mov	r2, sl
 800cb06:	4649      	mov	r1, r9
 800cb08:	4638      	mov	r0, r7
 800cb0a:	47c0      	blx	r8
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	d103      	bne.n	800cb18 <_printf_common+0xac>
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb18:	3501      	adds	r5, #1
 800cb1a:	e7c6      	b.n	800caaa <_printf_common+0x3e>
 800cb1c:	18e1      	adds	r1, r4, r3
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	2030      	movs	r0, #48	; 0x30
 800cb22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cb26:	4422      	add	r2, r4
 800cb28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cb2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cb30:	3302      	adds	r3, #2
 800cb32:	e7c7      	b.n	800cac4 <_printf_common+0x58>
 800cb34:	2301      	movs	r3, #1
 800cb36:	4622      	mov	r2, r4
 800cb38:	4649      	mov	r1, r9
 800cb3a:	4638      	mov	r0, r7
 800cb3c:	47c0      	blx	r8
 800cb3e:	3001      	adds	r0, #1
 800cb40:	d0e6      	beq.n	800cb10 <_printf_common+0xa4>
 800cb42:	3601      	adds	r6, #1
 800cb44:	e7d9      	b.n	800cafa <_printf_common+0x8e>
	...

0800cb48 <_printf_i>:
 800cb48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	7e0f      	ldrb	r7, [r1, #24]
 800cb4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cb50:	2f78      	cmp	r7, #120	; 0x78
 800cb52:	4691      	mov	r9, r2
 800cb54:	4680      	mov	r8, r0
 800cb56:	460c      	mov	r4, r1
 800cb58:	469a      	mov	sl, r3
 800cb5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cb5e:	d807      	bhi.n	800cb70 <_printf_i+0x28>
 800cb60:	2f62      	cmp	r7, #98	; 0x62
 800cb62:	d80a      	bhi.n	800cb7a <_printf_i+0x32>
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	f000 80d8 	beq.w	800cd1a <_printf_i+0x1d2>
 800cb6a:	2f58      	cmp	r7, #88	; 0x58
 800cb6c:	f000 80a3 	beq.w	800ccb6 <_printf_i+0x16e>
 800cb70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cb78:	e03a      	b.n	800cbf0 <_printf_i+0xa8>
 800cb7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cb7e:	2b15      	cmp	r3, #21
 800cb80:	d8f6      	bhi.n	800cb70 <_printf_i+0x28>
 800cb82:	a101      	add	r1, pc, #4	; (adr r1, 800cb88 <_printf_i+0x40>)
 800cb84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cb88:	0800cbe1 	.word	0x0800cbe1
 800cb8c:	0800cbf5 	.word	0x0800cbf5
 800cb90:	0800cb71 	.word	0x0800cb71
 800cb94:	0800cb71 	.word	0x0800cb71
 800cb98:	0800cb71 	.word	0x0800cb71
 800cb9c:	0800cb71 	.word	0x0800cb71
 800cba0:	0800cbf5 	.word	0x0800cbf5
 800cba4:	0800cb71 	.word	0x0800cb71
 800cba8:	0800cb71 	.word	0x0800cb71
 800cbac:	0800cb71 	.word	0x0800cb71
 800cbb0:	0800cb71 	.word	0x0800cb71
 800cbb4:	0800cd01 	.word	0x0800cd01
 800cbb8:	0800cc25 	.word	0x0800cc25
 800cbbc:	0800cce3 	.word	0x0800cce3
 800cbc0:	0800cb71 	.word	0x0800cb71
 800cbc4:	0800cb71 	.word	0x0800cb71
 800cbc8:	0800cd23 	.word	0x0800cd23
 800cbcc:	0800cb71 	.word	0x0800cb71
 800cbd0:	0800cc25 	.word	0x0800cc25
 800cbd4:	0800cb71 	.word	0x0800cb71
 800cbd8:	0800cb71 	.word	0x0800cb71
 800cbdc:	0800cceb 	.word	0x0800cceb
 800cbe0:	682b      	ldr	r3, [r5, #0]
 800cbe2:	1d1a      	adds	r2, r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	602a      	str	r2, [r5, #0]
 800cbe8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e0a3      	b.n	800cd3c <_printf_i+0x1f4>
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	6829      	ldr	r1, [r5, #0]
 800cbf8:	0606      	lsls	r6, r0, #24
 800cbfa:	f101 0304 	add.w	r3, r1, #4
 800cbfe:	d50a      	bpl.n	800cc16 <_printf_i+0xce>
 800cc00:	680e      	ldr	r6, [r1, #0]
 800cc02:	602b      	str	r3, [r5, #0]
 800cc04:	2e00      	cmp	r6, #0
 800cc06:	da03      	bge.n	800cc10 <_printf_i+0xc8>
 800cc08:	232d      	movs	r3, #45	; 0x2d
 800cc0a:	4276      	negs	r6, r6
 800cc0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc10:	485e      	ldr	r0, [pc, #376]	; (800cd8c <_printf_i+0x244>)
 800cc12:	230a      	movs	r3, #10
 800cc14:	e019      	b.n	800cc4a <_printf_i+0x102>
 800cc16:	680e      	ldr	r6, [r1, #0]
 800cc18:	602b      	str	r3, [r5, #0]
 800cc1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc1e:	bf18      	it	ne
 800cc20:	b236      	sxthne	r6, r6
 800cc22:	e7ef      	b.n	800cc04 <_printf_i+0xbc>
 800cc24:	682b      	ldr	r3, [r5, #0]
 800cc26:	6820      	ldr	r0, [r4, #0]
 800cc28:	1d19      	adds	r1, r3, #4
 800cc2a:	6029      	str	r1, [r5, #0]
 800cc2c:	0601      	lsls	r1, r0, #24
 800cc2e:	d501      	bpl.n	800cc34 <_printf_i+0xec>
 800cc30:	681e      	ldr	r6, [r3, #0]
 800cc32:	e002      	b.n	800cc3a <_printf_i+0xf2>
 800cc34:	0646      	lsls	r6, r0, #25
 800cc36:	d5fb      	bpl.n	800cc30 <_printf_i+0xe8>
 800cc38:	881e      	ldrh	r6, [r3, #0]
 800cc3a:	4854      	ldr	r0, [pc, #336]	; (800cd8c <_printf_i+0x244>)
 800cc3c:	2f6f      	cmp	r7, #111	; 0x6f
 800cc3e:	bf0c      	ite	eq
 800cc40:	2308      	moveq	r3, #8
 800cc42:	230a      	movne	r3, #10
 800cc44:	2100      	movs	r1, #0
 800cc46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cc4a:	6865      	ldr	r5, [r4, #4]
 800cc4c:	60a5      	str	r5, [r4, #8]
 800cc4e:	2d00      	cmp	r5, #0
 800cc50:	bfa2      	ittt	ge
 800cc52:	6821      	ldrge	r1, [r4, #0]
 800cc54:	f021 0104 	bicge.w	r1, r1, #4
 800cc58:	6021      	strge	r1, [r4, #0]
 800cc5a:	b90e      	cbnz	r6, 800cc60 <_printf_i+0x118>
 800cc5c:	2d00      	cmp	r5, #0
 800cc5e:	d04d      	beq.n	800ccfc <_printf_i+0x1b4>
 800cc60:	4615      	mov	r5, r2
 800cc62:	fbb6 f1f3 	udiv	r1, r6, r3
 800cc66:	fb03 6711 	mls	r7, r3, r1, r6
 800cc6a:	5dc7      	ldrb	r7, [r0, r7]
 800cc6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cc70:	4637      	mov	r7, r6
 800cc72:	42bb      	cmp	r3, r7
 800cc74:	460e      	mov	r6, r1
 800cc76:	d9f4      	bls.n	800cc62 <_printf_i+0x11a>
 800cc78:	2b08      	cmp	r3, #8
 800cc7a:	d10b      	bne.n	800cc94 <_printf_i+0x14c>
 800cc7c:	6823      	ldr	r3, [r4, #0]
 800cc7e:	07de      	lsls	r6, r3, #31
 800cc80:	d508      	bpl.n	800cc94 <_printf_i+0x14c>
 800cc82:	6923      	ldr	r3, [r4, #16]
 800cc84:	6861      	ldr	r1, [r4, #4]
 800cc86:	4299      	cmp	r1, r3
 800cc88:	bfde      	ittt	le
 800cc8a:	2330      	movle	r3, #48	; 0x30
 800cc8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cc90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cc94:	1b52      	subs	r2, r2, r5
 800cc96:	6122      	str	r2, [r4, #16]
 800cc98:	f8cd a000 	str.w	sl, [sp]
 800cc9c:	464b      	mov	r3, r9
 800cc9e:	aa03      	add	r2, sp, #12
 800cca0:	4621      	mov	r1, r4
 800cca2:	4640      	mov	r0, r8
 800cca4:	f7ff fee2 	bl	800ca6c <_printf_common>
 800cca8:	3001      	adds	r0, #1
 800ccaa:	d14c      	bne.n	800cd46 <_printf_i+0x1fe>
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	b004      	add	sp, #16
 800ccb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccb6:	4835      	ldr	r0, [pc, #212]	; (800cd8c <_printf_i+0x244>)
 800ccb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ccbc:	6829      	ldr	r1, [r5, #0]
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ccc4:	6029      	str	r1, [r5, #0]
 800ccc6:	061d      	lsls	r5, r3, #24
 800ccc8:	d514      	bpl.n	800ccf4 <_printf_i+0x1ac>
 800ccca:	07df      	lsls	r7, r3, #31
 800cccc:	bf44      	itt	mi
 800ccce:	f043 0320 	orrmi.w	r3, r3, #32
 800ccd2:	6023      	strmi	r3, [r4, #0]
 800ccd4:	b91e      	cbnz	r6, 800ccde <_printf_i+0x196>
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	f023 0320 	bic.w	r3, r3, #32
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	2310      	movs	r3, #16
 800cce0:	e7b0      	b.n	800cc44 <_printf_i+0xfc>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	f043 0320 	orr.w	r3, r3, #32
 800cce8:	6023      	str	r3, [r4, #0]
 800ccea:	2378      	movs	r3, #120	; 0x78
 800ccec:	4828      	ldr	r0, [pc, #160]	; (800cd90 <_printf_i+0x248>)
 800ccee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ccf2:	e7e3      	b.n	800ccbc <_printf_i+0x174>
 800ccf4:	0659      	lsls	r1, r3, #25
 800ccf6:	bf48      	it	mi
 800ccf8:	b2b6      	uxthmi	r6, r6
 800ccfa:	e7e6      	b.n	800ccca <_printf_i+0x182>
 800ccfc:	4615      	mov	r5, r2
 800ccfe:	e7bb      	b.n	800cc78 <_printf_i+0x130>
 800cd00:	682b      	ldr	r3, [r5, #0]
 800cd02:	6826      	ldr	r6, [r4, #0]
 800cd04:	6961      	ldr	r1, [r4, #20]
 800cd06:	1d18      	adds	r0, r3, #4
 800cd08:	6028      	str	r0, [r5, #0]
 800cd0a:	0635      	lsls	r5, r6, #24
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	d501      	bpl.n	800cd14 <_printf_i+0x1cc>
 800cd10:	6019      	str	r1, [r3, #0]
 800cd12:	e002      	b.n	800cd1a <_printf_i+0x1d2>
 800cd14:	0670      	lsls	r0, r6, #25
 800cd16:	d5fb      	bpl.n	800cd10 <_printf_i+0x1c8>
 800cd18:	8019      	strh	r1, [r3, #0]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6123      	str	r3, [r4, #16]
 800cd1e:	4615      	mov	r5, r2
 800cd20:	e7ba      	b.n	800cc98 <_printf_i+0x150>
 800cd22:	682b      	ldr	r3, [r5, #0]
 800cd24:	1d1a      	adds	r2, r3, #4
 800cd26:	602a      	str	r2, [r5, #0]
 800cd28:	681d      	ldr	r5, [r3, #0]
 800cd2a:	6862      	ldr	r2, [r4, #4]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f7f3 fa56 	bl	80001e0 <memchr>
 800cd34:	b108      	cbz	r0, 800cd3a <_printf_i+0x1f2>
 800cd36:	1b40      	subs	r0, r0, r5
 800cd38:	6060      	str	r0, [r4, #4]
 800cd3a:	6863      	ldr	r3, [r4, #4]
 800cd3c:	6123      	str	r3, [r4, #16]
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd44:	e7a8      	b.n	800cc98 <_printf_i+0x150>
 800cd46:	6923      	ldr	r3, [r4, #16]
 800cd48:	462a      	mov	r2, r5
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	47d0      	blx	sl
 800cd50:	3001      	adds	r0, #1
 800cd52:	d0ab      	beq.n	800ccac <_printf_i+0x164>
 800cd54:	6823      	ldr	r3, [r4, #0]
 800cd56:	079b      	lsls	r3, r3, #30
 800cd58:	d413      	bmi.n	800cd82 <_printf_i+0x23a>
 800cd5a:	68e0      	ldr	r0, [r4, #12]
 800cd5c:	9b03      	ldr	r3, [sp, #12]
 800cd5e:	4298      	cmp	r0, r3
 800cd60:	bfb8      	it	lt
 800cd62:	4618      	movlt	r0, r3
 800cd64:	e7a4      	b.n	800ccb0 <_printf_i+0x168>
 800cd66:	2301      	movs	r3, #1
 800cd68:	4632      	mov	r2, r6
 800cd6a:	4649      	mov	r1, r9
 800cd6c:	4640      	mov	r0, r8
 800cd6e:	47d0      	blx	sl
 800cd70:	3001      	adds	r0, #1
 800cd72:	d09b      	beq.n	800ccac <_printf_i+0x164>
 800cd74:	3501      	adds	r5, #1
 800cd76:	68e3      	ldr	r3, [r4, #12]
 800cd78:	9903      	ldr	r1, [sp, #12]
 800cd7a:	1a5b      	subs	r3, r3, r1
 800cd7c:	42ab      	cmp	r3, r5
 800cd7e:	dcf2      	bgt.n	800cd66 <_printf_i+0x21e>
 800cd80:	e7eb      	b.n	800cd5a <_printf_i+0x212>
 800cd82:	2500      	movs	r5, #0
 800cd84:	f104 0619 	add.w	r6, r4, #25
 800cd88:	e7f5      	b.n	800cd76 <_printf_i+0x22e>
 800cd8a:	bf00      	nop
 800cd8c:	0800d44d 	.word	0x0800d44d
 800cd90:	0800d45e 	.word	0x0800d45e

0800cd94 <_read_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4d07      	ldr	r5, [pc, #28]	; (800cdb4 <_read_r+0x20>)
 800cd98:	4604      	mov	r4, r0
 800cd9a:	4608      	mov	r0, r1
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	2200      	movs	r2, #0
 800cda0:	602a      	str	r2, [r5, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	f7f5 f9ca 	bl	800213c <_read>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_read_r+0x1e>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_read_r+0x1e>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	20002734 	.word	0x20002734

0800cdb8 <_fstat_r>:
 800cdb8:	b538      	push	{r3, r4, r5, lr}
 800cdba:	4d07      	ldr	r5, [pc, #28]	; (800cdd8 <_fstat_r+0x20>)
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	4608      	mov	r0, r1
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	602b      	str	r3, [r5, #0]
 800cdc6:	f7f5 f9e2 	bl	800218e <_fstat>
 800cdca:	1c43      	adds	r3, r0, #1
 800cdcc:	d102      	bne.n	800cdd4 <_fstat_r+0x1c>
 800cdce:	682b      	ldr	r3, [r5, #0]
 800cdd0:	b103      	cbz	r3, 800cdd4 <_fstat_r+0x1c>
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	bd38      	pop	{r3, r4, r5, pc}
 800cdd6:	bf00      	nop
 800cdd8:	20002734 	.word	0x20002734

0800cddc <_isatty_r>:
 800cddc:	b538      	push	{r3, r4, r5, lr}
 800cdde:	4d06      	ldr	r5, [pc, #24]	; (800cdf8 <_isatty_r+0x1c>)
 800cde0:	2300      	movs	r3, #0
 800cde2:	4604      	mov	r4, r0
 800cde4:	4608      	mov	r0, r1
 800cde6:	602b      	str	r3, [r5, #0]
 800cde8:	f7f5 f9e1 	bl	80021ae <_isatty>
 800cdec:	1c43      	adds	r3, r0, #1
 800cdee:	d102      	bne.n	800cdf6 <_isatty_r+0x1a>
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	b103      	cbz	r3, 800cdf6 <_isatty_r+0x1a>
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	bd38      	pop	{r3, r4, r5, pc}
 800cdf8:	20002734 	.word	0x20002734

0800cdfc <memmove>:
 800cdfc:	4288      	cmp	r0, r1
 800cdfe:	b510      	push	{r4, lr}
 800ce00:	eb01 0402 	add.w	r4, r1, r2
 800ce04:	d902      	bls.n	800ce0c <memmove+0x10>
 800ce06:	4284      	cmp	r4, r0
 800ce08:	4623      	mov	r3, r4
 800ce0a:	d807      	bhi.n	800ce1c <memmove+0x20>
 800ce0c:	1e43      	subs	r3, r0, #1
 800ce0e:	42a1      	cmp	r1, r4
 800ce10:	d008      	beq.n	800ce24 <memmove+0x28>
 800ce12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce1a:	e7f8      	b.n	800ce0e <memmove+0x12>
 800ce1c:	4402      	add	r2, r0
 800ce1e:	4601      	mov	r1, r0
 800ce20:	428a      	cmp	r2, r1
 800ce22:	d100      	bne.n	800ce26 <memmove+0x2a>
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce2e:	e7f7      	b.n	800ce20 <memmove+0x24>

0800ce30 <_realloc_r>:
 800ce30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce34:	4680      	mov	r8, r0
 800ce36:	4614      	mov	r4, r2
 800ce38:	460e      	mov	r6, r1
 800ce3a:	b921      	cbnz	r1, 800ce46 <_realloc_r+0x16>
 800ce3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce40:	4611      	mov	r1, r2
 800ce42:	f7fe bef5 	b.w	800bc30 <_malloc_r>
 800ce46:	b92a      	cbnz	r2, 800ce54 <_realloc_r+0x24>
 800ce48:	f7ff fb0e 	bl	800c468 <_free_r>
 800ce4c:	4625      	mov	r5, r4
 800ce4e:	4628      	mov	r0, r5
 800ce50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce54:	f000 f81b 	bl	800ce8e <_malloc_usable_size_r>
 800ce58:	4284      	cmp	r4, r0
 800ce5a:	4607      	mov	r7, r0
 800ce5c:	d802      	bhi.n	800ce64 <_realloc_r+0x34>
 800ce5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce62:	d812      	bhi.n	800ce8a <_realloc_r+0x5a>
 800ce64:	4621      	mov	r1, r4
 800ce66:	4640      	mov	r0, r8
 800ce68:	f7fe fee2 	bl	800bc30 <_malloc_r>
 800ce6c:	4605      	mov	r5, r0
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d0ed      	beq.n	800ce4e <_realloc_r+0x1e>
 800ce72:	42bc      	cmp	r4, r7
 800ce74:	4622      	mov	r2, r4
 800ce76:	4631      	mov	r1, r6
 800ce78:	bf28      	it	cs
 800ce7a:	463a      	movcs	r2, r7
 800ce7c:	f7fe fea1 	bl	800bbc2 <memcpy>
 800ce80:	4631      	mov	r1, r6
 800ce82:	4640      	mov	r0, r8
 800ce84:	f7ff faf0 	bl	800c468 <_free_r>
 800ce88:	e7e1      	b.n	800ce4e <_realloc_r+0x1e>
 800ce8a:	4635      	mov	r5, r6
 800ce8c:	e7df      	b.n	800ce4e <_realloc_r+0x1e>

0800ce8e <_malloc_usable_size_r>:
 800ce8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce92:	1f18      	subs	r0, r3, #4
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	bfbc      	itt	lt
 800ce98:	580b      	ldrlt	r3, [r1, r0]
 800ce9a:	18c0      	addlt	r0, r0, r3
 800ce9c:	4770      	bx	lr
	...

0800cea0 <trunc>:
 800cea0:	ec51 0b10 	vmov	r0, r1, d0
 800cea4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cea8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800ceac:	2b13      	cmp	r3, #19
 800ceae:	b5d0      	push	{r4, r6, r7, lr}
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	dc10      	bgt.n	800ced6 <trunc+0x36>
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	bfa5      	ittet	ge
 800ceb8:	4a11      	ldrge	r2, [pc, #68]	; (800cf00 <trunc+0x60>)
 800ceba:	fa42 f303 	asrge.w	r3, r2, r3
 800cebe:	2100      	movlt	r1, #0
 800cec0:	2100      	movge	r1, #0
 800cec2:	bfb9      	ittee	lt
 800cec4:	2000      	movlt	r0, #0
 800cec6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800ceca:	2000      	movge	r0, #0
 800cecc:	ea24 0103 	bicge.w	r1, r4, r3
 800ced0:	ec41 0b10 	vmov	d0, r0, r1
 800ced4:	bdd0      	pop	{r4, r6, r7, pc}
 800ced6:	2b33      	cmp	r3, #51	; 0x33
 800ced8:	dd08      	ble.n	800ceec <trunc+0x4c>
 800ceda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cede:	d1f7      	bne.n	800ced0 <trunc+0x30>
 800cee0:	ee10 2a10 	vmov	r2, s0
 800cee4:	460b      	mov	r3, r1
 800cee6:	f7f3 f9d1 	bl	800028c <__adddf3>
 800ceea:	e7f1      	b.n	800ced0 <trunc+0x30>
 800ceec:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cef0:	f04f 33ff 	mov.w	r3, #4294967295
 800cef4:	fa23 f202 	lsr.w	r2, r3, r2
 800cef8:	ea20 0602 	bic.w	r6, r0, r2
 800cefc:	4630      	mov	r0, r6
 800cefe:	e7e7      	b.n	800ced0 <trunc+0x30>
 800cf00:	000fffff 	.word	0x000fffff

0800cf04 <_init>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	bf00      	nop
 800cf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0a:	bc08      	pop	{r3}
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4770      	bx	lr

0800cf10 <_fini>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr
